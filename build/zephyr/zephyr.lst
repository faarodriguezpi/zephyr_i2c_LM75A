
zephyr.elf:     file format elf32-xtensa-le


Disassembly of section .iram0.vectors:

40080000 <_WindowOverflow4>:

    .org    0x0
    .global _WindowOverflow4
_WindowOverflow4:

    s32e    a0, a5, -16     /* save a0 to call[j+1]'s stack frame */
40080000:	49c500        	s32e	a0, a5, -16
    s32e    a1, a5, -12     /* save a1 to call[j+1]'s stack frame */
40080003:	49d510        	s32e	a1, a5, -12
    s32e    a2, a5,  -8     /* save a2 to call[j+1]'s stack frame */
40080006:	49e520        	s32e	a2, a5, -8
    s32e    a3, a5,  -4     /* save a3 to call[j+1]'s stack frame */
40080009:	49f530        	s32e	a3, a5, -4
    rfwo                    /* rotates back to call[i] position */
4008000c:	003400        	rfwo
	...

40080040 <_WindowUnderflow4>:

    .org    0x40
    .global _WindowUnderflow4
_WindowUnderflow4:

    l32e    a0, a5, -16     /* restore a0 from call[i+1]'s stack frame */
40080040:	09c500        	l32e	a0, a5, -16
    l32e    a1, a5, -12     /* restore a1 from call[i+1]'s stack frame */
40080043:	09d510        	l32e	a1, a5, -12
    l32e    a2, a5,  -8     /* restore a2 from call[i+1]'s stack frame */
40080046:	09e520        	l32e	a2, a5, -8
    l32e    a3, a5,  -4     /* restore a3 from call[i+1]'s stack frame */
40080049:	09f530        	l32e	a3, a5, -4
    rfwu
4008004c:	003500        	rfwu
	...

40080050 <_xt_alloca_exc>:

    .align  4
    .global _xt_alloca_exc
_xt_alloca_exc:

    rsr     a0, WINDOWBASE  /* grab WINDOWBASE before rotw changes it */
40080050:	034800        	rsr.windowbase	a0
    rotw    -1      /* WINDOWBASE goes to a4, new a0-a3 are scratch */
40080053:	4080f0        	rotw	-1
    rsr     a2, PS
40080056:	03e620        	rsr.ps	a2
    extui   a3, a2, XCHAL_PS_OWB_SHIFT, XCHAL_PS_OWB_BITS
40080059:	343820        	extui	a3, a2, 8, 4
    xor     a3, a3, a4    /* bits changed from old to current windowbase */
4008005c:	303340        	xor	a3, a3, a4
    rsr     a4, EXCSAVE_1   /* restore original a0 (now in a4) */
4008005f:	03d140        	rsr.excsave1	a4
    slli    a3, a3, XCHAL_PS_OWB_SHIFT
40080062:	113380        	slli	a3, a3, 8
    xor     a2, a2, a3      /* flip changed bits in old window base */
40080065:	302230        	xor	a2, a2, a3
    wsr     a2, PS          /* update PS.OWB to new window base */
40080068:	13e620        	wsr.ps	a2
    rsync
4008006b:	002010        	rsync

    _bbci.l a4, 31, _WindowUnderflow4
4008006e:	ce74f7        	bbci	a4, 31, 40080040 <_WindowUnderflow4>
    rotw    -1              /* original a0 goes to a8 */
40080071:	4080f0        	rotw	-1
    _bbci.l a8, 30, _WindowUnderflow8
40080074:	4878e7        	bbci	a8, 30, 400800c0 <_WindowUnderflow8>
    rotw    -1
40080077:	4080f0        	rotw	-1
    j               _WindowUnderflow12
4008007a:	003086        	j	40080140 <_WindowUnderflow12>
4008007d:	000000        	ill

40080080 <_WindowOverflow8>:

    .org    0x80
    .global _WindowOverflow8
_WindowOverflow8:

    s32e    a0, a9, -16     /* save a0 to call[j+1]'s stack frame */
40080080:	49c900        	s32e	a0, a9, -16
    l32e    a0, a1, -12     /* a0 <- call[j-1]'s sp
40080083:	09d100        	l32e	a0, a1, -12
                               (used to find end of call[j]'s frame) */
    s32e    a1, a9, -12     /* save a1 to call[j+1]'s stack frame */
40080086:	49d910        	s32e	a1, a9, -12
    s32e    a2, a9,  -8     /* save a2 to call[j+1]'s stack frame */
40080089:	49e920        	s32e	a2, a9, -8
    s32e    a3, a9,  -4     /* save a3 to call[j+1]'s stack frame */
4008008c:	49f930        	s32e	a3, a9, -4
    s32e    a4, a0, -32     /* save a4 to call[j]'s stack frame */
4008008f:	498040        	s32e	a4, a0, -32
    s32e    a5, a0, -28     /* save a5 to call[j]'s stack frame */
40080092:	499050        	s32e	a5, a0, -28
    s32e    a6, a0, -24     /* save a6 to call[j]'s stack frame */
40080095:	49a060        	s32e	a6, a0, -24
    s32e    a7, a0, -20     /* save a7 to call[j]'s stack frame */
40080098:	49b070        	s32e	a7, a0, -20
    rfwo                    /* rotates back to call[i] position */
4008009b:	003400        	rfwo
	...

400800c0 <_WindowUnderflow8>:

    .org    0xC0
    .global _WindowUnderflow8
_WindowUnderflow8:

    l32e    a0, a9, -16     /* restore a0 from call[i+1]'s stack frame */
400800c0:	09c900        	l32e	a0, a9, -16
    l32e    a1, a9, -12     /* restore a1 from call[i+1]'s stack frame */
400800c3:	09d910        	l32e	a1, a9, -12
    l32e    a2, a9,  -8     /* restore a2 from call[i+1]'s stack frame */
400800c6:	09e920        	l32e	a2, a9, -8
    l32e    a7, a1, -12     /* a7 <- call[i-1]'s sp
400800c9:	09d170        	l32e	a7, a1, -12
                               (used to find end of call[i]'s frame) */
    l32e    a3, a9,  -4     /* restore a3 from call[i+1]'s stack frame */
400800cc:	09f930        	l32e	a3, a9, -4
    l32e    a4, a7, -32     /* restore a4 from call[i]'s stack frame */
400800cf:	098740        	l32e	a4, a7, -32
    l32e    a5, a7, -28     /* restore a5 from call[i]'s stack frame */
400800d2:	099750        	l32e	a5, a7, -28
    l32e    a6, a7, -24     /* restore a6 from call[i]'s stack frame */
400800d5:	09a760        	l32e	a6, a7, -24
    l32e    a7, a7, -20     /* restore a7 from call[i]'s stack frame */
400800d8:	09b770        	l32e	a7, a7, -20
    rfwu
400800db:	003500        	rfwu
	...

40080100 <_WindowOverflow12>:

    .org    0x100
    .global _WindowOverflow12
_WindowOverflow12:

    s32e    a0,  a13, -16   /* save a0 to call[j+1]'s stack frame */
40080100:	49cd00        	s32e	a0, a13, -16
    l32e    a0,  a1,  -12   /* a0 <- call[j-1]'s sp
40080103:	09d100        	l32e	a0, a1, -12
                               (used to find end of call[j]'s frame) */
    s32e    a1,  a13, -12   /* save a1 to call[j+1]'s stack frame */
40080106:	49dd10        	s32e	a1, a13, -12
    s32e    a2,  a13,  -8   /* save a2 to call[j+1]'s stack frame */
40080109:	49ed20        	s32e	a2, a13, -8
    s32e    a3,  a13,  -4   /* save a3 to call[j+1]'s stack frame */
4008010c:	49fd30        	s32e	a3, a13, -4
    s32e    a4,  a0,  -48   /* save a4 to end of call[j]'s stack frame */
4008010f:	494040        	s32e	a4, a0, -48
    s32e    a5,  a0,  -44   /* save a5 to end of call[j]'s stack frame */
40080112:	495050        	s32e	a5, a0, -44
    s32e    a6,  a0,  -40   /* save a6 to end of call[j]'s stack frame */
40080115:	496060        	s32e	a6, a0, -40
    s32e    a7,  a0,  -36   /* save a7 to end of call[j]'s stack frame */
40080118:	497070        	s32e	a7, a0, -36
    s32e    a8,  a0,  -32   /* save a8 to end of call[j]'s stack frame */
4008011b:	498080        	s32e	a8, a0, -32
    s32e    a9,  a0,  -28   /* save a9 to end of call[j]'s stack frame */
4008011e:	499090        	s32e	a9, a0, -28
    s32e    a10, a0,  -24   /* save a10 to end of call[j]'s stack frame */
40080121:	49a0a0        	s32e	a10, a0, -24
    s32e    a11, a0,  -20   /* save a11 to end of call[j]'s stack frame */
40080124:	49b0b0        	s32e	a11, a0, -20
    rfwo                    /* rotates back to call[i] position */
40080127:	003400        	rfwo
	...

40080140 <_WindowUnderflow12>:

    .org 0x140
    .global _WindowUnderflow12
_WindowUnderflow12:

    l32e    a0,  a13, -16 /* restore a0 from call[i+1]'s stack frame */
40080140:	09cd00        	l32e	a0, a13, -16
    l32e    a1,  a13, -12 /* restore a1 from call[i+1]'s stack frame */
40080143:	09dd10        	l32e	a1, a13, -12
    l32e    a2,  a13,  -8 /* restore a2 from call[i+1]'s stack frame */
40080146:	09ed20        	l32e	a2, a13, -8
    l32e    a11, a1,  -12 /* a11 <- call[i-1]'s sp
40080149:	09d1b0        	l32e	a11, a1, -12
                           * (used to find end of call[i]'s frame) */
    l32e    a3,  a13,  -4 /* restore a3 from call[i+1]'s stack frame */
4008014c:	09fd30        	l32e	a3, a13, -4
    l32e    a4,  a11, -48 /* restore a4 from end of call[i]'s stack frame */
4008014f:	094b40        	l32e	a4, a11, -48
    l32e    a5,  a11, -44 /* restore a5 from end of call[i]'s stack frame */
40080152:	095b50        	l32e	a5, a11, -44
    l32e    a6,  a11, -40 /* restore a6 from end of call[i]'s stack frame */
40080155:	096b60        	l32e	a6, a11, -40
    l32e    a7,  a11, -36 /* restore a7 from end of call[i]'s stack frame */
40080158:	097b70        	l32e	a7, a11, -36
    l32e    a8,  a11, -32 /* restore a8 from end of call[i]'s stack frame */
4008015b:	098b80        	l32e	a8, a11, -32
    l32e    a9,  a11, -28 /* restore a9 from end of call[i]'s stack frame */
4008015e:	099b90        	l32e	a9, a11, -28
    l32e    a10, a11, -24 /* restore a10 from end of call[i]'s stack
40080161:	09aba0        	l32e	a10, a11, -24
    		       * frame */
    l32e    a11, a11, -20   /* restore a11 from end of call[i]'s stack
40080164:	09bbb0        	l32e	a11, a11, -20
    			 * frame */
    rfwu
40080167:	003500        	rfwu
	...

40080180 <_Level2Vector>:
 */

DEF_EXCINT 1, _handle_excint, xtensa_excint1_c

#if XCHAL_NMILEVEL >= 2
DEF_EXCINT 2, _handle_excint, xtensa_int2_c
40080180:	c4c112        	addi	a1, a1, -60
40080183:	7109      	s32i.n	a0, a1, 28
40080185:	9129      	s32i.n	a2, a1, 36
40080187:	a139      	s32i.n	a3, a1, 40
40080189:	03c200        	rsr.eps2	a0
4008018c:	5109      	s32i.n	a0, a1, 20
4008018e:	03b200        	rsr.epc2	a0
40080191:	6109      	s32i.n	a0, a1, 24
40080193:	000246        	j	400801a0 <_after_imms2>
	...

40080198 <_handle_excint_imm2>:
40080198:	081730        	lsx	f1, a7, a3
4008019b:	40          	.byte 0x40

4008019c <_c_handler_imm2>:
4008019c:	186c      	movi.n	a8, -31
4008019e:	4008      	l32i.n	a0, a0, 16

400801a0 <_after_imms2>:
400801a0:	ffff21        	l32r	a2, 4008019c <_c_handler_imm2>
400801a3:	fffd01        	l32r	a0, 40080198 <_handle_excint_imm2>
400801a6:	0000a0        	jx	a0
	...

400801c0 <_Level3Vector>:
#endif

#if XCHAL_NMILEVEL >= 3
DEF_EXCINT 3, _handle_excint, xtensa_int3_c
400801c0:	c4c112        	addi	a1, a1, -60
400801c3:	7109      	s32i.n	a0, a1, 28
400801c5:	9129      	s32i.n	a2, a1, 36
400801c7:	a139      	s32i.n	a3, a1, 40
400801c9:	03c300        	rsr.eps3	a0
400801cc:	5109      	s32i.n	a0, a1, 20
400801ce:	03b300        	rsr.epc3	a0
400801d1:	6109      	s32i.n	a0, a1, 24
400801d3:	000146        	j	400801dc <_after_imms3>
	...

400801d8 <_c_handler_imm3>:
400801d8:	0818c0        	lsx	f1, a8, a12
400801db:	40          	.byte 0x40

400801dc <_after_imms3>:
400801dc:	ffff21        	l32r	a2, 400801d8 <_c_handler_imm3>
400801df:	ffee01        	l32r	a0, 40080198 <_handle_excint_imm2>
400801e2:	0000a0        	jx	a0
	...

40080200 <_Level4Vector>:
#endif

#if XCHAL_NMILEVEL >= 4
DEF_EXCINT 4, _handle_excint, xtensa_int4_c
40080200:	c4c112        	addi	a1, a1, -60
40080203:	7109      	s32i.n	a0, a1, 28
40080205:	9129      	s32i.n	a2, a1, 36
40080207:	a139      	s32i.n	a3, a1, 40
40080209:	03c400        	rsr.eps4	a0
4008020c:	5109      	s32i.n	a0, a1, 20
4008020e:	03b400        	rsr.epc4	a0
40080211:	6109      	s32i.n	a0, a1, 24
40080213:	000146        	j	4008021c <_after_imms4>
	...

40080218 <_c_handler_imm4>:
40080218:	193c      	movi.n	a9, 49
4008021a:	4008      	l32i.n	a0, a0, 16

4008021c <_after_imms4>:
4008021c:	ffff21        	l32r	a2, 40080218 <_c_handler_imm4>
4008021f:	ffde01        	l32r	a0, 40080198 <_handle_excint_imm2>
40080222:	0000a0        	jx	a0
	...

40080240 <_Level5Vector>:
#endif

#if XCHAL_NMILEVEL >= 5
DEF_EXCINT 5, _handle_excint, xtensa_int5_c
40080240:	c4c112        	addi	a1, a1, -60
40080243:	7109      	s32i.n	a0, a1, 28
40080245:	9129      	s32i.n	a2, a1, 36
40080247:	a139      	s32i.n	a3, a1, 40
40080249:	03c500        	rsr.eps5	a0
4008024c:	5109      	s32i.n	a0, a1, 20
4008024e:	03b500        	rsr.epc5	a0
40080251:	6109      	s32i.n	a0, a1, 24
40080253:	000146        	j	4008025c <_after_imms5>
	...

40080258 <_c_handler_imm5>:
40080258:	0819a0        	lsx	f1, a9, a10
4008025b:	40          	.byte 0x40

4008025c <_after_imms5>:
4008025c:	ffff21        	l32r	a2, 40080258 <_c_handler_imm5>
4008025f:	ffce01        	l32r	a0, 40080198 <_handle_excint_imm2>
40080262:	0000a0        	jx	a0
	...

40080280 <_Level6Vector>:
#endif

#if XCHAL_NMILEVEL >= 6
DEF_EXCINT 6, _handle_excint, xtensa_int6_c
40080280:	c4c112        	addi	a1, a1, -60
40080283:	7109      	s32i.n	a0, a1, 28
40080285:	9129      	s32i.n	a2, a1, 36
40080287:	a139      	s32i.n	a3, a1, 40
40080289:	03c600        	rsr.eps6	a0
4008028c:	5109      	s32i.n	a0, a1, 20
4008028e:	03b600        	rsr.epc6	a0
40080291:	6109      	s32i.n	a0, a1, 24
40080293:	000146        	j	4008029c <_after_imms6>
	...

40080298 <_c_handler_imm6>:
40080298:	19f8      	l32i.n	a15, a9, 4
4008029a:	4008      	l32i.n	a0, a0, 16

4008029c <_after_imms6>:
4008029c:	ffff21        	l32r	a2, 40080298 <_c_handler_imm6>
4008029f:	ffbe01        	l32r	a0, 40080198 <_handle_excint_imm2>
400802a2:	0000a0        	jx	a0
	...

400802c0 <_Level7Vector>:
#endif

#if XCHAL_NMILEVEL >= 7
DEF_EXCINT 7, _handle_excint, xtensa_int7_c
400802c0:	c4c112        	addi	a1, a1, -60
400802c3:	7109      	s32i.n	a0, a1, 28
400802c5:	9129      	s32i.n	a2, a1, 36
400802c7:	a139      	s32i.n	a3, a1, 40
400802c9:	03c700        	rsr.eps7	a0
400802cc:	5109      	s32i.n	a0, a1, 20
400802ce:	03b700        	rsr.epc7	a0
400802d1:	6109      	s32i.n	a0, a1, 24
400802d3:	000146        	j	400802dc <_after_imms7>
	...

400802d8 <_c_handler_imm7>:
400802d8:	081a10        	lsx	f1, a10, a1
400802db:	40          	.byte 0x40

400802dc <_after_imms7>:
400802dc:	ffff21        	l32r	a2, 400802d8 <_c_handler_imm7>
400802df:	ffae01        	l32r	a0, 40080198 <_handle_excint_imm2>
400802e2:	0000a0        	jx	a0
	...

40080300 <_KernelExceptionVector>:
 * out of simple caution in case app code clears the UM bit by mistake.
 */
.pushsection .KernelExceptionVector.text, "ax"
.global _KernelExceptionVector
_KernelExceptionVector:
	j _Level1Vector
40080300:	015506        	j	40080858 <_Level1Vector>
	...

40080340 <_Level1RealVector>:
	wsr.excsave1 a0
40080340:	13d100        	wsr.excsave1	a0
	rsr.exccause a0
40080343:	03e800        	rsr.exccause	a0
	bnei a0, EXCCAUSE_ALLOCA, _not_alloca
40080346:	025066        	bnei	a0, 5, 4008034c <_not_alloca>
	j _xt_alloca_exc
40080349:	ff40c6        	j	40080050 <_xt_alloca_exc>

4008034c <_not_alloca>:
	rsr.excsave1 a0
4008034c:	03d100        	rsr.excsave1	a0
	j _Level1Vector
4008034f:	014146        	j	40080858 <_Level1Vector>
	...

400803c0 <_DoubleExceptionVector>:
.pushsection .DoubleExceptionVector.text, "ax"
.global _DoubleExceptionVector
_DoubleExceptionVector:
#if XCHAL_HAVE_DEBUG
/* Signals an unhandled double exception */
1:	break	1, 4
400803c0:	004140        	break	1, 4
#else
1:
#endif
	j	1b
400803c3:	fffe46        	j	400803c0 <_DoubleExceptionVector>
	...

Disassembly of section text:

40080548 <__start-0x2ac>:
40080548:	080000        	lsx	f0, a0, a0
4008054b:	087040        	lsx	f7, a0, a4
4008054e:	3ffb      	addi.n	a3, a15, 15
40080550:	fb05a0        	f64addc	a10, a5, 0, 0
40080553:	3f          	.byte 0x3f
40080554:	808c      	beqz.n	a0, 40080560 <_iram_text_start+0x18>
40080556:	483ff4        	mula.da.ll.ldinc	m3, a15, m0, a15
40080559:	3ff5f0        	f64cmph	a15, a5, a15, 3
4008055c:	ff          	.byte 0xff
4008055d:	bf          	.byte 0xbf
4008055e:	ff          	.byte 0xff
4008055f:	ff          	.byte 0xff
40080560:	040023        	lsi	f2, a0, 16
40080563:	003000        	rfe
40080566:	243ff0        	extui	a3, a15, 15, 3
40080569:	fb08      	l32i.n	a0, a11, 60
4008056b:	3f          	.byte 0x3f
4008056c:	fb0244        	lsi	f4, a2, 0x3ec
4008056f:	3f          	.byte 0x3f
40080570:	024a      	add.n	a0, a2, a4
40080572:	3ffb      	addi.n	a3, a15, 15
40080574:	fb0250        	f64addc	a5, a2, 0, 0
40080577:	3f          	.byte 0x3f
40080578:	6f          	.byte 0x6f
40080579:	3ffb02        	s32ri	a0, a11, 252
4008057c:	fb0285        	call0	4007b5a8 <esp32_rom_gpio_matrix_out+0x7169c>
4008057f:	3f          	.byte 0x3f
40080580:	ae          	.byte 0xae
40080581:	3ffb02        	s32ri	a0, a11, 252
40080584:	02db      	addi.n	a0, a2, 13
40080586:	3ffb      	addi.n	a3, a15, 15
40080588:	fb0305        	call0	4007b5bc <esp32_rom_gpio_matrix_out+0x716b0>
4008058b:	3f          	.byte 0x3f
4008058c:	032c      	movi.n	a3, 32
4008058e:	3ffb      	addi.n	a3, a15, 15
40080590:	6f          	.byte 0x6f
40080591:	3ffb03        	lsi	f0, a11, 252
40080594:	fb0397        	bnone	a3, a9, 40080593 <_iram_text_start+0x4b>
40080597:	3f          	.byte 0x3f
40080598:	fb03c0        	f64addc	a12, a3, 0, 0
4008059b:	3f          	.byte 0x3f
4008059c:	03dd      	mov.n	a13, a3
4008059e:	3ffb      	addi.n	a3, a15, 15
400805a0:	03ed      	mov.n	a14, a3
400805a2:	3ffb      	addi.n	a3, a15, 15
400805a4:	03f9      	s32i.n	a15, a3, 0
400805a6:	3ffb      	addi.n	a3, a15, 15
400805a8:	000000        	ill
400805ab:	3e          	.byte 0x3e
400805ac:	fb0412        	l8ui	a1, a4, 251
400805af:	3f          	.byte 0x3f
400805b0:	0009c4        	lsi	f12, a9, 0
400805b3:	042e00        	extui	a2, a0, 14, 1
400805b6:	3ffb      	addi.n	a3, a15, 15
400805b8:	0088      	l32i.n	a8, a0, 0
400805ba:	3ffb      	addi.n	a3, a15, 15
400805bc:	0b2c      	movi.n	a11, 32
400805be:	4008      	l32i.n	a0, a0, 16
400805c0:	ff          	.byte 0xff
400805c1:	7f          	.byte 0x7f
400805c2:	ff0000        	f64cmph	a0, a0, a0, 15
400805c5:	ff          	.byte 0xff
400805c6:	000003        	lsi	f0, a0, 0
400805c9:	000000        	ill
400805cc:	009200        	all4	b0, b0:b1:b2:b3
400805cf:	043f40        	extui	a3, a4, 15, 1
400805d2:	3ffb      	addi.n	a3, a15, 15
400805d4:	07e8      	l32i.n	a14, a7, 0
400805d6:	3ffb      	addi.n	a3, a15, 15
400805d8:	081100        	lsx	f1, a1, a0
400805db:	014040        	slli	a4, a0, 28
400805de:	3ffb      	addi.n	a3, a15, 15
400805e0:	f48070        	extui	a8, a7, 0, 16
400805e3:	3f          	.byte 0x3f
400805e4:	0138      	l32i.n	a3, a1, 0
400805e6:	3ffb      	addi.n	a3, a15, 15
400805e8:	c4b400        	extui	a11, a0, 4, 13
400805eb:	600004        	lsi	f0, a0, 0x180
400805ee:	043ff6        	bgeui	a15, 3, 400805f6 <_iram_text_start+0xae>
400805f1:	3ff660        	f64cmph	a15, a6, a6, 3
400805f4:	ff          	.byte 0xff
400805f5:	ff          	.byte 0xff
400805f6:	ff          	.byte 0xff
400805f7:	8000e7        	bnone	a0, a14, 4008057b <_iram_text_start+0x33>
400805fa:	bf3ff4        	lsi	f15, a15, 0x2fc
400805fd:	fbfa      	add.n	a15, a11, a15
400805ff:	ff          	.byte 0xff
40080600:	807c      	movi.n	a0, -8
40080602:	ff3ff4        	lsi	f15, a15, 0x3fc
40080605:	ffffc7        	bbsi	a15, 28, 40080608 <_iram_text_start+0xc0>
40080608:	002000        	isync
4008060b:	044a00        	extui	a4, a0, 10, 1
4008060e:	3ffb      	addi.n	a3, a15, 15
40080610:	003c      	movi.n	a0, 48
40080612:	003ff0        	lsi	f15, a15, 0
40080615:	080000        	lsx	f0, a0, a0
40080618:	6008      	l32i.n	a0, a0, 24
4008061a:	783ff6        	bgeui	a15, 3, 40080696 <_iram_text_start+0x14e>
4008061d:	400092        	l8ui	a9, a0, 64
40080620:	0041a4        	lsi	f10, a1, 0
40080623:	047540        	extui	a7, a4, 5, 1
40080626:	3ffb      	addi.n	a3, a15, 15
40080628:	f49000        	extui	a9, a0, 0, 16
4008062b:	3f          	.byte 0x3f
4008062c:	000800        	lsi	f0, a8, 0
4008062f:	700000        	lsi	f0, a0, 0x1c0
40080632:	680000        	lsi	f0, a0, 0x1a0
40080635:	3ffb04        	lsi	f0, a11, 252
40080638:	f44000        	extui	a4, a0, 0, 16
4008063b:	3f          	.byte 0x3f
4008063c:	07ec      	bnez.n	a7, 40080660 <_iram_text_start+0x118>
4008063e:	3ffb      	addi.n	a3, a15, 15
40080640:	7619f1        	l32r	a15, 4005dea4 <esp32_rom_gpio_matrix_out+0x53f98>
40080643:	5dc005        	call0	400de244 <_iram_text_end+0x5a6b2>
40080646:	000000        	ill
40080649:	000080        	ret
4008064c:	bb0b      	addi.n	a11, a11, -1
4008064e:	bf0002        	l8ui	a0, a0, 191
40080651:	005d      	mov.n	a5, a0
40080653:	172b00        	lsi	f0, a11, 92
40080656:	4008      	l32i.n	a0, a0, 16
40080658:	080ea0        	lsx	f0, a14, a10
4008065b:	002040        	lsi	f4, a0, 0
4008065e:	000005        	call0	40080660 <_iram_text_start+0x118>
40080661:	000800        	lsi	f0, a8, 0
40080664:	100000        	and	a0, a0, a0
40080667:	000000        	ill
4008066a:	480020        	ssx	f0, a0, a2
4008066d:	400804        	lsi	f0, a8, 0x100
40080670:	400000        	ssr	a0
40080673:	000000        	ill
40080676:	000080        	ret
40080679:	200000        	or	a0, a0, a0
4008067c:	408800        	lsi	f0, a8, 0x100
4008067f:	000000        	ill
40080682:	000100        	lsi	f0, a1, 0
40080685:	020000        	andb	b0, b0, b0
40080688:	000000        	ill
4008068b:	000010        	lsi	f1, a0, 0
4008068e:	004000        	break	0, 0
40080691:	030000        	rsr.lbeg	a0
40080694:	010000        	slli	a0, a0, 32
40080697:	000000        	ill
4008069a:	000400        	lsi	f0, a4, 0
4008069d:	800000        	add	a0, a0, a0
400806a0:	004000        	break	0, 0
400806a3:	100000        	and	a0, a0, a0
400806a6:	000000        	ill
400806a9:	000200        	lsi	f0, a2, 0
400806ac:	040000        	extui	a0, a0, 0, 1
400806af:	300000        	xor	a0, a0, a0
400806b2:	9c0000        	lsi	f0, a0, 0x270
400806b5:	3ffb00        	f64cmph	a15, a11, a0, 3
400806b8:	060000        	lsi	f0, a0, 24
400806bb:	102200        	and	a2, a2, a0
400806be:	0ffd      	mov.n	a15, a15
400806c0:	7f          	.byte 0x7f
400806c1:	fc1c      	movi.n	a12, 31
400806c3:	ff          	.byte 0xff
400806c4:	fb0050        	f64addc	a5, a0, 0, 0
400806c7:	3f          	.byte 0x3f
400806c8:	fb0040        	f64addc	a4, a0, 0, 0
400806cb:	3f          	.byte 0x3f
400806cc:	6e          	.byte 0x6e
400806cd:	3ffb04        	lsi	f0, a11, 252
400806d0:	086c      	movi.n	a8, -32
400806d2:	3ffb      	addi.n	a3, a15, 15
400806d4:	681c      	movi.n	a8, 22
400806d6:	2c4000        	lsi	f0, a0, 176
400806d9:	3ff530        	f64cmph	a15, a5, a3, 3
400806dc:	f53024        	lsi	f2, a0, 0x3d4
400806df:	3f          	.byte 0x3f
400806e0:	3018      	l32i.n	a1, a0, 12
400806e2:	ff3ff5        	call12	4007fae0 <esp32_rom_gpio_matrix_out+0x75bd4>
400806e5:	cf          	.byte 0xcf
400806e6:	ff          	.byte 0xff
400806e7:	ff          	.byte 0xff
400806e8:	301c      	movi.n	a0, 19
400806ea:	a76001        	l32r	a0, 4006a46c <esp32_rom_gpio_matrix_out+0x60560>
400806ed:	3ffb04        	lsi	f0, a11, 252
400806f0:	ae          	.byte 0xae
400806f1:	3ffb04        	lsi	f0, a11, 252
400806f4:	000a16        	beqz	a10, 400806f8 <_iram_text_start+0x1b0>
400806f7:	9f0c00        	f64cmph	a0, a12, a0, 9
400806fa:	dc4000        	lsi	f0, a0, 0x370
400806fd:	9e          	.byte 0x9e
400806fe:	104000        	and	a4, a0, a0
40080701:	3ff530        	f64cmph	a15, a5, a3, 3
40080704:	f53004        	lsi	f0, a0, 0x3d4
40080707:	3f          	.byte 0x3f
40080708:	ff          	.byte 0xff
40080709:	fffff7        	bbsi	a15, 31, 4008070c <_iram_text_start+0x1c4>
4008070c:	017c      	movi.n	a1, -16
4008070e:	3ffb      	addi.n	a3, a15, 15
40080710:	f53000        	extui	a3, a0, 16, 16
40080713:	3f          	.byte 0x3f
40080714:	3038      	l32i.n	a3, a0, 12
40080716:	403ff5        	call12	400c0b14 <_iram_text_end+0x3cf82>
40080719:	3ff530        	f64cmph	a15, a5, a3, 3
4008071c:	f53044        	lsi	f4, a0, 0x3d4
4008071f:	3f          	.byte 0x3f
40080720:	3048      	l32i.n	a4, a0, 12
40080722:	4c3ff5        	call12	400ccb20 <_iram_text_end+0x48f8e>
40080725:	3ff530        	f64cmph	a15, a5, a3, 3
40080728:	f53030        	extui	a3, a3, 16, 16
4008072b:	3f          	.byte 0x3f
4008072c:	f53034        	lsi	f3, a0, 0x3d4
4008072f:	3f          	.byte 0x3f
40080730:	300c      	movi.n	a0, 3
40080732:	403ff5        	call12	400c0b30 <_iram_text_end+0x3cf9e>
40080735:	030d      	mov.n	a0, a3
40080737:	302800        	xor	a2, a8, a0
4008073a:	e83ff5        	call12	40068b38 <esp32_rom_gpio_matrix_out+0x5ec2c>
4008073d:	000003        	lsi	f0, a0, 0
40080740:	f53020        	extui	a3, a2, 16, 16
40080743:	3f          	.byte 0x3f
40080744:	0f4240        	f64cmph	a4, a2, a4, 0
40080747:	86a000        	lsi	f0, a0, 0x218
4008074a:	800001        	l32r	a0, 4006074c <esp32_rom_gpio_matrix_out+0x56840>
4008074d:	061a      	add.n	a0, a6, a1
4008074f:	e14000        	lsi	f0, a0, 0x384
40080752:	400033        	lsi	f3, a0, 0x100
40080755:	4c4b      	addi.n	a4, a12, 4
40080757:	300800        	xor	a0, a8, a0
4008075a:	ff3ff5        	call12	4007fb58 <esp32_rom_gpio_matrix_out+0x75c4c>
4008075d:	ff          	.byte 0xff
4008075e:	ff          	.byte 0xff
4008075f:	ff          	.byte 0xff
40080760:	3058      	l32i.n	a5, a0, 12
40080762:	003ff5        	call12	40080b60 <z_vprintk+0x10>
40080765:	0018      	l32i.n	a1, a0, 0
40080767:	140100        	extui	a0, a0, 1, 2
4008076a:	010000        	slli	a0, a0, 32
4008076d:	080000        	lsx	f0, a0, a0
40080770:	800101        	l32r	a0, 40060774 <esp32_rom_gpio_matrix_out+0x56868>
40080773:	023000        	andb	b3, b0, b0
40080776:	3ffb      	addi.n	a3, a15, 15
40080778:	fb0000        	f64addc	a0, a0, 0, 0
4008077b:	3f          	.byte 0x3f
4008077c:	fb0070        	f64addc	a7, a0, 0, 0
4008077f:	3f          	.byte 0x3f
40080780:	086d      	mov.n	a6, a8
40080782:	3ffb      	addi.n	a3, a15, 15
40080784:	bf          	.byte 0xbf
40080785:	3ffb03        	lsi	f0, a11, 252
40080788:	fb04b5        	call12	4007b7d4 <esp32_rom_gpio_matrix_out+0x718c8>
4008078b:	3f          	.byte 0x3f
4008078c:	fb04d1        	l32r	a13, 4007f39c <esp32_rom_gpio_matrix_out+0x75490>
4008078f:	3f          	.byte 0x3f
40080790:	fb0720        	f64addc	a2, a7, 0, 0
40080793:	3f          	.byte 0x3f
40080794:	26ac      	beqz.n	a6, 400807ba <_iram_text_start+0x272>
40080796:	4008      	l32i.n	a0, a0, 16
40080798:	fb1070        	f64addc	a7, a0, 0, 1
4008079b:	3f          	.byte 0x3f
4008079c:	04f8      	l32i.n	a15, a4, 0
4008079e:	3ffb      	addi.n	a3, a15, 15
400807a0:	083350        	lsx	f3, a3, a5
400807a3:	087040        	lsx	f7, a0, a4
400807a6:	3ffb      	addi.n	a3, a15, 15
400807a8:	fb05a0        	f64addc	a10, a5, 0, 0
400807ab:	3f          	.byte 0x3f
400807ac:	fb2070        	f64addc	a7, a0, 1, 0
400807af:	3f          	.byte 0x3f
400807b0:	fb0c70        	f64addc	a7, a12, 0, 0
400807b3:	3f          	.byte 0x3f
400807b4:	fb0660        	f64addc	a6, a6, 0, 0
400807b7:	3f          	.byte 0x3f
400807b8:	fb2870        	f64addc	a7, a8, 1, 0
400807bb:	3f          	.byte 0x3f
400807bc:	fb0854        	lsi	f5, a8, 0x3ec
400807bf:	3f          	.byte 0x3f
400807c0:	fb0820        	f64addc	a2, a8, 0, 0
400807c3:	3f          	.byte 0x3f
400807c4:	081c      	movi.n	a8, 16
400807c6:	3ffb      	addi.n	a3, a15, 15
400807c8:	fb0860        	f64addc	a6, a8, 0, 0
400807cb:	3f          	.byte 0x3f
400807cc:	6e          	.byte 0x6e
400807cd:	fb08      	l32i.n	a0, a11, 60
400807cf:	3f          	.byte 0x3f
400807d0:	2a1c      	movi.n	a10, 18
400807d2:	4008      	l32i.n	a0, a0, 16
400807d4:	000a      	add.n	a0, a0, a0
400807d6:	6e0000        	f64rnd	a0, a0, a0, 2
400807d9:	fb08      	l32i.n	a0, a11, 60
400807db:	3f          	.byte 0x3f
400807dc:	fb0074        	lsi	f7, a0, 0x3ec
400807df:	3f          	.byte 0x3f
400807e0:	0868      	l32i.n	a6, a8, 0
400807e2:	3ffb      	addi.n	a3, a15, 15
400807e4:	010c      	movi.n	a1, 0
400807e6:	3ffb      	addi.n	a3, a15, 15
400807e8:	ff          	.byte 0xff
400807e9:	ff          	.byte 0xff
400807ea:	ff          	.byte 0xff
400807eb:	7f          	.byte 0x7f
400807ec:	fb07e0        	f64addc	a14, a7, 0, 0
400807ef:	3f          	.byte 0x3f
400807f0:	fb0074        	lsi	f7, a0, 0x3ec
400807f3:	3f          	.byte 0x3f

400807f4 <__start>:
 * This is written in C rather than assembly since, during the port bring up,
 * Zephyr is being booted by the Espressif bootloader.  With it, the C stack
 * is already set up.
 */
void __attribute__((section(".iram1"))) __start(void)
{
400807f4:	004136        	entry	a1, 32
	extern uint32_t _init_start;
	extern uint32_t _bss_start;
	extern uint32_t _bss_end;

	/* Move the exception vector table to IRAM. */
	__asm__ __volatile__ (
400807f7:	ff5481        	l32r	a8, 40080548 <_iram_text_start>
400807fa:	13e780        	wsr.vecbase	a8
		:
		: "r"(&_init_start));

	/* Zero out BSS.  Clobber _bss_start to avoid memset() elision. */
	(void)memset(&_bss_start, 0,
		     (&_bss_end - &_bss_start) * sizeof(_bss_start));
400807fd:	ff54a1        	l32r	a10, 40080550 <_iram_text_start+0x8>
	(void)memset(&_bss_start, 0,
40080800:	ff53c1        	l32r	a12, 4008054c <_iram_text_start+0x4>
40080803:	00a0b2        	movi	a11, 0
40080806:	c0cca0        	sub	a12, a12, a10
40080809:	02c125        	call8	4008341c <memset>
		: "memory");

	/* The watchdog timer is enabled in the bootloader.  We're done booting,
	 * so disable it.
	 */
	*wdt_rtc_reg &= ~RTC_CNTL_WDT_FLASHBOOT_MOD_EN;
4008080c:	ff5291        	l32r	a9, 40080554 <_iram_text_start+0xc>
4008080f:	ffaba2        	movi	a10, 0xfffffbff
40080812:	0020c0        	memw
40080815:	002982        	l32i	a8, a9, 0
40080818:	1088a0        	and	a8, a8, a10
4008081b:	0020c0        	memw
4008081e:	0989      	s32i.n	a8, a9, 0
	*wdt_timg_reg &= ~TIMG_WDT_FLASHBOOT_MOD_EN;
40080820:	ff4e91        	l32r	a9, 40080558 <_iram_text_start+0x10>
40080823:	ff4ea1        	l32r	a10, 4008055c <_iram_text_start+0x14>
40080826:	0020c0        	memw
40080829:	0988      	l32i.n	a8, a9, 0
4008082b:	1088a0        	and	a8, a8, a10
4008082e:	0020c0        	memw
40080831:	0989      	s32i.n	a8, a9, 0

	/* Disable normal interrupts. */
	__asm__ __volatile__ (
40080833:	ff4b81        	l32r	a8, 40080560 <_iram_text_start+0x18>
40080836:	13e680        	wsr.ps	a8
		"wsr %0, PS"
		:
		: "r"(PS_INTLEVEL(XCHAL_EXCM_LEVEL) | PS_UM | PS_WOE));

	/* Disable CPU1 while we figure out how to have SMP in Zephyr. */
	*app_cpu_config_reg &= ~DPORT_APPCPU_CLKGATE_EN;
40080839:	ff4a91        	l32r	a9, 40080564 <_iram_text_start+0x1c>
4008083c:	ea7c      	movi.n	a10, -2
4008083e:	0020c0        	memw
40080841:	0988      	l32i.n	a8, a9, 0
40080843:	1088a0        	and	a8, a8, a10
40080846:	0020c0        	memw
40080849:	006982        	s32i	a8, a9, 0

	/* Initialize the architecture CPU pointer.  Some of the
	 * initialization code wants a valid _current before
	 * arch_kernel_init() is invoked.
	 */
	__asm__ volatile("wsr.MISC0 %0; rsync" : : "r"(&_kernel.cpus[0]));
4008084c:	ff4781        	l32r	a8, 40080568 <_iram_text_start+0x20>
4008084f:	13f480        	wsr.misc0	a8
40080852:	002010        	rsync


	/* Start Zephyr */
	z_cstart();
40080855:	01e8e5        	call8	400826e4 <z_cstart>

40080858 <_Level1Vector>:
DEF_EXCINT 1, _handle_excint, xtensa_excint1_c
40080858:	c4c112        	addi	a1, a1, -60
4008085b:	7109      	s32i.n	a0, a1, 28
4008085d:	9129      	s32i.n	a2, a1, 36
4008085f:	a139      	s32i.n	a3, a1, 40
40080861:	03e600        	rsr.ps	a0
40080864:	026c      	movi.n	a2, -32
40080866:	100020        	and	a0, a0, a2
40080869:	5109      	s32i.n	a0, a1, 20
4008086b:	03b100        	rsr.epc1	a0
4008086e:	6109      	s32i.n	a0, a1, 24
40080870:	000206        	j	4008087c <_after_imms1>
	...

40080874 <_handle_excint_imm1>:
40080874:	081730        	lsx	f1, a7, a3
40080877:	40          	.byte 0x40

40080878 <_c_handler_imm1>:
40080878:	081a44        	mula.dd.ll.ldinc	m1, a10, m0, m3
4008087b:	40          	.byte 0x40

4008087c <_after_imms1>:
4008087c:	ffff21        	l32r	a2, 40080878 <_c_handler_imm1>
4008087f:	fffd01        	l32r	a0, 40080874 <_handle_excint_imm1>
40080882:	0000a0        	jx	a0
40080885:	000000        	ill

40080888 <k_msleep>:
 *
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
40080888:	004136        	entry	a1, 32
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * (to_hz / from_hz);
4008088b:	0aa0b2        	movi	a11, 10
4008088e:	82a2b0        	mull	a10, a2, a11
40080891:	b2b2b0        	mulsh	a11, a2, a11
		parm0.val = timeout;
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
40080894:	025c65        	call8	40082e5c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
}
40080897:	202aa0        	or	a2, a10, a10
4008089a:	000090        	retw
4008089d:	000000        	ill

400808a0 <main>:

const float LM75A_DEGREES_RESOLUTION = 0.125;
const int LM75A_REG_ADDR_TEMP = 0;

void main(void)
{   
400808a0:	008136        	entry	a1, 64
	
	uint8_t cmp_data[16];
	uint8_t data[16];
	int i, ret;
	uint16_t temp = 0x00;
    uint8_t pointer = 0x00;
400808a3:	00a032        	movi	a3, 0
400808a6:	104132        	s8i	a3, a1, 16
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
400808a9:	ff30a1        	l32r	a10, 4008056c <_iram_text_start+0x24>
400808ac:	01d825        	call8	40082630 <z_impl_device_get_binding>
400808af:	0a2d      	mov.n	a2, a10
400808b1:	ff2fa1        	l32r	a10, 40080570 <_iram_text_start+0x28>
400808b4:	01d7a5        	call8	40082630 <z_impl_device_get_binding>
400808b7:	0a5d      	mov.n	a5, a10

	i2c_dev = device_get_binding(I2C_DEV);
	i2c_dev1 = device_get_binding(I2C_DEV1);
	if (!i2c_dev1) {
400808b9:	8acc      	bnez.n	a10, 400808c5 <main+0x25>
		printk("I2C: Device driver not found.\n");
400808bb:	ff2ea1        	l32r	a10, 40080574 <_iram_text_start+0x2c>
400808be:	005be5        	call8	40080e7c <printk>
		printk("Read 0x%X from address 0x01.\n", data[0]);
	}
    */
	
	
}
400808c1:	f01d      	retw.n
400808c3:	a10000        	sll	a0, a0
	printk("I2C LM75A - Pruebas.\n");
400808c6:	ff2c      	movi.n	a15, 47
	pointer = 0x03; //Tos register pointer - 5000h por defecto
400808c8:	340c      	movi.n	a4, 3
	printk("I2C LM75A - Pruebas.\n");
400808ca:	005b25        	call8	40080e7c <printk>
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400808cd:	8d4c      	movi.n	a13, 72
400808cf:	1c0c      	movi.n	a12, 1
400808d1:	10c1b2        	addi	a11, a1, 16
400808d4:	02ad      	mov.n	a10, a2
	pointer = 0x03; //Tos register pointer - 5000h por defecto
400808d6:	104142        	s8i	a4, a1, 16
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400808d9:	02aee5        	call8	400833c8 <i2c_write>
	k_msleep(5);
400808dc:	5a0c      	movi.n	a10, 5
400808de:	fffaa5        	call8	40080888 <k_msleep>
	ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
400808e1:	8d4c      	movi.n	a13, 72
400808e3:	2c0c      	movi.n	a12, 2
400808e5:	01bd      	mov.n	a11, a1
400808e7:	02ad      	mov.n	a10, a2
400808e9:	02abe5        	call8	400833a8 <i2c_read>
	k_msleep(5);
400808ec:	5a0c      	movi.n	a10, 5
400808ee:	fff9a5        	call8	40080888 <k_msleep>
	printk("----->> SetPoint - Tos Register: %x|%x\n\n", data[0], data[1]);
400808f1:	ff2261        	l32r	a6, 4008057c <_iram_text_start+0x34>
400808f4:	0101c2        	l8ui	a12, a1, 1
400808f7:	0001b2        	l8ui	a11, a1, 0
400808fa:	06ad      	mov.n	a10, a6
400808fc:	0057e5        	call8	40080e7c <printk>
	pointer = 0x02; //Thyst register pointer - 4B00h por defecto
400808ff:	280c      	movi.n	a8, 2
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
40080901:	8d4c      	movi.n	a13, 72
40080903:	1c0c      	movi.n	a12, 1
40080905:	10c1b2        	addi	a11, a1, 16
40080908:	02ad      	mov.n	a10, a2
	pointer = 0x02; //Thyst register pointer - 4B00h por defecto
4008090a:	104182        	s8i	a8, a1, 16
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
4008090d:	02aba5        	call8	400833c8 <i2c_write>
	k_msleep(5);
40080910:	5a0c      	movi.n	a10, 5
40080912:	fff765        	call8	40080888 <k_msleep>
	ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
40080915:	8d4c      	movi.n	a13, 72
40080917:	2c0c      	movi.n	a12, 2
40080919:	01bd      	mov.n	a11, a1
4008091b:	02ad      	mov.n	a10, a2
4008091d:	02a8a5        	call8	400833a8 <i2c_read>
	k_msleep(5);
40080920:	5a0c      	movi.n	a10, 5
40080922:	fff665        	call8	40080888 <k_msleep>
	printk("----->> Hysteresis - Thyst Register: %x|%x\n\n", data[0], data[1]);
40080925:	0101c2        	l8ui	a12, a1, 1
40080928:	0001b2        	l8ui	a11, a1, 0
4008092b:	ff15a1        	l32r	a10, 40080580 <_iram_text_start+0x38>
4008092e:	0054e5        	call8	40080e7c <printk>
	pointer = 0x01; //Configuration register pointer - 00h por defecto
40080931:	180c      	movi.n	a8, 1
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
40080933:	8d4c      	movi.n	a13, 72
40080935:	1c0c      	movi.n	a12, 1
40080937:	10c1b2        	addi	a11, a1, 16
4008093a:	02ad      	mov.n	a10, a2
	pointer = 0x01; //Configuration register pointer - 00h por defecto
4008093c:	104182        	s8i	a8, a1, 16
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
4008093f:	02a8a5        	call8	400833c8 <i2c_write>
	k_msleep(5);
40080942:	5a0c      	movi.n	a10, 5
40080944:	fff425        	call8	40080888 <k_msleep>
	ret = i2c_read(i2c_dev, &data[0], 1, LM75A_DEFAULT_ADDRESS);
40080947:	8d4c      	movi.n	a13, 72
40080949:	1c0c      	movi.n	a12, 1
4008094b:	01bd      	mov.n	a11, a1
4008094d:	02ad      	mov.n	a10, a2
4008094f:	02a5a5        	call8	400833a8 <i2c_read>
	k_msleep(5);
40080952:	5a0c      	movi.n	a10, 5
40080954:	fff325        	call8	40080888 <k_msleep>
	printk("----->>  Configuration - Register %x|%x\n\n", data[0], data[1]);
40080957:	0101c2        	l8ui	a12, a1, 1
4008095a:	0001b2        	l8ui	a11, a1, 0
4008095d:	ff09a1        	l32r	a10, 40080584 <_iram_text_start+0x3c>
40080960:	0051a5        	call8	40080e7c <printk>
	printk("----->>  Writing - Tos Register %x|%x\n", data[0], data[1]);
40080963:	0101c2        	l8ui	a12, a1, 1
40080966:	0001b2        	l8ui	a11, a1, 0
40080969:	ff07a1        	l32r	a10, 40080588 <_iram_text_start+0x40>
4008096c:	0050e5        	call8	40080e7c <printk>
	i2c_write(i2c_dev, &data[0], 3, LM75A_DEFAULT_ADDRESS);
4008096f:	8d4c      	movi.n	a13, 72
40080971:	3c0c      	movi.n	a12, 3
40080973:	01bd      	mov.n	a11, a1
40080975:	02ad      	mov.n	a10, a2
	data[1] = temp >> 8;//MSByte
40080977:	014132        	s8i	a3, a1, 1
	data[2] = (uint16_t)temp & 0x0F;//LSByte
4008097a:	024132        	s8i	a3, a1, 2
	pointer = 0x03;
4008097d:	104142        	s8i	a4, a1, 16
	data[0] = pointer;
40080980:	004142        	s8i	a4, a1, 0
	i2c_write(i2c_dev, &data[0], 3, LM75A_DEFAULT_ADDRESS);
40080983:	02a465        	call8	400833c8 <i2c_write>
	printk("----->>  Tos Register wrote temp: <%x>, MSByte <%x>, LSByte <%x>\n\n", temp, data[1], data[2]);
40080986:	0201d2        	l8ui	a13, a1, 2
40080989:	0101c2        	l8ui	a12, a1, 1
4008098c:	ff00a1        	l32r	a10, 4008058c <_iram_text_start+0x44>
4008098f:	0b3c      	movi.n	a11, 48
40080991:	004ea5        	call8	40080e7c <printk>
	k_msleep(5);
40080994:	5a0c      	movi.n	a10, 5
40080996:	ffef25        	call8	40080888 <k_msleep>
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
40080999:	8d4c      	movi.n	a13, 72
4008099b:	1c0c      	movi.n	a12, 1
4008099d:	10c1b2        	addi	a11, a1, 16
400809a0:	02ad      	mov.n	a10, a2
	pointer = 0x03; //Tos register pointer - 5000h por defecto
400809a2:	104142        	s8i	a4, a1, 16
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400809a5:	02a225        	call8	400833c8 <i2c_write>
	k_msleep(5);
400809a8:	5a0c      	movi.n	a10, 5
400809aa:	ffede5        	call8	40080888 <k_msleep>
	ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
400809ad:	8d4c      	movi.n	a13, 72
400809af:	2c0c      	movi.n	a12, 2
400809b1:	01bd      	mov.n	a11, a1
400809b3:	02ad      	mov.n	a10, a2
400809b5:	029f25        	call8	400833a8 <i2c_read>
	k_msleep(5);
400809b8:	5a0c      	movi.n	a10, 5
400809ba:	ffece5        	call8	40080888 <k_msleep>
	printk("----->> SetPoint - Tos Register: %x|%x\n\n", data[0], data[1]);
400809bd:	0101c2        	l8ui	a12, a1, 1
400809c0:	0001b2        	l8ui	a11, a1, 0
400809c3:	06ad      	mov.n	a10, a6
400809c5:	004b65        	call8	40080e7c <printk>
    i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400809c8:	8d4c      	movi.n	a13, 72
400809ca:	1c0c      	movi.n	a12, 1
400809cc:	10c1b2        	addi	a11, a1, 16
400809cf:	02ad      	mov.n	a10, a2
	pointer = 0x00; // Temp register pointer
400809d1:	104132        	s8i	a3, a1, 16
    i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400809d4:	029f25        	call8	400833c8 <i2c_write>
    printk("----->> ---------------- <<-----------\n");
400809d7:	feeea1        	l32r	a10, 40080590 <_iram_text_start+0x48>
	pointer = 0xF7; //Tos register pointer - 5000h por defecto
400809da:	737c      	movi.n	a3, -9
    printk("----->> ---------------- <<-----------\n");
400809dc:	0049e5        	call8	40080e7c <printk>
    printk("----->>   *** BMP280 *** <<-----------\n\n");
400809df:	feeda1        	l32r	a10, 40080594 <_iram_text_start+0x4c>
400809e2:	0049a5        	call8	40080e7c <printk>
	i2c_write(i2c_dev1, &pointer, 1, BMP280_DEFAULT_ADDRESS);
400809e5:	76a0d2        	movi	a13, 118
400809e8:	1c0c      	movi.n	a12, 1
400809ea:	10c1b2        	addi	a11, a1, 16
400809ed:	05ad      	mov.n	a10, a5
	pointer = 0xF7; //Tos register pointer - 5000h por defecto
400809ef:	104132        	s8i	a3, a1, 16
	i2c_write(i2c_dev1, &pointer, 1, BMP280_DEFAULT_ADDRESS);
400809f2:	029d65        	call8	400833c8 <i2c_write>
	k_msleep(5);
400809f5:	5a0c      	movi.n	a10, 5
400809f7:	ffe925        	call8	40080888 <k_msleep>
	ret = i2c_read(i2c_dev1, &data[0], 4, BMP280_DEFAULT_ADDRESS);
400809fa:	4c0c      	movi.n	a12, 4
400809fc:	01bd      	mov.n	a11, a1
400809fe:	76a0d2        	movi	a13, 118
40080a01:	05ad      	mov.n	a10, a5
40080a03:	029a65        	call8	400833a8 <i2c_read>
	k_msleep(5);
40080a06:	5a0c      	movi.n	a10, 5
40080a08:	ffe7e5        	call8	40080888 <k_msleep>
	printk("----->> presion %x temp %x\n\n", data[0], data[3]); // data[0] = 0xF7 reg info -  data[3] = 0xFA red info.
40080a0b:	0301c2        	l8ui	a12, a1, 3
40080a0e:	0001b2        	l8ui	a11, a1, 0
40080a11:	fee1a1        	l32r	a10, 40080598 <_iram_text_start+0x50>
40080a14:	004665        	call8	40080e7c <printk>
        ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
40080a17:	8d4c      	movi.n	a13, 72
40080a19:	2c0c      	movi.n	a12, 2
40080a1b:	20b110        	or	a11, a1, a1
40080a1e:	20a220        	or	a10, a2, a2
40080a21:	029865        	call8	400833a8 <i2c_read>
        if(~ret) {
40080a24:	050a26        	beqi	a10, -1, 40080a2d <main+0x18d>
            printk("Succesful read\n");
40080a27:	fedda1        	l32r	a10, 4008059c <_iram_text_start+0x54>
40080a2a:	000086        	j	40080a30 <main+0x190>
            printk("Error read\n");
40080a2d:	fedca1        	l32r	a10, 400805a0 <_iram_text_start+0x58>
40080a30:	0044a5        	call8	40080e7c <printk>
        printk("data[0]: %X data[1] %X \n", data[0], data[1]);
40080a33:	0101c2        	l8ui	a12, a1, 1
40080a36:	0001b2        	l8ui	a11, a1, 0
40080a39:	fedaa1        	l32r	a10, 400805a4 <_iram_text_start+0x5c>
        temp = data[0] << 8 | (data[1] & 0x80 );
40080a3c:	80a042        	movi	a4, 128
        printk("data[0]: %X data[1] %X \n", data[0], data[1]);
40080a3f:	0043e5        	call8	40080e7c <printk>
        temp = data[0] << 8 | (data[1] & 0x80 );
40080a42:	000182        	l8ui	a8, a1, 0
        printk("Temperatura en Celsius: %d\n", temp); //float not supported by printk
40080a45:	fed9a1        	l32r	a10, 400805ac <_iram_text_start+0x64>
        temp = data[0] << 8 | (data[1] & 0x80 );
40080a48:	113880        	slli	a3, a8, 8
40080a4b:	010182        	l8ui	a8, a1, 1
40080a4e:	108840        	and	a8, a8, a4
40080a51:	208830        	or	a8, a8, a3
        temp = temp * LM75A_DEGREES_RESOLUTION;
40080a54:	418580        	srli	a8, a8, 5
40080a57:	fed431        	l32r	a3, 400805a8 <_iram_text_start+0x60>
40080a5a:	ca0800        	float.s	f0, a8, 0
40080a5d:	fa1350        	wfr	f1, a3
40080a60:	2a0010        	mul.s	f0, f0, f1
40080a63:	eab000        	utrunc.s	a11, f0, 0
        printk("Temperatura en Celsius: %d\n", temp); //float not supported by printk
40080a66:	f4b0b0        	extui	a11, a11, 0, 16
40080a69:	004125        	call8	40080e7c <printk>
        k_msleep(2500);
40080a6c:	fed1a1        	l32r	a10, 400805b0 <_iram_text_start+0x68>
40080a6f:	ffe1a5        	call8	40080888 <k_msleep>
        ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
40080a72:	ffe846        	j	40080a17 <main+0x177>
40080a75:	000000        	ill

40080a78 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
40080a78:	00a136        	entry	a1, 80
40080a7b:	049d      	mov.n	a9, a4
40080a7d:	744070        	extui	a4, a7, 0, 8
40080a80:	058d      	mov.n	a8, a5
40080a82:	8149      	s32i.n	a4, a1, 32
40080a84:	500142        	l8ui	a4, a1, 80
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
40080a87:	471c      	movi.n	a7, 20
		buf[i] = "0123456789abcdef"[num % base];
40080a89:	315f60        	srai	a5, a6, 31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
40080a8c:	000e86        	j	40080aca <print_digits+0x52>
40080a8f:	000000        	ill
		buf[i] = "0123456789abcdef"[num % base];
40080a92:	80f170        	add	a15, a1, a7
40080a95:	20c660        	or	a12, a6, a6
40080a98:	05dd      	mov.n	a13, a5
40080a9a:	09ad      	mov.n	a10, a9
40080a9c:	08bd      	mov.n	a11, a8
40080a9e:	b189      	s32i.n	a8, a1, 44
40080aa0:	a199      	s32i.n	a9, a1, 40
40080aa2:	0961f2        	s32i	a15, a1, 36
40080aa5:	02e7a5        	call8	40083920 <__umoddi3>
40080aa8:	fec3b1        	l32r	a11, 400805b4 <_iram_text_start+0x6c>
40080aab:	91f8      	l32i.n	a15, a1, 36
40080aad:	abaa      	add.n	a10, a11, a10
40080aaf:	000aa2        	l8ui	a10, a10, 0
		num /= base;
40080ab2:	06cd      	mov.n	a12, a6
		buf[i] = "0123456789abcdef"[num % base];
40080ab4:	004fa2        	s8i	a10, a15, 0
		num /= base;
40080ab7:	a198      	l32i.n	a9, a1, 40
40080ab9:	b188      	l32i.n	a8, a1, 44
40080abb:	09ad      	mov.n	a10, a9
40080abd:	08bd      	mov.n	a11, a8
40080abf:	05dd      	mov.n	a13, a5
40080ac1:	02bee5        	call8	400836b0 <__udivdi3>
40080ac4:	0a9d      	mov.n	a9, a10
40080ac6:	0b8d      	mov.n	a8, a11
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
40080ac8:	770b      	addi.n	a7, a7, -1
40080aca:	20a980        	or	a10, a9, a8
40080acd:	fc1a56        	bnez	a10, 40080a92 <print_digits+0x1a>
	}

	if (i == DIGITS_BUFLEN - 1) {
40080ad0:	451c      	movi.n	a5, 20
40080ad2:	079757        	bne	a7, a5, 40080add <print_digits+0x65>
		buf[i] = '0';
40080ad5:	053c      	movi.n	a5, 48
40080ad7:	144152        	s8i	a5, a1, 20
40080ada:	000046        	j	40080adf <print_digits+0x67>
	} else {
		i++;
40080add:	771b      	addi.n	a7, a7, 1
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
40080adf:	152182        	l32i	a8, a1, 84
40080ae2:	591c      	movi.n	a9, 21
40080ae4:	878a      	add.n	a8, a7, a8
40080ae6:	050c      	movi.n	a5, 0
40080ae8:	1c1897        	beq	a8, a9, 40080b08 <print_digits+0x90>
40080aeb:	ebc852        	addi	a5, a8, -21
40080aee:	000206        	j	40080afa <print_digits+0x82>

	for (/**/; pad > 0 && pad_before; pad--) {
		out(pad_char, ctx);
40080af1:	03bd      	mov.n	a11, a3
40080af3:	04ad      	mov.n	a10, a4
40080af5:	0002e0        	callx8	a2
	for (/**/; pad > 0 && pad_before; pad--) {
40080af8:	550b      	addi.n	a5, a5, -1
40080afa:	318f50        	srai	a8, a5, 31
40080afd:	c08850        	sub	a8, a8, a5
40080b00:	0048d6        	bgez	a8, 40080b08 <print_digits+0x90>
40080b03:	8168      	l32i.n	a6, a1, 32
40080b05:	fe8656        	bnez	a6, 40080af1 <print_digits+0x79>
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
40080b08:	561c      	movi.n	a6, 21
		out(buf[i], ctx);
40080b0a:	817a      	add.n	a8, a1, a7
40080b0c:	0008a2        	l8ui	a10, a8, 0
40080b0f:	20b330        	or	a11, a3, a3
	for (/**/; i < DIGITS_BUFLEN; i++) {
40080b12:	01c772        	addi	a7, a7, 1
		out(buf[i], ctx);
40080b15:	0002e0        	callx8	a2
	for (/**/; i < DIGITS_BUFLEN; i++) {
40080b18:	ee9767        	bne	a7, a6, 40080b0a <print_digits+0x92>
40080b1b:	000206        	j	40080b27 <print_digits+0xaf>
	}
	for (/**/; pad > 0; pad--) {
		out(pad_char, ctx);
40080b1e:	03bd      	mov.n	a11, a3
40080b20:	04ad      	mov.n	a10, a4
40080b22:	0002e0        	callx8	a2
	for (/**/; pad > 0; pad--) {
40080b25:	550b      	addi.n	a5, a5, -1
40080b27:	f315e6        	bgei	a5, 1, 40080b1e <print_digits+0xa6>
	}
}
40080b2a:	f01d      	retw.n

40080b2c <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
40080b2c:	004136        	entry	a1, 32
	struct out_context *ctx = ctx_p;

	ctx->count++;
40080b2f:	0388      	l32i.n	a8, a3, 0
	return _char_out(c);
40080b31:	02ad      	mov.n	a10, a2
	ctx->count++;
40080b33:	881b      	addi.n	a8, a8, 1
40080b35:	0389      	s32i.n	a8, a3, 0
	return _char_out(c);
40080b37:	fea031        	l32r	a3, 400805b8 <_iram_text_start+0x70>
40080b3a:	002332        	l32i	a3, a3, 0
40080b3d:	0003e0        	callx8	a3
}
40080b40:	0a2d      	mov.n	a2, a10
40080b42:	f01d      	retw.n

40080b44 <__printk_hook_install>:
{
40080b44:	004136        	entry	a1, 32
	_char_out = fn;
40080b47:	fe9c81        	l32r	a8, 400805b8 <_iram_text_start+0x70>
40080b4a:	0829      	s32i.n	a2, a8, 0
}
40080b4c:	f01d      	retw.n
	...

40080b50 <z_vprintk>:
{
40080b50:	00a136        	entry	a1, 80
40080b53:	9149      	s32i.n	a4, a1, 36
	char length_mod = 0;
40080b55:	040c      	movi.n	a4, 0
{
40080b57:	4159      	s32i.n	a5, a1, 16
40080b59:	5169      	s32i.n	a6, a1, 20
40080b5b:	6179      	s32i.n	a7, a1, 24
40080b5d:	7159      	s32i.n	a5, a1, 28
40080b5f:	8169      	s32i.n	a6, a1, 32
40080b61:	076d      	mov.n	a6, a7
	int min_width = -1;
40080b63:	f57c      	movi.n	a5, -1
	enum pad_type padding = PAD_NONE;
40080b65:	047d      	mov.n	a7, a4
	int might_format = 0; /* 1 if encountered a '%' */
40080b67:	048d      	mov.n	a8, a4
	while (*fmt) {
40080b69:	00ba46        	j	40080e56 <z_vprintk+0x306>
		if (!might_format) {
40080b6c:	08dc      	bnez.n	a8, 40080b80 <z_vprintk+0x30>
			if (*fmt != '%') {
40080b6e:	592c      	movi.n	a9, 37
40080b70:	029a97        	bne	a10, a9, 40080b76 <z_vprintk+0x26>
40080b73:	00ad86        	j	40080e2d <z_vprintk+0x2dd>
				out((int)*fmt, ctx);
40080b76:	03bd      	mov.n	a11, a3
40080b78:	a189      	s32i.n	a8, a1, 40
40080b7a:	0002e0        	callx8	a2
40080b7d:	008046        	j	40080d82 <z_vprintk+0x232>
			switch (*fmt) {
40080b80:	64a092        	movi	a9, 100
40080b83:	029a97        	bne	a10, a9, 40080b89 <z_vprintk+0x39>
40080b86:	003186        	j	40080c50 <z_vprintk+0x100>
40080b89:	3739a7        	bltu	a9, a10, 40080bc4 <z_vprintk+0x74>
40080b8c:	993c      	movi.n	a9, 57
40080b8e:	1c39a7        	bltu	a9, a10, 40080bae <z_vprintk+0x5e>
40080b91:	193c      	movi.n	a9, 49
40080b93:	7bba97        	bgeu	a10, a9, 40080c12 <z_vprintk+0xc2>
40080b96:	d92c      	movi.n	a9, 45
40080b98:	029a97        	bne	a10, a9, 40080b9e <z_vprintk+0x4e>
40080b9b:	00a646        	j	40080e38 <z_vprintk+0x2e8>
40080b9e:	093c      	movi.n	a9, 48
40080ba0:	681a97        	beq	a10, a9, 40080c0c <z_vprintk+0xbc>
40080ba3:	582c      	movi.n	a8, 37
40080ba5:	021a87        	beq	a10, a8, 40080bab <z_vprintk+0x5b>
40080ba8:	009a86        	j	40080e16 <z_vprintk+0x2c6>
40080bab:	009886        	j	40080e11 <z_vprintk+0x2c1>
40080bae:	885c      	movi.n	a8, 88
40080bb0:	029a87        	bne	a10, a8, 40080bb6 <z_vprintk+0x66>
40080bb3:	005286        	j	40080d01 <z_vprintk+0x1b1>
40080bb6:	63a082        	movi	a8, 99
40080bb9:	029a87        	bne	a10, a8, 40080bbf <z_vprintk+0x6f>
40080bbc:	008b06        	j	40080dec <z_vprintk+0x29c>
40080bbf:	0094c6        	j	40080e16 <z_vprintk+0x2c6>
40080bc2:	920000        	lsi	f0, a0, 0x248
40080bc5:	9770a0        	lsi	f10, a0, 0x25c
40080bc8:	029a      	add.n	a0, a2, a9
40080bca:	004806        	j	40080cee <z_vprintk+0x19e>
40080bcd:	1339a7        	bltu	a9, a10, 40080be4 <z_vprintk+0x94>
40080bd0:	69a092        	movi	a9, 105
40080bd3:	791a97        	beq	a10, a9, 40080c50 <z_vprintk+0x100>
40080bd6:	6ca092        	movi	a9, 108
40080bd9:	541a97        	beq	a10, a9, 40080c31 <z_vprintk+0xe1>
40080bdc:	68a092        	movi	a9, 104
40080bdf:	000886        	j	40080c05 <z_vprintk+0xb5>
40080be2:	920000        	lsi	f0, a0, 0x248
40080be5:	9775a0        	lsi	f10, a5, 0x25c
40080be8:	651a      	add.n	a6, a5, a1
40080bea:	0b39a7        	bltu	a9, a10, 40080bf9 <z_vprintk+0xa9>
40080bed:	73a082        	movi	a8, 115
40080bf0:	029a87        	bne	a10, a8, 40080bf6 <z_vprintk+0xa6>
40080bf3:	006446        	j	40080d88 <z_vprintk+0x238>
40080bf6:	008706        	j	40080e16 <z_vprintk+0x2c6>
40080bf9:	78a092        	movi	a9, 120
40080bfc:	029a97        	bne	a10, a9, 40080c02 <z_vprintk+0xb2>
40080bff:	003f86        	j	40080d01 <z_vprintk+0x1b1>
40080c02:	7aa092        	movi	a9, 122
40080c05:	281a97        	beq	a10, a9, 40080c31 <z_vprintk+0xe1>
40080c08:	008286        	j	40080e16 <z_vprintk+0x2c6>
40080c0b:	25d600        	extui	a13, a0, 22, 3
				if (min_width < 0 && padding == PAD_NONE) {
40080c0e:	a71600        	lsi	f0, a6, 0x29c
40080c11:	65d622        	addmi	a2, a6, 0x6500
				if (min_width < 0) {
40080c14:	ca5200        	float.s	f5, a2, 0
					min_width = *fmt - '0';
40080c17:	0346d0        	lsi	f13, a6, 12
40080c1a:	e00000        	subx4	a0, a0, a0
					min_width = 10 * min_width + *fmt - '0';
40080c1d:	5a1195        	call4	400dad38 <_iram_text_end+0x571a6>
40080c20:	f059      	s32i.n	a5, a0, 60
40080c22:	521155        	call4	400d2d38 <_iram_text_end+0x4f1a6>
40080c25:	5ad0c5        	call0	400db934 <_iram_text_end+0x57da2>
40080c28:	565a      	add.n	a5, a6, a5
				if (padding == PAD_NONE) {
40080c2a:	0c2237        	blt	a2, a3, 40080c3a <z_vprintk+0xea>
					padding = PAD_SPACE_BEFORE;
40080c2d:	878627        	bany	a6, a2, 40080bb8 <z_vprintk+0x68>
40080c30:	a09200        	addx4	a9, a2, a0
				if (*fmt == 'h' && length_mod == 'h') {
40080c33:	9768      	l32i.n	a6, a7, 36
40080c35:	059a      	add.n	a0, a5, a9
40080c37:	0d94a7        	bne	a4, a10, 40080c48 <z_vprintk+0xf8>
40080c3a:	008146        	j	40080e43 <z_vprintk+0x2f3>
				} else if (*fmt == 'l' && length_mod == 'l') {
40080c3d:	94c492        	addi	a9, a4, -108
40080c40:	49cc      	bnez.n	a9, 40080c48 <z_vprintk+0xf8>
40080c42:	94ca92        	addi	a9, a10, -108
40080c45:	1ff916        	beqz	a9, 40080e48 <z_vprintk+0x2f8>
				} else if (length_mod == 0) {
40080c48:	202416        	beqz	a4, 40080e4e <z_vprintk+0x2fe>
					out((int)'%', ctx);
40080c4b:	0071c6        	j	40080e16 <z_vprintk+0x2c6>
40080c4e:	920000        	lsi	f0, a0, 0x248
				if (length_mod == 'z') {
40080c51:	1c7aa0        	lsi	f10, a10, 112
40080c54:	9788      	l32i.n	a8, a7, 36
40080c56:	060394        	lsi	f9, a3, 24
					d = va_arg(ap, ssize_t);
40080c59:	000c      	movi.n	a0, 0
40080c5b:	a09200        	addx4	a9, a2, a0
				} else if (length_mod == 'l') {
40080c5e:	976c      	movi.n	a7, -23
40080c60:	860294        	lsi	f9, a2, 0x218
					d = va_arg(ap, long);
40080c63:	0009      	s32i.n	a0, a0, 0
				} else if (length_mod == 'L') {
40080c65:	c94c      	movi.n	a9, 76
40080c67:	219497        	bne	a4, a9, 40080c8c <z_vprintk+0x13c>
					long long lld = va_arg(ap, long long);
40080c6a:	897c      	movi.n	a9, -8
40080c6c:	c67b      	addi.n	a12, a6, 7
40080c6e:	10cc90        	and	a12, a12, a9
40080c71:	9c8b      	addi.n	a9, a12, 8
40080c73:	81b8      	l32i.n	a11, a1, 32
40080c75:	07a897        	bge	a8, a9, 40080c80 <z_vprintk+0x130>
40080c78:	0228c7        	blt	a8, a12, 40080c7e <z_vprintk+0x12e>
40080c7b:	28a092        	movi	a9, 40
40080c7e:	71b8      	l32i.n	a11, a1, 28
40080c80:	8b9a      	add.n	a8, a11, a9
40080c82:	f8c882        	addi	a8, a8, -8
					d = (printk_val_t) lld;
40080c85:	08c8      	l32i.n	a12, a8, 0
40080c87:	1868      	l32i.n	a6, a8, 4
40080c89:	0005c6        	j	40080ca4 <z_vprintk+0x154>
					d = va_arg(ap, int);
40080c8c:	964b      	addi.n	a9, a6, 4
40080c8e:	81b8      	l32i.n	a11, a1, 32
40080c90:	06a897        	bge	a8, a9, 40080c9a <z_vprintk+0x14a>
40080c93:	012867        	blt	a8, a6, 40080c98 <z_vprintk+0x148>
40080c96:	492c      	movi.n	a9, 36
40080c98:	71b8      	l32i.n	a11, a1, 28
40080c9a:	bb9a      	add.n	a11, a11, a9
40080c9c:	fccbb2        	addi	a11, a11, -4
40080c9f:	0bc8      	l32i.n	a12, a11, 0
40080ca1:	316fc0        	srai	a6, a12, 31
				if (*fmt != 'u' && negative(d)) {
40080ca4:	75a082        	movi	a8, 117
40080ca7:	251a87        	beq	a10, a8, 40080cd0 <z_vprintk+0x180>
40080caa:	0226d6        	bgez	a6, 40080cd0 <z_vprintk+0x180>
					out((int)'-', ctx);
40080cad:	03bd      	mov.n	a11, a3
40080caf:	da2c      	movi.n	a10, 45
40080cb1:	0b6192        	s32i	a9, a1, 44
40080cb4:	0a61c2        	s32i	a12, a1, 40
40080cb7:	0002e0        	callx8	a2
					d = -d;
40080cba:	a1c8      	l32i.n	a12, a1, 40
40080cbc:	180c      	movi.n	a8, 1
40080cbe:	60c0c0        	neg	a12, a12
40080cc1:	0a0c      	movi.n	a10, 0
40080cc3:	838ac0        	moveqz	a8, a10, a12
40080cc6:	60d060        	neg	a13, a6
					min_width--;
40080cc9:	b198      	l32i.n	a9, a1, 44
					d = -d;
40080ccb:	c06d80        	sub	a6, a13, a8
					min_width--;
40080cce:	550b      	addi.n	a5, a5, -1
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
40080cd0:	fdc7a2        	addi	a10, a7, -3
40080cd3:	080c      	movi.n	a8, 0
40080cd5:	1f0c      	movi.n	a15, 1
40080cd7:	0e3c      	movi.n	a14, 48
40080cd9:	83f8a0        	moveqz	a15, a8, a10
40080cdc:	0b2c      	movi.n	a11, 32
40080cde:	a70b      	addi.n	a10, a7, -1
40080ce0:	83bea0        	moveqz	a11, a14, a10
40080ce3:	1159      	s32i.n	a5, a1, 4
40080ce5:	01b9      	s32i.n	a11, a1, 0
40080ce7:	ae0c      	movi.n	a14, 10
40080ce9:	06dd      	mov.n	a13, a6
40080ceb:	002106        	j	40080d73 <z_vprintk+0x223>
				out('0', ctx);
40080cee:	03bd      	mov.n	a11, a3
40080cf0:	0a3c      	movi.n	a10, 48
40080cf2:	0002e0        	callx8	a2
				out('x', ctx);
40080cf5:	03bd      	mov.n	a11, a3
40080cf7:	78a0a2        	movi	a10, 120
40080cfa:	0002e0        	callx8	a2
				min_width = sizeof(void *) * 2;
40080cfd:	850c      	movi.n	a5, 8
				padding = PAD_ZERO_BEFORE;
40080cff:	170c      	movi.n	a7, 1
				if (*fmt == 'p') {
40080d01:	9198      	l32i.n	a9, a1, 36
40080d03:	881c      	movi.n	a8, 24
40080d05:	0009a2        	l8ui	a10, a9, 0
40080d08:	70a092        	movi	a9, 112
40080d0b:	029a97        	bne	a10, a9, 40080d11 <z_vprintk+0x1c1>
					x = (uintptr_t)va_arg(ap, void *);
40080d0e:	000b86        	j	40080d40 <z_vprintk+0x1f0>
				} else if (length_mod == 'l') {
40080d11:	6ca092        	movi	a9, 108
40080d14:	029497        	bne	a4, a9, 40080d1a <z_vprintk+0x1ca>
					x = va_arg(ap, unsigned long);
40080d17:	000946        	j	40080d40 <z_vprintk+0x1f0>
				} else if (length_mod == 'L') {
40080d1a:	c94c      	movi.n	a9, 76
40080d1c:	209497        	bne	a4, a9, 40080d40 <z_vprintk+0x1f0>
					x = va_arg(ap, unsigned long long);
40080d1f:	897c      	movi.n	a9, -8
40080d21:	c67b      	addi.n	a12, a6, 7
40080d23:	10cc90        	and	a12, a12, a9
40080d26:	9c8b      	addi.n	a9, a12, 8
40080d28:	81a8      	l32i.n	a10, a1, 32
40080d2a:	06a897        	bge	a8, a9, 40080d34 <z_vprintk+0x1e4>
40080d2d:	0128c7        	blt	a8, a12, 40080d32 <z_vprintk+0x1e2>
40080d30:	892c      	movi.n	a9, 40
40080d32:	71a8      	l32i.n	a10, a1, 28
40080d34:	8a9a      	add.n	a8, a10, a9
40080d36:	f8c882        	addi	a8, a8, -8
40080d39:	08c8      	l32i.n	a12, a8, 0
40080d3b:	18d8      	l32i.n	a13, a8, 4
40080d3d:	000646        	j	40080d5a <z_vprintk+0x20a>
					x = va_arg(ap, unsigned int);
40080d40:	964b      	addi.n	a9, a6, 4
40080d42:	81a8      	l32i.n	a10, a1, 32
40080d44:	06a897        	bge	a8, a9, 40080d4e <z_vprintk+0x1fe>
40080d47:	012867        	blt	a8, a6, 40080d4c <z_vprintk+0x1fc>
40080d4a:	492c      	movi.n	a9, 36
40080d4c:	71a8      	l32i.n	a10, a1, 28
40080d4e:	80aa90        	add	a10, a10, a9
40080d51:	fccaa2        	addi	a10, a10, -4
40080d54:	002ac2        	l32i	a12, a10, 0
40080d57:	00a0d2        	movi	a13, 0
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
40080d5a:	fdc7a2        	addi	a10, a7, -3
40080d5d:	080c      	movi.n	a8, 0
40080d5f:	1f0c      	movi.n	a15, 1
40080d61:	0e3c      	movi.n	a14, 48
40080d63:	83f8a0        	moveqz	a15, a8, a10
40080d66:	0b2c      	movi.n	a11, 32
40080d68:	a70b      	addi.n	a10, a7, -1
40080d6a:	83bea0        	moveqz	a11, a14, a10
40080d6d:	1159      	s32i.n	a5, a1, 4
40080d6f:	01b9      	s32i.n	a11, a1, 0
40080d71:	0e1c      	movi.n	a14, 16
40080d73:	03bd      	mov.n	a11, a3
40080d75:	02ad      	mov.n	a10, a2
40080d77:	b199      	s32i.n	a9, a1, 44
40080d79:	a189      	s32i.n	a8, a1, 40
40080d7b:	ffcfe5        	call8	40080a78 <print_digits>
40080d7e:	b198      	l32i.n	a9, a1, 44
40080d80:	096d      	mov.n	a6, a9
			might_format = 0;
40080d82:	a188      	l32i.n	a8, a1, 40
40080d84:	003206        	j	40080e50 <z_vprintk+0x300>
40080d87:	964b00        	lsi	f0, a11, 0x258
				char *s = va_arg(ap, char *);
40080d8a:	881c      	movi.n	a8, 24
40080d8c:	0ca897        	bge	a8, a9, 40080d9c <z_vprintk+0x24c>
40080d8f:	012867        	blt	a8, a6, 40080d94 <z_vprintk+0x244>
40080d92:	492c      	movi.n	a9, 36
40080d94:	096d      	mov.n	a6, a9
40080d96:	7188      	l32i.n	a8, a1, 28
40080d98:	000106        	j	40080da0 <z_vprintk+0x250>
40080d9b:	818800        	src	a8, a8, a0
40080d9e:	096d      	mov.n	a6, a9
40080da0:	889a      	add.n	a8, a8, a9
40080da2:	fcc882        	addi	a8, a8, -4
40080da5:	08d8      	l32i.n	a13, a8, 0
40080da7:	0d9d      	mov.n	a9, a13
				while (*s) {
40080da9:	0003c6        	j	40080dbc <z_vprintk+0x26c>
					out((int)(*s++), ctx);
40080dac:	991b      	addi.n	a9, a9, 1
40080dae:	03bd      	mov.n	a11, a3
40080db0:	b199      	s32i.n	a9, a1, 44
40080db2:	0a61d2        	s32i	a13, a1, 40
40080db5:	0002e0        	callx8	a2
40080db8:	a1d8      	l32i.n	a13, a1, 40
40080dba:	b198      	l32i.n	a9, a1, 44
				while (*s) {
40080dbc:	0009a2        	l8ui	a10, a9, 0
40080dbf:	fe9a56        	bnez	a10, 40080dac <z_vprintk+0x25c>
			might_format = 0;
40080dc2:	0a8d      	mov.n	a8, a10
				if (padding == PAD_SPACE_AFTER) {
40080dc4:	023726        	beqi	a7, 3, 40080dca <z_vprintk+0x27a>
40080dc7:	002146        	j	40080e50 <z_vprintk+0x300>
					int remaining = min_width - (s - start);
40080dca:	c099d0        	sub	a9, a9, a13
40080dcd:	c09590        	sub	a9, a5, a9
						out(' ', ctx);
40080dd0:	082c      	movi.n	a8, 32
					while (remaining-- > 0) {
40080dd2:	000406        	j	40080de6 <z_vprintk+0x296>
						out(' ', ctx);
40080dd5:	08ad      	mov.n	a10, a8
40080dd7:	03bd      	mov.n	a11, a3
40080dd9:	a189      	s32i.n	a8, a1, 40
40080ddb:	b199      	s32i.n	a9, a1, 44
40080ddd:	0002e0        	callx8	a2
40080de0:	b198      	l32i.n	a9, a1, 44
40080de2:	a188      	l32i.n	a8, a1, 40
40080de4:	990b      	addi.n	a9, a9, -1
					while (remaining-- > 0) {
40080de6:	eb19e6        	bgei	a9, 1, 40080dd5 <z_vprintk+0x285>
40080de9:	000ec6        	j	40080e28 <z_vprintk+0x2d8>
				int c = va_arg(ap, int);
40080dec:	964b      	addi.n	a9, a6, 4
40080dee:	8a1c      	movi.n	a10, 24
40080df0:	8188      	l32i.n	a8, a1, 32
40080df2:	06aa97        	bge	a10, a9, 40080dfc <z_vprintk+0x2ac>
40080df5:	012a67        	blt	a10, a6, 40080dfa <z_vprintk+0x2aa>
40080df8:	492c      	movi.n	a9, 36
40080dfa:	7188      	l32i.n	a8, a1, 28
40080dfc:	889a      	add.n	a8, a8, a9
40080dfe:	fcc882        	addi	a8, a8, -4
				out(c, ctx);
40080e01:	08a8      	l32i.n	a10, a8, 0
40080e03:	03bd      	mov.n	a11, a3
40080e05:	b199      	s32i.n	a9, a1, 44
40080e07:	0002e0        	callx8	a2
				break;
40080e0a:	b198      	l32i.n	a9, a1, 44
40080e0c:	096d      	mov.n	a6, a9
40080e0e:	000586        	j	40080e28 <z_vprintk+0x2d8>
				out((int)'%', ctx);
40080e11:	03bd      	mov.n	a11, a3
40080e13:	000386        	j	40080e25 <z_vprintk+0x2d5>
				out((int)'%', ctx);
40080e16:	03bd      	mov.n	a11, a3
40080e18:	25a0a2        	movi	a10, 37
40080e1b:	0002e0        	callx8	a2
				out((int)*fmt, ctx);
40080e1e:	9188      	l32i.n	a8, a1, 36
40080e20:	03bd      	mov.n	a11, a3
40080e22:	0008a2        	l8ui	a10, a8, 0
40080e25:	0002e0        	callx8	a2
			might_format = 0;
40080e28:	080c      	movi.n	a8, 0
				break;
40080e2a:	000886        	j	40080e50 <z_vprintk+0x300>
				length_mod = 0;
40080e2d:	084d      	mov.n	a4, a8
				padding = PAD_NONE;
40080e2f:	087d      	mov.n	a7, a8
				min_width = -1;
40080e31:	f57c      	movi.n	a5, -1
				might_format = 1;
40080e33:	180c      	movi.n	a8, 1
40080e35:	0005c6        	j	40080e50 <z_vprintk+0x300>
				padding = PAD_SPACE_AFTER;
40080e38:	370c      	movi.n	a7, 3
40080e3a:	000486        	j	40080e50 <z_vprintk+0x300>
					padding = PAD_ZERO_BEFORE;
40080e3d:	170c      	movi.n	a7, 1
40080e3f:	000346        	j	40080e50 <z_vprintk+0x300>
40080e42:	844c00        	extui	a4, a0, 12, 9
					length_mod = 'H';
40080e45:	0001c6        	j	40080e50 <z_vprintk+0x300>
					length_mod = 'L';
40080e48:	c44c      	movi.n	a4, 76
40080e4a:	000086        	j	40080e50 <z_vprintk+0x300>
40080e4d:	0a4d00        	add.s	f4, f13, f0
		++fmt;
40080e50:	9198      	l32i.n	a9, a1, 36
40080e52:	991b      	addi.n	a9, a9, 1
40080e54:	9199      	s32i.n	a9, a1, 36
	while (*fmt) {
40080e56:	9198      	l32i.n	a9, a1, 36
40080e58:	0009a2        	l8ui	a10, a9, 0
40080e5b:	d0da56        	bnez	a10, 40080b6c <z_vprintk+0x1c>
}
40080e5e:	f01d      	retw.n

40080e60 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
40080e60:	008136        	entry	a1, 64
	struct out_context ctx = { 0 };
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
40080e63:	fdd6a1        	l32r	a10, 400805bc <_iram_text_start+0x74>
	struct out_context ctx = { 0 };
40080e66:	00a082        	movi	a8, 0
	z_vprintk(char_out, &ctx, fmt, ap);
40080e69:	20d330        	or	a13, a3, a3
40080e6c:	20e440        	or	a14, a4, a4
40080e6f:	05fd      	mov.n	a15, a5
40080e71:	02cd      	mov.n	a12, a2
40080e73:	01bd      	mov.n	a11, a1
	struct out_context ctx = { 0 };
40080e75:	0189      	s32i.n	a8, a1, 0
	z_vprintk(char_out, &ctx, fmt, ap);
40080e77:	ffcda5        	call8	40080b50 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
40080e7a:	f01d      	retw.n

40080e7c <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
40080e7c:	00a136        	entry	a1, 80
	va_list ap;

	va_start(ap, fmt);
40080e7f:	10c1c2        	addi	a12, a1, 16
40080e82:	30c1b2        	addi	a11, a1, 48
40080e85:	4d0c      	movi.n	a13, 4

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
40080e87:	02ad      	mov.n	a10, a2
	va_start(ap, fmt);
40080e89:	5139      	s32i.n	a3, a1, 20
40080e8b:	6149      	s32i.n	a4, a1, 24
40080e8d:	7159      	s32i.n	a5, a1, 28
40080e8f:	8169      	s32i.n	a6, a1, 32
40080e91:	9179      	s32i.n	a7, a1, 36
40080e93:	11c9      	s32i.n	a12, a1, 4
40080e95:	01b9      	s32i.n	a11, a1, 0
40080e97:	21d9      	s32i.n	a13, a1, 8
		vprintk(fmt, ap);
40080e99:	fffc65        	call8	40080e60 <vprintk>
	}
	va_end(ap);
}
40080e9c:	f01d      	retw.n
	...

40080ea0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
40080ea0:	004136        	entry	a1, 32
	entry(p1, p2, p3);
40080ea3:	20c550        	or	a12, a5, a5
40080ea6:	20b440        	or	a11, a4, a4
40080ea9:	03ad      	mov.n	a10, a3
40080eab:	0002e0        	callx8	a2
	if (z_syscall_trap()) {
		return (k_tid_t) arch_syscall_invoke0(K_SYSCALL_K_CURRENT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_current_get();
40080eae:	01ff25        	call8	40082ea0 <z_impl_k_current_get>
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
40080eb1:	021425        	call8	40082ff4 <z_impl_k_thread_abort>

40080eb4 <chunk_field>:
	return (chunk_unit_t *)h;
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
40080eb4:	004136        	entry	a1, 32
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
40080eb7:	1133d0        	slli	a3, a3, 3
40080eba:	323a      	add.n	a3, a2, a3

	if (big_heap(h)) {
40080ebc:	fdc181        	l32r	a8, 400805c0 <_iram_text_start+0x78>
40080ebf:	2228      	l32i.n	a2, a2, 8
40080ec1:	0bb827        	bgeu	a8, a2, 40080ed0 <chunk_field+0x1c>
		return ((uint32_t *)cmem)[f];
40080ec4:	1144e0        	slli	a4, a4, 2
40080ec7:	334a      	add.n	a3, a3, a4
40080ec9:	0328      	l32i.n	a2, a3, 0
40080ecb:	000246        	j	40080ed8 <chunk_field+0x24>
40080ece:	f00000        	subx8	a0, a0, a0
	} else {
		return ((uint16_t *)cmem)[f];
40080ed1:	4a1144        	mula.da.lh.ldinc	m1, a1, m0, a4
40080ed4:	132233        	lsi	f3, a2, 76
40080ed7:	f01d00        	subx8	a1, a13, a0
	...

40080edc <chunk_set>:
	}
}

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
40080edc:	004136        	entry	a1, 32
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
40080edf:	1133d0        	slli	a3, a3, 3
40080ee2:	323a      	add.n	a3, a2, a3

	if (big_heap(h)) {
40080ee4:	fdb781        	l32r	a8, 400805c0 <_iram_text_start+0x78>
40080ee7:	2228      	l32i.n	a2, a2, 8
40080ee9:	0bb827        	bgeu	a8, a2, 40080ef8 <chunk_set+0x1c>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
40080eec:	1144e0        	slli	a4, a4, 2
40080eef:	334a      	add.n	a3, a3, a4
40080ef1:	0359      	s32i.n	a5, a3, 0
40080ef3:	000246        	j	40080f00 <chunk_set+0x24>
40080ef6:	f00000        	subx8	a0, a0, a0
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
40080ef9:	4a1144        	mula.da.lh.ldinc	m1, a1, m0, a4
40080efc:	535233        	lsi	f3, a2, 0x14c
40080eff:	f01d00        	subx8	a1, a13, a0
	...

40080f04 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
40080f04:	004136        	entry	a1, 32
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
40080f07:	1c0c      	movi.n	a12, 1
40080f09:	03bd      	mov.n	a11, a3
40080f0b:	02ad      	mov.n	a10, a2
40080f0d:	fffa65        	call8	40080eb4 <chunk_field>
}
40080f10:	4121a0        	srli	a2, a10, 1
40080f13:	f01d      	retw.n
40080f15:	000000        	ill

40080f18 <set_chunk_used>:

static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
40080f18:	004136        	entry	a1, 32
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
40080f1b:	1133d0        	slli	a3, a3, 3
40080f1e:	323a      	add.n	a3, a2, a3

	if (big_heap(h)) {
40080f20:	fda881        	l32r	a8, 400805c0 <_iram_text_start+0x78>
40080f23:	2228      	l32i.n	a2, a2, 8
40080f25:	17b827        	bgeu	a8, a2, 40080f40 <set_chunk_used+0x28>
		if (used) {
40080f28:	1388      	l32i.n	a8, a3, 4
40080f2a:	648c      	beqz.n	a4, 40080f34 <set_chunk_used+0x1c>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
40080f2c:	120c      	movi.n	a2, 1
40080f2e:	208820        	or	a8, a8, a2
40080f31:	000106        	j	40080f39 <set_chunk_used+0x21>
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
40080f34:	e27c      	movi.n	a2, -2
40080f36:	108820        	and	a8, a8, a2
40080f39:	1389      	s32i.n	a8, a3, 4
40080f3b:	000586        	j	40080f55 <set_chunk_used+0x3d>
40080f3e:	820000        	mull	a0, a0, a0
		}
	} else {
		if (used) {
40080f41:	8c0113        	lsi	f1, a1, 0x230
40080f44:	120c64        	lsi	f6, a12, 72
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
40080f47:	208820        	or	a8, a8, a2
40080f4a:	000106        	j	40080f52 <set_chunk_used+0x3a>
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
40080f4d:	e27c      	movi.n	a2, -2
40080f4f:	108820        	and	a8, a8, a2
40080f52:	015382        	s16i	a8, a3, 2
		}
	}
}
40080f55:	f01d      	retw.n
	...

40080f58 <set_chunk_size>:
 * Note: no need to preserve the used bit here as the chunk is never in use
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
40080f58:	004136        	entry	a1, 32
	chunk_set(h, c, SIZE_AND_USED, size << 1);
40080f5b:	11d4f0        	slli	a13, a4, 1
40080f5e:	01a0c2        	movi	a12, 1
40080f61:	20b330        	or	a11, a3, a3
40080f64:	20a220        	or	a10, a2, a2
40080f67:	fff765        	call8	40080edc <chunk_set>
}
40080f6a:	f01d      	retw.n

40080f6c <bucket_idx>:
{
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
40080f6c:	004136        	entry	a1, 32
	return big_heap(h) ? 8 : 4;
40080f6f:	fd9491        	l32r	a9, 400805c0 <_iram_text_start+0x78>
40080f72:	2228      	l32i.n	a2, a2, 8
40080f74:	880c      	movi.n	a8, 8
40080f76:	023927        	bltu	a9, a2, 40080f7c <bucket_idx+0x10>
40080f79:	04a082        	movi	a8, 4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
40080f7c:	888b      	addi.n	a8, a8, 8
40080f7e:	412380        	srli	a2, a8, 3
	size_t usable_sz = sz - min_chunk_size(h) + 1;
40080f81:	331b      	addi.n	a3, a3, 1
40080f83:	c03320        	sub	a3, a3, a2
	return 31 - __builtin_clz(usable_sz);
40080f86:	40f330        	nsau	a3, a3
}
40080f89:	f21c      	movi.n	a2, 31
40080f8b:	c02230        	sub	a2, a2, a3
40080f8e:	f01d      	retw.n

40080f90 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
40080f90:	004136        	entry	a1, 32
	return sizeof(void *) > 4 || chunks > 0x7fff;
40080f93:	03bd      	mov.n	a11, a3
40080f95:	02ad      	mov.n	a10, a2
40080f97:	fff6e5        	call8	40080f04 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
40080f9a:	fd8951        	l32r	a5, 400805c0 <_iram_text_start+0x78>
40080f9d:	2248      	l32i.n	a4, a2, 8
40080f9f:	05b547        	bgeu	a5, a4, 40080fa8 <free_list_add+0x18>
	if (!solo_free_header(h, c)) {
40080fa2:	021a66        	bnei	a10, 1, 40080fa8 <free_list_add+0x18>
40080fa5:	001bc6        	j	40081018 <free_list_add+0x88>
		int bidx = bucket_idx(h, chunk_size(h, c));
40080fa8:	0abd      	mov.n	a11, a10
40080faa:	02ad      	mov.n	a10, a2
40080fac:	fffbe5        	call8	40080f6c <bucket_idx>
	if (b->next == 0) {
40080faf:	118ae0        	slli	a8, a10, 2
40080fb2:	828a      	add.n	a8, a2, a8
40080fb4:	4848      	l32i.n	a4, a8, 16
40080fb6:	44ec      	bnez.n	a4, 40080fde <free_list_add+0x4e>
		h->avail_buckets |= (1 << bidx);
40080fb8:	140c      	movi.n	a4, 1
40080fba:	401a00        	ssl	a10
40080fbd:	a14400        	sll	a4, a4
40080fc0:	32a8      	l32i.n	a10, a2, 12
	chunk_set(h, c, FREE_PREV, prev);
40080fc2:	03dd      	mov.n	a13, a3
40080fc4:	20aa40        	or	a10, a10, a4
40080fc7:	32a9      	s32i.n	a10, a2, 12
40080fc9:	2c0c      	movi.n	a12, 2
40080fcb:	03bd      	mov.n	a11, a3
		b->next = c;
40080fcd:	4839      	s32i.n	a3, a8, 16
40080fcf:	02ad      	mov.n	a10, a2
40080fd1:	fff0a5        	call8	40080edc <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
40080fd4:	03dd      	mov.n	a13, a3
40080fd6:	3c0c      	movi.n	a12, 3
40080fd8:	03bd      	mov.n	a11, a3
40080fda:	000d46        	j	40081013 <free_list_add+0x83>
40080fdd:	a0c200        	addx4	a12, a2, a0
	return chunk_field(h, c, FREE_PREV);
40080fe0:	b44002        	s8i	a0, a0, 180
40080fe3:	a22020        	muluh	a2, a0, a2
40080fe6:	ece520        	lsi	f2, a5, 0x3b0
40080fe9:	ff          	.byte 0xff
	chunk_set(h, c, FREE_PREV, prev);
40080fea:	0add      	mov.n	a13, a10
	return chunk_field(h, c, FREE_PREV);
40080fec:	0a5d      	mov.n	a5, a10
	chunk_set(h, c, FREE_PREV, prev);
40080fee:	2c0c      	movi.n	a12, 2
40080ff0:	03bd      	mov.n	a11, a3
40080ff2:	02ad      	mov.n	a10, a2
40080ff4:	ffee65        	call8	40080edc <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
40080ff7:	04dd      	mov.n	a13, a4
40080ff9:	3c0c      	movi.n	a12, 3
40080ffb:	03bd      	mov.n	a11, a3
40080ffd:	02ad      	mov.n	a10, a2
40080fff:	ffede5        	call8	40080edc <chunk_set>
40081002:	03dd      	mov.n	a13, a3
40081004:	3c0c      	movi.n	a12, 3
40081006:	05bd      	mov.n	a11, a5
40081008:	02ad      	mov.n	a10, a2
4008100a:	ffed25        	call8	40080edc <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
4008100d:	03dd      	mov.n	a13, a3
4008100f:	2c0c      	movi.n	a12, 2
40081011:	04bd      	mov.n	a11, a4
40081013:	02ad      	mov.n	a10, a2
40081015:	ffec65        	call8	40080edc <chunk_set>
		free_list_add_bidx(h, c, bidx);
	}
}
40081018:	f01d      	retw.n
	...

4008101c <sys_heap_init>:
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
4008101c:	004136        	entry	a1, 32
	return big_heap_bytes(size) ? 8 : 4;
4008101f:	fd6951        	l32r	a5, 400805c4 <_iram_text_start+0x7c>
40081022:	890c      	movi.n	a9, 8
40081024:	013547        	bltu	a5, a4, 40081029 <sys_heap_init+0xd>
40081027:	490c      	movi.n	a9, 4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
40081029:	c04490        	sub	a4, a4, a9

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
4008102c:	887c      	movi.n	a8, -8
4008102e:	537b      	addi.n	a5, a3, 7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
40081030:	334a      	add.n	a3, a3, a4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
40081032:	105580        	and	a5, a5, a8
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
40081035:	103380        	and	a3, a3, a8
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
40081038:	fd6491        	l32r	a9, 400805c8 <_iram_text_start+0x80>
4008103b:	fd6381        	l32r	a8, 400805c8 <_iram_text_start+0x80>
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
4008103e:	c03350        	sub	a3, a3, a5
	heap->heap = h;
40081041:	0259      	s32i.n	a5, a2, 0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
40081043:	413330        	srli	a3, a3, 3
	h->len = buf_sz;
	h->avail_buckets = 0;
40081046:	040c      	movi.n	a4, 0
	h->chunk0_hdr_area = 0;
40081048:	0589      	s32i.n	a8, a5, 0
4008104a:	1599      	s32i.n	a9, a5, 4

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
4008104c:	03bd      	mov.n	a11, a3
	h->len = buf_sz;
4008104e:	2539      	s32i.n	a3, a5, 8
	h->avail_buckets = 0;
40081050:	3549      	s32i.n	a4, a5, 12
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
40081052:	20a550        	or	a10, a5, a5
40081055:	fff165        	call8	40080f6c <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
40081058:	112ae0        	slli	a2, a10, 2
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
4008105b:	1bc222        	addi	a2, a2, 27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
4008105e:	ba1b      	addi.n	a11, a10, 1
40081060:	412320        	srli	a2, a2, 3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
40081063:	10c592        	addi	a9, a5, 16
40081066:	048d      	mov.n	a8, a4
40081068:	000186        	j	40081072 <sys_heap_init+0x56>
4008106b:	094900        	l32e	a0, a9, -48
4008106e:	881b      	addi.n	a8, a8, 1
40081070:	994b      	addi.n	a9, a9, 4
40081072:	f628b7        	blt	a8, a11, 4008106c <sys_heap_init+0x50>
		h->buckets[i].next = 0;
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
40081075:	02cd      	mov.n	a12, a2
40081077:	05ad      	mov.n	a10, a5
40081079:	0b0c      	movi.n	a11, 0
4008107b:	ffede5        	call8	40080f58 <set_chunk_size>
	set_chunk_used(h, 0, true);
4008107e:	05ad      	mov.n	a10, a5
40081080:	1c0c      	movi.n	a12, 1
40081082:	0b0c      	movi.n	a11, 0
40081084:	ffe925        	call8	40080f18 <set_chunk_used>

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
40081087:	c04320        	sub	a4, a3, a2
4008108a:	04cd      	mov.n	a12, a4
4008108c:	02bd      	mov.n	a11, a2
4008108e:	05ad      	mov.n	a10, a5
40081090:	ffec65        	call8	40080f58 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
40081093:	02dd      	mov.n	a13, a2
40081095:	02bd      	mov.n	a11, a2
40081097:	05ad      	mov.n	a10, a5
40081099:	0c0c      	movi.n	a12, 0
4008109b:	ffe425        	call8	40080edc <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
4008109e:	03bd      	mov.n	a11, a3
400810a0:	05ad      	mov.n	a10, a5
400810a2:	0c0c      	movi.n	a12, 0
400810a4:	ffeb25        	call8	40080f58 <set_chunk_size>
400810a7:	04dd      	mov.n	a13, a4
400810a9:	03bd      	mov.n	a11, a3
400810ab:	05ad      	mov.n	a10, a5
400810ad:	0c0c      	movi.n	a12, 0
400810af:	ffe2e5        	call8	40080edc <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
400810b2:	03bd      	mov.n	a11, a3
400810b4:	05ad      	mov.n	a10, a5
400810b6:	1c0c      	movi.n	a12, 1
400810b8:	ffe5e5        	call8	40080f18 <set_chunk_used>

	free_list_add(h, chunk0_size);
400810bb:	02bd      	mov.n	a11, a2
400810bd:	05ad      	mov.n	a10, a5
400810bf:	ffed25        	call8	40080f90 <free_list_add>
}
400810c2:	f01d      	retw.n

400810c4 <arch_printk_char_out>:
	CODE_UNREACHABLE;
}

/* Boot-time static default printk handler, possibly to be overridden later. */
int arch_printk_char_out(int c)
{
400810c4:	004136        	entry	a1, 32
	if (c == '\n') {
400810c7:	079266        	bnei	a2, 10, 400810d2 <arch_printk_char_out+0xe>
		esp32_rom_uart_tx_one_char('\r');
400810ca:	da0c      	movi.n	a10, 13
400810cc:	fd4081        	l32r	a8, 400805cc <_iram_text_start+0x84>
400810cf:	0008e0        	callx8	a8
	}
	esp32_rom_uart_tx_one_char(c);
400810d2:	74a020        	extui	a10, a2, 0, 8
400810d5:	fd3d81        	l32r	a8, 400805cc <_iram_text_start+0x84>
400810d8:	0008e0        	callx8	a8
	return 0;
}
400810db:	020c      	movi.n	a2, 0
400810dd:	f01d      	retw.n
	...

400810e0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
400810e0:	004136        	entry	a1, 32
400810e3:	fd3ba1        	l32r	a10, 400805d0 <_iram_text_start+0x88>
400810e6:	0154a5        	call8	40082630 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
400810e9:	fd3a21        	l32r	a2, 400805d4 <_iram_text_start+0x8c>
400810ec:	0062a2        	s32i	a10, a2, 0
	__stdout_hook_install(console_out);
400810ef:	fd3a21        	l32r	a2, 400805d8 <_iram_text_start+0x90>
400810f2:	02ad      	mov.n	a10, a2
400810f4:	00a9a5        	call8	40081b90 <__stdout_hook_install>
	__printk_hook_install(console_out);
400810f7:	02ad      	mov.n	a10, a2
400810f9:	ffa4a5        	call8	40080b44 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
400810fc:	020c      	movi.n	a2, 0
400810fe:	f01d      	retw.n

40081100 <console_out>:
{
40081100:	004136        	entry	a1, 32
	if ('\n' == c) {
40081103:	fd3431        	l32r	a3, 400805d4 <_iram_text_start+0x8c>
40081106:	0a9266        	bnei	a2, 10, 40081114 <console_out+0x14>
40081109:	03a8      	l32i.n	a10, a3, 0
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
4008110b:	2a88      	l32i.n	a8, a10, 8
4008110d:	db0c      	movi.n	a11, 13
4008110f:	1888      	l32i.n	a8, a8, 4
40081111:	0008e0        	callx8	a8
	uart_poll_out(uart_console_dev, c);
40081114:	03a8      	l32i.n	a10, a3, 0
40081116:	2a38      	l32i.n	a3, a10, 8
40081118:	74b020        	extui	a11, a2, 0, 8
4008111b:	1338      	l32i.n	a3, a3, 4
4008111d:	0003e0        	callx8	a3
}
40081120:	f01d      	retw.n
	...

40081124 <clock_control_esp32_on>:
	REG_WRITE(APB_CTRL_PLL_TICK_CONF_REG, PLL_APB_CLK_FREQ - 1);
}

static int clock_control_esp32_on(const struct device *dev,
				  clock_control_subsys_t sys)
{
40081124:	004136        	entry	a1, 32
	uint32_t bank = GET_REG_BANK(sys);
	uint32_t offset =  GET_REG_OFFSET(sys);

	__ASSERT_NO_MSG(bank >= CLOCK_REGS_BANK_COUNT);

	esp32_set_mask32(BIT(offset), clock_control_regs[bank].clk);
40081127:	180c      	movi.n	a8, 1
	uint32_t bank = GET_REG_BANK(sys);
40081129:	419530        	srli	a9, a3, 5
	esp32_set_mask32(BIT(offset), clock_control_regs[bank].clk);
4008112c:	401300        	ssl	a3
4008112f:	a13800        	sll	a3, a8
40081132:	fd2a81        	l32r	a8, 400805dc <_iram_text_start+0x94>
40081135:	1199d0        	slli	a9, a9, 3
40081138:	889a      	add.n	a8, a8, a9
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
4008113a:	08a8      	l32i.n	a10, a8, 0
	esp32_clear_mask32(BIT(offset), clock_control_regs[bank].rst);
	return 0;
}
4008113c:	020c      	movi.n	a2, 0
4008113e:	0020c0        	memw
40081141:	0a98      	l32i.n	a9, a10, 0
#include <stdbool.h>
#include <arch/xtensa/arch.h>

static inline void esp32_set_mask32(uint32_t v, uint32_t mem_addr)
{
	sys_write32(sys_read32(mem_addr) | v, mem_addr);
40081143:	209390        	or	a9, a3, a9
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
40081146:	0020c0        	memw
40081149:	0a99      	s32i.n	a9, a10, 0
	return *(volatile uint32_t *)addr;
4008114b:	1898      	l32i.n	a9, a8, 4
}

static inline void esp32_clear_mask32(uint32_t v, uint32_t mem_addr)
{
	sys_write32(sys_read32(mem_addr) & ~v, mem_addr);
4008114d:	f87c      	movi.n	a8, -1
4008114f:	0020c0        	memw
40081152:	09a8      	l32i.n	a10, a9, 0
40081154:	308830        	xor	a8, a8, a3
40081157:	1088a0        	and	a8, a8, a10
	*(volatile uint32_t *)addr = data;
4008115a:	0020c0        	memw
4008115d:	0989      	s32i.n	a8, a9, 0
4008115f:	f01d      	retw.n
40081161:	000000        	ill

40081164 <clock_control_esp32_get_status>:
	return 0;
}

static enum clock_control_status clock_control_esp32_get_status(const struct device *dev,
								clock_control_subsys_t sys)
{
40081164:	004136        	entry	a1, 32
	ARG_UNUSED(dev);
	uint32_t bank = GET_REG_BANK(sys);
40081167:	418530        	srli	a8, a3, 5
	uint32_t offset =  GET_REG_OFFSET(sys);

	if (DPORT_GET_PERI_REG_MASK(clock_control_regs[bank].clk, BIT(offset))) {
4008116a:	1198d0        	slli	a9, a8, 3
4008116d:	fd1b81        	l32r	a8, 400805dc <_iram_text_start+0x94>
40081170:	889a      	add.n	a8, a8, a9
 * @return Value
 */
static inline uint32_t IRAM_ATTR DPORT_READ_PERI_REG(uint32_t reg)
{
#if defined(BOOTLOADER_BUILD) || defined(CONFIG_FREERTOS_UNICORE) || !defined(ESP_PLATFORM)
    return _DPORT_REG_READ(reg);
40081172:	0828      	l32i.n	a2, a8, 0
		return CLOCK_CONTROL_STATUS_ON;
	}
	return CLOCK_CONTROL_STATUS_OFF;
}
40081174:	180c      	movi.n	a8, 1
40081176:	0020c0        	memw
40081179:	0228      	l32i.n	a2, a2, 0
	if (DPORT_GET_PERI_REG_MASK(clock_control_regs[bank].clk, BIT(offset))) {
4008117b:	400300        	ssr	a3
4008117e:	912020        	srl	a2, a2
40081181:	043020        	extui	a3, a2, 0, 1
}
40081184:	220c      	movi.n	a2, 2
40081186:	832830        	moveqz	a2, a8, a3
40081189:	f01d      	retw.n
	...

4008118c <clock_control_esp32_get_rate>:

static int clock_control_esp32_get_rate(const struct device *dev,
					clock_control_subsys_t sub_system,
					uint32_t *rate)
{
4008118c:	004136        	entry	a1, 32
	ARG_UNUSED(sub_system);

	uint32_t xtal_freq_sel = DEV_CFG(dev)->xtal_freq_sel;
	uint32_t soc_clk_sel = REG_GET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL);
4008118f:	fd1481        	l32r	a8, 400805e0 <_iram_text_start+0x98>
40081192:	0020c0        	memw
40081195:	0888      	l32i.n	a8, a8, 0
40081197:	158b80        	extui	a8, a8, 27, 2

	switch (soc_clk_sel) {
4008119a:	688c      	beqz.n	a8, 400811a4 <clock_control_esp32_get_rate+0x18>
4008119c:	020c      	movi.n	a2, 0
4008119e:	171826        	beqi	a8, 1, 400811b9 <clock_control_esp32_get_rate+0x2d>
400811a1:	000706        	j	400811c1 <clock_control_esp32_get_rate+0x35>
	uint32_t xtal_freq_sel = DEV_CFG(dev)->xtal_freq_sel;
400811a4:	1228      	l32i.n	a2, a2, 4
	case RTC_CNTL_SOC_CLK_SEL_XTL:
		*rate = xtal_freq[xtal_freq_sel];
400811a6:	2228      	l32i.n	a2, a2, 8
400811a8:	1192e0        	slli	a9, a2, 2
400811ab:	fd0e21        	l32r	a2, 400805e4 <_iram_text_start+0x9c>
400811ae:	229a      	add.n	a2, a2, a9
400811b0:	0228      	l32i.n	a2, a2, 0
400811b2:	0429      	s32i.n	a2, a4, 0
		return 0;
400811b4:	082d      	mov.n	a2, a8
400811b6:	000306        	j	400811c6 <clock_control_esp32_get_rate+0x3a>
	case RTC_CNTL_SOC_CLK_SEL_PLL:
		*rate = MHZ(80);
400811b9:	fd0b81        	l32r	a8, 400805e8 <_iram_text_start+0xa0>
400811bc:	0489      	s32i.n	a8, a4, 0
		return 0;
400811be:	000106        	j	400811c6 <clock_control_esp32_get_rate+0x3a>
	default:
		*rate = 0;
400811c1:	0429      	s32i.n	a2, a4, 0
		return -ENOTSUP;
400811c3:	ddaf22        	movi	a2, -35
	}
}
400811c6:	f01d      	retw.n

400811c8 <clock_control_esp32_init>:

static int clock_control_esp32_init(const struct device *dev)
{
400811c8:	004136        	entry	a1, 32
	struct esp32_clock_config *cfg = DEV_CFG(dev);
400811cb:	1238      	l32i.n	a3, a2, 4

	/* Wait for UART first before changing freq to avoid garbage on console */
	esp32_rom_uart_tx_wait_idle(0);
400811cd:	0a0c      	movi.n	a10, 0
400811cf:	fd1381        	l32r	a8, 4008061c <_iram_text_start+0xd4>
400811d2:	0008e0        	callx8	a8

	switch (cfg->clk_src_sel) {
400811d5:	0368      	l32i.n	a6, a3, 0
400811d7:	968c      	beqz.n	a6, 400811e4 <clock_control_esp32_init+0x1c>
		break;
	case ESP32_CLK_SRC_PLL:
		cpuclk_pll_configure(cfg->xtal_freq_sel, cfg->cpu_freq);
		break;
	default:
		return -EINVAL;
400811d9:	a26c      	movi.n	a2, -22
	switch (cfg->clk_src_sel) {
400811db:	021626        	beqi	a6, 1, 400811e1 <clock_control_esp32_init+0x19>
400811de:	006ec6        	j	4008139d <clock_control_esp32_init+0x1d5>
400811e1:	001186        	j	4008122b <clock_control_esp32_init+0x63>
		REG_SET_FIELD(APB_CTRL_SYSCLK_CONF_REG, APB_CTRL_PRE_DIV_CNT, cfg->xtal_div);
400811e4:	fd0251        	l32r	a5, 400805ec <_iram_text_start+0xa4>
400811e7:	3328      	l32i.n	a2, a3, 12
400811e9:	0020c0        	memw
400811ec:	0548      	l32i.n	a4, a5, 0
400811ee:	00ac62        	movi	a6, 0xfffffc00
400811f1:	104460        	and	a4, a4, a6
400811f4:	942020        	extui	a2, a2, 0, 10
400811f7:	202240        	or	a2, a2, a4
400811fa:	0020c0        	memw
400811fd:	0529      	s32i.n	a2, a5, 0
		REG_WRITE(APB_CTRL_XTAL_TICK_CONF_REG, xtal_freq[cfg->xtal_freq_sel] - 1);
400811ff:	2328      	l32i.n	a2, a3, 8
		REG_SET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL, RTC_CNTL_SOC_CLK_SEL_XTL);
40081201:	fcfc51        	l32r	a5, 400805f4 <_iram_text_start+0xac>
		REG_WRITE(APB_CTRL_XTAL_TICK_CONF_REG, xtal_freq[cfg->xtal_freq_sel] - 1);
40081204:	1142e0        	slli	a4, a2, 2
40081207:	fcf721        	l32r	a2, 400805e4 <_iram_text_start+0x9c>
4008120a:	224a      	add.n	a2, a2, a4
4008120c:	0228      	l32i.n	a2, a2, 0
4008120e:	fcf841        	l32r	a4, 400805f0 <_iram_text_start+0xa8>
40081211:	220b      	addi.n	a2, a2, -1
40081213:	0020c0        	memw
40081216:	0429      	s32i.n	a2, a4, 0
		REG_SET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL, RTC_CNTL_SOC_CLK_SEL_XTL);
40081218:	fcf241        	l32r	a4, 400805e0 <_iram_text_start+0x98>
4008121b:	0020c0        	memw
4008121e:	0428      	l32i.n	a2, a4, 0
40081220:	102250        	and	a2, a2, a5
40081223:	0020c0        	memw
40081226:	0429      	s32i.n	a2, a4, 0
		break;
40081228:	0051c6        	j	40081373 <clock_control_esp32_init+0x1ab>
		cpuclk_pll_configure(cfg->xtal_freq_sel, cfg->cpu_freq);
4008122b:	1328      	l32i.n	a2, a3, 4
	switch (cpu_freq) {
4008122d:	a0a042        	movi	a4, 160
		cpuclk_pll_configure(cfg->xtal_freq_sel, cfg->cpu_freq);
40081230:	2378      	l32i.n	a7, a3, 8
	switch (cpu_freq) {
40081232:	0c1247        	beq	a2, a4, 40081242 <clock_control_esp32_init+0x7a>
40081235:	f0a052        	movi	a5, 240
		cpu_period_sel = DPORT_CPUPERIOD_SEL_240;
40081238:	240c      	movi.n	a4, 2
	switch (cpu_freq) {
4008123a:	081257        	beq	a2, a5, 40081246 <clock_control_esp32_init+0x7e>
	uint32_t cpu_period_sel = DPORT_CPUPERIOD_SEL_80;
4008123d:	040c      	movi.n	a4, 0
4008123f:	000046        	j	40081244 <clock_control_esp32_init+0x7c>
		cpu_period_sel = DPORT_CPUPERIOD_SEL_160;
40081242:	064d      	mov.n	a4, a6
		pll_freq = RTC_PLL_FREQ_320M;
40081244:	060c      	movi.n	a6, 0
	CLEAR_PERI_REG_MASK(RTC_CNTL_OPTIONS0_REG,
40081246:	fcec51        	l32r	a5, 400805f8 <_iram_text_start+0xb0>
40081249:	fcec81        	l32r	a8, 400805fc <_iram_text_start+0xb4>
4008124c:	0020c0        	memw
4008124f:	0528      	l32i.n	a2, a5, 0
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_IR_CAL_DELAY, BBPLL_IR_CAL_DELAY_VAL);
40081251:	8d1c      	movi.n	a13, 24
	CLEAR_PERI_REG_MASK(RTC_CNTL_OPTIONS0_REG,
40081253:	102280        	and	a2, a2, a8
40081256:	0020c0        	memw
40081259:	0529      	s32i.n	a2, a5, 0
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_IR_CAL_DELAY, BBPLL_IR_CAL_DELAY_VAL);
4008125b:	0c0c      	movi.n	a12, 0
4008125d:	04a0b2        	movi	a11, 4
40081260:	66a0a2        	movi	a10, 102
40081263:	fcef81        	l32r	a8, 40080620 <_iram_text_start+0xd8>
40081266:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_IR_CAL_EXT_CAP, BBPLL_IR_CAL_EXT_CAP_VAL);
40081269:	0d2c      	movi.n	a13, 32
4008126b:	1c0c      	movi.n	a12, 1
4008126d:	04a0b2        	movi	a11, 4
40081270:	66a0a2        	movi	a10, 102
40081273:	fceb81        	l32r	a8, 40080620 <_iram_text_start+0xd8>
40081276:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_ENB_FCAL, BBPLL_OC_ENB_FCAL_VAL);
40081279:	4c0c      	movi.n	a12, 4
4008127b:	0cbd      	mov.n	a11, a12
4008127d:	9aa0d2        	movi	a13, 154
40081280:	66a0a2        	movi	a10, 102
40081283:	fce781        	l32r	a8, 40080620 <_iram_text_start+0xd8>
40081286:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_ENB_VCON, BBPLL_OC_ENB_VCON_VAL);
40081289:	0d0c      	movi.n	a13, 0
4008128b:	ac0c      	movi.n	a12, 10
4008128d:	4b0c      	movi.n	a11, 4
4008128f:	66a0a2        	movi	a10, 102
40081292:	fce381        	l32r	a8, 40080620 <_iram_text_start+0xd8>
40081295:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_BBADC_CAL_7_0, BBPLL_BBADC_CAL_7_0_VAL);
40081298:	0d0c      	movi.n	a13, 0
4008129a:	cc0c      	movi.n	a12, 12
4008129c:	4b0c      	movi.n	a11, 4
4008129e:	66a0a2        	movi	a10, 102
400812a1:	fcdf81        	l32r	a8, 40080620 <_iram_text_start+0xd8>
400812a4:	0008e0        	callx8	a8
	REG_SET_FIELD(RTC_CNTL_REG, RTC_CNTL_DIG_DBIAS_WAK, dbias_wak);
400812a7:	fcd621        	l32r	a2, 40080600 <_iram_text_start+0xb8>
400812aa:	fcd681        	l32r	a8, 40080604 <_iram_text_start+0xbc>
400812ad:	0020c0        	memw
400812b0:	0258      	l32i.n	a5, a2, 0
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_ENDIV5, cfg->endiv5);
400812b2:	bc0c      	movi.n	a12, 11
	REG_SET_FIELD(RTC_CNTL_REG, RTC_CNTL_DIG_DBIAS_WAK, dbias_wak);
400812b4:	105580        	and	a5, a5, a8
400812b7:	fcd481        	l32r	a8, 40080608 <_iram_text_start+0xc0>
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_ENDIV5, cfg->endiv5);
400812ba:	4b0c      	movi.n	a11, 4
	REG_SET_FIELD(RTC_CNTL_REG, RTC_CNTL_DIG_DBIAS_WAK, dbias_wak);
400812bc:	205580        	or	a5, a5, a8
400812bf:	0020c0        	memw
400812c2:	0259      	s32i.n	a5, a2, 0
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_ENDIV5, cfg->endiv5);
400812c4:	fcd251        	l32r	a5, 4008060c <_iram_text_start+0xc4>
400812c7:	1126c0        	slli	a2, a6, 4
400812ca:	c06260        	sub	a6, a2, a6
400812cd:	256a      	add.n	a2, a5, a6
400812cf:	0102d2        	l8ui	a13, a2, 1
400812d2:	66a0a2        	movi	a10, 102
400812d5:	fcd281        	l32r	a8, 40080620 <_iram_text_start+0xd8>
400812d8:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_BBADC_DSMP, cfg->bbadc_dsmp);
400812db:	0202d2        	l8ui	a13, a2, 2
	uint8_t i2c_bbpll_lref = (bb_cfg->lref << 7) | (bb_cfg->div10_8 << 4) | (bb_cfg->div_ref);
400812de:	1127f0        	slli	a2, a7, 1
400812e1:	227a      	add.n	a2, a2, a7
400812e3:	1122f0        	slli	a2, a2, 1
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_BBADC_DSMP, cfg->bbadc_dsmp);
400812e6:	9c0c      	movi.n	a12, 9
400812e8:	4b0c      	movi.n	a11, 4
400812ea:	66a0a2        	movi	a10, 102
	uint8_t i2c_bbpll_lref = (bb_cfg->lref << 7) | (bb_cfg->div10_8 << 4) | (bb_cfg->div_ref);
400812ed:	226a      	add.n	a2, a2, a6
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_BBADC_DSMP, cfg->bbadc_dsmp);
400812ef:	fccc81        	l32r	a8, 40080620 <_iram_text_start+0xd8>
400812f2:	0008e0        	callx8	a8
	uint8_t i2c_bbpll_lref = (bb_cfg->lref << 7) | (bb_cfg->div10_8 << 4) | (bb_cfg->div_ref);
400812f5:	252a      	add.n	a2, a5, a2
400812f7:	0602d2        	l8ui	a13, a2, 6
400812fa:	050252        	l8ui	a5, a2, 5
400812fd:	11dd90        	slli	a13, a13, 7
40081300:	1155c0        	slli	a5, a5, 4
40081303:	20dd50        	or	a13, a13, a5
40081306:	030252        	l8ui	a5, a2, 3
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_LREF, i2c_bbpll_lref);
40081309:	2c0c      	movi.n	a12, 2
	uint8_t i2c_bbpll_lref = (bb_cfg->lref << 7) | (bb_cfg->div10_8 << 4) | (bb_cfg->div_ref);
4008130b:	20dd50        	or	a13, a13, a5
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_LREF, i2c_bbpll_lref);
4008130e:	74d0d0        	extui	a13, a13, 0, 8
40081311:	4b0c      	movi.n	a11, 4
40081313:	66a0a2        	movi	a10, 102
40081316:	fcc281        	l32r	a8, 40080620 <_iram_text_start+0xd8>
40081319:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_DIV_7_0, bb_cfg->div7_0);
4008131c:	0402d2        	l8ui	a13, a2, 4
4008131f:	3c0c      	movi.n	a12, 3
40081321:	4b0c      	movi.n	a11, 4
40081323:	66a0a2        	movi	a10, 102
40081326:	fcbe81        	l32r	a8, 40080620 <_iram_text_start+0xd8>
40081329:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_DCUR, ((bb_cfg->bw << 6) | bb_cfg->dcur));
4008132c:	0802d2        	l8ui	a13, a2, 8
4008132f:	070222        	l8ui	a2, a2, 7
40081332:	11dda0        	slli	a13, a13, 6
40081335:	20dd20        	or	a13, a13, a2
40081338:	74d0d0        	extui	a13, a13, 0, 8
4008133b:	5c0c      	movi.n	a12, 5
4008133d:	4b0c      	movi.n	a11, 4
4008133f:	66a0a2        	movi	a10, 102
40081342:	fcb781        	l32r	a8, 40080620 <_iram_text_start+0xd8>
40081345:	0008e0        	callx8	a8
	DPORT_REG_WRITE(DPORT_CPU_PER_CONF_REG, cpu_period_sel);
40081348:	fcb221        	l32r	a2, 40080610 <_iram_text_start+0xc8>
	REG_SET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL, RTC_CNTL_SOC_CLK_SEL_PLL);
4008134b:	fcaa51        	l32r	a5, 400805f4 <_iram_text_start+0xac>
	DPORT_REG_WRITE(DPORT_CPU_PER_CONF_REG, cpu_period_sel);
4008134e:	0020c0        	memw
40081351:	0249      	s32i.n	a4, a2, 0
	REG_SET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL, RTC_CNTL_SOC_CLK_SEL_PLL);
40081353:	fca341        	l32r	a4, 400805e0 <_iram_text_start+0x98>
40081356:	0020c0        	memw
40081359:	0428      	l32i.n	a2, a4, 0
4008135b:	102250        	and	a2, a2, a5
4008135e:	fcad51        	l32r	a5, 40080614 <_iram_text_start+0xcc>
40081361:	202250        	or	a2, a2, a5
40081364:	0020c0        	memw
40081367:	0429      	s32i.n	a2, a4, 0
	REG_WRITE(APB_CTRL_PLL_TICK_CONF_REG, PLL_APB_CLK_FREQ - 1);
40081369:	fcab21        	l32r	a2, 40080618 <_iram_text_start+0xd0>
4008136c:	f44c      	movi.n	a4, 79
4008136e:	0020c0        	memw
40081371:	0249      	s32i.n	a4, a2, 0

	/* Re-calculate the CCOUNT register value to make time calculation correct.
	 * This should be updated on each frequency change
	 * New CCOUNT = Current CCOUNT * (new freq / old freq)
	 */
	XTHAL_SET_CCOUNT((uint64_t)XTHAL_GET_CCOUNT() * cfg->cpu_freq / xtal_freq[cfg->xtal_freq_sel]);
40081373:	03ea40        	rsr.ccount	a4
40081376:	13a8      	l32i.n	a10, a3, 4
40081378:	2338      	l32i.n	a3, a3, 8
4008137a:	312f40        	srai	a2, a4, 31
4008137d:	1153e0        	slli	a5, a3, 2
40081380:	fc9931        	l32r	a3, 400805e4 <_iram_text_start+0x9c>
40081383:	8222a0        	mull	a2, a2, a10
40081386:	a2ba40        	muluh	a11, a10, a4
40081389:	335a      	add.n	a3, a3, a5
4008138b:	03c8      	l32i.n	a12, a3, 0
4008138d:	82aa40        	mull	a10, a10, a4
40081390:	0d0c      	movi.n	a13, 0
40081392:	80b2b0        	add	a11, a2, a11
40081395:	0231a5        	call8	400836b0 <__udivdi3>
40081398:	13eaa0        	wsr.ccount	a10
	return 0;
4008139b:	020c      	movi.n	a2, 0
}
4008139d:	f01d      	retw.n
	...

400813a0 <clock_control_esp32_off>:
{
400813a0:	004136        	entry	a1, 32
	uint32_t bank = GET_REG_BANK(sys);
400813a3:	419530        	srli	a9, a3, 5
	esp32_clear_mask32(BIT(offset), clock_control_regs[bank].clk);
400813a6:	180c      	movi.n	a8, 1
400813a8:	401300        	ssl	a3
400813ab:	a13800        	sll	a3, a8
400813ae:	1189d0        	slli	a8, a9, 3
400813b1:	fc8a91        	l32r	a9, 400805dc <_iram_text_start+0x94>
}
400813b4:	020c      	movi.n	a2, 0
	esp32_clear_mask32(BIT(offset), clock_control_regs[bank].clk);
400813b6:	998a      	add.n	a9, a9, a8
	return *(volatile uint32_t *)addr;
400813b8:	09a8      	l32i.n	a10, a9, 0
400813ba:	f87c      	movi.n	a8, -1
400813bc:	0020c0        	memw
400813bf:	0ab8      	l32i.n	a11, a10, 0
400813c1:	308830        	xor	a8, a8, a3
400813c4:	1088b0        	and	a8, a8, a11
	*(volatile uint32_t *)addr = data;
400813c7:	0020c0        	memw
400813ca:	0a89      	s32i.n	a8, a10, 0
	return *(volatile uint32_t *)addr;
400813cc:	1988      	l32i.n	a8, a9, 4
400813ce:	0020c0        	memw
400813d1:	0898      	l32i.n	a9, a8, 0
	sys_write32(sys_read32(mem_addr) | v, mem_addr);
400813d3:	203390        	or	a3, a3, a9
	*(volatile uint32_t *)addr = data;
400813d6:	0020c0        	memw
400813d9:	0839      	s32i.n	a3, a8, 0
}
400813db:	f01d      	retw.n
400813dd:	000000        	ill

400813e0 <set_reg>:

	return (uint32_t *)(DT_INST_REG_ADDR(0) + off);
}

static int set_reg(uint32_t pin, uint32_t clr_mask, uint32_t set_mask)
{
400813e0:	004136        	entry	a1, 32
	if (pin >= ARRAY_SIZE(pin_mux_off)) {
400813e3:	782c      	movi.n	a8, 39
	volatile uint32_t *reg = reg_for_pin(pin);
	uint32_t v;

	if (!reg) {
		return -EINVAL;
400813e5:	aa6c      	movi.n	a10, -22
	if (pin >= ARRAY_SIZE(pin_mux_off)) {
400813e7:	253827        	bltu	a8, a2, 40081410 <set_reg+0x30>
	off = pin_mux_off[pin];
400813ea:	fc8e91        	l32r	a9, 40080624 <_iram_text_start+0xdc>
400813ed:	992a      	add.n	a9, a9, a2
400813ef:	000992        	l8ui	a9, a9, 0
	if (!off) {
400813f2:	a99c      	beqz.n	a9, 40081410 <set_reg+0x30>
	return (uint32_t *)(DT_INST_REG_ADDR(0) + off);
400813f4:	fc8d21        	l32r	a2, 40080628 <_iram_text_start+0xe0>
	}

	v = *reg;
	v &= ~clr_mask;
400813f7:	f87c      	movi.n	a8, -1
	return (uint32_t *)(DT_INST_REG_ADDR(0) + off);
400813f9:	992a      	add.n	a9, a9, a2
	v = *reg;
400813fb:	0020c0        	memw
400813fe:	0928      	l32i.n	a2, a9, 0
	v &= ~clr_mask;
40081400:	308830        	xor	a8, a8, a3
40081403:	108820        	and	a8, a8, a2
	v |= set_mask;
40081406:	208840        	or	a8, a8, a4
	*reg = v;
40081409:	0020c0        	memw
4008140c:	0989      	s32i.n	a8, a9, 0

	return 0;
4008140e:	0a0c      	movi.n	a10, 0
}
40081410:	0a2d      	mov.n	a2, a10
40081412:	f01d      	retw.n

40081414 <pinmux_set>:

static int pinmux_set(const struct device *dev, uint32_t pin, uint32_t func)
{
40081414:	004136        	entry	a1, 32
40081417:	20a330        	or	a10, a3, a3
	 * value due to a deficiency in the pinmux API.  This setting is
	 * part of the GPIO API.
	 */

	if (func > 6) {
		return -EINVAL;
4008141a:	eaaf22        	movi	a2, -22
	if (func > 6) {
4008141d:	1174f6        	bgeui	a4, 7, 40081432 <pinmux_set+0x1e>
	}

	return set_reg(pin, MCU_SEL_M, func<<MCU_SEL_S | 2<<FUN_DRV_S);
40081420:	fc83c1        	l32r	a12, 4008062c <_iram_text_start+0xe4>
40081423:	114440        	slli	a4, a4, 12
40081426:	fc82b1        	l32r	a11, 40080630 <_iram_text_start+0xe8>
40081429:	20c4c0        	or	a12, a4, a12
4008142c:	fffb25        	call8	400813e0 <set_reg>
4008142f:	202aa0        	or	a2, a10, a10
}
40081432:	f01d      	retw.n

40081434 <pinmux_input>:
	return -EINVAL;
}

#define CFG(id)   ((GPIO_ ## id ## _REG) & 0xff)
static int pinmux_input(const struct device *dev, uint32_t pin, uint8_t func)
{
40081434:	004136        	entry	a1, 32
	static const uint8_t offs[2][3] = {
		{ CFG(ENABLE1_W1TC), CFG(ENABLE1_W1TS), 32 },
		{ CFG(ENABLE_W1TC), CFG(ENABLE_W1TS), 0 },
	};
	const uint8_t *line = offs[pin < 32];
40081437:	f81c      	movi.n	a8, 31
{
40081439:	744040        	extui	a4, a4, 0, 8
	const uint8_t *line = offs[pin < 32];
4008143c:	00a052        	movi	a5, 0
4008143f:	013837        	bltu	a8, a3, 40081444 <pinmux_input+0x10>
40081442:	350c      	movi.n	a5, 3
40081444:	fc7c81        	l32r	a8, 40080634 <_iram_text_start+0xec>
	/* Since PINMUX_INPUT_ENABLED == 1 and PINMUX_OUTPUT_ENABLED == 0,
	 * we can not set a gpio port as input and output at the same time,
	 * So we always set the gpio as input. Thus, the gpio can be used on
	 * I2C drivers for example.
	 */
	r = set_reg(pin, 0, FUN_IE);
40081447:	00a2c2        	movi	a12, 0x200
4008144a:	0b0c      	movi.n	a11, 0
4008144c:	03ad      	mov.n	a10, a3
	const uint8_t *line = offs[pin < 32];
4008144e:	805580        	add	a5, a5, a8
	r = set_reg(pin, 0, FUN_IE);
40081451:	fff8e5        	call8	400813e0 <set_reg>
	if (func == PINMUX_INPUT_ENABLED) {
40081454:	051466        	bnei	a4, 1, 4008145d <pinmux_input+0x29>
		reg = (uint32_t *)(DR_REG_GPIO_BASE + line[0]);
40081457:	000582        	l8ui	a8, a5, 0
4008145a:	000286        	j	40081468 <pinmux_input+0x34>
	} else if (func == PINMUX_OUTPUT_ENABLED) {
4008145d:	74ec      	bnez.n	a4, 40081488 <pinmux_input+0x54>
		if (pin >= 34U && pin <= 39U) {
4008145f:	dec342        	addi	a4, a3, -34
40081462:	2264b6        	bltui	a4, 6, 40081488 <pinmux_input+0x54>
			/* These pins are input only */
			return -EINVAL;
		}
		reg = (uint32_t *)(DR_REG_GPIO_BASE + line[1]);
40081465:	010582        	l8ui	a8, a5, 1
40081468:	fc7441        	l32r	a4, 40080638 <_iram_text_start+0xf0>
4008146b:	884a      	add.n	a8, a8, a4
	} else {
		return -EINVAL;
	}

	if (r < 0) {
4008146d:	019a96        	bltz	a10, 4008148a <pinmux_input+0x56>
		return r;
	}

	*reg = BIT(pin - line[2]);
40081470:	020542        	l8ui	a4, a5, 2
40081473:	150c      	movi.n	a5, 1
40081475:	c03340        	sub	a3, a3, a4
40081478:	401300        	ssl	a3
4008147b:	a13500        	sll	a3, a5
4008147e:	0020c0        	memw
40081481:	0839      	s32i.n	a3, a8, 0

	ARG_UNUSED(dev);
	return 0;
40081483:	0a0c      	movi.n	a10, 0
40081485:	000046        	j	4008148a <pinmux_input+0x56>
		return -EINVAL;
40081488:	aa6c      	movi.n	a10, -22
}
4008148a:	0a2d      	mov.n	a2, a10
4008148c:	f01d      	retw.n
	...

40081490 <pinmux_initialize>:
	.pullup = pinmux_pullup,
	.input = pinmux_input
};

static int pinmux_initialize(const struct device *device)
{
40081490:	004136        	entry	a1, 32
	uint32_t pin;

	for (pin = 0U; pin < ARRAY_SIZE(pin_mux_off); pin++) {
40081493:	020c      	movi.n	a2, 0
		pinmux_set(NULL, pin, 0);
40081495:	203220        	or	a3, a2, a2
40081498:	20b220        	or	a11, a2, a2
4008149b:	20c330        	or	a12, a3, a3
4008149e:	20a330        	or	a10, a3, a3
400814a1:	fff725        	call8	40081414 <pinmux_set>
	for (pin = 0U; pin < ARRAY_SIZE(pin_mux_off); pin++) {
400814a4:	221b      	addi.n	a2, a2, 1
400814a6:	882c      	movi.n	a8, 40
400814a8:	ec9287        	bne	a2, a8, 40081498 <pinmux_initialize+0x8>
	}

	ARG_UNUSED(device);
	return 0;
}
400814ab:	020c      	movi.n	a2, 0
400814ad:	f01d      	retw.n
	...

400814b0 <pinmux_pullup>:
{
400814b0:	004136        	entry	a1, 32
400814b3:	744040        	extui	a4, a4, 0, 8
400814b6:	03ad      	mov.n	a10, a3
	switch (func) {
400814b8:	848c      	beqz.n	a4, 400814c4 <pinmux_pullup+0x14>
400814ba:	0f1426        	beqi	a4, 1, 400814cd <pinmux_pullup+0x1d>
	return -EINVAL;
400814bd:	aa6c      	movi.n	a10, -22
400814bf:	0004c6        	j	400814d6 <pinmux_pullup+0x26>
400814c2:	c20000        	quou	a0, a0, a0
		return set_reg(pin, FUN_PU, FUN_PD);
400814c5:	b280a0        	mulsh	a8, a0, a10
400814c8:	4600a1        	l32r	a10, 40052cc8 <esp32_rom_gpio_matrix_out+0x48dbc>
400814cb:	c20001        	l32r	a0, 40071ccc <esp32_rom_gpio_matrix_out+0x67dc0>
		return set_reg(pin, FUN_PD, FUN_PU);
400814ce:	b200a1        	l32r	a10, 4006dcd0 <esp32_rom_gpio_matrix_out+0x63dc4>
400814d1:	e580a0        	extui	a8, a10, 16, 15
400814d4:	2dfff0        	lsi	f15, a15, 180
}
400814d7:	1d0a      	add.n	a1, a13, a0
400814d9:	0000f0        	callx12	a0

400814dc <pinmux_get>:
{
400814dc:	004136        	entry	a1, 32
	if (pin >= ARRAY_SIZE(pin_mux_off)) {
400814df:	782c      	movi.n	a8, 39
		return -EINVAL;
400814e1:	a26c      	movi.n	a2, -22
	if (pin >= ARRAY_SIZE(pin_mux_off)) {
400814e3:	1d3837        	bltu	a8, a3, 40081504 <pinmux_get+0x28>
	off = pin_mux_off[pin];
400814e6:	fc4f21        	l32r	a2, 40080624 <_iram_text_start+0xdc>
400814e9:	223a      	add.n	a2, a2, a3
400814eb:	000282        	l8ui	a8, a2, 0
		return -EINVAL;
400814ee:	a26c      	movi.n	a2, -22
	if (!off) {
400814f0:	089c      	beqz.n	a8, 40081504 <pinmux_get+0x28>
	return (uint32_t *)(DT_INST_REG_ADDR(0) + off);
400814f2:	fc4d21        	l32r	a2, 40080628 <_iram_text_start+0xe0>
400814f5:	882a      	add.n	a8, a8, a2
	*func = (*reg & MCU_SEL_M) >> MCU_SEL_S;
400814f7:	0020c0        	memw
400814fa:	0828      	l32i.n	a2, a8, 0
400814fc:	242c20        	extui	a2, a2, 12, 3
400814ff:	0429      	s32i.n	a2, a4, 0
	return 0;
40081501:	00a022        	movi	a2, 0
}
40081504:	f01d      	retw.n
	...

40081508 <ccompare_isr>:
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
	return val;
}

static void ccompare_isr(const void *arg)
{
40081508:	004136        	entry	a1, 32
	z_xt_ints_off(1 << irq);
}

static ALWAYS_INLINE unsigned int arch_irq_lock(void)
{
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008150b:	0063c0        	rsil	a12, 3
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
4008150e:	03eaa0        	rsr.ccount	a10
	ARG_UNUSED(arg);

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t curr = ccount();
	uint32_t dticks = (curr - last_count) / CYC_PER_TICK;
40081511:	fc4a91        	l32r	a9, 4008063c <_iram_text_start+0xf4>
40081514:	fc4b81        	l32r	a8, 40080640 <_iram_text_start+0xf8>
40081517:	0029b2        	l32i	a11, a9, 0
4008151a:	c0aab0        	sub	a10, a10, a11
4008151d:	a2aa80        	muluh	a10, a10, a8

	last_count += dticks * CYC_PER_TICK;
40081520:	fc4981        	l32r	a8, 40080644 <_iram_text_start+0xfc>
	uint32_t dticks = (curr - last_count) / CYC_PER_TICK;
40081523:	41a9a0        	srli	a10, a10, 9
	last_count += dticks * CYC_PER_TICK;
40081526:	828a80        	mull	a8, a10, a8
40081529:	8088b0        	add	a8, a8, a11
4008152c:	006982        	s32i	a8, a9, 0
	return key;
}

static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
	XTOS_RESTORE_INTLEVEL(key);
4008152f:	13e6c0        	wsr.ps	a12
40081532:	002010        	rsync
		}
		set_ccompare(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
40081535:	01d2e5        	call8	40083264 <z_clock_announce>
}
40081538:	f01d      	retw.n
	...

4008153c <z_clock_driver_init>:

int z_clock_driver_init(const struct device *device)
{
4008153c:	004136        	entry	a1, 32
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
4008153f:	03ea80        	rsr.ccount	a8
	ARG_UNUSED(device);

	IRQ_CONNECT(TIMER_IRQ, 0, ccompare_isr, 0, 0);
	set_ccompare(ccount() + CYC_PER_TICK);
40081542:	fc4091        	l32r	a9, 40080644 <_iram_text_start+0xfc>
40081545:	889a      	add.n	a8, a8, a9
	__asm__ volatile ("wsr.CCOMPARE" STRINGIFY(CONFIG_XTENSA_TIMER_ID) " %0"
40081547:	13f180        	wsr.ccompare1	a8
 */
static inline void z_xt_ints_on(unsigned int mask)
{
	int val;

	__asm__ volatile("rsr.intenable %0" : "=r"(val));
4008154a:	03e480        	rsr.intenable	a8
	val |= mask;
4008154d:	fc3e91        	l32r	a9, 40080648 <_iram_text_start+0x100>
40081550:	208890        	or	a8, a8, a9
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
40081553:	13e480        	wsr.intenable	a8
40081556:	002010        	rsync
	irq_enable(TIMER_IRQ);
	return 0;
}
40081559:	020c      	movi.n	a2, 0
4008155b:	f01d      	retw.n
4008155d:	000000        	ill

40081560 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
40081560:	004136        	entry	a1, 32
	ARG_UNUSED(idle);

#if defined(CONFIG_TICKLESS_KERNEL)
	ticks = ticks == K_TICKS_FOREVER ? MAX_TICKS : ticks;
40081563:	020266        	bnei	a2, -1, 40081569 <z_clock_set_timeout+0x9>
40081566:	fc3921        	l32r	a2, 4008064c <_iram_text_start+0x104>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40081569:	0063c0        	rsil	a12, 3
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
4008156c:	03eab0        	rsr.ccount	a11

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t curr = ccount(), cyc, adj;

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK;
4008156f:	080c      	movi.n	a8, 0
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
40081571:	220b      	addi.n	a2, a2, -1
	cyc = ticks * CYC_PER_TICK;
40081573:	532280        	max	a2, a2, a8
40081576:	fc3581        	l32r	a8, 4008064c <_iram_text_start+0x104>
	adj = (curr - last_count) + (CYC_PER_TICK - 1);
40081579:	fc35a1        	l32r	a10, 40080650 <_iram_text_start+0x108>
	cyc = ticks * CYC_PER_TICK;
4008157c:	432280        	min	a2, a2, a8
	adj = (curr - last_count) + (CYC_PER_TICK - 1);
4008157f:	fc2f81        	l32r	a8, 4008063c <_iram_text_start+0xf4>
	cyc = ticks * CYC_PER_TICK;
40081582:	fc30d1        	l32r	a13, 40080644 <_iram_text_start+0xfc>
	adj = (curr - last_count) + (CYC_PER_TICK - 1);
40081585:	0898      	l32i.n	a9, a8, 0
	cyc = ticks * CYC_PER_TICK;
40081587:	8222d0        	mull	a2, a2, a13
	adj = (curr - last_count) + (CYC_PER_TICK - 1);
4008158a:	c0aa90        	sub	a10, a10, a9
4008158d:	aaba      	add.n	a10, a10, a11
	if (cyc <= MAX_CYC - adj) {
4008158f:	f87c      	movi.n	a8, -1
40081591:	30e8a0        	xor	a14, a8, a10
40081594:	013e27        	bltu	a14, a2, 40081599 <z_clock_set_timeout+0x39>
		cyc += adj;
40081597:	82aa      	add.n	a8, a2, a10
	} else {
		cyc = MAX_CYC;
	}
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
40081599:	fc2921        	l32r	a2, 40080640 <_iram_text_start+0xf8>
4008159c:	a28820        	muluh	a8, a8, a2
	cyc += last_count;

	if ((cyc - curr) < MIN_DELAY) {
4008159f:	e7a322        	movi	a2, 0x3e7
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
400815a2:	418980        	srli	a8, a8, 9
400815a5:	8288d0        	mull	a8, a8, a13
	cyc += last_count;
400815a8:	808980        	add	a8, a9, a8
	if ((cyc - curr) < MIN_DELAY) {
400815ab:	c0b8b0        	sub	a11, a8, a11
400815ae:	0232b7        	bltu	a2, a11, 400815b4 <z_clock_set_timeout+0x54>
		cyc += CYC_PER_TICK;
400815b1:	8088d0        	add	a8, a8, a13
	__asm__ volatile ("wsr.CCOMPARE" STRINGIFY(CONFIG_XTENSA_TIMER_ID) " %0"
400815b4:	13f180        	wsr.ccompare1	a8
	XTOS_RESTORE_INTLEVEL(key);
400815b7:	13e6c0        	wsr.ps	a12
400815ba:	002010        	rsync
	}

	set_ccompare(cyc);
	k_spin_unlock(&lock, key);
#endif
}
400815bd:	f01d      	retw.n
	...

400815c0 <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
400815c0:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400815c3:	006380        	rsil	a8, 3
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
400815c6:	03ea20        	rsr.ccount	a2
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = (ccount() - last_count) / CYC_PER_TICK;
400815c9:	fc1c91        	l32r	a9, 4008063c <_iram_text_start+0xf4>
400815cc:	0998      	l32i.n	a9, a9, 0
400815ce:	c02290        	sub	a2, a2, a9
400815d1:	fc1b91        	l32r	a9, 40080640 <_iram_text_start+0xf8>
400815d4:	a22290        	muluh	a2, a2, a9
400815d7:	412920        	srli	a2, a2, 9
	XTOS_RESTORE_INTLEVEL(key);
400815da:	13e680        	wsr.ps	a8
400815dd:	002010        	rsync

	k_spin_unlock(&lock, key);
	return ret;
}
400815e0:	f01d      	retw.n
	...

400815e4 <z_xtensa_fatal_error>:
	return "na";
#endif
}

void z_xtensa_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
400815e4:	004136        	entry	a1, 32
	if (esf) {
400815e7:	338c      	beqz.n	a3, 400815ee <z_xtensa_fatal_error+0xa>
		z_xtensa_dump_stack(esf);
400815e9:	03ad      	mov.n	a10, a3
400815eb:	01e0e5        	call8	400833f8 <z_xtensa_dump_stack>
	}

	z_fatal_error(reason, esf);
400815ee:	20b330        	or	a11, a3, a3
400815f1:	20a220        	or	a10, a2, a2
400815f4:	010965        	call8	4008268c <z_fatal_error>
}
400815f7:	000090        	retw
	...

400815fc <xtensa_spill_reg_windows>:
        SPILL_ALL_WINDOWS
400815fc:	10ccc0        	and	a12, a12, a12
400815ff:	408030        	rotw	3
40081602:	10ccc0        	and	a12, a12, a12
40081605:	408030        	rotw	3
40081608:	10ccc0        	and	a12, a12, a12
4008160b:	408030        	rotw	3
4008160e:	10ccc0        	and	a12, a12, a12
40081611:	408030        	rotw	3
40081614:	10ccc0        	and	a12, a12, a12
40081617:	408040        	rotw	4
        ret
4008161a:	f00d      	ret.n

4008161c <xtensa_save_high_regs>:
	rsr.WINDOWSTART a2
4008161c:	034920        	rsr.windowstart	a2
	slli a3, a2, (XCHAL_NUM_AREGS / 4)
4008161f:	113200        	slli	a3, a2, 16
	or a2, a2, a3
40081622:	202230        	or	a2, a2, a3
	rsr.WINDOWBASE a3
40081625:	034830        	rsr.windowbase	a3
	ssr a3
40081628:	400300        	ssr	a3
	srl a2, a2
4008162b:	912020        	srl	a2, a2
	mov a3, a1 /* Stash our original stack pointer */
4008162e:	013d      	mov.n	a3, a1
	bbsi a2, 1, _high_gpr_spill_done
40081630:	28e217        	bbsi	a2, 1, 4008165c <_high_gpr_spill_done>
	addi a1, a1, -16
40081633:	f0c112        	addi	a1, a1, -16
	s32i a4, a1, 0
40081636:	0149      	s32i.n	a4, a1, 0
	s32i a5, a1, 4
40081638:	1159      	s32i.n	a5, a1, 4
	s32i a6, a1, 8
4008163a:	2169      	s32i.n	a6, a1, 8
	s32i a7, a1, 12
4008163c:	3179      	s32i.n	a7, a1, 12
	bbsi a2, 2, _high_gpr_spill_done
4008163e:	1ae227        	bbsi	a2, 2, 4008165c <_high_gpr_spill_done>
	addi a1, a1, -16
40081641:	f0c112        	addi	a1, a1, -16
	s32i a8, a1, 0
40081644:	0189      	s32i.n	a8, a1, 0
	s32i a9, a1, 4
40081646:	1199      	s32i.n	a9, a1, 4
	s32i a10, a1, 8
40081648:	21a9      	s32i.n	a10, a1, 8
	s32i a11, a1, 12
4008164a:	31b9      	s32i.n	a11, a1, 12
	bbsi a2, 3, _high_gpr_spill_done
4008164c:	0ce237        	bbsi	a2, 3, 4008165c <_high_gpr_spill_done>
	addi a1, a1, -16
4008164f:	f0c112        	addi	a1, a1, -16
	s32i a12, a1, 0
40081652:	01c9      	s32i.n	a12, a1, 0
	s32i a13, a1, 4
40081654:	11d9      	s32i.n	a13, a1, 4
	s32i a14, a1, 8
40081656:	0261e2        	s32i	a14, a1, 8
	s32i a15, a1, 12
40081659:	0361f2        	s32i	a15, a1, 12

4008165c <_high_gpr_spill_done>:
	addi a1, a1, -4
4008165c:	fcc112        	addi	a1, a1, -4
	s32i a3, a1, 0
4008165f:	0139      	s32i.n	a3, a1, 0
	ret
40081661:	f00d      	ret.n
	...

40081664 <xtensa_restore_high_regs>:
	l32i a2, a1, 0
40081664:	0128      	l32i.n	a2, a1, 0
	addi a1, a1, 4
40081666:	114b      	addi.n	a1, a1, 4
	mov a3, a2
40081668:	023d      	mov.n	a3, a2
	beq a1, a2, _high_restore_done
4008166a:	261127        	beq	a1, a2, 40081694 <_high_restore_done>
	addi a2, a2, -16
4008166d:	f0c222        	addi	a2, a2, -16
	l32i a4, a2, 0
40081670:	0248      	l32i.n	a4, a2, 0
	l32i a5, a2, 4
40081672:	1258      	l32i.n	a5, a2, 4
	l32i a6, a2, 8
40081674:	2268      	l32i.n	a6, a2, 8
	l32i a7, a2, 12
40081676:	3278      	l32i.n	a7, a2, 12
	beq a1, a2, _high_restore_done
40081678:	181127        	beq	a1, a2, 40081694 <_high_restore_done>
	addi a2, a2, -16
4008167b:	f0c222        	addi	a2, a2, -16
	l32i a8, a2, 0
4008167e:	0288      	l32i.n	a8, a2, 0
	l32i a9, a2, 4
40081680:	1298      	l32i.n	a9, a2, 4
	l32i a10, a2, 8
40081682:	22a8      	l32i.n	a10, a2, 8
	l32i a11, a2, 12
40081684:	32b8      	l32i.n	a11, a2, 12
	beq a1, a2, _high_restore_done
40081686:	0a1127        	beq	a1, a2, 40081694 <_high_restore_done>
	addi a2, a2, -16
40081689:	f0c222        	addi	a2, a2, -16
	l32i a12, a2, 0
4008168c:	02c8      	l32i.n	a12, a2, 0
	l32i a13, a2, 4
4008168e:	12d8      	l32i.n	a13, a2, 4
	l32i a14, a2, 8
40081690:	22e8      	l32i.n	a14, a2, 8
	l32i a15, a2, 12
40081692:	32f8      	l32i.n	a15, a2, 12

40081694 <_high_restore_done>:
	mov a1, a3 /* Original stack */
40081694:	031d      	mov.n	a1, a3
	ret
40081696:	f00d      	ret.n
	...

40081699 <_restore_context>:
	call0 xtensa_restore_high_regs
40081699:	fffc85        	call0	40081664 <xtensa_restore_high_regs>
	l32i a0, a1, BSA_PC_OFF
4008169c:	6108      	l32i.n	a0, a1, 24
	wsr.EPC6 a0
4008169e:	13b600        	wsr.epc6	a0
	l32i a0, a1, BSA_PS_OFF
400816a1:	5108      	l32i.n	a0, a1, 20
	wsr.EPS6 a0
400816a3:	13c600        	wsr.eps6	a0
	l32i a0, a1, BSA_SAR_OFF
400816a6:	4108      	l32i.n	a0, a1, 16
	wsr.SAR a0
400816a8:	130300        	wsr.sar	a0
	l32i a0, a1, BSA_LBEG_OFF
400816ab:	3108      	l32i.n	a0, a1, 12
	wsr.LBEG a0
400816ad:	130000        	wsr.lbeg	a0
	l32i a0, a1, BSA_LEND_OFF
400816b0:	2108      	l32i.n	a0, a1, 8
	wsr.LEND a0
400816b2:	130100        	wsr.lend	a0
	l32i a0, a1, BSA_LCOUNT_OFF
400816b5:	1108      	l32i.n	a0, a1, 4
	wsr.LCOUNT a0
400816b7:	130200        	wsr.lcount	a0
	l32i a0, a1, BSA_SCOMPARE1_OFF
400816ba:	0108      	l32i.n	a0, a1, 0
	wsr.SCOMPARE1 a0
400816bc:	130c00        	wsr.scompare1	a0
	rsync
400816bf:	002010        	rsync
	l32i a0, a1, BSA_A0_OFF
400816c2:	7108      	l32i.n	a0, a1, 28
	l32i a2, a1, BSA_A2_OFF
400816c4:	9128      	l32i.n	a2, a1, 36
	l32i a3, a1, BSA_A3_OFF
400816c6:	a138      	l32i.n	a3, a1, 40
	addi a1, a1, BASE_SAVE_AREA_SIZE
400816c8:	3cc112        	addi	a1, a1, 60
	rfi 6
400816cb:	003610        	rfi	6
	...

400816d0 <xtensa_switch>:
	entry a1, 16
400816d0:	002136        	entry	a1, 16
	SPILL_ALL_WINDOWS
400816d3:	10ccc0        	and	a12, a12, a12
400816d6:	408030        	rotw	3
400816d9:	10ccc0        	and	a12, a12, a12
400816dc:	408030        	rotw	3
400816df:	10ccc0        	and	a12, a12, a12
400816e2:	408030        	rotw	3
400816e5:	10ccc0        	and	a12, a12, a12
400816e8:	408030        	rotw	3
400816eb:	10ccc0        	and	a12, a12, a12
400816ee:	408040        	rotw	4
	addi a1, a1, -BASE_SAVE_AREA_SIZE
400816f1:	c4c112        	addi	a1, a1, -60
	s32i a0, a1, BSA_A0_OFF
400816f4:	7109      	s32i.n	a0, a1, 28
	s32i a2, a1, BSA_A2_OFF
400816f6:	9129      	s32i.n	a2, a1, 36
	s32i a3, a1, BSA_A3_OFF
400816f8:	a139      	s32i.n	a3, a1, 40
	ODD_REG_SAVE
400816fa:	030300        	rsr.sar	a0
400816fd:	4109      	s32i.n	a0, a1, 16
400816ff:	030000        	rsr.lbeg	a0
40081702:	3109      	s32i.n	a0, a1, 12
40081704:	030100        	rsr.lend	a0
40081707:	2109      	s32i.n	a0, a1, 8
40081709:	030200        	rsr.lcount	a0
4008170c:	1109      	s32i.n	a0, a1, 4
4008170e:	030c00        	rsr.scompare1	a0
40081711:	0109      	s32i.n	a0, a1, 0
	rsr.PS a0
40081713:	03e600        	rsr.ps	a0
	s32i a0, a1, BSA_PS_OFF
40081716:	5109      	s32i.n	a0, a1, 20
	movi a0, _switch_restore_pc
40081718:	fbcf01        	l32r	a0, 40080654 <_iram_text_start+0x10c>
	s32i a0, a1, BSA_PC_OFF
4008171b:	6109      	s32i.n	a0, a1, 24
	call0 xtensa_save_high_regs
4008171d:	ffefc5        	call0	4008161c <xtensa_save_high_regs>
	l32i a2, a1, 0
40081720:	0128      	l32i.n	a2, a1, 0
	l32i a3, a2, BSA_A3_OFF
40081722:	a238      	l32i.n	a3, a2, 40
	s32i a1, a3, 0
40081724:	0319      	s32i.n	a1, a3, 0
	l32i a1, a2, BSA_A2_OFF
40081726:	9218      	l32i.n	a1, a2, 36
	j _restore_context
40081728:	ffdb46        	j	40081699 <_restore_context>

4008172b <_switch_restore_pc>:
	retw
4008172b:	f01d      	retw.n
4008172d:	000000        	ill

40081730 <_handle_excint>:
	EXCINT_HANDLER CONFIG_XTENSA_KERNEL_CPU_PTR_SR, ___cpu_t_nested_OFFSET, ___cpu_t_irq_stack_OFFSET
40081730:	8129      	s32i.n	a2, a1, 32
40081732:	030300        	rsr.sar	a0
40081735:	4109      	s32i.n	a0, a1, 16
40081737:	030000        	rsr.lbeg	a0
4008173a:	3109      	s32i.n	a0, a1, 12
4008173c:	030100        	rsr.lend	a0
4008173f:	2109      	s32i.n	a0, a1, 8
40081741:	030200        	rsr.lcount	a0
40081744:	1109      	s32i.n	a0, a1, 4
40081746:	030c00        	rsr.scompare1	a0
40081749:	0109      	s32i.n	a0, a1, 0
4008174b:	ffed05        	call0	4008161c <xtensa_save_high_regs>
4008174e:	0128      	l32i.n	a2, a1, 0
40081750:	8228      	l32i.n	a2, a2, 32
40081752:	03e600        	rsr.ps	a0
40081755:	f30c      	movi.n	a3, 15
40081757:	100030        	and	a0, a0, a3
4008175a:	a0cc      	bnez.n	a0, 40081768 <_not_l1>
4008175c:	03e600        	rsr.ps	a0
4008175f:	01a032        	movi	a3, 1
40081762:	200030        	or	a0, a0, a3
40081765:	13e600        	wsr.ps	a0

40081768 <_not_l1>:
40081768:	03e600        	rsr.ps	a0
4008176b:	f36c      	movi.n	a3, -17
4008176d:	100030        	and	a0, a0, a3
40081770:	13e600        	wsr.ps	a0
40081773:	002010        	rsync
40081776:	03f430        	rsr.misc0	a3
40081779:	0308      	l32i.n	a0, a3, 0
4008177b:	708c      	beqz.n	a0, 40081786 <_switch_stacks_3>
4008177d:	001b      	addi.n	a0, a0, 1
4008177f:	0309      	s32i.n	a0, a3, 0
40081781:	013d      	mov.n	a3, a1
40081783:	000146        	j	4008178c <_do_call_3>

40081786 <_switch_stacks_3>:
40081786:	001b      	addi.n	a0, a0, 1
40081788:	0309      	s32i.n	a0, a3, 0
4008178a:	1338      	l32i.n	a3, a3, 4

4008178c <_do_call_3>:
4008178c:	036d      	mov.n	a6, a3
4008178e:	01ad      	mov.n	a10, a1
40081790:	013d      	mov.n	a3, a1
40081792:	02bd      	mov.n	a11, a2
40081794:	0118      	l32i.n	a1, a1, 0
40081796:	3cc112        	addi	a1, a1, 60
40081799:	000095        	call4	400817a4 <_xstack_call0_5>
4008179c:	031d      	mov.n	a1, a3
4008179e:	062d      	mov.n	a2, a6
400817a0:	0003c6        	j	400817b3 <_xstack_returned_5>
	...

400817a4 <_xstack_call0_5>:
400817a4:	002136        	entry	a1, 16
400817a7:	021d      	mov.n	a1, a2
400817a9:	000055        	call4	400817b0 <_xstack_call1_5>
400817ac:	062d      	mov.n	a2, a6
400817ae:	f01d      	retw.n

400817b0 <_xstack_call1_5>:
400817b0:	0007a0        	jx	a7

400817b3 <_xstack_returned_5>:
400817b3:	006700        	rsil	a0, 7
400817b6:	03f430        	rsr.misc0	a3
400817b9:	0308      	l32i.n	a0, a3, 0
400817bb:	000b      	addi.n	a0, a0, -1
400817bd:	0309      	s32i.n	a0, a3, 0
400817bf:	251617        	beq	a6, a1, 400817e8 <_restore_3>
400817c2:	0118      	l32i.n	a1, a1, 0
400817c4:	3cc112        	addi	a1, a1, 60
400817c7:	10ccc0        	and	a12, a12, a12
400817ca:	408030        	rotw	3
400817cd:	10ccc0        	and	a12, a12, a12
400817d0:	408030        	rotw	3
400817d3:	10ccc0        	and	a12, a12, a12
400817d6:	408030        	rotw	3
400817d9:	10ccc0        	and	a12, a12, a12
400817dc:	408030        	rotw	3
400817df:	10ccc0        	and	a12, a12, a12
400817e2:	408040        	rotw	4
400817e5:	201660        	or	a1, a6, a6

400817e8 <_restore_3>:
400817e8:	ffab46        	j	40081699 <_restore_context>
	...

400817ec <xtensa_init_stack>:
LOG_MODULE_DECLARE(os);

void *xtensa_init_stack(int *stack_top,
			void (*entry)(void *, void *, void *),
			void *arg1, void *arg2, void *arg3)
{
400817ec:	004136        	entry	a1, 32
	 * arrange to enter the function with a CALLINC of 1 and a
	 * stack pointer 16 bytes above the top, so its ENTRY at the
	 * start will decrement the stack pointer by 16.
	 */
	const int bsasz = BASE_SAVE_AREA_SIZE - 16;
	void **bsa = (void **) (((char *) stack_top) - bsasz);
400817ef:	d4c272        	addi	a7, a2, -44

	(void)memset(bsa, 0, bsasz);
400817f2:	cc2c      	movi.n	a12, 44
400817f4:	0b0c      	movi.n	a11, 0
400817f6:	20a770        	or	a10, a7, a7
400817f9:	01c225        	call8	4008341c <memset>

	bsa[BSA_PC_OFF/4] = z_thread_entry;
400817fc:	fb9791        	l32r	a9, 40080658 <_iram_text_start+0x110>
400817ff:	ecc282        	addi	a8, a2, -20
40081802:	0899      	s32i.n	a9, a8, 0
	bsa[BSA_PS_OFF/4] = (void *)(PS_WOE | PS_UM | PS_CALLINC(1));
40081804:	fb9691        	l32r	a9, 4008065c <_iram_text_start+0x114>
40081807:	e8c282        	addi	a8, a2, -24
4008180a:	0899      	s32i.n	a9, a8, 0
	/* Arguments to z_thread_entry().  Remember these start at A6,
	 * which will be rotated into A2 by the ENTRY instruction that
	 * begins the C function.  And A4-A7 and A8-A11 are optional
	 * quads that live below the BSA!
	 */
	bsa[-1] = arg1;  /* a7 */
4008180c:	d0c282        	addi	a8, a2, -48
4008180f:	0849      	s32i.n	a4, a8, 0
	bsa[-2] = entry; /* a6 */
40081811:	ccc282        	addi	a8, a2, -52
40081814:	0839      	s32i.n	a3, a8, 0
	bsa[-3] = 0;     /* a5 */
40081816:	c8c292        	addi	a9, a2, -56
40081819:	080c      	movi.n	a8, 0
4008181b:	0989      	s32i.n	a8, a9, 0
	bsa[-4] = 0;     /* a4 */
4008181d:	c4c292        	addi	a9, a2, -60
40081820:	0989      	s32i.n	a8, a9, 0

	bsa[-5] = 0;     /* a11 */
40081822:	c0c292        	addi	a9, a2, -64
40081825:	0989      	s32i.n	a8, a9, 0
	bsa[-6] = 0;     /* a10 */
40081827:	bcc292        	addi	a9, a2, -68
4008182a:	0989      	s32i.n	a8, a9, 0
	bsa[-7] = arg3;  /* a9 */
4008182c:	b8c282        	addi	a8, a2, -72
4008182f:	0869      	s32i.n	a6, a8, 0
	bsa[-8] = arg2;  /* a8 */
40081831:	b4c282        	addi	a8, a2, -76
40081834:	0859      	s32i.n	a5, a8, 0

	/* Finally push the BSA pointer and return the stack pointer
	 * as the handle
	 */
	bsa[-9] = bsa;
40081836:	b0c222        	addi	a2, a2, -80
40081839:	0279      	s32i.n	a7, a2, 0
	return &bsa[-9];
}
4008183b:	f01d      	retw.n
4008183d:	000000        	ill

40081840 <arch_new_thread>:

void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
40081840:	004136        	entry	a1, 32
	thread->switch_handle = xtensa_init_stack((int *)stack_ptr, entry,
40081843:	81e8      	l32i.n	a14, a1, 32
{
40081845:	07dd      	mov.n	a13, a7
	thread->switch_handle = xtensa_init_stack((int *)stack_ptr, entry,
40081847:	06cd      	mov.n	a12, a6
40081849:	05bd      	mov.n	a11, a5
4008184b:	04ad      	mov.n	a10, a4
4008184d:	fff9e5        	call8	400817ec <xtensa_init_stack>
40081850:	1462a2        	s32i	a10, a2, 80
						  p1, p2, p3);
}
40081853:	f01d      	retw.n
40081855:	000000        	ill

40081858 <z_irq_spurious>:

void z_irq_spurious(const void *arg)
{
40081858:	004136        	entry	a1, 32
	int irqs, ie;

	ARG_UNUSED(arg);

	__asm__ volatile("rsr.interrupt %0" : "=r"(irqs));
4008185b:	03e280        	rsr.interrupt	a8
	__asm__ volatile("rsr.intenable %0" : "=r"(ie));
4008185e:	03e480        	rsr.intenable	a8
	LOG_ERR(" ** Spurious INTERRUPT(s) %p, INTENABLE = %p",
		(void *)irqs, (void *)ie);
	z_xtensa_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
40081861:	0b0c      	movi.n	a11, 0
40081863:	1a0c      	movi.n	a10, 1
40081865:	ffd7e5        	call8	400815e4 <z_xtensa_fatal_error>
}
40081868:	f01d      	retw.n
	...

4008186c <xtensa_int2_c>:
		__asm__ volatile("wsr.intclear %0" : : "r"(m)); \
	}							\
	return z_get_next_switch_handle(interrupted_stack);		\
}

DEF_INT_C_HANDLER(2)
4008186c:	004136        	entry	a1, 32
4008186f:	03e240        	rsr.interrupt	a4
40081872:	03e430        	rsr.intenable	a3

static inline int _xtensa_handle_one_int2(unsigned int mask)
{
	int irq;

	if (mask & BIT(19)) {
40081875:	fb7a51        	l32r	a5, 40080660 <_iram_text_start+0x118>
40081878:	104430        	and	a4, a4, a3
4008187b:	0e8457        	bany	a4, a5, 4008188d <xtensa_int2_c+0x21>
		mask = BIT(19);
		irq = 19;
		goto handle_irq;
	}
	if (mask & BIT(20)) {
4008187e:	fb7931        	l32r	a3, 40080664 <_iram_text_start+0x11c>
40081881:	0f8437        	bany	a4, a3, 40081894 <xtensa_int2_c+0x28>
		mask = BIT(20);
		irq = 20;
		goto handle_irq;
	}
	if (mask & BIT(21)) {
40081884:	fb7931        	l32r	a3, 40080668 <_iram_text_start+0x120>
40081887:	0e8437        	bany	a4, a3, 40081899 <xtensa_int2_c+0x2d>
4008188a:	000986        	j	400818b4 <xtensa_int2_c+0x48>
		irq = 19;
4008188d:	381c      	movi.n	a8, 19
		mask = BIT(19);
4008188f:	053d      	mov.n	a3, a5
40081891:	000186        	j	4008189b <xtensa_int2_c+0x2f>
		irq = 20;
40081894:	481c      	movi.n	a8, 20
40081896:	000046        	j	4008189b <xtensa_int2_c+0x2f>
		mask = BIT(21);
		irq = 21;
40081899:	581c      	movi.n	a8, 21
		goto handle_irq;
	}
	return 0;
handle_irq:
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
4008189b:	fb7491        	l32r	a9, 4008066c <_iram_text_start+0x124>
4008189e:	1188d0        	slli	a8, a8, 3
400818a1:	898a      	add.n	a8, a9, a8
400818a3:	1898      	l32i.n	a9, a8, 4
400818a5:	08a8      	l32i.n	a10, a8, 0
400818a7:	304430        	xor	a4, a4, a3
400818aa:	0009e0        	callx8	a9
400818ad:	13e330        	wsr.intclear	a3
400818b0:	fff1c6        	j	4008187b <xtensa_int2_c+0xf>
400818b3:	a22000        	muluh	a2, a0, a0
400818b6:	046520        	extui	a6, a2, 5, 1
400818b9:	2aa001        	l32r	a0, 4004c33c <esp32_rom_gpio_matrix_out+0x42430>
400818bc:	009020        	all4	b2, b0:b1:b2:b3
	...

400818c0 <xtensa_int3_c>:
DEF_INT_C_HANDLER(3)
400818c0:	004136        	entry	a1, 32
400818c3:	03e240        	rsr.interrupt	a4
400818c6:	03e430        	rsr.intenable	a3
400818c9:	104430        	and	a4, a4, a3
	if (mask & 0x408800) {
400818cc:	fb6c31        	l32r	a3, 4008067c <_iram_text_start+0x134>
400818cf:	150437        	bnone	a4, a3, 400818e8 <xtensa_int3_c+0x28>
		if (mask & BIT(11)) {
400818d2:	fb5631        	l32r	a3, 4008062c <_iram_text_start+0xe4>
400818d5:	268437        	bany	a4, a3, 400818ff <xtensa_int3_c+0x3f>
		if (mask & BIT(15)) {
400818d8:	fb5c31        	l32r	a3, 40080648 <_iram_text_start+0x100>
400818db:	258437        	bany	a4, a3, 40081904 <xtensa_int3_c+0x44>
		if (mask & BIT(22)) {
400818de:	fb6431        	l32r	a3, 40080670 <_iram_text_start+0x128>
400818e1:	490437        	bnone	a4, a3, 4008192e <xtensa_int3_c+0x6e>
400818e4:	000846        	j	40081909 <xtensa_int3_c+0x49>
400818e7:	633100        	minu	a3, a1, a0
		if (mask & BIT(23)) {
400818ea:	37fb      	addi.n	a3, a7, 15
400818ec:	311f84        	lsi	f8, a15, 196
		if (mask & BIT(27)) {
400818ef:	fb49      	s32i.n	a4, a11, 60
400818f1:	1f8437        	bany	a4, a3, 40081914 <xtensa_int3_c+0x54>
		if (mask & BIT(29)) {
400818f4:	fb6131        	l32r	a3, 40080678 <_iram_text_start+0x130>
400818f7:	330437        	bnone	a4, a3, 4008192e <xtensa_int3_c+0x6e>
			irq = 29;
400818fa:	d81c      	movi.n	a8, 29
400818fc:	000586        	j	40081916 <xtensa_int3_c+0x56>
			irq = 11;
400818ff:	b80c      	movi.n	a8, 11
40081901:	000446        	j	40081916 <xtensa_int3_c+0x56>
			irq = 15;
40081904:	f80c      	movi.n	a8, 15
40081906:	000306        	j	40081916 <xtensa_int3_c+0x56>
			irq = 22;
40081909:	681c      	movi.n	a8, 22
4008190b:	0001c6        	j	40081916 <xtensa_int3_c+0x56>
			irq = 23;
4008190e:	781c      	movi.n	a8, 23
40081910:	000086        	j	40081916 <xtensa_int3_c+0x56>
40081913:	b81c00        	lsi	f0, a12, 0x2e0
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
40081916:	fb5591        	l32r	a9, 4008066c <_iram_text_start+0x124>
40081919:	1188d0        	slli	a8, a8, 3
4008191c:	898a      	add.n	a8, a9, a8
4008191e:	1898      	l32i.n	a9, a8, 4
40081920:	08a8      	l32i.n	a10, a8, 0
40081922:	304430        	xor	a4, a4, a3
40081925:	0009e0        	callx8	a9
40081928:	13e330        	wsr.intclear	a3
4008192b:	ffe746        	j	400818cc <xtensa_int3_c+0xc>
4008192e:	20a220        	or	a10, a2, a2
40081931:	00fca5        	call8	400828fc <z_get_next_switch_handle>
40081934:	202aa0        	or	a2, a10, a10
40081937:	000090        	retw
	...

4008193c <xtensa_int4_c>:
DEF_INT_C_HANDLER(4)
4008193c:	004136        	entry	a1, 32
4008193f:	03e240        	rsr.interrupt	a4
40081942:	03e430        	rsr.intenable	a3
40081945:	104430        	and	a4, a4, a3

static inline int _xtensa_handle_one_int4(unsigned int mask)
{
	int irq;

	if (mask & 0x3000000) {
40081948:	fb5231        	l32r	a3, 40080690 <_iram_text_start+0x148>
4008194b:	0e0437        	bnone	a4, a3, 4008195d <xtensa_int4_c+0x21>
		if (mask & BIT(24)) {
4008194e:	fb4c31        	l32r	a3, 40080680 <_iram_text_start+0x138>
40081951:	198437        	bany	a4, a3, 4008196e <xtensa_int4_c+0x32>
			mask = BIT(24);
			irq = 24;
			goto handle_irq;
		}
		if (mask & BIT(25)) {
40081954:	fb4c31        	l32r	a3, 40080684 <_iram_text_start+0x13c>
40081957:	370437        	bnone	a4, a3, 40081992 <xtensa_int4_c+0x56>
4008195a:	000546        	j	40081973 <xtensa_int4_c+0x37>
			mask = BIT(25);
			irq = 25;
			goto handle_irq;
		}
	} else {
		if (mask & BIT(28)) {
4008195d:	fb4a31        	l32r	a3, 40080688 <_iram_text_start+0x140>
40081960:	148437        	bany	a4, a3, 40081978 <xtensa_int4_c+0x3c>
			mask = BIT(28);
			irq = 28;
			goto handle_irq;
		}
		if (mask & BIT(30)) {
40081963:	fb4a31        	l32r	a3, 4008068c <_iram_text_start+0x144>
40081966:	280437        	bnone	a4, a3, 40081992 <xtensa_int4_c+0x56>
			mask = BIT(30);
			irq = 30;
40081969:	e81c      	movi.n	a8, 30
4008196b:	0002c6        	j	4008197a <xtensa_int4_c+0x3e>
			irq = 24;
4008196e:	881c      	movi.n	a8, 24
40081970:	000186        	j	4008197a <xtensa_int4_c+0x3e>
			irq = 25;
40081973:	981c      	movi.n	a8, 25
40081975:	000046        	j	4008197a <xtensa_int4_c+0x3e>
			irq = 28;
40081978:	c81c      	movi.n	a8, 28
			goto handle_irq;
		}
	}
	return 0;
handle_irq:
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
4008197a:	fb3c91        	l32r	a9, 4008066c <_iram_text_start+0x124>
4008197d:	1188d0        	slli	a8, a8, 3
40081980:	898a      	add.n	a8, a9, a8
40081982:	1898      	l32i.n	a9, a8, 4
40081984:	08a8      	l32i.n	a10, a8, 0
40081986:	304430        	xor	a4, a4, a3
40081989:	0009e0        	callx8	a9
4008198c:	13e330        	wsr.intclear	a3
4008198f:	ffed46        	j	40081948 <xtensa_int4_c+0xc>
40081992:	20a220        	or	a10, a2, a2
40081995:	00f665        	call8	400828fc <z_get_next_switch_handle>
40081998:	202aa0        	or	a2, a10, a10
4008199b:	000090        	retw
	...

400819a0 <xtensa_int5_c>:
DEF_INT_C_HANDLER(5)
400819a0:	004136        	entry	a1, 32
400819a3:	03e240        	rsr.interrupt	a4
400819a6:	03e430        	rsr.intenable	a3
	if (mask & BIT(16)) {
400819a9:	fb3a51        	l32r	a5, 40080694 <_iram_text_start+0x14c>
400819ac:	104430        	and	a4, a4, a3
400819af:	0001c6        	j	400819ba <xtensa_int5_c+0x1a>
400819b2:	300000        	xor	a0, a0, a0
400819b5:	303044        	lsi	f4, a0, 192
400819b8:	5713e3        	lsi	f14, a3, 0x15c
400819bb:	311084        	lsi	f8, a0, 196
	if (mask & BIT(26)) {
400819be:	37fb36        	entry	a11, 0x1bf8
400819c1:	d61184        	lsi	f8, a1, 0x358
	if (mask & BIT(31)) {
400819c4:	1c0254        	lsi	f5, a2, 112
		irq = 31;
400819c7:	31f8      	l32i.n	a15, a1, 12
		mask = BIT(31);
400819c9:	06fb35        	call12	4008897c <_iram_text_end+0x4dea>
400819cc:	1c0002        	l8ui	a0, a0, 28
		irq = 16;
400819cf:	3d08      	l32i.n	a0, a13, 12
		mask = BIT(16);
400819d1:	004605        	call0	40081e34 <i2c_esp32_configure_pins+0x38>
400819d4:	a81c00        	lsi	f0, a12, 0x2a0
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
400819d7:	fb2591        	l32r	a9, 4008066c <_iram_text_start+0x124>
400819da:	1188d0        	slli	a8, a8, 3
400819dd:	808980        	add	a8, a9, a8
400819e0:	012892        	l32i	a9, a8, 4
400819e3:	0028a2        	l32i	a10, a8, 0
400819e6:	0009e0        	callx8	a9
400819e9:	fc7356        	bnez	a3, 400819b4 <xtensa_int5_c+0x14>
400819ec:	20a220        	or	a10, a2, a2
400819ef:	00f0e5        	call8	400828fc <z_get_next_switch_handle>
400819f2:	202aa0        	or	a2, a10, a10
400819f5:	000090        	retw

400819f8 <xtensa_int6_c>:
DEF_INT_C_HANDLER(6)
400819f8:	004136        	entry	a1, 32
400819fb:	20a220        	or	a10, a2, a2
400819fe:	03e280        	rsr.interrupt	a8
40081a01:	03e480        	rsr.intenable	a8
40081a04:	00ef65        	call8	400828fc <z_get_next_switch_handle>
40081a07:	202aa0        	or	a2, a10, a10
40081a0a:	000090        	retw
40081a0d:	000000        	ill

40081a10 <xtensa_int7_c>:
DEF_INT_C_HANDLER(7)
40081a10:	004136        	entry	a1, 32
40081a13:	03e230        	rsr.interrupt	a3
40081a16:	03e440        	rsr.intenable	a4
40081a19:	103340        	and	a3, a3, a4
	if (mask & BIT(14)) {
40081a1c:	fb2141        	l32r	a4, 400806a0 <_iram_text_start+0x158>
40081a1f:	150347        	bnone	a3, a4, 40081a38 <xtensa_int7_c+0x28>
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
40081a22:	fb1281        	l32r	a8, 4008066c <_iram_text_start+0x124>
40081a25:	303340        	xor	a3, a3, a4
40081a28:	1d2892        	l32i	a9, a8, 116
40081a2b:	1c28a2        	l32i	a10, a8, 112
40081a2e:	0009e0        	callx8	a9
40081a31:	13e340        	wsr.intclear	a4
40081a34:	fff9c6        	j	40081a1f <xtensa_int7_c+0xf>
40081a37:	a22000        	muluh	a2, a0, a0
40081a3a:	ec2520        	lsi	f2, a5, 0x3b0
40081a3d:	2aa000        	mul.s	f10, f0, f0
40081a40:	009020        	all4	b2, b0:b1:b2:b3
	...

40081a44 <xtensa_excint1_c>:
 * DEF_EXCINT 1 vector declaration in assembly code.  This one looks
 * different because exceptions and interrupts land at the same
 * vector; other interrupt levels have their own vectors.
 */
void *xtensa_excint1_c(int *interrupted_stack)
{
40081a44:	004136        	entry	a1, 32
	int cause, vaddr, *bsa = *(int **)interrupted_stack;

	__asm__ volatile("rsr.exccause %0" : "=r"(cause));
40081a47:	03e850        	rsr.exccause	a5

	if (cause == EXCCAUSE_LEVEL1_INTERRUPT) {
40081a4a:	024526        	beqi	a5, 4, 40081a50 <xtensa_excint1_c+0xc>
40081a4d:	0045c6        	j	40081b68 <xtensa_excint1_c+0x124>
static inline DEF_INT_C_HANDLER(1)
40081a50:	03e240        	rsr.interrupt	a4
40081a53:	03e430        	rsr.intenable	a3
		if (mask & 0x780) {
40081a56:	80a762        	movi	a6, 0x780
40081a59:	104430        	and	a4, a4, a3
	if (mask & 0x7f) {
40081a5c:	643040        	extui	a3, a4, 0, 7
40081a5f:	048316        	beqz	a3, 40081aab <xtensa_excint1_c+0x67>
		if (mask & 0x7) {
40081a62:	243040        	extui	a3, a4, 0, 3
40081a65:	739c      	beqz.n	a3, 40081a80 <xtensa_excint1_c+0x3c>
			if (mask & BIT(0)) {
40081a67:	043040        	extui	a3, a4, 0, 1
40081a6a:	09a356        	bnez	a3, 40081b08 <xtensa_excint1_c+0xc4>
			if (mask & BIT(1)) {
40081a6d:	290c      	movi.n	a9, 2
40081a6f:	020497        	bnone	a4, a9, 40081a75 <xtensa_excint1_c+0x31>
40081a72:	0025c6        	j	40081b0d <xtensa_excint1_c+0xc9>
			if (mask & BIT(2)) {
40081a75:	430c      	movi.n	a3, 4
40081a77:	028437        	bany	a4, a3, 40081a7d <xtensa_excint1_c+0x39>
40081a7a:	004186        	j	40081b84 <xtensa_excint1_c+0x140>
40081a7d:	0024c6        	j	40081b14 <xtensa_excint1_c+0xd0>
			if (mask & 0x18) {
40081a80:	831c      	movi.n	a3, 24
40081a82:	120437        	bnone	a4, a3, 40081a98 <xtensa_excint1_c+0x54>
				if (mask & BIT(3)) {
40081a85:	830c      	movi.n	a3, 8
40081a87:	020437        	bnone	a4, a3, 40081a8d <xtensa_excint1_c+0x49>
40081a8a:	0022c6        	j	40081b19 <xtensa_excint1_c+0xd5>
				if (mask & BIT(4)) {
40081a8d:	031c      	movi.n	a3, 16
40081a8f:	028437        	bany	a4, a3, 40081a95 <xtensa_excint1_c+0x51>
40081a92:	003b86        	j	40081b84 <xtensa_excint1_c+0x140>
40081a95:	002186        	j	40081b1f <xtensa_excint1_c+0xdb>
				if (mask & BIT(5)) {
40081a98:	032c      	movi.n	a3, 32
40081a9a:	020437        	bnone	a4, a3, 40081aa0 <xtensa_excint1_c+0x5c>
40081a9d:	0020c6        	j	40081b24 <xtensa_excint1_c+0xe0>
				if (mask & BIT(6)) {
40081aa0:	034c      	movi.n	a3, 64
40081aa2:	028437        	bany	a4, a3, 40081aa8 <xtensa_excint1_c+0x64>
40081aa5:	0036c6        	j	40081b84 <xtensa_excint1_c+0x140>
40081aa8:	001f46        	j	40081b29 <xtensa_excint1_c+0xe5>
		if (mask & 0x780) {
40081aab:	2d0467        	bnone	a4, a6, 40081adc <xtensa_excint1_c+0x98>
			if (mask & 0x180) {
40081aae:	80a132        	movi	a3, 0x180
40081ab1:	130437        	bnone	a4, a3, 40081ac8 <xtensa_excint1_c+0x84>
				if (mask & BIT(7)) {
40081ab4:	80a032        	movi	a3, 128
40081ab7:	738437        	bany	a4, a3, 40081b2e <xtensa_excint1_c+0xea>
				if (mask & BIT(8)) {
40081aba:	00a132        	movi	a3, 0x100
40081abd:	028437        	bany	a4, a3, 40081ac3 <xtensa_excint1_c+0x7f>
40081ac0:	003006        	j	40081b84 <xtensa_excint1_c+0x140>
40081ac3:	001b06        	j	40081b33 <xtensa_excint1_c+0xef>
40081ac6:	320000        	orbc	b0, b0, b0
				if (mask & BIT(9)) {
40081ac9:	3700a2        	l8ui	a10, a0, 55
40081acc:	326984        	lsi	f8, a9, 200
				if (mask & BIT(10)) {
40081acf:	3700a4        	lsi	f10, a0, 220
40081ad2:	060284        	lsi	f8, a2, 24
40081ad5:	002b      	addi.n	a0, a0, 2
40081ad7:	001886        	j	40081b3d <xtensa_excint1_c+0xf9>
40081ada:	310000        	srai	a0, a0, 16
			if (mask & 0x3000) {
40081add:	37faf5        	call12	400b9a8c <_iram_text_end+0x35efa>
40081ae0:	311104        	lsi	f0, a1, 196
				if (mask & BIT(12)) {
40081ae3:	37faf0        	lsi	f15, a10, 220
40081ae6:	315984        	lsi	f8, a9, 196
				if (mask & BIT(13)) {
40081ae9:	fac8      	l32i.n	a12, a10, 60
40081aeb:	028437        	bany	a4, a3, 40081af1 <xtensa_excint1_c+0xad>
40081aee:	002486        	j	40081b84 <xtensa_excint1_c+0x140>
40081af1:	001486        	j	40081b47 <xtensa_excint1_c+0x103>
				if (mask & BIT(17)) {
40081af4:	faed31        	l32r	a3, 400806a8 <_iram_text_start+0x160>
40081af7:	518437        	bany	a4, a3, 40081b4c <xtensa_excint1_c+0x108>
				if (mask & BIT(18)) {
40081afa:	faec31        	l32r	a3, 400806ac <_iram_text_start+0x164>
40081afd:	028437        	bany	a4, a3, 40081b03 <xtensa_excint1_c+0xbf>
40081b00:	002006        	j	40081b84 <xtensa_excint1_c+0x140>
					irq = 18;
40081b03:	281c      	movi.n	a8, 18
40081b05:	001146        	j	40081b4e <xtensa_excint1_c+0x10a>
				irq = 0;
40081b08:	080c      	movi.n	a8, 0
40081b0a:	001006        	j	40081b4e <xtensa_excint1_c+0x10a>
				irq = 1;
40081b0d:	180c      	movi.n	a8, 1
				mask = BIT(1);
40081b0f:	093d      	mov.n	a3, a9
40081b11:	000e46        	j	40081b4e <xtensa_excint1_c+0x10a>
				irq = 2;
40081b14:	098d      	mov.n	a8, a9
40081b16:	000d06        	j	40081b4e <xtensa_excint1_c+0x10a>
					irq = 3;
40081b19:	380c      	movi.n	a8, 3
40081b1b:	000bc6        	j	40081b4e <xtensa_excint1_c+0x10a>
40081b1e:	058d00        	extui	a8, a0, 29, 1
					irq = 4;
40081b21:	000a46        	j	40081b4e <xtensa_excint1_c+0x10a>
					irq = 5;
40081b24:	580c      	movi.n	a8, 5
40081b26:	000906        	j	40081b4e <xtensa_excint1_c+0x10a>
					irq = 6;
40081b29:	680c      	movi.n	a8, 6
40081b2b:	0007c6        	j	40081b4e <xtensa_excint1_c+0x10a>
					irq = 7;
40081b2e:	780c      	movi.n	a8, 7
40081b30:	000686        	j	40081b4e <xtensa_excint1_c+0x10a>
					irq = 8;
40081b33:	880c      	movi.n	a8, 8
40081b35:	000546        	j	40081b4e <xtensa_excint1_c+0x10a>
					irq = 9;
40081b38:	980c      	movi.n	a8, 9
40081b3a:	000406        	j	40081b4e <xtensa_excint1_c+0x10a>
					irq = 10;
40081b3d:	a80c      	movi.n	a8, 10
40081b3f:	0002c6        	j	40081b4e <xtensa_excint1_c+0x10a>
					irq = 12;
40081b42:	c80c      	movi.n	a8, 12
40081b44:	000186        	j	40081b4e <xtensa_excint1_c+0x10a>
					irq = 13;
40081b47:	d80c      	movi.n	a8, 13
40081b49:	000046        	j	40081b4e <xtensa_excint1_c+0x10a>
					irq = 17;
40081b4c:	181c      	movi.n	a8, 17
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
40081b4e:	fac791        	l32r	a9, 4008066c <_iram_text_start+0x124>
40081b51:	1188d0        	slli	a8, a8, 3
40081b54:	898a      	add.n	a8, a9, a8
40081b56:	1898      	l32i.n	a9, a8, 4
40081b58:	08a8      	l32i.n	a10, a8, 0
40081b5a:	304430        	xor	a4, a4, a3
40081b5d:	0009e0        	callx8	a9
40081b60:	13e330        	wsr.intclear	a3
40081b63:	ffbd46        	j	40081a5c <xtensa_excint1_c+0x18>
40081b66:	660000        	lsi	f0, a0, 0x198

		return xtensa_int1_c(interrupted_stack);

	} else if (cause == EXCCAUSE_SYSCALL) {
40081b69:	480c15        	call4	400c9c2c <_iram_text_end+0x4609a>
	int cause, vaddr, *bsa = *(int **)interrupted_stack;
40081b6c:	643802        	lsi	f0, a8, 0x190

		/* Xtensa exceptions don't automatically advance PC,
		 * have to skip the SYSCALL instruction manually or
		 * else it will just loop forever
		 */
		bsa[BSA_PC_OFF/4] += 3;
40081b6f:	333b      	addi.n	a3, a3, 3
40081b71:	6439      	s32i.n	a3, a4, 24
40081b73:	000346        	j	40081b84 <xtensa_excint1_c+0x140>
40081b76:	300000        	xor	a0, a0, a0

	} else {
		uint32_t ps = bsa[BSA_PS_OFF/4];

		__asm__ volatile("rsr.excvaddr %0" : "=r"(vaddr));
40081b79:	ee          	.byte 0xee
40081b7a:	a0a203        	lsi	f0, a2, 0x280
		/* FIXME: legacy xtensa port reported "HW" exception
		 * for all unhandled exceptions, which seems incorrect
		 * as these are software errors.  Should clean this
		 * up.
		 */
		z_xtensa_fatal_error(K_ERR_CPU_EXCEPTION,
40081b7d:	b22000        	mulsh	a2, a0, a0
40081b80:	a62520        	lsi	f2, a5, 0x298
40081b83:	ff          	.byte 0xff
				     (void *)interrupted_stack);
	}

	return z_get_next_switch_handle(interrupted_stack);
40081b84:	02ad      	mov.n	a10, a2
40081b86:	00d765        	call8	400828fc <z_get_next_switch_handle>
}
40081b89:	0a2d      	mov.n	a2, a10
40081b8b:	f01d      	retw.n
40081b8d:	000000        	ill

40081b90 <__stdout_hook_install>:
}

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
40081b90:	004136        	entry	a1, 32
	_stdout_hook = hook;
40081b93:	fac881        	l32r	a8, 400806b4 <_iram_text_start+0x16c>
40081b96:	0829      	s32i.n	a2, a8, 0
}
40081b98:	f01d      	retw.n
	...

40081b9c <gpio_esp32_pin_interrupt_configure>:

static int gpio_esp32_pin_interrupt_configure(const struct device *port,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
40081b9c:	004136        	entry	a1, 32
	if (mode == GPIO_INT_MODE_DISABLED) {
40081b9f:	fa9a81        	l32r	a8, 40080608 <_iram_text_start+0xc0>
{
40081ba2:	743030        	extui	a3, a3, 0, 8
	if (mode == GPIO_INT_MODE_DISABLED) {
40081ba5:	211487        	beq	a4, a8, 40081bca <gpio_esp32_pin_interrupt_configure+0x2e>
	if (mode == GPIO_INT_MODE_LEVEL) {
40081ba8:	fabe91        	l32r	a9, 400806a0 <_iram_text_start+0x158>
			return -ENOTSUP;
40081bab:	ddaf82        	movi	a8, -35
	if (mode == GPIO_INT_MODE_LEVEL) {
40081bae:	4f1497        	beq	a4, a9, 40081c01 <gpio_esp32_pin_interrupt_configure+0x65>
		switch (trig) {
40081bb1:	fabe41        	l32r	a4, 400806ac <_iram_text_start+0x164>
40081bb4:	181547        	beq	a5, a4, 40081bd0 <gpio_esp32_pin_interrupt_configure+0x34>
40081bb7:	fac041        	l32r	a4, 400806b8 <_iram_text_start+0x170>
40081bba:	431547        	beq	a5, a4, 40081c01 <gpio_esp32_pin_interrupt_configure+0x65>
40081bbd:	faba41        	l32r	a4, 400806a8 <_iram_text_start+0x160>
			return -EINVAL;
40081bc0:	a86c      	movi.n	a8, -22
		switch (trig) {
40081bc2:	3b9547        	bne	a5, a4, 40081c01 <gpio_esp32_pin_interrupt_configure+0x65>
			return 2;
40081bc5:	280c      	movi.n	a8, 2
40081bc7:	0001c6        	j	40081bd2 <gpio_esp32_pin_interrupt_configure+0x36>
		return 0;       /* Disables interrupt for a pin. */
40081bca:	080c      	movi.n	a8, 0
40081bcc:	000086        	j	40081bd2 <gpio_esp32_pin_interrupt_configure+0x36>
40081bcf:	180c00        	lsxp	f0, a12, a0
	struct gpio_esp32_data *data = port->data;
	uint32_t io_pin = pin + data->port.pin_offset; /* Range from 0 - 39 */
40081bd2:	3248      	l32i.n	a4, a2, 12
40081bd4:	8498      	l32i.n	a9, a4, 32
40081bd6:	939a      	add.n	a9, a3, a9
	uint32_t *reg = GET_GPIO_PIN_REG(io_pin);
40081bd8:	fab931        	l32r	a3, 400806bc <_iram_text_start+0x174>
40081bdb:	993a      	add.n	a9, a9, a3
40081bdd:	1199e0        	slli	a9, a9, 2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40081be0:	006340        	rsil	a4, 3
	}

	key = irq_lock();

	reg_val = *reg;
	reg_val &= ~(GPIO_PIN_INT_ENA_M | GPIO_PIN_INT_TYPE_M);
40081be3:	fab751        	l32r	a5, 400806c0 <_iram_text_start+0x178>
	reg_val = *reg;
40081be6:	0938      	l32i.n	a3, a9, 0
	/* Enable Interrupt on CPU0 (PRO_CPU) */
	reg_val |= GPIO_CPU0_INT_ENABLE;
	/* Interrupt triggering mode */
	reg_val |= intr_trig_mode << GPIO_PIN_INT_TYPE_S;
40081be8:	118890        	slli	a8, a8, 7
	reg_val &= ~(GPIO_PIN_INT_ENA_M | GPIO_PIN_INT_TYPE_M);
40081beb:	103350        	and	a3, a3, a5
40081bee:	208830        	or	a8, a8, a3
	reg_val |= intr_trig_mode << GPIO_PIN_INT_TYPE_S;
40081bf1:	fa9531        	l32r	a3, 40080648 <_iram_text_start+0x100>
40081bf4:	208830        	or	a8, a8, a3
	*reg = reg_val;
40081bf7:	0989      	s32i.n	a8, a9, 0
	XTOS_RESTORE_INTLEVEL(key);
40081bf9:	13e640        	wsr.ps	a4
40081bfc:	002010        	rsync

	irq_unlock(key);

	return 0;
40081bff:	080c      	movi.n	a8, 0
}
40081c01:	082d      	mov.n	a2, a8
40081c03:	f01d      	retw.n
40081c05:	000000        	ill

40081c08 <gpio_esp32_isr>:
#if defined(CONFIG_GPIO_ESP32_1)
GPIO_DEVICE_INIT(1);
#endif

static void gpio_esp32_isr(const void *param)
{
40081c08:	004136        	entry	a1, 32

#if defined(CONFIG_GPIO_ESP32_0)
	gpio_esp32_fire_callbacks(DEVICE_GET(gpio_esp32_0));
40081c0b:	faaea1        	l32r	a10, 400806c4 <_iram_text_start+0x17c>
40081c0e:	0194e5        	call8	4008355c <gpio_esp32_fire_callbacks>
#endif
#if defined(CONFIG_GPIO_ESP32_1)
	gpio_esp32_fire_callbacks(DEVICE_GET(gpio_esp32_1));
40081c11:	faada1        	l32r	a10, 400806c8 <_iram_text_start+0x180>
40081c14:	019465        	call8	4008355c <gpio_esp32_fire_callbacks>
#endif

	ARG_UNUSED(param);
}
40081c17:	f01d      	retw.n
40081c19:	000000        	ill

40081c1c <gpio_esp32_init>:
{
40081c1c:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = device->data;
40081c1f:	3228      	l32i.n	a2, a2, 12
40081c21:	faaaa1        	l32r	a10, 400806cc <_iram_text_start+0x184>
40081c24:	00a0a5        	call8	40082630 <z_impl_device_get_binding>
	data->pinmux = device_get_binding(CONFIG_PINMUX_NAME);
40081c27:	12a9      	s32i.n	a10, a2, 4
		return -ENOTSUP;
40081c29:	ddaf22        	movi	a2, -35
	if (!data->pinmux) {
40081c2c:	8abc      	beqz.n	a10, 40081c68 <gpio_esp32_init+0x4c>
	if (!isr_connected) {
40081c2e:	faa831        	l32r	a3, 400806d0 <_iram_text_start+0x188>
	return 0;
40081c31:	020c      	movi.n	a2, 0
	if (!isr_connected) {
40081c33:	000382        	l8ui	a8, a3, 0
40081c36:	2e9827        	bne	a8, a2, 40081c68 <gpio_esp32_init+0x4c>
 */
static inline void z_xt_ints_off(unsigned int mask)
{
	int val;

	__asm__ volatile("rsr.intenable %0" : "=r"(val));
40081c39:	03e480        	rsr.intenable	a8
	val &= ~mask;
40081c3c:	ffab92        	movi	a9, 0xfffffbff
40081c3f:	108890        	and	a8, a8, a9
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
40081c42:	13e480        	wsr.intenable	a8
40081c45:	002010        	rsync
		esp32_rom_intr_matrix_set(0, ETS_GPIO_INTR_SOURCE,
40081c48:	ac0c      	movi.n	a12, 10
40081c4a:	6b1c      	movi.n	a11, 22
40081c4c:	02ad      	mov.n	a10, a2
40081c4e:	faa181        	l32r	a8, 400806d4 <_iram_text_start+0x18c>
40081c51:	0008e0        	callx8	a8
	__asm__ volatile("rsr.intenable %0" : "=r"(val));
40081c54:	03e480        	rsr.intenable	a8
	val |= mask;
40081c57:	00a492        	movi	a9, 0x400
40081c5a:	208890        	or	a8, a8, a9
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
40081c5d:	13e480        	wsr.intenable	a8
40081c60:	002010        	rsync
		isr_connected = true;
40081c63:	180c      	movi.n	a8, 1
40081c65:	004382        	s8i	a8, a3, 0
}
40081c68:	f01d      	retw.n
	...

40081c6c <gpio_esp32_config>:
{
40081c6c:	006136        	entry	a1, 48
	struct gpio_esp32_data *data = dev->data;
40081c6f:	3268      	l32i.n	a6, a2, 12
{
40081c71:	743030        	extui	a3, a3, 0, 8
	r = pinmux_pin_get(data->pinmux, io_pin, &func);
40081c74:	16a8      	l32i.n	a10, a6, 4
	uint32_t io_pin = pin + data->port.pin_offset; /* Range from 0 - 39 */
40081c76:	8658      	l32i.n	a5, a6, 32
				 uint32_t *func)
{
	const struct pinmux_driver_api *api =
		(const struct pinmux_driver_api *)dev->api;

	return api->get(dev, pin, func);
40081c78:	2a28      	l32i.n	a2, a10, 8
40081c7a:	535a      	add.n	a5, a3, a5
40081c7c:	1228      	l32i.n	a2, a2, 4
40081c7e:	01cd      	mov.n	a12, a1
40081c80:	20b550        	or	a11, a5, a5
40081c83:	0002e0        	callx8	a2
40081c86:	0a2d      	mov.n	a2, a10
	if (r < 0) {
40081c88:	090a96        	bltz	a10, 40081d1c <gpio_esp32_config+0xb0>
	pinmux_pin_set(data->pinmux, io_pin, PIN_FUNC_GPIO);
40081c8b:	16a8      	l32i.n	a10, a6, 4
	return api->set(dev, pin, func);
40081c8d:	2c0c      	movi.n	a12, 2
40081c8f:	2a28      	l32i.n	a2, a10, 8
40081c91:	05bd      	mov.n	a11, a5
40081c93:	0228      	l32i.n	a2, a2, 0
40081c95:	0002e0        	callx8	a2
	if (flags & GPIO_PULL_UP) {
40081c98:	0c1c      	movi.n	a12, 16
40081c9a:	10c4c0        	and	a12, a4, a12
40081c9d:	16a8      	l32i.n	a10, a6, 4
40081c9f:	9c8c      	beqz.n	a12, 40081cac <gpio_esp32_config+0x40>
				    uint8_t func)
{
	const struct pinmux_driver_api *api =
		(const struct pinmux_driver_api *)dev->api;

	return api->pullup(dev, pin, func);
40081ca1:	2a28      	l32i.n	a2, a10, 8
40081ca3:	1c0c      	movi.n	a12, 1
40081ca5:	2228      	l32i.n	a2, a2, 8
40081ca7:	000206        	j	40081cb3 <gpio_esp32_config+0x47>
40081caa:	570000        	lsi	f0, a0, 0x15c
	} else if (flags & GPIO_PULL_DOWN) {
40081cad:	280864        	lsi	f6, a8, 160
40081cb0:	282a      	add.n	a2, a8, a2
40081cb2:	05bd22        	l32ai	a2, a13, 20
40081cb5:	0002e0        	callx8	a2
	if (flags & GPIO_OUTPUT) {
40081cb8:	16a8      	l32i.n	a10, a6, 4
40081cba:	2a28      	l32i.n	a2, a10, 8
40081cbc:	3288      	l32i.n	a8, a2, 12
40081cbe:	00a222        	movi	a2, 0x200
40081cc1:	102420        	and	a2, a4, a2
40081cc4:	04c216        	beqz	a2, 40081d14 <gpio_esp32_config+0xa8>
	uint32_t *reg = GET_GPIO_PIN_REG(io_pin);
40081cc7:	fa7d21        	l32r	a2, 400806bc <_iram_text_start+0x174>
40081cca:	252a      	add.n	a2, a5, a2
40081ccc:	1122e0        	slli	a2, a2, 2
		if (flags & GPIO_SINGLE_ENDED) {
40081ccf:	0d6417        	bbci	a4, 1, 40081ce0 <gpio_esp32_config+0x74>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
40081cd2:	4b0c      	movi.n	a11, 4
40081cd4:	1104b7        	bnone	a4, a11, 40081ce9 <gpio_esp32_config+0x7d>
				*reg |= GPIO_PIN_PAD_DRIVER;
40081cd7:	0298      	l32i.n	a9, a2, 0
40081cd9:	2099b0        	or	a9, a9, a11
40081cdc:	0001c6        	j	40081ce7 <gpio_esp32_config+0x7b>
40081cdf:	029800        	andb	b9, b8, b0
			*reg &= ~GPIO_PIN_PAD_DRIVER;
40081ce2:	bb7c      	movi.n	a11, -5
40081ce4:	1099b0        	and	a9, a9, a11
40081ce7:	0299      	s32i.n	a9, a2, 0
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
40081ce9:	0464b7        	bbci	a4, 11, 40081cf1 <gpio_esp32_config+0x85>
			*data->port.set_reg = BIT(pin);
40081cec:	2648      	l32i.n	a4, a6, 8
40081cee:	000106        	j	40081cf6 <gpio_esp32_config+0x8a>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
40081cf1:	1064a7        	bbci	a4, 10, 40081d05 <gpio_esp32_config+0x99>
			*data->port.clear_reg = BIT(pin);
40081cf4:	3648      	l32i.n	a4, a6, 12
40081cf6:	01a022        	movi	a2, 1
40081cf9:	401300        	ssl	a3
40081cfc:	a13200        	sll	a3, a2
40081cff:	0020c0        	memw
40081d02:	006432        	s32i	a3, a4, 0
					  uint8_t func)
{
	const struct pinmux_driver_api *api =
		(const struct pinmux_driver_api *)dev->api;

	return api->input(dev, pin, func);
40081d05:	0c0c      	movi.n	a12, 0
40081d07:	05bd      	mov.n	a11, a5
40081d09:	0008e0        	callx8	a8
		if (r < 0) {
40081d0c:	020c      	movi.n	a2, 0
40081d0e:	432a20        	min	a2, a10, a2
40081d11:	0001c6        	j	40081d1c <gpio_esp32_config+0xb0>
40081d14:	1c0c      	movi.n	a12, 1
40081d16:	20b550        	or	a11, a5, a5
40081d19:	0008e0        	callx8	a8
}
40081d1c:	f01d      	retw.n
	...

40081d20 <i2c_esp32_isr>:

	return ret;
}

static void i2c_esp32_isr(const struct device *device)
{
40081d20:	004136        	entry	a1, 32
	const int fifo_give_mask = I2C_ACK_ERR_INT_ST |
				   I2C_TIME_OUT_INT_ST |
				   I2C_TRANS_COMPLETE_INT_ST |
				   I2C_ARBITRATION_LOST_INT_ST;
	const struct i2c_esp32_config *config = device->config;
40081d23:	012232        	l32i	a3, a2, 4

	if (sys_read32(I2C_INT_STATUS_REG(config->index)) & fifo_give_mask) {
40081d26:	002392        	l32i	a9, a3, 0
40081d29:	1189e0        	slli	a8, a9, 2
40081d2c:	808890        	add	a8, a8, a9
40081d2f:	fa6a91        	l32r	a9, 400806d8 <_iram_text_start+0x190>
40081d32:	118820        	slli	a8, a8, 14
40081d35:	889a      	add.n	a8, a8, a9
	return *(volatile uint32_t *)addr;
40081d37:	0020c0        	memw
40081d3a:	0898      	l32i.n	a9, a8, 0
40081d3c:	a0a582        	movi	a8, 0x5a0
40081d3f:	060987        	bnone	a9, a8, 40081d49 <i2c_esp32_isr+0x29>

		/* Only give the semaphore if a watched interrupt happens.
		 * Error checking is performed at the other side of the
		 * semaphore, by reading the status register.
		 */
		k_sem_give(&data->fifo_sem);
40081d42:	32a8      	l32i.n	a10, a2, 12
40081d44:	aa8b      	addi.n	a10, a10, 8
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
40081d46:	011665        	call8	40082eac <z_impl_k_sem_give>
	}

	/* Acknowledge all I2C interrupts */
	sys_write32(~0, I2C_INT_CLR_REG(config->index));
40081d49:	0398      	l32i.n	a9, a3, 0
40081d4b:	fa6421        	l32r	a2, 400806dc <_iram_text_start+0x194>
40081d4e:	1189e0        	slli	a8, a9, 2
40081d51:	889a      	add.n	a8, a8, a9
40081d53:	118820        	slli	a8, a8, 14
40081d56:	882a      	add.n	a8, a8, a2
	*(volatile uint32_t *)addr = data;
40081d58:	f27c      	movi.n	a2, -1
40081d5a:	0020c0        	memw
40081d5d:	0829      	s32i.n	a2, a8, 0
}
40081d5f:	f01d      	retw.n
40081d61:	000000        	ill

40081d64 <i2c_esp32_reset_fifo$isra$0>:
static inline void i2c_esp32_reset_fifo(const struct i2c_esp32_config *config)
40081d64:	004136        	entry	a1, 32
	uint32_t reg = I2C_FIFO_CONF_REG(config->index);
40081d67:	1182e0        	slli	a8, a2, 2
40081d6a:	282a      	add.n	a2, a8, a2
40081d6c:	fa5d81        	l32r	a8, 400806e0 <_iram_text_start+0x198>
40081d6f:	112220        	slli	a2, a2, 14
40081d72:	228a      	add.n	a2, a2, a8
	return *(volatile uint32_t *)addr;
40081d74:	0020c0        	memw
40081d77:	0288      	l32i.n	a8, a2, 0
40081d79:	fa4d91        	l32r	a9, 400806b0 <_iram_text_start+0x168>
40081d7c:	208890        	or	a8, a8, a9
	*(volatile uint32_t *)addr = data;
40081d7f:	0020c0        	memw
40081d82:	0289      	s32i.n	a8, a2, 0
	return *(volatile uint32_t *)addr;
40081d84:	0020c0        	memw
40081d87:	0288      	l32i.n	a8, a2, 0
	sys_write32(sys_read32(mem_addr) & ~v, mem_addr);
40081d89:	fa5691        	l32r	a9, 400806e4 <_iram_text_start+0x19c>
40081d8c:	108890        	and	a8, a8, a9
	*(volatile uint32_t *)addr = data;
40081d8f:	0020c0        	memw
40081d92:	0289      	s32i.n	a8, a2, 0
}
40081d94:	f01d      	retw.n
	...

40081d98 <i2c_esp32_write_addr>:
{
40081d98:	004136        	entry	a1, 32
	const struct i2c_esp32_config *config = dev->config;
40081d9b:	1268      	l32i.n	a6, a2, 4
	struct i2c_esp32_data *data = dev->data;
40081d9d:	3278      	l32i.n	a7, a2, 12
	i2c_esp32_reset_fifo(config);
40081d9f:	06a8      	l32i.n	a10, a6, 0
40081da1:	fffc25        	call8	40081d64 <i2c_esp32_reset_fifo$isra$0>
	sys_write32(addr & I2C_FIFO_RDATA, I2C_DATA_APB_REG(config->index));
40081da4:	0628      	l32i.n	a2, a6, 0
40081da6:	748050        	extui	a8, a5, 0, 8
40081da9:	1192e0        	slli	a9, a2, 2
40081dac:	992a      	add.n	a9, a9, a2
40081dae:	fa4e21        	l32r	a2, 400806e8 <_iram_text_start+0x1a0>
40081db1:	119920        	slli	a9, a9, 14
40081db4:	992a      	add.n	a9, a9, a2
40081db6:	0020c0        	memw
40081db9:	0989      	s32i.n	a8, a9, 0
	if (data->dev_config & I2C_ADDR_10_BITS) {
40081dbb:	0788      	l32i.n	a8, a7, 0
	uint32_t addr_len = 1U;
40081dbd:	190c      	movi.n	a9, 1
	if (data->dev_config & I2C_ADDR_10_BITS) {
40081dbf:	156807        	bbci	a8, 0, 40081dd8 <i2c_esp32_write_addr+0x40>
		sys_write32(I2C_DATA_APB_REG(config->index),
40081dc2:	0668      	l32i.n	a6, a6, 0
			    (addr >> 8) & I2C_FIFO_RDATA);
40081dc4:	415850        	srli	a5, a5, 8
		sys_write32(I2C_DATA_APB_REG(config->index),
40081dc7:	1186e0        	slli	a8, a6, 2
40081dca:	886a      	add.n	a8, a8, a6
40081dcc:	118820        	slli	a8, a8, 14
40081dcf:	882a      	add.n	a8, a8, a2
40081dd1:	0020c0        	memw
40081dd4:	0589      	s32i.n	a8, a5, 0
		addr_len++;
40081dd6:	290c      	movi.n	a9, 2
	if ((msg->flags & I2C_MSG_RW_MASK) != I2C_MSG_WRITE) {
40081dd8:	080422        	l8ui	a2, a4, 8
40081ddb:	116207        	bbci	a2, 0, 40081df0 <i2c_esp32_write_addr+0x58>
		*cmd++ = (struct i2c_esp32_cmd) {
40081dde:	940c      	movi.n	a4, 9
40081de0:	114480        	slli	a4, a4, 8
40081de3:	209940        	or	a9, a9, a4
40081de6:	234b      	addi.n	a2, a3, 4
40081de8:	0020c0        	memw
40081deb:	0399      	s32i.n	a9, a3, 0
40081ded:	0001c6        	j	40081df8 <i2c_esp32_write_addr+0x60>
		msg->len += addr_len;
40081df0:	1458      	l32i.n	a5, a4, 4
40081df2:	032d      	mov.n	a2, a3
40081df4:	959a      	add.n	a9, a5, a9
40081df6:	1499      	s32i.n	a9, a4, 4
}
40081df8:	f01d      	retw.n
	...

40081dfc <i2c_esp32_configure_pins>:
{
40081dfc:	004136        	entry	a1, 32
#ifndef ZEPHYR_INCLUDE_DRIVERS_GPIO_GPIO_ESP32_H_
#define ZEPHYR_INCLUDE_DRIVERS_GPIO_GPIO_ESP32_H_

static const char *gpio_esp32_get_gpio_for_pin(int pin)
{
	if (pin < 32) {
40081dff:	1fa052        	movi	a5, 31
		return NULL;
#endif /* CONFIG_GPIO_ESP32_0 */
	}

#if defined(CONFIG_GPIO_ESP32_1)
	return DT_LABEL(DT_INST(1, espressif_esp32_gpio));
40081e02:	fa3aa1        	l32r	a10, 400806ec <_iram_text_start+0x1a4>
	if (pin < 32) {
40081e05:	022527        	blt	a5, a2, 40081e0b <i2c_esp32_configure_pins+0xf>
		return DT_LABEL(DT_INST(0, espressif_esp32_gpio));
40081e08:	fa3aa1        	l32r	a10, 400806f0 <_iram_text_start+0x1a8>
40081e0b:	008265        	call8	40082630 <z_impl_device_get_binding>
		return -EINVAL;
40081e0e:	eaaf82        	movi	a8, -22
	if (!gpio) {
40081e11:	047a16        	beqz	a10, 40081e5c <i2c_esp32_configure_pins+0x60>
	ret = gpio_pin_configure(gpio, pin, pin_mode);
40081e14:	746020        	extui	a6, a2, 0, 8
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
40081e17:	032a52        	l32i	a5, a10, 12
	return api->pin_configure(port, pin, flags);
40081e1a:	2a88      	l32i.n	a8, a10, 8
40081e1c:	fa36c1        	l32r	a12, 400806f4 <_iram_text_start+0x1ac>
40081e1f:	0888      	l32i.n	a8, a8, 0
40081e21:	06bd      	mov.n	a11, a6
40081e23:	0008e0        	callx8	a8
40081e26:	0a8d      	mov.n	a8, a10
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
40081e28:	0adc      	bnez.n	a10, 40081e3c <i2c_esp32_configure_pins+0x40>
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
40081e2a:	eb7c      	movi.n	a11, -2
40081e2c:	401600        	ssl	a6
40081e2f:	818bb0        	src	a8, a11, a11
40081e32:	05b8      	l32i.n	a11, a5, 0
40081e34:	10bb80        	and	a11, a11, a8
40081e37:	05b9      	s32i.n	a11, a5, 0
	if (ret < 0) {
40081e39:	000086        	j	40081e3f <i2c_esp32_configure_pins+0x43>
40081e3c:	01ca96        	bltz	a10, 40081e5c <i2c_esp32_configure_pins+0x60>
	esp32_rom_gpio_matrix_out(pin, matrix_out, false, false);
40081e3f:	0d0c      	movi.n	a13, 0
40081e41:	0dcd      	mov.n	a12, a13
40081e43:	03bd      	mov.n	a11, a3
40081e45:	20a220        	or	a10, a2, a2
40081e48:	fa2c81        	l32r	a8, 400806f8 <_iram_text_start+0x1b0>
40081e4b:	0008e0        	callx8	a8
	esp32_rom_gpio_matrix_in(pin, matrix_in, false);
40081e4e:	0c0c      	movi.n	a12, 0
40081e50:	04bd      	mov.n	a11, a4
40081e52:	02ad      	mov.n	a10, a2
40081e54:	fa2a81        	l32r	a8, 400806fc <_iram_text_start+0x1b4>
40081e57:	0008e0        	callx8	a8
40081e5a:	080c      	movi.n	a8, 0
}
40081e5c:	082d      	mov.n	a2, a8
40081e5e:	f01d      	retw.n

40081e60 <i2c_esp32_configure>:
{
40081e60:	006136        	entry	a1, 48
	const struct i2c_esp32_config *config = dev->config;
40081e63:	1248      	l32i.n	a4, a2, 4
	struct i2c_esp32_data *data = dev->data;
40081e65:	3278      	l32i.n	a7, a2, 12
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40081e67:	006360        	rsil	a6, 3
	ret = i2c_esp32_configure_pins(config->pins.scl,
40081e6a:	64c8      	l32i.n	a12, a4, 24
40081e6c:	54b8      	l32i.n	a11, a4, 20
40081e6e:	0724a2        	l32i	a10, a4, 28
40081e71:	fff8a5        	call8	40081dfc <i2c_esp32_configure_pins>
	if (ret < 0) {
40081e74:	242a96        	bltz	a10, 400820ba <i2c_esp32_configure+0x25a>
	ret = i2c_esp32_configure_pins(config->pins.sda,
40081e77:	44c8      	l32i.n	a12, a4, 16
40081e79:	34b8      	l32i.n	a11, a4, 12
40081e7b:	84a8      	l32i.n	a10, a4, 32
40081e7d:	fff7e5        	call8	40081dfc <i2c_esp32_configure_pins>
	if (ret < 0) {
40081e80:	236a96        	bltz	a10, 400820ba <i2c_esp32_configure+0x25a>
	clock_control_on(data->clock_dev, config->peripheral_id);
40081e83:	a7a8      	l32i.n	a10, a7, 40
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
40081e85:	0924b2        	l32i	a11, a4, 36
40081e88:	2a58      	l32i.n	a5, a10, 8
40081e8a:	002552        	l32i	a5, a5, 0
40081e8d:	0005e0        	callx8	a5
	if (config->mode.tx_lsb_first) {
40081e90:	280492        	l8ui	a9, a4, 40
		v |= I2C_TX_LSB_FIRST;
40081e93:	084c      	movi.n	a8, 64
40081e95:	050c      	movi.n	a5, 0
40081e97:	935890        	movnez	a5, a8, a9
	if (config->mode.rx_lsb_first) {
40081e9a:	290482        	l8ui	a8, a4, 41
40081e9d:	488c      	beqz.n	a8, 40081ea5 <i2c_esp32_configure+0x45>
		v |= I2C_RX_LSB_FIRST;
40081e9f:	80a082        	movi	a8, 128
40081ea2:	205580        	or	a5, a5, a8
	if (dev_config & I2C_MODE_MASTER) {
40081ea5:	0498      	l32i.n	a9, a4, 0
40081ea7:	1189e0        	slli	a8, a9, 2
40081eaa:	889a      	add.n	a8, a8, a9
40081eac:	fa1591        	l32r	a9, 40080700 <_iram_text_start+0x1b8>
40081eaf:	118820        	slli	a8, a8, 14
40081eb2:	889a      	add.n	a8, a8, a9
40081eb4:	091c      	movi.n	a9, 16
40081eb6:	0f0397        	bnone	a3, a9, 40081ec9 <i2c_esp32_configure+0x69>
40081eb9:	070c      	movi.n	a7, 0
		v |= I2C_MS_MODE;
40081ebb:	205590        	or	a5, a5, a9
40081ebe:	0020c0        	memw
40081ec1:	0879      	s32i.n	a7, a8, 0
40081ec3:	001506        	j	40081f1b <i2c_esp32_configure+0xbb>
40081ec6:	000000        	ill
		uint32_t addr = (data->address & I2C_SLAVE_ADDR_V);
40081ec9:	021772        	l16ui	a7, a7, 4
40081ecc:	e47070        	extui	a7, a7, 0, 15
		if (dev_config & I2C_ADDR_10_BITS) {
40081ecf:	056307        	bbci	a3, 0, 40081ed8 <i2c_esp32_configure+0x78>
			addr |= I2C_ADDR_10BIT_EN;
40081ed2:	f9f291        	l32r	a9, 4008069c <_iram_text_start+0x154>
40081ed5:	207790        	or	a7, a7, a9
40081ed8:	0020c0        	memw
40081edb:	0879      	s32i.n	a7, a8, 0
		sys_clear_bit(I2C_CTR_REG(config->index), I2C_TRANS_START_S);
40081edd:	0488      	l32i.n	a8, a4, 0

static ALWAYS_INLINE void sys_clear_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp & ~(1 << bit);
40081edf:	dfaf92        	movi	a9, -33
40081ee2:	1178e0        	slli	a7, a8, 2
40081ee5:	778a      	add.n	a7, a7, a8
40081ee7:	fa0781        	l32r	a8, 40080704 <_iram_text_start+0x1bc>
40081eea:	117720        	slli	a7, a7, 14
40081eed:	778a      	add.n	a7, a7, a8
	uint32_t temp = *(volatile uint32_t *)addr;
40081eef:	0020c0        	memw
40081ef2:	0788      	l32i.n	a8, a7, 0
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
40081ef4:	108890        	and	a8, a8, a9
40081ef7:	0020c0        	memw
40081efa:	0789      	s32i.n	a8, a7, 0
		sys_clear_bit(I2C_FIFO_CONF_REG(config->index),
40081efc:	0488      	l32i.n	a8, a4, 0
40081efe:	fa0291        	l32r	a9, 40080708 <_iram_text_start+0x1c0>
40081f01:	1178e0        	slli	a7, a8, 2
40081f04:	778a      	add.n	a7, a7, a8
40081f06:	f9f681        	l32r	a8, 400806e0 <_iram_text_start+0x198>
40081f09:	117720        	slli	a7, a7, 14
40081f0c:	778a      	add.n	a7, a7, a8
	uint32_t temp = *(volatile uint32_t *)addr;
40081f0e:	0020c0        	memw
40081f11:	0788      	l32i.n	a8, a7, 0
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
40081f13:	108890        	and	a8, a8, a9
40081f16:	0020c0        	memw
40081f19:	0789      	s32i.n	a8, a7, 0
	sys_write32(v, I2C_CTR_REG(config->index));
40081f1b:	0488      	l32i.n	a8, a4, 0
	v |= I2C_CLK_EN;
40081f1d:	03a172        	movi	a7, 0x103
40081f20:	205570        	or	a5, a5, a7
	sys_write32(v, I2C_CTR_REG(config->index));
40081f23:	1178e0        	slli	a7, a8, 2
40081f26:	778a      	add.n	a7, a7, a8
40081f28:	f9f781        	l32r	a8, 40080704 <_iram_text_start+0x1bc>
40081f2b:	117720        	slli	a7, a7, 14
40081f2e:	778a      	add.n	a7, a7, a8
40081f30:	0020c0        	memw
40081f33:	0759      	s32i.n	a5, a7, 0
	const struct i2c_esp32_config *config = dev->config;
40081f35:	1258      	l32i.n	a5, a2, 4
	struct i2c_esp32_data *data = dev->data;
40081f37:	3278      	l32i.n	a7, a2, 12
	uint32_t sys_clk_freq = 0;
40081f39:	020c      	movi.n	a2, 0
40081f3b:	0129      	s32i.n	a2, a1, 0
	ret = i2c_esp32_configure_speed(dev, I2C_SPEED_GET(dev_config));
40081f3d:	243130        	extui	a3, a3, 1, 3
	uint32_t freq_hz = speed_to_freq_tbl[speed];
40081f40:	f9f321        	l32r	a2, 4008070c <_iram_text_start+0x1c4>
40081f43:	1133e0        	slli	a3, a3, 2
40081f46:	323a      	add.n	a3, a2, a3
40081f48:	0328      	l32i.n	a2, a3, 0
		return -ENOTSUP;
40081f4a:	ddafa2        	movi	a10, -35
	if (!freq_hz) {
40081f4d:	163216        	beqz	a2, 400820b4 <i2c_esp32_configure+0x254>
	if (clock_control_get_rate(data->clock_dev,
40081f50:	a7a8      	l32i.n	a10, a7, 40
		(const struct clock_control_driver_api *)dev->api;

	__ASSERT(api->get_rate != NULL, "%s not implemented for device %s",
		__func__, dev->name);

	return api->get_rate(dev, sys, rate);
40081f52:	95b8      	l32i.n	a11, a5, 36
40081f54:	2a38      	l32i.n	a3, a10, 8
40081f56:	01cd      	mov.n	a12, a1
40081f58:	3338      	l32i.n	a3, a3, 12
40081f5a:	0003e0        	callx8	a3
40081f5d:	151a56        	bnez	a10, 400820b2 <i2c_esp32_configure+0x252>
		   I2C_SCL_LOW_PERIOD_REG(config->index));
40081f60:	0578      	l32i.n	a7, a5, 0
	period = (sys_clk_freq / freq_hz);
40081f62:	0188      	l32i.n	a8, a1, 0
40081f64:	c28820        	quou	a8, a8, a2
		   I2C_SCL_LOW_PERIOD_REG(config->index));
40081f67:	1127e0        	slli	a2, a7, 2
40081f6a:	227a      	add.n	a2, a2, a7
40081f6c:	f9e971        	l32r	a7, 40080710 <_iram_text_start+0x1c8>
40081f6f:	112220        	slli	a2, a2, 14
40081f72:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40081f74:	0020c0        	memw
40081f77:	0278      	l32i.n	a7, a2, 0
	period /= 2U; /* Set hold and setup times to 1/2th of period */
40081f79:	413180        	srli	a3, a8, 1
	sys_write32(sys_read32(mem_addr) | v, mem_addr);
40081f7c:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
40081f7f:	0020c0        	memw
40081f82:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_HIGH_PERIOD_REG(config->index));
40081f84:	0578      	l32i.n	a7, a5, 0
	period /= 2U; /* Set sample and hold times to 1/4th of period */
40081f86:	418280        	srli	a8, a8, 2
		   I2C_SCL_HIGH_PERIOD_REG(config->index));
40081f89:	1127e0        	slli	a2, a7, 2
40081f8c:	227a      	add.n	a2, a2, a7
40081f8e:	f9e171        	l32r	a7, 40080714 <_iram_text_start+0x1cc>
40081f91:	112220        	slli	a2, a2, 14
40081f94:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40081f96:	0020c0        	memw
40081f99:	0278      	l32i.n	a7, a2, 0
40081f9b:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
40081f9e:	0020c0        	memw
40081fa1:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_START_HOLD_REG(config->index));
40081fa3:	0578      	l32i.n	a7, a5, 0
40081fa5:	1127e0        	slli	a2, a7, 2
40081fa8:	227a      	add.n	a2, a2, a7
40081faa:	f9db71        	l32r	a7, 40080718 <_iram_text_start+0x1d0>
40081fad:	112220        	slli	a2, a2, 14
40081fb0:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40081fb2:	0020c0        	memw
40081fb5:	0278      	l32i.n	a7, a2, 0
40081fb7:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
40081fba:	0020c0        	memw
40081fbd:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_RSTART_SETUP_REG(config->index));
40081fbf:	0578      	l32i.n	a7, a5, 0
40081fc1:	1127e0        	slli	a2, a7, 2
40081fc4:	227a      	add.n	a2, a2, a7
40081fc6:	f9d571        	l32r	a7, 4008071c <_iram_text_start+0x1d4>
40081fc9:	112220        	slli	a2, a2, 14
40081fcc:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40081fce:	0020c0        	memw
40081fd1:	0278      	l32i.n	a7, a2, 0
40081fd3:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
40081fd6:	0020c0        	memw
40081fd9:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_STOP_HOLD_REG(config->index));
40081fdb:	0578      	l32i.n	a7, a5, 0
40081fdd:	1127e0        	slli	a2, a7, 2
40081fe0:	227a      	add.n	a2, a2, a7
40081fe2:	f9cf71        	l32r	a7, 40080720 <_iram_text_start+0x1d8>
40081fe5:	112220        	slli	a2, a2, 14
40081fe8:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40081fea:	0020c0        	memw
40081fed:	0278      	l32i.n	a7, a2, 0
40081fef:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
40081ff2:	0020c0        	memw
40081ff5:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_STOP_SETUP_REG(config->index));
40081ff7:	0578      	l32i.n	a7, a5, 0
40081ff9:	1127e0        	slli	a2, a7, 2
40081ffc:	227a      	add.n	a2, a2, a7
40081ffe:	f9c971        	l32r	a7, 40080724 <_iram_text_start+0x1dc>
40082001:	112220        	slli	a2, a2, 14
40082004:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40082006:	0020c0        	memw
40082009:	0278      	l32i.n	a7, a2, 0
4008200b:	203370        	or	a3, a3, a7
	*(volatile uint32_t *)addr = data;
4008200e:	0020c0        	memw
40082011:	0239      	s32i.n	a3, a2, 0
		   I2C_SDA_HOLD_REG(config->index));
40082013:	0538      	l32i.n	a3, a5, 0
40082015:	1123e0        	slli	a2, a3, 2
40082018:	223a      	add.n	a2, a2, a3
4008201a:	f9c331        	l32r	a3, 40080728 <_iram_text_start+0x1e0>
4008201d:	112220        	slli	a2, a2, 14
40082020:	223a      	add.n	a2, a2, a3
	return *(volatile uint32_t *)addr;
40082022:	0020c0        	memw
40082025:	0238      	l32i.n	a3, a2, 0
40082027:	203830        	or	a3, a8, a3
	*(volatile uint32_t *)addr = data;
4008202a:	0020c0        	memw
4008202d:	0239      	s32i.n	a3, a2, 0
		   I2C_SDA_SAMPLE_REG(config->index));
4008202f:	0538      	l32i.n	a3, a5, 0
40082031:	ffab52        	movi	a5, 0xfffffbff
40082034:	1123e0        	slli	a2, a3, 2
40082037:	223a      	add.n	a2, a2, a3
40082039:	f9bc31        	l32r	a3, 4008072c <_iram_text_start+0x1e4>
4008203c:	112220        	slli	a2, a2, 14
4008203f:	223a      	add.n	a2, a2, a3
	return *(volatile uint32_t *)addr;
40082041:	0020c0        	memw
40082044:	0238      	l32i.n	a3, a2, 0
40082046:	208830        	or	a8, a8, a3
	*(volatile uint32_t *)addr = data;
40082049:	0020c0        	memw
4008204c:	0289      	s32i.n	a8, a2, 0
	sys_clear_bit(I2C_FIFO_CONF_REG(config->index), I2C_NONFIFO_EN_S);
4008204e:	0438      	l32i.n	a3, a4, 0
40082050:	1123e0        	slli	a2, a3, 2
40082053:	223a      	add.n	a2, a2, a3
40082055:	f9a231        	l32r	a3, 400806e0 <_iram_text_start+0x198>
40082058:	112220        	slli	a2, a2, 14
4008205b:	223a      	add.n	a2, a2, a3
	uint32_t temp = *(volatile uint32_t *)addr;
4008205d:	0020c0        	memw
40082060:	0238      	l32i.n	a3, a2, 0
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
40082062:	103350        	and	a3, a3, a5
40082065:	0020c0        	memw
40082068:	0239      	s32i.n	a3, a2, 0
	sys_write32(v << I2C_TIME_OUT_REG_S, I2C_TO_REG(config->index));
4008206a:	0438      	l32i.n	a3, a4, 0
4008206c:	1123e0        	slli	a2, a3, 2
4008206f:	223a      	add.n	a2, a2, a3
40082071:	f9af31        	l32r	a3, 40080730 <_iram_text_start+0x1e8>
40082074:	112220        	slli	a2, a2, 14
40082077:	223a      	add.n	a2, a2, a3
40082079:	f9ae31        	l32r	a3, 40080734 <_iram_text_start+0x1ec>
4008207c:	0020c0        	memw
4008207f:	0239      	s32i.n	a3, a2, 0
		    I2C_INT_ENA_REG(config->index));
40082081:	0438      	l32i.n	a3, a4, 0
40082083:	1123e0        	slli	a2, a3, 2
40082086:	223a      	add.n	a2, a2, a3
40082088:	f9ac31        	l32r	a3, 40080738 <_iram_text_start+0x1f0>
4008208b:	112220        	slli	a2, a2, 14
4008208e:	223a      	add.n	a2, a2, a3
40082090:	a0a532        	movi	a3, 0x5a0
40082093:	0020c0        	memw
40082096:	0239      	s32i.n	a3, a2, 0
	__asm__ volatile("rsr.intenable %0" : "=r"(val));
40082098:	03e430        	rsr.intenable	a3
	z_xt_ints_on(1 << irq);
4008209b:	c448      	l32i.n	a4, a4, 48
4008209d:	120c      	movi.n	a2, 1
4008209f:	401400        	ssl	a4
400820a2:	a12200        	sll	a2, a2
	val |= mask;
400820a5:	202230        	or	a2, a2, a3
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
400820a8:	13e420        	wsr.intenable	a2
400820ab:	002010        	rsync
400820ae:	000086        	j	400820b4 <i2c_esp32_configure+0x254>
400820b1:	aa6c00        	floor.s	a6, f12, 0
	XTOS_RESTORE_INTLEVEL(key);
400820b4:	13e660        	wsr.ps	a6
400820b7:	002010        	rsync
}
400820ba:	0a2d      	mov.n	a2, a10
400820bc:	f01d      	retw.n
	...

400820c0 <i2c_esp32_transmit>:
{
400820c0:	004136        	entry	a1, 32
	const struct i2c_esp32_config *config = dev->config;
400820c3:	1238      	l32i.n	a3, a2, 4
	struct i2c_esp32_data *data = dev->data;
400820c5:	32a8      	l32i.n	a10, a2, 12
	sys_set_bit(I2C_CTR_REG(config->index), I2C_TRANS_START_S);
400820c7:	0328      	l32i.n	a2, a3, 0
	*(volatile uint32_t *)addr = temp | (1 << bit);
400820c9:	092c      	movi.n	a9, 32
400820cb:	1182e0        	slli	a8, a2, 2
400820ce:	882a      	add.n	a8, a8, a2
400820d0:	f98d21        	l32r	a2, 40080704 <_iram_text_start+0x1bc>
400820d3:	118820        	slli	a8, a8, 14
400820d6:	882a      	add.n	a8, a8, a2
	uint32_t temp = *(volatile uint32_t *)addr;
400820d8:	0020c0        	memw
400820db:	0828      	l32i.n	a2, a8, 0
	*(volatile uint32_t *)addr = temp | (1 << bit);
400820dd:	202290        	or	a2, a2, a9
400820e0:	0020c0        	memw
400820e3:	0829      	s32i.n	a2, a8, 0
	return z_impl_k_sem_take(sem, timeout);
400820e5:	f995c1        	l32r	a12, 4008073c <_iram_text_start+0x1f4>
400820e8:	f938d1        	l32r	a13, 400805c8 <_iram_text_start+0x80>
400820eb:	aa8b      	addi.n	a10, a10, 8
400820ed:	00dfa5        	call8	40082ee8 <z_impl_k_sem_take>
		return -ETIMEDOUT;
400820f0:	c4af22        	movi	a2, -60
	if (k_sem_take(&data->fifo_sem, K_MSEC(I2C_ESP32_TIMEOUT_MS)) < 0) {
400820f3:	026a96        	bltz	a10, 4008211d <i2c_esp32_transmit+0x5d>
	status = sys_read32(I2C_INT_RAW_REG(config->index));
400820f6:	0328      	l32i.n	a2, a3, 0
400820f8:	1182e0        	slli	a8, a2, 2
400820fb:	882a      	add.n	a8, a8, a2
400820fd:	f99021        	l32r	a2, 40080740 <_iram_text_start+0x1f8>
40082100:	118820        	slli	a8, a8, 14
40082103:	882a      	add.n	a8, a8, a2
	return *(volatile uint32_t *)addr;
40082105:	0020c0        	memw
40082108:	0898      	l32i.n	a9, a8, 0
	if (status & (I2C_ARBITRATION_LOST_INT_RAW | I2C_ACK_ERR_INT_RAW)) {
4008210a:	20a482        	movi	a8, 0x420
4008210d:	108980        	and	a8, a9, a8
		return -EIO;
40082110:	b27c      	movi.n	a2, -5
	if (status & (I2C_ARBITRATION_LOST_INT_RAW | I2C_ACK_ERR_INT_RAW)) {
40082112:	78cc      	bnez.n	a8, 4008211d <i2c_esp32_transmit+0x5d>
	if (status & I2C_TIME_OUT_INT_RAW) {
40082114:	049890        	extui	a9, a9, 8, 1
	return 0;
40082117:	c4af22        	movi	a2, -60
4008211a:	832890        	moveqz	a2, a8, a9
}
4008211d:	f01d      	retw.n
	...

40082120 <i2c_esp32_init>:
		    POST_KERNEL, CONFIG_I2C_INIT_PRIORITY,
		    &i2c_esp32_driver_api);
#endif /* DT_NODE_HAS_STATUS(DT_DRV_INST(1), okay) */

static int i2c_esp32_init(const struct device *dev)
{
40082120:	004136        	entry	a1, 32
	const struct i2c_esp32_config *config = dev->config;
40082123:	1248      	l32i.n	a4, a2, 4
extern "C" {
#endif

static inline uint32_t i2c_map_dt_bitrate(uint32_t bitrate)
{
	switch (bitrate) {
40082125:	f98751        	l32r	a5, 40080744 <_iram_text_start+0x1fc>
	struct i2c_esp32_data *data = dev->data;
	uint32_t bitrate_cfg = i2c_map_dt_bitrate(config->bitrate);
40082128:	e488      	l32i.n	a8, a4, 56
	struct i2c_esp32_data *data = dev->data;
4008212a:	3268      	l32i.n	a6, a2, 12
	case I2C_BITRATE_STANDARD:
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
	case I2C_BITRATE_FAST:
		return I2C_SPEED_FAST << I2C_SPEED_SHIFT;
	case I2C_BITRATE_FAST_PLUS:
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
4008212c:	630c      	movi.n	a3, 6
	switch (bitrate) {
4008212e:	2c1857        	beq	a8, a5, 4008215e <i2c_esp32_init+0x3e>
40082131:	143587        	bltu	a5, a8, 40082149 <i2c_esp32_init+0x29>
40082134:	f98551        	l32r	a5, 40080748 <_iram_text_start+0x200>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
40082137:	230c      	movi.n	a3, 2
	switch (bitrate) {
40082139:	211857        	beq	a8, a5, 4008215e <i2c_esp32_init+0x3e>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
	}

	LOG_ERR("Invalid I2C bit rate value");

	return 0;
4008213c:	f98431        	l32r	a3, 4008074c <_iram_text_start+0x204>
4008213f:	450c      	movi.n	a5, 4
40082141:	c08830        	sub	a8, a8, a3
40082144:	000446        	j	40082159 <i2c_esp32_init+0x39>
40082147:	510000        	lsi	f0, a0, 0x144
	switch (bitrate) {
4008214a:	0cf981        	l32r	a8, 40045530 <esp32_rom_gpio_matrix_out+0x3b624>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
4008214d:	185783        	lsi	f8, a7, 96
	switch (bitrate) {
40082150:	310c      	movi.n	a1, 3
	return 0;
40082152:	0cf980        	lsi	f8, a9, 48
40082155:	8830a5        	call8	4000a460 <esp32_rom_gpio_matrix_out+0x554>
40082158:	030cc0        	rsr.scompare1	a12
4008215b:	833580        	moveqz	a3, a5, a8
	data->clock_dev = device_get_binding(config->clock_name);
4008215e:	24a8      	l32i.n	a10, a4, 8
40082160:	004ce5        	call8	40082630 <z_impl_device_get_binding>
40082163:	a6a9      	s32i.n	a10, a6, 40
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082165:	006350        	rsil	a5, 3
	return z_impl_k_sem_init(sem, initial_count, limit);
40082168:	1c0c      	movi.n	a12, 1
4008216a:	0cbd      	mov.n	a11, a12
4008216c:	a68b      	addi.n	a10, a6, 8
4008216e:	015165        	call8	40083684 <z_impl_k_sem_init>
40082171:	1c0c      	movi.n	a12, 1
40082173:	20bcc0        	or	a11, a12, a12
40082176:	18c6a2        	addi	a10, a6, 24
40082179:	0150a5        	call8	40083684 <z_impl_k_sem_init>
	__asm__ volatile("rsr.intenable %0" : "=r"(val));
4008217c:	03e460        	rsr.intenable	a6
	z_xt_ints_off(1 << irq);
4008217f:	c498      	l32i.n	a9, a4, 48
	val &= ~mask;
40082181:	e87c      	movi.n	a8, -2
40082183:	401900        	ssl	a9
40082186:	818880        	src	a8, a8, a8
40082189:	108860        	and	a8, a8, a6
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
4008218c:	13e480        	wsr.intenable	a8
4008218f:	002010        	rsync
	irq_disable(config->irq.line);

	/* Even if irq_enable() is called on config->irq.line, disable
	 * interrupt sources in the I2C controller.
	 */
	sys_write32(0, I2C_INT_ENA_REG(config->index));
40082192:	0468      	l32i.n	a6, a4, 0
	*(volatile uint32_t *)addr = data;
40082194:	0a0c      	movi.n	a10, 0
40082196:	1186e0        	slli	a8, a6, 2
40082199:	886a      	add.n	a8, a8, a6
4008219b:	f96761        	l32r	a6, 40080738 <_iram_text_start+0x1f0>
4008219e:	118820        	slli	a8, a8, 14
400821a1:	886a      	add.n	a8, a8, a6
400821a3:	0020c0        	memw
400821a6:	0068a2        	s32i	a10, a8, 0
	esp32_rom_intr_matrix_set(0, config->irq.source, config->irq.line);
400821a9:	0c24c2        	l32i	a12, a4, 48
400821ac:	b4b8      	l32i.n	a11, a4, 44
400821ae:	f94981        	l32r	a8, 400806d4 <_iram_text_start+0x18c>
400821b1:	0008e0        	callx8	a8

	config->connect_irq();
400821b4:	1468      	l32i.n	a6, a4, 4
400821b6:	0006e0        	callx8	a6
	XTOS_RESTORE_INTLEVEL(key);
400821b9:	13e650        	wsr.ps	a5
400821bc:	002010        	rsync
	irq_unlock(key);

	return i2c_esp32_configure(dev, config->default_config | bitrate_cfg);
400821bf:	d4b8      	l32i.n	a11, a4, 52
400821c1:	02ad      	mov.n	a10, a2
400821c3:	20b3b0        	or	a11, a3, a11
400821c6:	ffc9a5        	call8	40081e60 <i2c_esp32_configure>
}
400821c9:	0a2d      	mov.n	a2, a10
400821cb:	f01d      	retw.n
400821cd:	000000        	ill

400821d0 <i2c_esp32_wait$isra$1>:
static int i2c_esp32_wait(const struct device *dev,
400821d0:	004136        	entry	a1, 32
	int counter = 0;
400821d3:	040c      	movi.n	a4, 0
	if (*counter > I2C_ESP32_TIMEOUT) {
400821d5:	85a352        	movi	a5, 0x385
	if (wait_cmd) {
400821d8:	199347        	bne	a3, a4, 400821f5 <i2c_esp32_wait$isra$1+0x25>
400821db:	000cc6        	j	40082212 <i2c_esp32_wait$isra$1+0x42>
	*counter = *counter + 1;
400821de:	441b      	addi.n	a4, a4, 1
	if (*counter > I2C_ESP32_TIMEOUT) {
400821e0:	059457        	bne	a4, a5, 400821e9 <i2c_esp32_wait$isra$1+0x19>
		return -ETIMEDOUT;
400821e3:	c4af22        	movi	a2, -60
400821e6:	001206        	j	40082232 <i2c_esp32_wait$isra$1+0x62>
	if (*counter > I2C_ESP32_SPIN_THRESHOLD) {
400821e9:	58a282        	movi	a8, 0x258
400821ec:	05a847        	bge	a8, a4, 400821f5 <i2c_esp32_wait$isra$1+0x25>
	z_impl_k_yield();
400821ef:	201110        	or	a1, a1, a1
400821f2:	00bea5        	call8	40082ddc <z_impl_k_yield>
		while (!wait_cmd->done) {
400821f5:	0020c0        	memw
400821f8:	0388      	l32i.n	a8, a3, 0
400821fa:	fe08d6        	bgez	a8, 400821de <i2c_esp32_wait$isra$1+0xe>
400821fd:	000446        	j	40082212 <i2c_esp32_wait$isra$1+0x42>
	*counter = *counter + 1;
40082200:	01c442        	addi	a4, a4, 1
	if (*counter > I2C_ESP32_TIMEOUT) {
40082203:	85a332        	movi	a3, 0x385
40082206:	d91437        	beq	a4, a3, 400821e3 <i2c_esp32_wait$isra$1+0x13>
	if (*counter > I2C_ESP32_SPIN_THRESHOLD) {
40082209:	58a232        	movi	a3, 0x258
4008220c:	02a347        	bge	a3, a4, 40082212 <i2c_esp32_wait$isra$1+0x42>
4008220f:	00bce5        	call8	40082ddc <z_impl_k_yield>
	while (sys_read32(I2C_SR_REG(config->index)) & I2C_BUS_BUSY) {
40082212:	002292        	l32i	a9, a2, 0
40082215:	f95031        	l32r	a3, 40080758 <_iram_text_start+0x210>
40082218:	1189e0        	slli	a8, a9, 2
4008221b:	808890        	add	a8, a8, a9
4008221e:	118820        	slli	a8, a8, 14
40082221:	883a      	add.n	a8, a8, a3
	return *(volatile uint32_t *)addr;
40082223:	0020c0        	memw
40082226:	0888      	l32i.n	a8, a8, 0
40082228:	031c      	movi.n	a3, 16
4008222a:	108830        	and	a8, a8, a3
4008222d:	fcf856        	bnez	a8, 40082200 <i2c_esp32_wait$isra$1+0x30>
	return 0;
40082230:	082d      	mov.n	a2, a8
}
40082232:	f01d      	retw.n

40082234 <i2c_esp32_transfer>:
{
40082234:	008136        	entry	a1, 64
40082237:	206220        	or	a6, a2, a2
	struct i2c_esp32_data *data = dev->data;
4008223a:	032222        	l32i	a2, a2, 12
{
4008223d:	744040        	extui	a4, a4, 0, 8
40082240:	f45050        	extui	a5, a5, 0, 16
	k_sem_take(&data->transfer_sem, K_FOREVER);
40082243:	18c272        	addi	a7, a2, 24
	return z_impl_k_sem_take(sem, timeout);
40082246:	f945c1        	l32r	a12, 4008075c <_iram_text_start+0x214>
40082249:	f944d1        	l32r	a13, 4008075c <_iram_text_start+0x214>
4008224c:	20a770        	or	a10, a7, a7
4008224f:	00c9a5        	call8	40082ee8 <z_impl_k_sem_take>
	addr &= BIT_MASK(data->dev_config & I2C_ADDR_10_BITS ? 10 : 7);
40082252:	0228      	l32i.n	a2, a2, 0
40082254:	ffa392        	movi	a9, 0x3ff
40082257:	042020        	extui	a2, a2, 0, 1
4008225a:	7fa082        	movi	a8, 127
4008225d:	938920        	movnez	a8, a9, a2
40082260:	1124f0        	slli	a2, a4, 1
40082263:	224a      	add.n	a2, a2, a4
40082265:	1122e0        	slli	a2, a2, 2
40082268:	232a      	add.n	a2, a3, a2
4008226a:	105850        	and	a5, a8, a5
	addr <<= 1;
4008226d:	1155f0        	slli	a5, a5, 1
	for (i = 0U; i < num_msgs; i++) {
40082270:	4129      	s32i.n	a2, a1, 16
	addr |= BIT(0);
40082272:	120c      	movi.n	a2, 1
	cmd = i2c_esp32_write_addr(dev, cmd, &msg, addr);
40082274:	202520        	or	a2, a5, a2
40082277:	5129      	s32i.n	a2, a1, 20
	for (i = 0U; i < num_msgs; i++) {
40082279:	007906        	j	40082461 <i2c_esp32_transfer+0x22d>
		if ((msgs[i].flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
4008227c:	012642        	l32i	a4, a6, 4
4008227f:	0123a2        	l32i	a10, a3, 4
40082282:	002482        	l32i	a8, a4, 0
40082285:	2398      	l32i.n	a9, a3, 8
40082287:	1128e0        	slli	a2, a8, 2
4008228a:	228a      	add.n	a2, a2, a8
4008228c:	f93581        	l32r	a8, 40080760 <_iram_text_start+0x218>
4008228f:	112220        	slli	a2, a2, 14
40082292:	228a      	add.n	a2, a2, a8
40082294:	03c8      	l32i.n	a12, a3, 0
40082296:	080382        	l8ui	a8, a3, 8
40082299:	01c9      	s32i.n	a12, a1, 0
4008229b:	048080        	extui	a8, a8, 0, 1
4008229e:	11a9      	s32i.n	a10, a1, 4
400822a0:	2199      	s32i.n	a9, a1, 8
400822a2:	b24b      	addi.n	a11, a2, 4
400822a4:	0c5856        	bnez	a8, 4008236d <i2c_esp32_transfer+0x139>
	*cmd++ = (struct i2c_esp32_cmd) {
400822a7:	0020c0        	memw
400822aa:	0289      	s32i.n	a8, a2, 0
	cmd = i2c_esp32_write_addr(dev, cmd, &msg, addr);
400822ac:	05dd      	mov.n	a13, a5
400822ae:	01cd      	mov.n	a12, a1
400822b0:	06ad      	mov.n	a10, a6
400822b2:	ffae65        	call8	40081d98 <i2c_esp32_write_addr>
400822b5:	0abd      	mov.n	a11, a10
		uint32_t to_send = MIN(I2C_ESP32_BUFFER_SIZE, msg.len);
400822b7:	022c      	movi.n	a2, 32
400822b9:	002986        	j	40082363 <i2c_esp32_transfer+0x12f>
400822bc:	882000        	lsi	f0, a0, 0x220
400822bf:	0ad163        	lsi	f6, a1, 40
				    I2C_DATA_APB_REG(config->index));
400822c2:	adf9      	s32i.n	a15, a13, 40
400822c4:	7608      	l32i.n	a0, a6, 28
400822c6:	198a      	add.n	a1, a9, a8
			sys_write32(*msg.buf++,
400822c8:	0198      	l32i.n	a9, a1, 0
				    I2C_DATA_APB_REG(config->index));
400822ca:	04e8      	l32i.n	a14, a4, 0
			sys_write32(*msg.buf++,
400822cc:	c91b      	addi.n	a12, a9, 1
400822ce:	01c9      	s32i.n	a12, a1, 0
400822d0:	0009c2        	l8ui	a12, a9, 0
				    I2C_DATA_APB_REG(config->index));
400822d3:	119ee0        	slli	a9, a14, 2
400822d6:	99ea      	add.n	a9, a9, a14
400822d8:	119920        	slli	a9, a9, 14
400822db:	99da      	add.n	a9, a9, a13
	*(volatile uint32_t *)addr = data;
400822dd:	0020c0        	memw
400822e0:	09c9      	s32i.n	a12, a9, 0
		*cmd++ = (struct i2c_esp32_cmd) {
400822e2:	990c      	movi.n	a9, 9
400822e4:	11a980        	slli	a10, a9, 8
400822e7:	749080        	extui	a9, a8, 0, 8
400822ea:	2099a0        	or	a9, a9, a10
400822ed:	0020c0        	memw
400822f0:	0b99      	s32i.n	a9, a11, 0
		msg.len -= to_send;
400822f2:	1198      	l32i.n	a9, a1, 4
400822f4:	c08980        	sub	a8, a9, a8
400822f7:	1189      	s32i.n	a8, a1, 4
		if (!msg.len && (msg.flags & I2C_MSG_STOP)) {
400822f9:	c8dc      	bnez.n	a8, 40082319 <i2c_esp32_transfer+0xe5>
400822fb:	080192        	l8ui	a9, a1, 8
400822fe:	176917        	bbci	a9, 1, 40082319 <i2c_esp32_transfer+0xe5>
			*cmd = (struct i2c_esp32_cmd) {
40082301:	0020c0        	memw
40082304:	1b89      	s32i.n	a8, a11, 4
40082306:	f8bf91        	l32r	a9, 40080604 <_iram_text_start+0xbc>
40082309:	0020c0        	memw
4008230c:	1b88      	l32i.n	a8, a11, 4
4008230e:	108890        	and	a8, a8, a9
40082311:	f91491        	l32r	a9, 40080764 <_iram_text_start+0x21c>
40082314:	000586        	j	4008232e <i2c_esp32_transfer+0xfa>
40082317:	0c0000        	lsi	f0, a0, 48
			*cmd = (struct i2c_esp32_cmd) {
4008231a:	c008      	l32i.n	a0, a0, 48
4008231c:	890020        	lsi	f2, a0, 0x224
4008231f:	911b      	addi.n	a9, a1, 1
40082321:	f8b9      	s32i.n	a11, a8, 60
40082323:	0020c0        	memw
40082326:	1b88      	l32i.n	a8, a11, 4
40082328:	108890        	and	a8, a8, a9
4008232b:	f8b791        	l32r	a9, 40080608 <_iram_text_start+0xc0>
4008232e:	208890        	or	a8, a8, a9
40082331:	0020c0        	memw
40082334:	1b89      	s32i.n	a8, a11, 4
	ret = i2c_esp32_transmit(dev);
40082336:	06ad      	mov.n	a10, a6
40082338:	61b9      	s32i.n	a11, a1, 24
4008233a:	ffd865        	call8	400820c0 <i2c_esp32_transmit>
4008233d:	0a8d      	mov.n	a8, a10
	if (!ret) {
4008233f:	61b8      	l32i.n	a11, a1, 24
40082341:	7acc      	bnez.n	a10, 4008234c <i2c_esp32_transfer+0x118>
		return i2c_esp32_wait(dev, wait_cmd);
40082343:	16a8      	l32i.n	a10, a6, 4
40082345:	bb4b      	addi.n	a11, a11, 4
40082347:	ffe8a5        	call8	400821d0 <i2c_esp32_wait$isra$1>
4008234a:	0a8d      	mov.n	a8, a10
		if (ret < 0) {
4008234c:	10d896        	bltz	a8, 4008245d <i2c_esp32_transfer+0x229>
		i2c_esp32_reset_fifo(config);
4008234f:	04a8      	l32i.n	a10, a4, 0
40082351:	ffa125        	call8	40081d64 <i2c_esp32_reset_fifo$isra$0>
	for (; msg.len; cmd = (void *)I2C_COMD0_REG(config->index)) {
40082354:	0488      	l32i.n	a8, a4, 0
40082356:	11b8e0        	slli	a11, a8, 2
40082359:	bb8a      	add.n	a11, a11, a8
4008235b:	f90181        	l32r	a8, 40080760 <_iram_text_start+0x218>
4008235e:	11bb20        	slli	a11, a11, 14
40082361:	bb8a      	add.n	a11, a11, a8
40082363:	1188      	l32i.n	a8, a1, 4
40082365:	f54856        	bnez	a8, 400822bd <i2c_esp32_transfer+0x89>
40082368:	003c46        	j	4008245d <i2c_esp32_transfer+0x229>
4008236b:	820000        	mull	a0, a0, a0
	*cmd++ = (struct i2c_esp32_cmd) {
4008236e:	d200a0        	quos	a0, a0, a10
	cmd = i2c_esp32_write_addr(dev, cmd, &msg, addr);
40082371:	c00521        	l32r	a2, 40072388 <esp32_rom_gpio_matrix_out+0x6847c>
	*cmd++ = (struct i2c_esp32_cmd) {
40082374:	820020        	mull	a0, a0, a2
40082377:	cd0062        	l8ui	a6, a0, 205
	cmd = i2c_esp32_write_addr(dev, cmd, &msg, addr);
4008237a:	06ad01        	l32r	a0, 40043e30 <esp32_rom_gpio_matrix_out+0x39f24>
4008237d:	ffa1a5        	call8	40081d98 <i2c_esp32_write_addr>
	for (; msg.len; cmd = (void *)I2C_COMD0_REG(config->index)) {
40082380:	003506        	j	40082458 <i2c_esp32_transfer+0x224>
		uint32_t to_read = MIN(I2C_ESP32_BUFFER_SIZE, msg.len - 1);
40082383:	280b      	addi.n	a2, a8, -1
40082385:	092c      	movi.n	a9, 32
40082387:	632290        	minu	a2, a2, a9
		if (to_read) {
4008238a:	0f1826        	beqi	a8, 1, 4008239d <i2c_esp32_transfer+0x169>
			*cmd++ = (struct i2c_esp32_cmd) {
4008238d:	f8c5c1        	l32r	a12, 400806a4 <_iram_text_start+0x15c>
40082390:	74b020        	extui	a11, a2, 0, 8
40082393:	20bbc0        	or	a11, a11, a12
40082396:	0020c0        	memw
40082399:	0ab9      	s32i.n	a11, a10, 0
4008239b:	aa4b      	addi.n	a10, a10, 4
		if (msg.len - to_read <= 1U) {
4008239d:	c08820        	sub	a8, a8, a2
400823a0:	3828f6        	bgeui	a8, 2, 400823dc <i2c_esp32_transfer+0x1a8>
			*cmd++ = (struct i2c_esp32_cmd) {
400823a3:	f8f181        	l32r	a8, 40080768 <_iram_text_start+0x220>
400823a6:	ba4b      	addi.n	a11, a10, 4
400823a8:	0020c0        	memw
400823ab:	0a89      	s32i.n	a8, a10, 0
			if (msg.flags & I2C_MSG_STOP) {
400823ad:	080182        	l8ui	a8, a1, 8
			to_read++;
400823b0:	221b      	addi.n	a2, a2, 1
			if (msg.flags & I2C_MSG_STOP) {
400823b2:	246817        	bbci	a8, 1, 400823da <i2c_esp32_transfer+0x1a6>
				*cmd++ = (struct i2c_esp32_cmd) {
400823b5:	080c      	movi.n	a8, 0
400823b7:	0020c0        	memw
400823ba:	1a89      	s32i.n	a8, a10, 4
400823bc:	0020c0        	memw
400823bf:	1a88      	l32i.n	a8, a10, 4
400823c1:	f890c1        	l32r	a12, 40080604 <_iram_text_start+0xbc>
400823c4:	1088c0        	and	a8, a8, a12
400823c7:	f8e7c1        	l32r	a12, 40080764 <_iram_text_start+0x21c>
400823ca:	2088c0        	or	a8, a8, a12
400823cd:	0020c0        	memw
400823d0:	1a89      	s32i.n	a8, a10, 4
400823d2:	4a0c      	movi.n	a10, 4
		if (!wait_cmd) {
400823d4:	4b8c      	beqz.n	a11, 400823dc <i2c_esp32_transfer+0x1a8>
400823d6:	000846        	j	400823fb <i2c_esp32_transfer+0x1c7>
400823d9:	0bad00        	lsi	f0, a13, 44
			*cmd++ = (struct i2c_esp32_cmd) {
400823dc:	00a0b2        	movi	a11, 0
400823df:	0020c0        	memw
400823e2:	006ab2        	s32i	a11, a10, 0
400823e5:	0020c0        	memw
400823e8:	0a88      	l32i.n	a8, a10, 0
400823ea:	f886c1        	l32r	a12, 40080604 <_iram_text_start+0xbc>
400823ed:	1088c0        	and	a8, a8, a12
400823f0:	f886c1        	l32r	a12, 40080608 <_iram_text_start+0xc0>
400823f3:	2088c0        	or	a8, a8, a12
400823f6:	0020c0        	memw
400823f9:	0a89      	s32i.n	a8, a10, 0
	ret = i2c_esp32_transmit(dev);
400823fb:	20a660        	or	a10, a6, a6
400823fe:	61b9      	s32i.n	a11, a1, 24
40082400:	ffcbe5        	call8	400820c0 <i2c_esp32_transmit>
40082403:	0a8d      	mov.n	a8, a10
	if (!ret) {
40082405:	61b8      	l32i.n	a11, a1, 24
40082407:	5acc      	bnez.n	a10, 40082410 <i2c_esp32_transfer+0x1dc>
		return i2c_esp32_wait(dev, wait_cmd);
40082409:	16a8      	l32i.n	a10, a6, 4
4008240b:	ffdc65        	call8	400821d0 <i2c_esp32_wait$isra$1>
4008240e:	0a8d      	mov.n	a8, a10
		if (ret < 0) {
40082410:	049896        	bltz	a8, 4008245d <i2c_esp32_transfer+0x229>
		for (i = 0U; i < to_read; i++) {
40082413:	0a0c      	movi.n	a10, 0
			uint32_t v = sys_read32(I2C_DATA_APB_REG(config->index));
40082415:	f8b4b1        	l32r	a11, 400806e8 <_iram_text_start+0x1a0>
40082418:	000786        	j	4008243a <i2c_esp32_transfer+0x206>
4008241b:	24c200        	extui	a12, a0, 2, 3
4008241e:	caa200        	float.s	f10, a2, 0
		for (i = 0U; i < to_read; i++) {
40082421:	8ce001        	l32r	a0, 400657a4 <esp32_rom_gpio_matrix_out+0x5b898>
			uint32_t v = sys_read32(I2C_DATA_APB_REG(config->index));
40082424:	88ca11        	l32r	a1, 4006474c <esp32_rom_gpio_matrix_out+0x5a840>
40082427:	118820        	slli	a8, a8, 14
4008242a:	88ba      	add.n	a8, a8, a11
	return *(volatile uint32_t *)addr;
4008242c:	0020c0        	memw
4008242f:	08c8      	l32i.n	a12, a8, 0
			*msg.buf++ = v & I2C_FIFO_RDATA;
40082431:	0188      	l32i.n	a8, a1, 0
40082433:	d81b      	addi.n	a13, a8, 1
40082435:	01d9      	s32i.n	a13, a1, 0
40082437:	0048c2        	s8i	a12, a8, 0
		for (i = 0U; i < to_read; i++) {
4008243a:	de9a27        	bne	a10, a2, 4008241c <i2c_esp32_transfer+0x1e8>
		msg.len -= to_read;
4008243d:	1188      	l32i.n	a8, a1, 4
4008243f:	c0a8a0        	sub	a10, a8, a10
40082442:	11a9      	s32i.n	a10, a1, 4
		i2c_esp32_reset_fifo(config);
40082444:	04a8      	l32i.n	a10, a4, 0
40082446:	ff91e5        	call8	40081d64 <i2c_esp32_reset_fifo$isra$0>
	for (; msg.len; cmd = (void *)I2C_COMD0_REG(config->index)) {
40082449:	0488      	l32i.n	a8, a4, 0
4008244b:	11a8e0        	slli	a10, a8, 2
4008244e:	aa8a      	add.n	a10, a10, a8
40082450:	f8c481        	l32r	a8, 40080760 <_iram_text_start+0x218>
40082453:	11aa20        	slli	a10, a10, 14
40082456:	aa8a      	add.n	a10, a10, a8
40082458:	1188      	l32i.n	a8, a1, 4
4008245a:	f25856        	bnez	a8, 40082383 <i2c_esp32_transfer+0x14f>
		if (ret < 0) {
4008245d:	33cb      	addi.n	a3, a3, 12
4008245f:	88cc      	bnez.n	a8, 4008246b <i2c_esp32_transfer+0x237>
	for (i = 0U; i < num_msgs; i++) {
40082461:	4128      	l32i.n	a2, a1, 16
40082463:	021237        	beq	a2, a3, 40082469 <i2c_esp32_transfer+0x235>
40082466:	ff8486        	j	4008227c <i2c_esp32_transfer+0x48>
40082469:	080c      	movi.n	a8, 0
	z_impl_k_sem_give(sem);
4008246b:	07ad      	mov.n	a10, a7
4008246d:	6189      	s32i.n	a8, a1, 24
4008246f:	00a3e5        	call8	40082eac <z_impl_k_sem_give>
}
40082472:	6188      	l32i.n	a8, a1, 24
40082474:	082d      	mov.n	a2, a8
40082476:	f01d      	retw.n

40082478 <uart_esp32_configure>:
	return 0;
}

static int uart_esp32_configure(const struct device *dev,
				const struct uart_config *cfg)
{
40082478:	006136        	entry	a1, 48
	uint32_t conf0 = UART_TICK_REF_ALWAYS_ON;
	uint32_t conf1 = (UART_RX_FIFO_THRESH << UART_RXFIFO_FULL_THRHD_S)
		      | (UART_TX_FIFO_THRESH << UART_TXFIFO_EMPTY_THRHD_S);

	uart_esp32_configure_pins(dev);
4008247b:	1248      	l32i.n	a4, a2, 4
	esp32_rom_gpio_matrix_out(cfg->pins.tx,
4008247d:	0d0c      	movi.n	a13, 0
4008247f:	34b8      	l32i.n	a11, a4, 12
40082481:	0724a2        	l32i	a10, a4, 28
40082484:	0dcd      	mov.n	a12, a13
40082486:	f89c81        	l32r	a8, 400806f8 <_iram_text_start+0x1b0>
40082489:	0008e0        	callx8	a8
	esp32_rom_gpio_matrix_in(cfg->pins.rx,
4008248c:	44b8      	l32i.n	a11, a4, 16
4008248e:	84a8      	l32i.n	a10, a4, 32
40082490:	0c0c      	movi.n	a12, 0
40082492:	f89a81        	l32r	a8, 400806fc <_iram_text_start+0x1b4>
40082495:	0008e0        	callx8	a8
	if (cfg->pins.cts) {
40082498:	a4a8      	l32i.n	a10, a4, 40
4008249a:	aa8c      	beqz.n	a10, 400824a8 <uart_esp32_configure+0x30>
		esp32_rom_gpio_matrix_out(cfg->pins.cts,
4008249c:	0d0c      	movi.n	a13, 0
4008249e:	64b8      	l32i.n	a11, a4, 24
400824a0:	0dcd      	mov.n	a12, a13
400824a2:	f89581        	l32r	a8, 400806f8 <_iram_text_start+0x1b0>
400824a5:	0008e0        	callx8	a8
	if (cfg->pins.rts) {
400824a8:	94a8      	l32i.n	a10, a4, 36
400824aa:	8a8c      	beqz.n	a10, 400824b6 <uart_esp32_configure+0x3e>
		esp32_rom_gpio_matrix_in(cfg->pins.rts,
400824ac:	54b8      	l32i.n	a11, a4, 20
400824ae:	0c0c      	movi.n	a12, 0
400824b0:	f89381        	l32r	a8, 400806fc <_iram_text_start+0x1b4>
400824b3:	0008e0        	callx8	a8
	clock_control_on(DEV_DATA(dev)->clock_dev, DEV_CFG(dev)->peripheral_id);
400824b6:	3248      	l32i.n	a4, a2, 12
400824b8:	1258      	l32i.n	a5, a2, 4
400824ba:	24a8      	l32i.n	a10, a4, 8
	return api->on(dev, sys);
400824bc:	b5b8      	l32i.n	a11, a5, 44
400824be:	2a48      	l32i.n	a4, a10, 8
400824c0:	0448      	l32i.n	a4, a4, 0
400824c2:	0004e0        	callx8	a4

	/*
	 * Reset RX Buffer by reading all received bytes
	 * Hardware Reset functionality can't be used with UART 1/2
	 */
	while (UART_RXFIFO_COUNT(DEV_BASE(dev)->status) != 0) {
400824c5:	12b8      	l32i.n	a11, a2, 4
400824c7:	0b58      	l32i.n	a5, a11, 0
400824c9:	000106        	j	400824d1 <uart_esp32_configure+0x59>
		(void) DEV_BASE(dev)->fifo;
400824cc:	0020c0        	memw
400824cf:	0548      	l32i.n	a4, a5, 0
	while (UART_RXFIFO_COUNT(DEV_BASE(dev)->status) != 0) {
400824d1:	0020c0        	memw
400824d4:	7548      	l32i.n	a4, a5, 28
400824d6:	744040        	extui	a4, a4, 0, 8
400824d9:	fef456        	bnez	a4, 400824cc <uart_esp32_configure+0x54>
	}

	switch (cfg->parity) {
400824dc:	040342        	l8ui	a4, a3, 4
400824df:	0d1426        	beqi	a4, 1, 400824f0 <uart_esp32_configure+0x78>
400824e2:	249c      	beqz.n	a4, 400824f8 <uart_esp32_configure+0x80>
		break;
	case UART_CFG_PARITY_ODD:
		conf0 |= UART_PARITY;
		break;
	default:
		return -ENOTSUP;
400824e4:	ddaf92        	movi	a9, -35
	switch (cfg->parity) {
400824e7:	022426        	beqi	a4, 2, 400824ed <uart_esp32_configure+0x75>
400824ea:	002606        	j	40082586 <uart_esp32_configure+0x10e>
400824ed:	0001c6        	j	400824f8 <uart_esp32_configure+0x80>
		conf0 |= UART_PARITY;
400824f0:	f89f51        	l32r	a5, 4008076c <_iram_text_start+0x224>
400824f3:	000106        	j	400824fb <uart_esp32_configure+0x83>
400824f6:	510000        	lsi	f0, a0, 0x144
		conf0 &= ~(UART_PARITY);
400824f9:	82f847        	bbsi	a8, 20, 4008247f <uart_esp32_configure+0x7>
	}

	switch (cfg->stop_bits) {
400824fc:	920503        	lsi	f0, a5, 0x248
	case UART_CFG_STOP_BITS_1_5:
	case UART_CFG_STOP_BITS_2:
		conf0 |= cfg->stop_bits << UART_STOP_BIT_NUM_S;
		break;
	default:
		return -ENOTSUP;
400824ff:	af          	.byte 0xaf
40082500:	0bdd      	mov.n	a13, a11
	switch (cfg->stop_bits) {
40082502:	f648      	l32i.n	a4, a6, 60
40082504:	c07f34        	lsi	f3, a15, 0x300
		conf0 |= cfg->stop_bits << UART_STOP_BIT_NUM_S;
40082507:	11a8      	l32i.n	a10, a1, 4
	}

	if (cfg->data_bits <= UART_CFG_DATA_BITS_8) {
40082509:	060382        	l8ui	a8, a3, 6
4008250c:	7648f6        	bgeui	a8, 4, 40082586 <uart_esp32_configure+0x10e>
		conf0 |= cfg->data_bits << UART_BIT_NUM_S;
4008250f:	1148e0        	slli	a4, a8, 2
40082512:	2044a0        	or	a4, a4, a10
40082515:	204450        	or	a4, a4, a5
	} else {
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
40082518:	070352        	l8ui	a5, a3, 7
4008251b:	d58c      	beqz.n	a5, 4008252c <uart_esp32_configure+0xb4>
4008251d:	651566        	bnei	a5, 1, 40082586 <uart_esp32_configure+0x10e>
	case UART_CFG_FLOW_CTRL_NONE:
		conf0 &= ~(UART_TX_FLOW_EN);
		conf1 &= ~(UART_RX_FLOW_EN);
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		conf0 |= UART_TX_FLOW_EN;
40082520:	f84a51        	l32r	a5, 40080648 <_iram_text_start+0x100>
40082523:	204450        	or	a4, a4, a5
		conf1 |= UART_RX_FLOW_EN;
40082526:	f89251        	l32r	a5, 40080770 <_iram_text_start+0x228>
		break;
40082529:	000086        	j	4008252f <uart_esp32_configure+0xb7>
		conf1 &= ~(UART_RX_FLOW_EN);
4008252c:	01a152        	movi	a5, 0x101
	uint32_t sys_clk_freq = 0;
4008252f:	080c      	movi.n	a8, 0
40082531:	0189      	s32i.n	a8, a1, 0
	if (clock_control_get_rate(DEV_DATA(dev)->clock_dev,
40082533:	3288      	l32i.n	a8, a2, 12
	return api->get_rate(dev, sys, rate);
40082535:	bbb8      	l32i.n	a11, a11, 44
40082537:	28a8      	l32i.n	a10, a8, 8
40082539:	01cd      	mov.n	a12, a1
4008253b:	2a88      	l32i.n	a8, a10, 8
	default:
		return -ENOTSUP;
	}

	if (uart_esp32_set_baudrate(dev, cfg->baudrate)) {
4008253d:	002362        	l32i	a6, a3, 0
40082540:	032882        	l32i	a8, a8, 12
40082543:	0008e0        	callx8	a8
40082546:	12b8      	l32i.n	a11, a2, 4
	if (clock_control_get_rate(DEV_DATA(dev)->clock_dev,
40082548:	6aec      	bnez.n	a10, 40082572 <uart_esp32_configure+0xfa>
	uint32_t clk_div = (((sys_clk_freq) << 4) / baudrate);
4008254a:	0188      	l32i.n	a8, a1, 0
	while (UART_TXFIFO_COUNT(DEV_BASE(dev)->status)) {
4008254c:	0ba8      	l32i.n	a10, a11, 0
	uint32_t clk_div = (((sys_clk_freq) << 4) / baudrate);
4008254e:	1188c0        	slli	a8, a8, 4
40082551:	c28860        	quou	a8, a8, a6
	while (UART_TXFIFO_COUNT(DEV_BASE(dev)->status)) {
40082554:	0020c0        	memw
40082557:	7a98      	l32i.n	a9, a10, 28
40082559:	759090        	extui	a9, a9, 16, 8
4008255c:	ff4956        	bnez	a9, 40082554 <uart_esp32_configure+0xdc>
	if (clk_div < 16) {
4008255f:	f90c      	movi.n	a9, 15
40082561:	0db987        	bgeu	a9, a8, 40082572 <uart_esp32_configure+0xfa>
	DEV_BASE(dev)->clk_div = ((clk_div >> 4) | (clk_div & 0xf));
40082564:	419480        	srli	a9, a8, 4
40082567:	348080        	extui	a8, a8, 0, 4
4008256a:	208980        	or	a8, a9, a8
4008256d:	0020c0        	memw
40082570:	5a89      	s32i.n	a8, a10, 20
		DEV_DATA(dev)->uart_config.baudrate = cfg->baudrate;
40082572:	0338      	l32i.n	a3, a3, 0
40082574:	3228      	l32i.n	a2, a2, 12
	}

	DEV_BASE(dev)->conf0 = conf0;
	DEV_BASE(dev)->conf1 = conf1;

	return 0;
40082576:	090c      	movi.n	a9, 0
		DEV_DATA(dev)->uart_config.baudrate = cfg->baudrate;
40082578:	0239      	s32i.n	a3, a2, 0
	DEV_BASE(dev)->conf0 = conf0;
4008257a:	0b28      	l32i.n	a2, a11, 0
4008257c:	0020c0        	memw
4008257f:	8249      	s32i.n	a4, a2, 32
	DEV_BASE(dev)->conf1 = conf1;
40082581:	0020c0        	memw
40082584:	9259      	s32i.n	a5, a2, 36
}
40082586:	092d      	mov.n	a2, a9
40082588:	f01d      	retw.n
	...

4008258c <uart_esp32_init>:

static int uart_esp32_init(const struct device *dev)
{
4008258c:	004136        	entry	a1, 32
	struct uart_esp32_data *data = DEV_DATA(dev);

	data->clock_dev = device_get_binding(DEV_CFG(dev)->clock_name);
4008258f:	012282        	l32i	a8, a2, 4
	struct uart_esp32_data *data = DEV_DATA(dev);
40082592:	032232        	l32i	a3, a2, 12
	data->clock_dev = device_get_binding(DEV_CFG(dev)->clock_name);
40082595:	0228a2        	l32i	a10, a8, 8
40082598:	000965        	call8	40082630 <z_impl_device_get_binding>

	__ASSERT_NO_MSG(data->clock_dev);

	uart_esp32_configure(dev, &DEV_DATA(dev)->uart_config);
4008259b:	32b8      	l32i.n	a11, a2, 12
	data->clock_dev = device_get_binding(DEV_CFG(dev)->clock_name);
4008259d:	23a9      	s32i.n	a10, a3, 8
	uart_esp32_configure(dev, &DEV_DATA(dev)->uart_config);
4008259f:	02ad      	mov.n	a10, a2
400825a1:	ffed65        	call8	40082478 <uart_esp32_configure>

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	DEV_CFG(dev)->dev_conf.irq_config_func(dev);
#endif
	return 0;
}
400825a4:	020c      	movi.n	a2, 0
400825a6:	f01d      	retw.n

400825a8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
400825a8:	004136        	entry	a1, 32
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
400825ab:	f87281        	l32r	a8, 40080774 <_iram_text_start+0x22c>
400825ae:	1132e0        	slli	a3, a2, 2
400825b1:	221b      	addi.n	a2, a2, 1
400825b3:	1122e0        	slli	a2, a2, 2
400825b6:	383a      	add.n	a3, a8, a3
400825b8:	282a      	add.n	a2, a8, a2
400825ba:	0338      	l32i.n	a3, a3, 0
400825bc:	0248      	l32i.n	a4, a2, 0

		if (dev != NULL) {
			z_object_init(dev);
		}

		if ((entry->init(dev) == 0) && (dev != NULL)) {
400825be:	150c      	movi.n	a5, 1
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
400825c0:	000d86        	j	400825fa <z_sys_init_run_level+0x52>
400825c3:	132800        	lsi	f0, a8, 76
		if ((entry->init(dev) == 0) && (dev != NULL)) {
400825c6:	0388      	l32i.n	a8, a3, 0
400825c8:	02ad      	mov.n	a10, a2
400825ca:	0008e0        	callx8	a8
400825cd:	7aec      	bnez.n	a10, 400825f8 <z_sys_init_run_level+0x50>
400825cf:	52ac      	beqz.n	a2, 400825f8 <z_sys_init_run_level+0x50>
			/* Initialization was successful.
			 * Set the init status bit so device is declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
400825d1:	f86981        	l32r	a8, 40080778 <_iram_text_start+0x230>
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
400825d4:	f86a91        	l32r	a9, 4008077c <_iram_text_start+0x234>
400825d7:	c02280        	sub	a2, a2, a8
400825da:	212420        	srai	a2, a2, 4
400825dd:	418520        	srli	a8, a2, 5
400825e0:	1188e0        	slli	a8, a8, 2
400825e3:	889a      	add.n	a8, a8, a9
	uint32_t temp = *(volatile uint32_t *)addr;
400825e5:	0020c0        	memw
400825e8:	0898      	l32i.n	a9, a8, 0
	*(volatile uint32_t *)addr = temp | (1 << bit);
400825ea:	401200        	ssl	a2
400825ed:	a12500        	sll	a2, a5
400825f0:	202290        	or	a2, a2, a9
400825f3:	0020c0        	memw
400825f6:	0829      	s32i.n	a2, a8, 0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
400825f8:	338b      	addi.n	a3, a3, 8
400825fa:	c63347        	bltu	a3, a4, 400825c4 <z_sys_init_run_level+0x1c>
		}
	}
}
400825fd:	f01d      	retw.n
	...

40082600 <z_device_ready>:
	*devices = __device_start;
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
40082600:	004136        	entry	a1, 32
	return !!(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
40082603:	f85d81        	l32r	a8, 40080778 <_iram_text_start+0x230>
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
40082606:	f85d91        	l32r	a9, 4008077c <_iram_text_start+0x234>
40082609:	c08280        	sub	a8, a2, a8
4008260c:	218480        	srai	a8, a8, 4
4008260f:	412580        	srli	a2, a8, 5
40082612:	1122e0        	slli	a2, a2, 2
40082615:	229a      	add.n	a2, a2, a9
	uint32_t temp = *(volatile uint32_t *)addr;
40082617:	0020c0        	memw
4008261a:	02a8      	l32i.n	a10, a2, 0
	return temp & (1 << bit);
4008261c:	190c      	movi.n	a9, 1
4008261e:	401800        	ssl	a8
40082621:	a12900        	sll	a2, a9
40082624:	1022a0        	and	a2, a2, a10
	return !!(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
40082627:	080c      	movi.n	a8, 0
40082629:	938920        	movnez	a8, a9, a2
4008262c:	082d      	mov.n	a2, a8
}
4008262e:	f01d      	retw.n

40082630 <z_impl_device_get_binding>:
{
40082630:	004136        	entry	a1, 32
40082633:	024d      	mov.n	a4, a2
	for (dev = __device_start; dev != __device_end; dev++) {
40082635:	f85021        	l32r	a2, 40080778 <_iram_text_start+0x230>
40082638:	f85131        	l32r	a3, 4008077c <_iram_text_start+0x234>
4008263b:	025d      	mov.n	a5, a2
4008263d:	000486        	j	40082653 <z_impl_device_get_binding+0x23>
40082640:	a22000        	muluh	a2, a0, a0
		if (z_device_ready(dev) && (dev->name == name)) {
40082643:	fba520        	f64subc	a2, a5, 1, 0
40082646:	ff          	.byte 0xff
40082647:	005a16        	beqz	a10, 40082650 <z_impl_device_get_binding+0x20>
4008264a:	002282        	l32i	a8, a2, 0
4008264d:	2f1847        	beq	a8, a4, 40082680 <z_impl_device_get_binding+0x50>
	for (dev = __device_start; dev != __device_end; dev++) {
40082650:	10c222        	addi	a2, a2, 16
40082653:	ea9237        	bne	a2, a3, 40082641 <z_impl_device_get_binding+0x11>
	for (dev = __device_start; dev != __device_end; dev++) {
40082656:	052d      	mov.n	a2, a5
40082658:	0007c6        	j	4008267b <z_impl_device_get_binding+0x4b>
4008265b:	000000        	ill
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
4008265e:	02ad      	mov.n	a10, a2
40082660:	fff9e5        	call8	40082600 <z_device_ready>
40082663:	7acc      	bnez.n	a10, 4008266e <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
40082665:	10c222        	addi	a2, a2, 16
40082668:	0003c6        	j	4008267b <z_impl_device_get_binding+0x4b>
4008266b:	000000        	ill
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
4008266e:	02b8      	l32i.n	a11, a2, 0
40082670:	04ad      	mov.n	a10, a4
40082672:	00d8e5        	call8	40083400 <strcmp>
40082675:	feca56        	bnez	a10, 40082665 <z_impl_device_get_binding+0x35>
40082678:	000106        	j	40082680 <z_impl_device_get_binding+0x50>
	for (dev = __device_start; dev != __device_end; dev++) {
4008267b:	df9237        	bne	a2, a3, 4008265e <z_impl_device_get_binding+0x2e>
	return NULL;
4008267e:	020c      	movi.n	a2, 0
}
40082680:	f01d      	retw.n
	...

40082684 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
40082684:	004136        	entry	a1, 32
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
40082687:	02ad      	mov.n	a10, a2
40082689:	00fca5        	call8	40083654 <arch_system_halt>

4008268c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
4008268c:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008268f:	006350        	rsil	a5, 3
	return z_impl_k_current_get();
40082692:	0080e5        	call8	40082ea0 <z_impl_k_current_get>
40082695:	204aa0        	or	a4, a10, a10
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
40082698:	03bd      	mov.n	a11, a3
4008269a:	02ad      	mov.n	a10, a2
4008269c:	fffe65        	call8	40082684 <k_sys_fatal_error_handler>
	XTOS_RESTORE_INTLEVEL(key);
4008269f:	13e650        	wsr.ps	a5
400826a2:	002010        	rsync
	z_impl_k_thread_abort(thread);
400826a5:	04ad      	mov.n	a10, a4
400826a7:	0094e5        	call8	40082ff4 <z_impl_k_thread_abort>
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
400826aa:	f01d      	retw.n

400826ac <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
400826ac:	004136        	entry	a1, 32
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
400826af:	f83481        	l32r	a8, 40080780 <_iram_text_start+0x238>
400826b2:	190c      	movi.n	a9, 1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
400826b4:	02a0a2        	movi	a10, 2
	z_sys_post_kernel = true;
400826b7:	004892        	s8i	a9, a8, 0
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
400826ba:	ffeee5        	call8	400825a8 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
400826bd:	f831c1        	l32r	a12, 40080784 <_iram_text_start+0x23c>
400826c0:	f832b1        	l32r	a11, 40080788 <_iram_text_start+0x240>
400826c3:	f832a1        	l32r	a10, 4008078c <_iram_text_start+0x244>
400826c6:	fe7b65        	call8	40080e7c <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
400826c9:	3a0c      	movi.n	a10, 3
400826cb:	ffede5        	call8	400825a8 <z_sys_init_run_level>

	z_init_static_threads();
400826ce:	008ae5        	call8	40082f7c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
400826d1:	fe1ce5        	call8	400808a0 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
400826d4:	f82f91        	l32r	a9, 40080790 <_iram_text_start+0x248>
400826d7:	ea7c      	movi.n	a10, -2
400826d9:	0c0982        	l8ui	a8, a9, 12
400826dc:	1088a0        	and	a8, a8, a10
400826df:	0c4982        	s8i	a8, a9, 12

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
400826e2:	f01d      	retw.n

400826e4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
400826e4:	020136        	entry	a1, 0x100

static ALWAYS_INLINE void arch_kernel_init(void)
{
	_cpu_t *cpu0 = &_kernel.cpus[0];

	cpu0->nested = 0;
400826e7:	f7a021        	l32r	a2, 40080568 <_iram_text_start+0x20>
400826ea:	030c      	movi.n	a3, 0
400826ec:	0239      	s32i.n	a3, a2, 0
	 * access.  That saves 4 bytes of immediate value to store the
	 * address when compared to the legacy scheme.  But in SMP
	 * this record is a per-CPU thing and having it stored in a SR
	 * already is a big win.
	 */
	WSR(CONFIG_XTENSA_KERNEL_CPU_PTR_SR, cpu0);
400826ee:	13f420        	wsr.misc0	a2
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
400826f1:	01a142        	movi	a4, 0x101
400826f4:	0e5142        	s16i	a4, a1, 28
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
400826f7:	10c142        	addi	a4, a1, 16
400826fa:	2249      	s32i.n	a4, a2, 8

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
400826fc:	03ad      	mov.n	a10, a3
400826fe:	ffeaa5        	call8	400825a8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
40082701:	1a0c      	movi.n	a10, 1
40082703:	ffea65        	call8	400825a8 <z_sys_init_run_level>
	z_sched_init();
40082706:	006ba5        	call8	40082dc0 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
40082709:	f82141        	l32r	a4, 40080790 <_iram_text_start+0x248>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
4008270c:	f82451        	l32r	a5, 4008079c <_iram_text_start+0x254>
	_kernel.ready_q.cache = &z_main_thread;
4008270f:	e249      	s32i.n	a4, a2, 56
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
40082711:	3159      	s32i.n	a5, a1, 12
40082713:	f820d1        	l32r	a13, 40080794 <_iram_text_start+0x24c>
40082716:	150c      	movi.n	a5, 1
40082718:	f7c5c1        	l32r	a12, 4008062c <_iram_text_start+0xe4>
4008271b:	f81fb1        	l32r	a11, 40080798 <_iram_text_start+0x250>
4008271e:	03fd      	mov.n	a15, a3
40082720:	03ed      	mov.n	a14, a3
40082722:	1139      	s32i.n	a3, a1, 4
40082724:	0139      	s32i.n	a3, a1, 0
40082726:	2159      	s32i.n	a5, a1, 8
40082728:	04ad      	mov.n	a10, a4
4008272a:	007fa5        	call8	40082f24 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
4008272d:	0d0462        	l8ui	a6, a4, 13
40082730:	b77c      	movi.n	a7, -5
40082732:	106670        	and	a6, a6, a7
40082735:	0d4462        	s8i	a6, a4, 13
	z_ready_thread(&z_main_thread);
40082738:	04ad      	mov.n	a10, a4
4008273a:	002ce5        	call8	40082a08 <z_ready_thread>
	z_setup_new_thread(thread, stack,
4008273d:	f81a41        	l32r	a4, 400807a8 <_iram_text_start+0x260>
40082740:	f90c      	movi.n	a9, 15
40082742:	f817d1        	l32r	a13, 400807a0 <_iram_text_start+0x258>
40082745:	f817b1        	l32r	a11, 400807a4 <_iram_text_start+0x25c>
40082748:	3139      	s32i.n	a3, a1, 12
4008274a:	1199      	s32i.n	a9, a1, 4
4008274c:	0139      	s32i.n	a3, a1, 0
4008274e:	03fd      	mov.n	a15, a3
40082750:	03ed      	mov.n	a14, a3
40082752:	2159      	s32i.n	a5, a1, 8
40082754:	00a4c2        	movi	a12, 0x400
40082757:	04ad      	mov.n	a10, a4
40082759:	346192        	s32i	a9, a1, 208
4008275c:	007c65        	call8	40082f24 <z_setup_new_thread>
4008275f:	0d0462        	l8ui	a6, a4, 13
		_kernel.cpus[i].id = i;
40082762:	144232        	s8i	a3, a2, 20
40082765:	106670        	and	a6, a6, a7
40082768:	0d4462        	s8i	a6, a4, 13
		_kernel.cpus[i].irq_stack =
4008276b:	f81061        	l32r	a6, 400807ac <_iram_text_start+0x264>
	z_setup_new_thread(thread, stack,
4008276e:	342192        	l32i	a9, a1, 208
		_kernel.cpus[i].irq_stack =
40082771:	1269      	s32i.n	a6, a2, 4
	z_setup_new_thread(thread, stack,
40082773:	f81061        	l32r	a6, 400807b4 <_iram_text_start+0x26c>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
40082776:	3249      	s32i.n	a4, a2, 12
	z_setup_new_thread(thread, stack,
40082778:	f80ad1        	l32r	a13, 400807a0 <_iram_text_start+0x258>
4008277b:	f80db1        	l32r	a11, 400807b0 <_iram_text_start+0x268>
4008277e:	3139      	s32i.n	a3, a1, 12
40082780:	0139      	s32i.n	a3, a1, 0
40082782:	03fd      	mov.n	a15, a3
40082784:	03ed      	mov.n	a14, a3
40082786:	2159      	s32i.n	a5, a1, 8
40082788:	1199      	s32i.n	a9, a1, 4
4008278a:	00a4c2        	movi	a12, 0x400
4008278d:	06ad      	mov.n	a10, a6
4008278f:	007965        	call8	40082f24 <z_setup_new_thread>
40082792:	cd0432        	l8ui	a3, a4, 205
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
40082795:	9269      	s32i.n	a6, a2, 36
40082797:	103370        	and	a3, a3, a7
4008279a:	cd4432        	s8i	a3, a4, 205
		_kernel.cpus[i].irq_stack =
4008279d:	f80631        	l32r	a3, 400807b8 <_iram_text_start+0x270>
		_kernel.cpus[i].id = i;
400827a0:	2c4252        	s8i	a5, a2, 44
		_kernel.cpus[i].irq_stack =
400827a3:	7239      	s32i.n	a3, a2, 28
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
400827a5:	f80531        	l32r	a3, 400807bc <_iram_text_start+0x274>
400827a8:	c239      	s32i.n	a3, a2, 48
	list->tail = (sys_dnode_t *)list;
400827aa:	d239      	s32i.n	a3, a2, 52
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400827ac:	006350        	rsil	a5, 3
	old_thread = _current;
400827af:	2248      	l32i.n	a4, a2, 8
	return _kernel.ready_q.cache;
400827b1:	e238      	l32i.n	a3, a2, 56
	if (new_thread != old_thread) {
400827b3:	121437        	beq	a4, a3, 400827c9 <z_cstart+0xe5>
		z_reset_time_slice();
400827b6:	0001a5        	call8	400827d0 <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
400827b9:	567c      	movi.n	a6, -11

void xtensa_switch(void *switch_to, void **switched_from);

static inline void arch_switch(void *switch_to, void **switched_from)
{
	return xtensa_switch(switch_to, switched_from);
400827bb:	1423a2        	l32i	a10, a3, 80
400827be:	136462        	s32i	a6, a4, 76
		_current_cpu->current = new_thread;
400827c1:	2239      	s32i.n	a3, a2, 8
400827c3:	50c4b2        	addi	a11, a4, 80
400827c6:	fef0a5        	call8	400816d0 <xtensa_switch>
	XTOS_RESTORE_INTLEVEL(key);
400827c9:	13e650        	wsr.ps	a5
400827cc:	002010        	rsync
	...

400827d0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
400827d0:	004136        	entry	a1, 32
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
400827d3:	f7fb21        	l32r	a2, 400807c0 <_iram_text_start+0x278>
400827d6:	002282        	l32i	a8, a2, 0
400827d9:	013816        	beqz	a8, 400827f0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
400827dc:	fede25        	call8	400815c0 <z_clock_elapsed>
400827df:	002282        	l32i	a8, a2, 0
400827e2:	f76121        	l32r	a2, 40080568 <_iram_text_start+0x20>
400827e5:	a8aa      	add.n	a10, a8, a10
400827e7:	42a9      	s32i.n	a10, a2, 16
		z_set_timeout_expiry(slice_time, false);
400827e9:	0b0c      	movi.n	a11, 0
400827eb:	08ad      	mov.n	a10, a8
400827ed:	00a3a5        	call8	40083228 <z_set_timeout_expiry>
	}
}
400827f0:	f01d      	retw.n
	...

400827f4 <z_swap_irqlock>:
{
400827f4:	004136        	entry	a1, 32
	old_thread = _current;
400827f7:	f75c31        	l32r	a3, 40080568 <_iram_text_start+0x20>
400827fa:	2358      	l32i.n	a5, a3, 8
400827fc:	e348      	l32i.n	a4, a3, 56
	if (new_thread != old_thread) {
400827fe:	121547        	beq	a5, a4, 40082814 <z_swap_irqlock+0x20>
		z_reset_time_slice();
40082801:	fffce5        	call8	400827d0 <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
40082804:	587c      	movi.n	a8, -11
40082806:	1424a2        	l32i	a10, a4, 80
40082809:	136582        	s32i	a8, a5, 76
		_current_cpu->current = new_thread;
4008280c:	2349      	s32i.n	a4, a3, 8
4008280e:	50c5b2        	addi	a11, a5, 80
40082811:	feebe5        	call8	400816d0 <xtensa_switch>
40082814:	13e620        	wsr.ps	a2
40082817:	002010        	rsync
	return _current->swap_retval;
4008281a:	2338      	l32i.n	a3, a3, 8
}
4008281c:	132322        	l32i	a2, a3, 76
4008281f:	f01d      	retw.n
40082821:	000000        	ill

40082824 <z_swap$isra$14>:
static inline int z_swap(struct k_spinlock *lock, k_spinlock_key_t key)
40082824:	004136        	entry	a1, 32
	old_thread = _current;
40082827:	f75031        	l32r	a3, 40080568 <_iram_text_start+0x20>
4008282a:	2358      	l32i.n	a5, a3, 8
4008282c:	e348      	l32i.n	a4, a3, 56
	if (new_thread != old_thread) {
4008282e:	121547        	beq	a5, a4, 40082844 <z_swap$isra$14+0x20>
		z_reset_time_slice();
40082831:	fff9e5        	call8	400827d0 <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
40082834:	587c      	movi.n	a8, -11
40082836:	1424a2        	l32i	a10, a4, 80
40082839:	136582        	s32i	a8, a5, 76
		_current_cpu->current = new_thread;
4008283c:	2349      	s32i.n	a4, a3, 8
4008283e:	50c5b2        	addi	a11, a5, 80
40082841:	fee8e5        	call8	400816d0 <xtensa_switch>
40082844:	13e620        	wsr.ps	a2
40082847:	002010        	rsync
	return _current->swap_retval;
4008284a:	2338      	l32i.n	a3, a3, 8
}
4008284c:	132322        	l32i	a2, a3, 76
4008284f:	f01d      	retw.n
40082851:	000000        	ill

40082854 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
40082854:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082857:	006340        	rsil	a4, 3
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
4008285a:	f74381        	l32r	a8, 40080568 <_iram_text_start+0x20>
4008285d:	00a092        	movi	a9, 0
40082860:	046892        	s32i	a9, a8, 16
		} else {
			return t / (from_hz / to_hz);
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
40082863:	1182e0        	slli	a8, a2, 2
40082866:	808820        	add	a8, a8, a2
		slice_time = k_ms_to_ticks_ceil32(slice);
40082869:	f7d521        	l32r	a2, 400807c0 <_iram_text_start+0x278>
4008286c:	1188f0        	slli	a8, a8, 1
4008286f:	0289      	s32i.n	a8, a2, 0
		slice_max_prio = prio;
40082871:	f7d421        	l32r	a2, 400807c4 <_iram_text_start+0x27c>
40082874:	0239      	s32i.n	a3, a2, 0
		z_reset_time_slice();
40082876:	fff5a5        	call8	400827d0 <z_reset_time_slice>
	XTOS_RESTORE_INTLEVEL(key);
40082879:	13e640        	wsr.ps	a4
4008287c:	002010        	rsync
	}
}
4008287f:	f01d      	retw.n
40082881:	000000        	ill

40082884 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
40082884:	004136        	entry	a1, 32
}

static ALWAYS_INLINE bool arch_irq_unlocked(unsigned int key)
{
	return (key & 0xf) == 0; /* INTLEVEL field */
40082887:	348030        	extui	a8, a3, 0, 4
4008288a:	20a330        	or	a10, a3, a3
	return arch_irq_unlocked(key) && !arch_is_in_isr();
4008288d:	017856        	bnez	a8, 400828a8 <z_reschedule+0x24>

static ALWAYS_INLINE _cpu_t *arch_curr_cpu(void)
{
	_cpu_t *cpu;

	cpu = (_cpu_t *)RSR(CONFIG_XTENSA_KERNEL_CPU_PTR_SR);
40082890:	03f480        	rsr.misc0	a8
40082893:	002882        	l32i	a8, a8, 0
40082896:	e8cc      	bnez.n	a8, 400828a8 <z_reschedule+0x24>
40082898:	f73481        	l32r	a8, 40080568 <_iram_text_start+0x20>
	if (resched(key.key) && need_swap()) {
4008289b:	e898      	l32i.n	a9, a8, 56
4008289d:	2888      	l32i.n	a8, a8, 8
4008289f:	051987        	beq	a9, a8, 400828a8 <z_reschedule+0x24>
		z_swap(lock, key);
400828a2:	fff825        	call8	40082824 <z_swap$isra$14>
400828a5:	000146        	j	400828ae <z_reschedule+0x2a>
	XTOS_RESTORE_INTLEVEL(key);
400828a8:	13e6a0        	wsr.ps	a10
400828ab:	002010        	rsync
	} else {
		k_spin_unlock(lock, key);
	}
}
400828ae:	f01d      	retw.n

400828b0 <z_reschedule_irqlock>:

void z_reschedule_irqlock(uint32_t key)
{
400828b0:	004136        	entry	a1, 32
	return (key & 0xf) == 0; /* INTLEVEL field */
400828b3:	348020        	extui	a8, a2, 0, 4
400828b6:	20a220        	or	a10, a2, a2
	return arch_irq_unlocked(key) && !arch_is_in_isr();
400828b9:	00f856        	bnez	a8, 400828cc <z_reschedule_irqlock+0x1c>
400828bc:	03f480        	rsr.misc0	a8
400828bf:	002882        	l32i	a8, a8, 0
400828c2:	006856        	bnez	a8, 400828cc <z_reschedule_irqlock+0x1c>
	if (resched(key)) {
		z_swap_irqlock(key);
400828c5:	fff2e5        	call8	400827f4 <z_swap_irqlock>
400828c8:	000186        	j	400828d2 <z_reschedule_irqlock+0x22>
400828cb:	e6a000        	lsi	f0, a0, 0x398
	XTOS_RESTORE_INTLEVEL(key);
400828ce:	201013        	lsi	f1, a0, 128
400828d1:	f01d00        	subx8	a1, a13, a0

400828d4 <z_reschedule_unlocked>:
{
400828d4:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400828d7:	0063a0        	rsil	a10, 3
	(void) z_reschedule_irqlock(arch_irq_lock());
400828da:	fffd65        	call8	400828b0 <z_reschedule_irqlock>
}
400828dd:	f01d      	retw.n
	...

400828e0 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
400828e0:	004136        	entry	a1, 32
400828e3:	0063a0        	rsil	a10, 3
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
400828e6:	f72081        	l32r	a8, 40080568 <_iram_text_start+0x20>
400828e9:	2898      	l32i.n	a9, a8, 8
400828eb:	0f0982        	l8ui	a8, a9, 15
400828ee:	880b      	addi.n	a8, a8, -1
400828f0:	0f4982        	s8i	a8, a9, 15
	XTOS_RESTORE_INTLEVEL(key);
400828f3:	13e6a0        	wsr.ps	a10
400828f6:	002010        	rsync
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
400828f9:	f01d      	retw.n
	...

400828fc <z_get_next_switch_handle>:
	_current_cpu->current = new_thread;
}

#ifdef CONFIG_USE_SWITCH
void *z_get_next_switch_handle(void *interrupted)
{
400828fc:	004136        	entry	a1, 32
	_current->switch_handle = interrupted;
400828ff:	f71a81        	l32r	a8, 40080568 <_iram_text_start+0x20>
40082902:	28a8      	l32i.n	a10, a8, 8
	return _kernel.ready_q.cache;
40082904:	e898      	l32i.n	a9, a8, 56
40082906:	146a22        	s32i	a2, a10, 80
#endif
		}
	}
#else
	struct k_thread *thread = z_get_next_ready_thread();
	if (_current != thread) {
40082909:	011a97        	beq	a10, a9, 4008290e <z_get_next_switch_handle+0x12>
	_current_cpu->current = new_thread;
4008290c:	2899      	s32i.n	a9, a8, 8
		set_current(thread);
	}
#endif

	wait_for_switch(_current);
	return _current->switch_handle;
4008290e:	2888      	l32i.n	a8, a8, 8
}
40082910:	142822        	l32i	a2, a8, 80
40082913:	f01d      	retw.n
40082915:	000000        	ill

40082918 <update_cache>:
{
40082918:	004136        	entry	a1, 32
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
4008291b:	f7aba1        	l32r	a10, 400807c8 <_iram_text_start+0x280>
4008291e:	00d565        	call8	40083674 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
40082921:	f71131        	l32r	a3, 40080568 <_iram_text_start+0x20>
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
40082924:	204aa0        	or	a4, a10, a10
	if (_current->base.thread_state & _THREAD_ABORTING) {
40082927:	022382        	l32i	a8, a3, 8
4008292a:	0d0892        	l8ui	a9, a8, 13
4008292d:	086957        	bbci	a9, 5, 40082939 <update_cache+0x21>
		_current->base.thread_state |= _THREAD_DEAD;
40082930:	08a0a2        	movi	a10, 8
40082933:	2099a0        	or	a9, a9, a10
40082936:	0d4892        	s8i	a9, a8, 13
	return thread ? thread : _current_cpu->idle_thread;
40082939:	04cc      	bnez.n	a4, 4008293d <update_cache+0x25>
4008293b:	3348      	l32i.n	a4, a3, 12
	if (preempt_ok != 0) {
4008293d:	42dc      	bnez.n	a2, 40082955 <update_cache+0x3d>
	if (z_is_thread_prevented_from_running(_current)) {
4008293f:	0d0892        	l8ui	a9, a8, 13
40082942:	449090        	extui	a9, a9, 0, 5
40082945:	c9cc      	bnez.n	a9, 40082955 <update_cache+0x3d>
	if (is_preempt(_current) || is_metairq(thread)) {
40082947:	071892        	l16ui	a9, a8, 14
4008294a:	7fa0a2        	movi	a10, 127
4008294d:	04ba97        	bgeu	a10, a9, 40082955 <update_cache+0x3d>
		_kernel.ready_q.cache = _current;
40082950:	e389      	s32i.n	a8, a3, 56
40082952:	000286        	j	40082960 <update_cache+0x48>
		if (thread != _current) {
40082955:	051847        	beq	a8, a4, 4008295e <update_cache+0x46>
			z_reset_time_slice();
40082958:	201110        	or	a1, a1, a1
4008295b:	ffe765        	call8	400827d0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
4008295e:	e349      	s32i.n	a4, a3, 56
}
40082960:	f01d      	retw.n
	...

40082964 <k_sched_unlock>:
{
40082964:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082967:	006320        	rsil	a2, 3
		++_current->base.sched_locked;
4008296a:	f6ff81        	l32r	a8, 40080568 <_iram_text_start+0x20>
		update_cache(0);
4008296d:	00a0a2        	movi	a10, 0
		++_current->base.sched_locked;
40082970:	022892        	l32i	a9, a8, 8
40082973:	0f0982        	l8ui	a8, a9, 15
40082976:	01c882        	addi	a8, a8, 1
40082979:	0f4982        	s8i	a8, a9, 15
		update_cache(0);
4008297c:	fff9a5        	call8	40082918 <update_cache>
	XTOS_RESTORE_INTLEVEL(key);
4008297f:	13e620        	wsr.ps	a2
40082982:	002010        	rsync
	z_reschedule_unlocked();
40082985:	fff4e5        	call8	400828d4 <z_reschedule_unlocked>
}
40082988:	f01d      	retw.n
	...

4008298c <ready_thread>:
{
4008298c:	004136        	entry	a1, 32
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
4008298f:	0d0282        	l8ui	a8, a2, 13
40082992:	448080        	extui	a8, a8, 0, 5
40082995:	06b856        	bnez	a8, 40082a04 <ready_thread+0x78>
	if (z_is_thread_ready(thread)) {
40082998:	62b8      	l32i.n	a11, a2, 24
4008299a:	066b56        	bnez	a11, 40082a04 <ready_thread+0x78>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
4008299d:	f6f2a1        	l32r	a10, 40080568 <_iram_text_start+0x20>
{
	struct k_thread *t;

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
400829a0:	1f0c      	movi.n	a15, 1
400829a2:	fa88      	l32i.n	a8, a10, 60
400829a4:	0bcd      	mov.n	a12, a11
400829a6:	93cf80        	movnez	a12, a15, a8
400829a9:	74c0c0        	extui	a12, a12, 0, 8
400829ac:	102ad2        	l32i	a13, a10, 64
400829af:	f786e1        	l32r	a14, 400807c8 <_iram_text_start+0x280>
400829b2:	fcac      	beqz.n	a12, 400829e5 <ready_thread+0x59>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
400829b4:	c098e0        	sub	a9, a8, a14
400829b7:	93bf90        	movnez	a11, a15, a9
400829ba:	7490b0        	extui	a9, a11, 0, 8
400829bd:	49ac      	beqz.n	a9, 400829e5 <ready_thread+0x59>
	if (thread_1->base.prio < thread_2->base.prio) {
400829bf:	0e0292        	l8ui	a9, a2, 14
400829c2:	239900        	sext	a9, a9, 7
400829c5:	0e08b2        	l8ui	a11, a8, 14
400829c8:	23bb00        	sext	a11, a11, 7
400829cb:	0da9b7        	bge	a9, a11, 400829dc <ready_thread+0x50>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	node->prev = successor->prev;
400829ce:	1898      	l32i.n	a9, a8, 4
	node->next = successor;
400829d0:	0289      	s32i.n	a8, a2, 0
	node->prev = successor->prev;
400829d2:	1299      	s32i.n	a9, a2, 4
	successor->prev->next = node;
400829d4:	0929      	s32i.n	a2, a9, 0
	successor->prev = node;
400829d6:	1829      	s32i.n	a2, a8, 4
400829d8:	0005c6        	j	400829f3 <ready_thread+0x67>
400829db:	1d8700        	lsi	f0, a7, 116
	return (node == list->tail) ? NULL : node->next;
400829de:	288205        	call0	400ab200 <_iram_text_end+0x2766e>
400829e1:	f85600        	lsi	f0, a6, 0x3e0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
400829e4:	d2fd      	lsi	f15, a2, 8
	node->prev = list->tail;
400829e6:	820162        	l8ui	a6, a1, 130
	list->tail->next = node;
400829e9:	102a      	add.n	a1, a0, a2
	node->next = list;
400829eb:	0062e2        	s32i	a14, a2, 0
	list->tail->next = node;
400829ee:	0829      	s32i.n	a2, a8, 0
	list->tail = node;
400829f0:	106a22        	s32i	a2, a10, 64
	thread->base.thread_state |= states;
400829f3:	0d0282        	l8ui	a8, a2, 13
400829f6:	80af92        	movi	a9, -128
400829f9:	208890        	or	a8, a8, a9
400829fc:	0d4282        	s8i	a8, a2, 13
		update_cache(0);
400829ff:	0a0c      	movi.n	a10, 0
40082a01:	fff165        	call8	40082918 <update_cache>
}
40082a04:	f01d      	retw.n
	...

40082a08 <z_ready_thread>:
{
40082a08:	004136        	entry	a1, 32
40082a0b:	02ad      	mov.n	a10, a2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082a0d:	006330        	rsil	a3, 3
		ready_thread(thread);
40082a10:	fff7a5        	call8	4008298c <ready_thread>
	XTOS_RESTORE_INTLEVEL(key);
40082a13:	13e630        	wsr.ps	a3
40082a16:	002010        	rsync
}
40082a19:	f01d      	retw.n
	...

40082a1c <z_thread_timeout>:
{
40082a1c:	004136        	entry	a1, 32
	struct k_thread *thread = CONTAINER_OF(timeout,
40082a1f:	e8c232        	addi	a3, a2, -24
	if (thread->base.pended_on != NULL) {
40082a22:	022342        	l32i	a4, a3, 8
40082a25:	f5c222        	addi	a2, a2, -11
40082a28:	01c416        	beqz	a4, 40082a48 <z_thread_timeout+0x2c>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082a2b:	006340        	rsil	a4, 3
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
40082a2e:	03ad      	mov.n	a10, a3
40082a30:	00c2e5        	call8	40083660 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
40082a33:	000282        	l8ui	a8, a2, 0
40082a36:	d97c      	movi.n	a9, -3
40082a38:	108890        	and	a8, a8, a9
40082a3b:	004282        	s8i	a8, a2, 0
		thread->base.pended_on = NULL;
40082a3e:	080c      	movi.n	a8, 0
40082a40:	2389      	s32i.n	a8, a3, 8
	XTOS_RESTORE_INTLEVEL(key);
40082a42:	13e640        	wsr.ps	a4
40082a45:	002010        	rsync
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
40082a48:	000282        	l8ui	a8, a2, 0
40082a4b:	b96c      	movi.n	a9, -21
40082a4d:	108890        	and	a8, a8, a9
40082a50:	004282        	s8i	a8, a2, 0
	z_ready_thread(thread);
40082a53:	03ad      	mov.n	a10, a3
40082a55:	fffb25        	call8	40082a08 <z_ready_thread>
}
40082a58:	f01d      	retw.n
	...

40082a5c <z_sched_start>:
{
40082a5c:	004136        	entry	a1, 32
40082a5f:	02ad      	mov.n	a10, a2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082a61:	006320        	rsil	a2, 3
	if (z_has_thread_started(thread)) {
40082a64:	0d0a82        	l8ui	a8, a10, 13
40082a67:	0be827        	bbsi	a8, 2, 40082a76 <z_sched_start+0x1a>
	XTOS_RESTORE_INTLEVEL(key);
40082a6a:	13e620        	wsr.ps	a2
40082a6d:	002010        	rsync
		return;
40082a70:	0005c6        	j	40082a8b <z_sched_start+0x2f>
40082a73:	000000        	ill
	thread->base.thread_state &= ~_THREAD_PRESTART;
40082a76:	fbaf92        	movi	a9, -5
40082a79:	108890        	and	a8, a8, a9
40082a7c:	0d4a82        	s8i	a8, a10, 13
	ready_thread(thread);
40082a7f:	fff0e5        	call8	4008298c <ready_thread>
	z_reschedule(&sched_spinlock, key);
40082a82:	f752a1        	l32r	a10, 400807cc <_iram_text_start+0x284>
40082a85:	20b220        	or	a11, a2, a2
40082a88:	ffdfa5        	call8	40082884 <z_reschedule>
}
40082a8b:	000090        	retw
	...

40082a90 <z_move_thread_to_end_of_prio_q>:
{
40082a90:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082a93:	006330        	rsil	a3, 3
		if (z_is_thread_queued(thread)) {
40082a96:	0d0282        	l8ui	a8, a2, 13
40082a99:	056877        	bbci	a8, 7, 40082aa2 <z_move_thread_to_end_of_prio_q+0x12>
	sys_dlist_remove(&thread->base.qnode_dlist);
40082a9c:	20a220        	or	a10, a2, a2
40082a9f:	00bc25        	call8	40083660 <sys_dlist_remove>
	return list->head == list;
40082aa2:	f6b191        	l32r	a9, 40080568 <_iram_text_start+0x20>
40082aa5:	f748d1        	l32r	a13, 400807c8 <_iram_text_start+0x280>
40082aa8:	0f2982        	l32i	a8, a9, 60
40082aab:	1029c2        	l32i	a12, a9, 64
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082aae:	027816        	beqz	a8, 40082ad9 <z_move_thread_to_end_of_prio_q+0x49>
40082ab1:	2418d7        	beq	a8, a13, 40082ad9 <z_move_thread_to_end_of_prio_q+0x49>
	if (thread_1->base.prio < thread_2->base.prio) {
40082ab4:	0e02a2        	l8ui	a10, a2, 14
40082ab7:	23aa00        	sext	a10, a10, 7
40082aba:	0e08b2        	l8ui	a11, a8, 14
40082abd:	23bb00        	sext	a11, a11, 7
40082ac0:	0caab7        	bge	a10, a11, 40082ad0 <z_move_thread_to_end_of_prio_q+0x40>
	node->prev = successor->prev;
40082ac3:	18a8      	l32i.n	a10, a8, 4
	node->next = successor;
40082ac5:	0289      	s32i.n	a8, a2, 0
	node->prev = successor->prev;
40082ac7:	12a9      	s32i.n	a10, a2, 4
	successor->prev->next = node;
40082ac9:	0a29      	s32i.n	a2, a10, 0
	successor->prev = node;
40082acb:	1829      	s32i.n	a2, a8, 4
40082acd:	000586        	j	40082ae7 <z_move_thread_to_end_of_prio_q+0x57>
	return (node == list->tail) ? NULL : node->next;
40082ad0:	051c87        	beq	a12, a8, 40082ad9 <z_move_thread_to_end_of_prio_q+0x49>
40082ad3:	002882        	l32i	a8, a8, 0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082ad6:	fe0856        	bnez	a8, 40082aba <z_move_thread_to_end_of_prio_q+0x2a>
	node->prev = list->tail;
40082ad9:	0162c2        	s32i	a12, a2, 4
	list->tail->next = node;
40082adc:	102982        	l32i	a8, a9, 64
	node->next = list;
40082adf:	0062d2        	s32i	a13, a2, 0
	list->tail->next = node;
40082ae2:	0829      	s32i.n	a2, a8, 0
	list->tail = node;
40082ae4:	106922        	s32i	a2, a9, 64
	thread->base.thread_state |= states;
40082ae7:	0d0282        	l8ui	a8, a2, 13
40082aea:	80afa2        	movi	a10, -128
40082aed:	2088a0        	or	a8, a8, a10
		update_cache(thread == _current);
40082af0:	29a8      	l32i.n	a10, a9, 8
40082af2:	0d4282        	s8i	a8, a2, 13
40082af5:	c0aa20        	sub	a10, a10, a2
40082af8:	180c      	movi.n	a8, 1
40082afa:	020c      	movi.n	a2, 0
40082afc:	8328a0        	moveqz	a2, a8, a10
40082aff:	02ad      	mov.n	a10, a2
40082b01:	ffe165        	call8	40082918 <update_cache>
	XTOS_RESTORE_INTLEVEL(key);
40082b04:	13e630        	wsr.ps	a3
40082b07:	002010        	rsync
}
40082b0a:	f01d      	retw.n

40082b0c <z_time_slice>:
{
40082b0c:	004136        	entry	a1, 32
	if (slice_time && sliceable(_current)) {
40082b0f:	f72c81        	l32r	a8, 400807c0 <_iram_text_start+0x278>
40082b12:	002892        	l32i	a9, a8, 0
40082b15:	f69481        	l32r	a8, 40080568 <_iram_text_start+0x20>
40082b18:	039916        	beqz	a9, 40082b55 <z_time_slice+0x49>
40082b1b:	28a8      	l32i.n	a10, a8, 8
		&& !z_is_thread_timeout_active(thread);
40082b1d:	7fa0b2        	movi	a11, 127
40082b20:	071a92        	l16ui	a9, a10, 14
40082b23:	2e3b97        	bltu	a11, a9, 40082b55 <z_time_slice+0x49>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
40082b26:	f72791        	l32r	a9, 400807c4 <_iram_text_start+0x27c>
40082b29:	0e0ab2        	l8ui	a11, a10, 14
40082b2c:	0998      	l32i.n	a9, a9, 0
40082b2e:	23bb00        	sext	a11, a11, 7
40082b31:	202b97        	blt	a11, a9, 40082b55 <z_time_slice+0x49>
		&& !z_is_idle_thread_object(thread)
40082b34:	f71d91        	l32r	a9, 400807a8 <_iram_text_start+0x260>
40082b37:	1a1a97        	beq	a10, a9, 40082b55 <z_time_slice+0x49>
		&& !z_is_thread_timeout_active(thread);
40082b3a:	6a98      	l32i.n	a9, a10, 24
40082b3c:	015956        	bnez	a9, 40082b55 <z_time_slice+0x49>
		if (ticks >= _current_cpu->slice_ticks) {
40082b3f:	4898      	l32i.n	a9, a8, 16
40082b41:	082297        	blt	a2, a9, 40082b4d <z_time_slice+0x41>
			z_move_thread_to_end_of_prio_q(_current);
40082b44:	fff4a5        	call8	40082a90 <z_move_thread_to_end_of_prio_q>
			z_reset_time_slice();
40082b47:	ffc8a5        	call8	400827d0 <z_reset_time_slice>
40082b4a:	0002c6        	j	40082b59 <z_time_slice+0x4d>
			_current_cpu->slice_ticks -= ticks;
40082b4d:	c09920        	sub	a9, a9, a2
40082b50:	4899      	s32i.n	a9, a8, 16
40082b52:	0000c6        	j	40082b59 <z_time_slice+0x4d>
		_current_cpu->slice_ticks = 0;
40082b55:	020c      	movi.n	a2, 0
40082b57:	4829      	s32i.n	a2, a8, 16
}
40082b59:	f01d      	retw.n
	...

40082b5c <z_impl_k_thread_suspend>:
{
40082b5c:	004136        	entry	a1, 32
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
40082b5f:	18c2a2        	addi	a10, a2, 24
40082b62:	006925        	call8	400831f4 <z_abort_timeout>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082b65:	006330        	rsil	a3, 3
		if (z_is_thread_queued(thread)) {
40082b68:	0d0242        	l8ui	a4, a2, 13
40082b6b:	0d6477        	bbci	a4, 7, 40082b7c <z_impl_k_thread_suspend+0x20>
	sys_dlist_remove(&thread->base.qnode_dlist);
40082b6e:	02ad      	mov.n	a10, a2
40082b70:	00aee5        	call8	40083660 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
40082b73:	0d0282        	l8ui	a8, a2, 13
40082b76:	648080        	extui	a8, a8, 0, 7
40082b79:	0d4282        	s8i	a8, a2, 13
	thread->base.thread_state |= _THREAD_SUSPENDED;
40082b7c:	0d0282        	l8ui	a8, a2, 13
40082b7f:	041c      	movi.n	a4, 16
40082b81:	208840        	or	a8, a8, a4
		update_cache(thread == _current);
40082b84:	f67941        	l32r	a4, 40080568 <_iram_text_start+0x20>
40082b87:	0d4282        	s8i	a8, a2, 13
40082b8a:	24a8      	l32i.n	a10, a4, 8
40082b8c:	190c      	movi.n	a9, 1
40082b8e:	c0aa20        	sub	a10, a10, a2
40082b91:	080c      	movi.n	a8, 0
40082b93:	8389a0        	moveqz	a8, a9, a10
40082b96:	08ad      	mov.n	a10, a8
40082b98:	ffd7e5        	call8	40082918 <update_cache>
	XTOS_RESTORE_INTLEVEL(key);
40082b9b:	13e630        	wsr.ps	a3
40082b9e:	002010        	rsync
	if (thread == _current) {
40082ba1:	2438      	l32i.n	a3, a4, 8
40082ba3:	029327        	bne	a3, a2, 40082ba9 <z_impl_k_thread_suspend+0x4d>
		z_reschedule_unlocked();
40082ba6:	ffd2e5        	call8	400828d4 <z_reschedule_unlocked>
}
40082ba9:	f01d      	retw.n
	...

40082bac <z_thread_single_abort>:
{
40082bac:	004136        	entry	a1, 32
	if (thread->fn_abort != NULL) {
40082baf:	112232        	l32i	a3, a2, 68
40082bb2:	002316        	beqz	a3, 40082bb8 <z_thread_single_abort+0xc>
		thread->fn_abort();
40082bb5:	0003e0        	callx8	a3
40082bb8:	18c2a2        	addi	a10, a2, 24
40082bbb:	0063a5        	call8	400831f4 <z_abort_timeout>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082bbe:	006340        	rsil	a4, 3
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
40082bc1:	0d0232        	l8ui	a3, a2, 13
40082bc4:	445030        	extui	a5, a3, 0, 5
40082bc7:	032556        	bnez	a5, 40082bfd <z_thread_single_abort+0x51>
		if (z_is_thread_ready(thread)) {
40082bca:	062252        	l32i	a5, a2, 24
40082bcd:	c5ec      	bnez.n	a5, 40082bfd <z_thread_single_abort+0x51>
			if (z_is_thread_queued(thread)) {
40082bcf:	233300        	sext	a3, a3, 7
40082bd2:	00e3d6        	bgez	a3, 40082be4 <z_thread_single_abort+0x38>
	sys_dlist_remove(&thread->base.qnode_dlist);
40082bd5:	20a220        	or	a10, a2, a2
40082bd8:	00a865        	call8	40083660 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
40082bdb:	0d0232        	l8ui	a3, a2, 13
40082bde:	643030        	extui	a3, a3, 0, 7
40082be1:	0d4232        	s8i	a3, a2, 13
			update_cache(thread == _current);
40082be4:	f66131        	l32r	a3, 40080568 <_iram_text_start+0x20>
40082be7:	150c      	movi.n	a5, 1
40082be9:	23a8      	l32i.n	a10, a3, 8
40082beb:	030c      	movi.n	a3, 0
40082bed:	c0aa20        	sub	a10, a10, a2
40082bf0:	8335a0        	moveqz	a3, a5, a10
40082bf3:	03ad      	mov.n	a10, a3
40082bf5:	ffd225        	call8	40082918 <update_cache>
40082bf8:	000606        	j	40082c14 <z_thread_single_abort+0x68>
40082bfb:	170000        	lsi	f0, a0, 92
			if (z_is_thread_pending(thread)) {
40082bfe:	ad1363        	lsi	f6, a3, 0x2b4
	sys_dlist_remove(&thread->base.qnode_dlist);
40082c01:	a5e502        	s32c1i	a0, a5, 0x294
40082c04:	023200        	andb	b3, b2, b0
	thread->base.thread_state &= ~_THREAD_PENDING;
40082c07:	7c0d      	lsi	f0, a12, 48
40082c09:	3350d5        	call4	400b6118 <_iram_text_end+0x32586>
40082c0c:	423210        	xorb	b3, b2, b1
40082c0f:	0c0d      	mov.n	a0, a12
				thread->base.pended_on = NULL;
40082c11:	223903        	lsi	f0, a9, 136
		thread->base.thread_state |= mask;
40082c14:	0d0232        	l8ui	a3, a2, 13
40082c17:	850c      	movi.n	a5, 8
40082c19:	203350        	or	a3, a3, a5
40082c1c:	0d4232        	s8i	a3, a2, 13
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
40082c1f:	000886        	j	40082c45 <z_thread_single_abort+0x99>
40082c22:	a20000        	muluh	a0, a0, a0
40082c25:	e518c3        	lsi	f12, a8, 0x394
40082c28:	005c      	movi.n	a0, 80
	sys_dlist_remove(&thread->base.qnode_dlist);
40082c2a:	20a330        	or	a10, a3, a3
40082c2d:	00a325        	call8	40083660 <sys_dlist_remove>
40082c30:	0d0382        	l8ui	a8, a3, 13
40082c33:	d97c      	movi.n	a9, -3
40082c35:	108890        	and	a8, a8, a9
40082c38:	0d4382        	s8i	a8, a3, 13
			waiter->base.pended_on = NULL;
40082c3b:	2359      	s32i.n	a5, a3, 8
 * z_swap() is in use it's a simple inline provided by the kernel.
 */
static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->swap_retval = value;
40082c3d:	136352        	s32i	a5, a3, 76
			ready_thread(waiter);
40082c40:	03ad      	mov.n	a10, a3
40082c42:	ffd4a5        	call8	4008298c <ready_thread>
	return list->head == list;
40082c45:	0c2232        	l32i	a3, a2, 48
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
40082c48:	00a052        	movi	a5, 0
40082c4b:	051357        	beq	a3, a5, 40082c54 <z_thread_single_abort+0xa8>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
40082c4e:	30c282        	addi	a8, a2, 48
40082c51:	cf9387        	bne	a3, a8, 40082c24 <z_thread_single_abort+0x78>
	XTOS_RESTORE_INTLEVEL(key);
40082c54:	13e640        	wsr.ps	a4
40082c57:	002010        	rsync
}
40082c5a:	f01d      	retw.n

40082c5c <unready_thread>:
{
40082c5c:	004136        	entry	a1, 32
	if (z_is_thread_queued(thread)) {
40082c5f:	0d0282        	l8ui	a8, a2, 13
40082c62:	0e6877        	bbci	a8, 7, 40082c74 <unready_thread+0x18>
	sys_dlist_remove(&thread->base.qnode_dlist);
40082c65:	20a220        	or	a10, a2, a2
40082c68:	009f65        	call8	40083660 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
40082c6b:	0d0282        	l8ui	a8, a2, 13
40082c6e:	648080        	extui	a8, a8, 0, 7
40082c71:	0d4282        	s8i	a8, a2, 13
	update_cache(thread == _current);
40082c74:	f63d81        	l32r	a8, 40080568 <_iram_text_start+0x20>
40082c77:	0228a2        	l32i	a10, a8, 8
40082c7a:	180c      	movi.n	a8, 1
40082c7c:	c0aa20        	sub	a10, a10, a2
40082c7f:	020c      	movi.n	a2, 0
40082c81:	8328a0        	moveqz	a2, a8, a10
40082c84:	02ad      	mov.n	a10, a2
40082c86:	ffc925        	call8	40082918 <update_cache>
}
40082c89:	f01d      	retw.n
	...

40082c8c <z_remove_thread_from_ready_q>:
{
40082c8c:	004136        	entry	a1, 32
40082c8f:	02ad      	mov.n	a10, a2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082c91:	006330        	rsil	a3, 3
		unready_thread(thread);
40082c94:	fffc65        	call8	40082c5c <unready_thread>
	XTOS_RESTORE_INTLEVEL(key);
40082c97:	13e630        	wsr.ps	a3
40082c9a:	002010        	rsync
}
40082c9d:	f01d      	retw.n
	...

40082ca0 <z_tick_sleep$part$23>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
40082ca0:	004136        	entry	a1, 32
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
40082ca3:	006a25        	call8	40083344 <z_tick_get_32>
40082ca6:	8032a0        	add	a3, a2, a10
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082ca9:	006350        	rsil	a5, 3
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
#endif
	z_remove_thread_from_ready_q(_current);
40082cac:	f62f41        	l32r	a4, 40080568 <_iram_text_start+0x20>
40082caf:	0224a2        	l32i	a10, a4, 8
40082cb2:	fffda5        	call8	40082c8c <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
40082cb5:	0224a2        	l32i	a10, a4, 8
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
40082cb8:	f6c6b1        	l32r	a11, 400807d0 <_iram_text_start+0x288>
40082cbb:	02cd      	mov.n	a12, a2
40082cbd:	31df20        	srai	a13, a2, 31
40082cc0:	18caa2        	addi	a10, a10, 24
40082cc3:	003ee5        	call8	400830b0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
40082cc6:	2428      	l32i.n	a2, a4, 8
	thread->base.thread_state |= _THREAD_SUSPENDED;
40082cc8:	041c      	movi.n	a4, 16
40082cca:	0d0282        	l8ui	a8, a2, 13

	(void)z_swap(&local_lock, key);
40082ccd:	05ad      	mov.n	a10, a5
40082ccf:	208840        	or	a8, a8, a4
40082cd2:	0d4282        	s8i	a8, a2, 13
40082cd5:	ffb4e5        	call8	40082824 <z_swap$isra$14>

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
40082cd8:	0066a5        	call8	40083344 <z_tick_get_32>
40082cdb:	c0a3a0        	sub	a10, a3, a10
		return ticks;
	}
#endif

	return 0;
}
40082cde:	020c      	movi.n	a2, 0
40082ce0:	532a20        	max	a2, a10, a2
40082ce3:	f01d      	retw.n
40082ce5:	000000        	ill

40082ce8 <add_to_waitq_locked>:
{
40082ce8:	004136        	entry	a1, 32
	unready_thread(thread);
40082ceb:	02ad      	mov.n	a10, a2
40082ced:	fff6e5        	call8	40082c5c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
40082cf0:	0d0282        	l8ui	a8, a2, 13
40082cf3:	290c      	movi.n	a9, 2
40082cf5:	208890        	or	a8, a8, a9
40082cf8:	0d4282        	s8i	a8, a2, 13
	if (wait_q != NULL) {
40082cfb:	93bc      	beqz.n	a3, 40082d38 <add_to_waitq_locked+0x50>
40082cfd:	0388      	l32i.n	a8, a3, 0
		thread->base.pended_on = wait_q;
40082cff:	2239      	s32i.n	a3, a2, 8
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082d01:	78ac      	beqz.n	a8, 40082d2c <add_to_waitq_locked+0x44>
40082d03:	251387        	beq	a3, a8, 40082d2c <add_to_waitq_locked+0x44>
	if (thread_1->base.prio < thread_2->base.prio) {
40082d06:	0e0292        	l8ui	a9, a2, 14
40082d09:	239900        	sext	a9, a9, 7
40082d0c:	0e08a2        	l8ui	a10, a8, 14
40082d0f:	23aa00        	sext	a10, a10, 7
40082d12:	0ca9a7        	bge	a9, a10, 40082d22 <add_to_waitq_locked+0x3a>
	node->prev = successor->prev;
40082d15:	1838      	l32i.n	a3, a8, 4
	node->next = successor;
40082d17:	0289      	s32i.n	a8, a2, 0
	node->prev = successor->prev;
40082d19:	1239      	s32i.n	a3, a2, 4
	successor->prev->next = node;
40082d1b:	0329      	s32i.n	a2, a3, 0
	successor->prev = node;
40082d1d:	1829      	s32i.n	a2, a8, 4
40082d1f:	000546        	j	40082d38 <add_to_waitq_locked+0x50>
	return (node == list->tail) ? NULL : node->next;
40082d22:	13a8      	l32i.n	a10, a3, 4
40082d24:	0418a7        	beq	a8, a10, 40082d2c <add_to_waitq_locked+0x44>
40082d27:	0888      	l32i.n	a8, a8, 0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082d29:	fdf856        	bnez	a8, 40082d0c <add_to_waitq_locked+0x24>
	node->prev = list->tail;
40082d2c:	1388      	l32i.n	a8, a3, 4
	node->next = list;
40082d2e:	0239      	s32i.n	a3, a2, 0
	node->prev = list->tail;
40082d30:	1289      	s32i.n	a8, a2, 4
	list->tail->next = node;
40082d32:	1388      	l32i.n	a8, a3, 4
40082d34:	0829      	s32i.n	a2, a8, 0
	list->tail = node;
40082d36:	1329      	s32i.n	a2, a3, 4
}
40082d38:	f01d      	retw.n
	...

40082d3c <pend>:
{
40082d3c:	004136        	entry	a1, 32
40082d3f:	20b330        	or	a11, a3, a3
40082d42:	006360        	rsil	a6, 3
		add_to_waitq_locked(thread, wait_q);
40082d45:	20a220        	or	a10, a2, a2
40082d48:	fff9e5        	call8	40082ce8 <add_to_waitq_locked>
	XTOS_RESTORE_INTLEVEL(key);
40082d4b:	13e660        	wsr.ps	a6
40082d4e:	002010        	rsync
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
40082d51:	020466        	bnei	a4, -1, 40082d57 <pend+0x1b>
40082d54:	0c0526        	beqi	a5, -1, 40082d64 <pend+0x28>
40082d57:	f69eb1        	l32r	a11, 400807d0 <_iram_text_start+0x288>
40082d5a:	04cd      	mov.n	a12, a4
40082d5c:	05dd      	mov.n	a13, a5
40082d5e:	18c2a2        	addi	a10, a2, 24
40082d61:	0034e5        	call8	400830b0 <z_add_timeout>
}
40082d64:	f01d      	retw.n
	...

40082d68 <z_pend_curr>:
{
40082d68:	004136        	entry	a1, 32
	pend(_current, wait_q, timeout);
40082d6b:	f5ff81        	l32r	a8, 40080568 <_iram_text_start+0x20>
{
40082d6e:	20d770        	or	a13, a7, a7
	pend(_current, wait_q, timeout);
40082d71:	0228a2        	l32i	a10, a8, 8
40082d74:	06cd      	mov.n	a12, a6
40082d76:	04bd      	mov.n	a11, a4
40082d78:	fffc25        	call8	40082d3c <pend>
	return z_swap(lock, key);
40082d7b:	03ad      	mov.n	a10, a3
40082d7d:	ffaa65        	call8	40082824 <z_swap$isra$14>
}
40082d80:	0a2d      	mov.n	a2, a10
40082d82:	f01d      	retw.n

40082d84 <z_unpend_first_thread>:
{
40082d84:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082d87:	006330        	rsil	a3, 3
		ret = _priq_wait_best(&wait_q->waitq);
40082d8a:	20a220        	or	a10, a2, a2
40082d8d:	008e65        	call8	40083674 <z_priq_dumb_best>
40082d90:	0a2d      	mov.n	a2, a10
	XTOS_RESTORE_INTLEVEL(key);
40082d92:	13e630        	wsr.ps	a3
40082d95:	002010        	rsync

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
40082d98:	0aac      	beqz.n	a10, 40082dbc <z_unpend_first_thread+0x38>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082d9a:	006330        	rsil	a3, 3
	sys_dlist_remove(&thread->base.qnode_dlist);
40082d9d:	008c25        	call8	40083660 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
40082da0:	0d0282        	l8ui	a8, a2, 13
40082da3:	d97c      	movi.n	a9, -3
40082da5:	108890        	and	a8, a8, a9
40082da8:	0d4282        	s8i	a8, a2, 13
		thread->base.pended_on = NULL;
40082dab:	080c      	movi.n	a8, 0
40082dad:	026282        	s32i	a8, a2, 8
	XTOS_RESTORE_INTLEVEL(key);
40082db0:	13e630        	wsr.ps	a3
40082db3:	002010        	rsync
	return z_abort_timeout(&thread->base.timeout);
40082db6:	18c2a2        	addi	a10, a2, 24
40082db9:	0043a5        	call8	400831f4 <z_abort_timeout>
}
40082dbc:	f01d      	retw.n
	...

40082dc0 <z_sched_init>:
{
40082dc0:	004136        	entry	a1, 32
	list->head = (sys_dnode_t *)list;
40082dc3:	f5e981        	l32r	a8, 40080568 <_iram_text_start+0x20>
40082dc6:	f68091        	l32r	a9, 400807c8 <_iram_text_start+0x280>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
40082dc9:	00a0b2        	movi	a11, 0
40082dcc:	0f6892        	s32i	a9, a8, 60
	list->tail = (sys_dnode_t *)list;
40082dcf:	106892        	s32i	a9, a8, 64
40082dd2:	20abb0        	or	a10, a11, a11
40082dd5:	ffa7e5        	call8	40082854 <k_sched_time_slice_set>
}
40082dd8:	f01d      	retw.n
	...

40082ddc <z_impl_k_yield>:
{
40082ddc:	004136        	entry	a1, 32
	if (!z_is_idle_thread_object(_current)) {
40082ddf:	f5e221        	l32r	a2, 40080568 <_iram_text_start+0x20>
40082de2:	f67131        	l32r	a3, 400807a8 <_iram_text_start+0x260>
40082de5:	2288      	l32i.n	a8, a2, 8
40082de7:	671837        	beq	a8, a3, 40082e52 <z_impl_k_yield+0x76>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082dea:	006330        	rsil	a3, 3
	sys_dlist_remove(&thread->base.qnode_dlist);
40082ded:	22a8      	l32i.n	a10, a2, 8
40082def:	008725        	call8	40083660 <sys_dlist_remove>
	return list->head == list;
40082df2:	f298      	l32i.n	a9, a2, 60
			_priq_run_add(&_kernel.ready_q.runq, _current);
40082df4:	022282        	l32i	a8, a2, 8
40082df7:	f674c1        	l32r	a12, 400807c8 <_iram_text_start+0x280>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082dfa:	c9ac      	beqz.n	a9, 40082e2a <z_impl_k_yield+0x4e>
40082dfc:	2a19c7        	beq	a9, a12, 40082e2a <z_impl_k_yield+0x4e>
	if (thread_1->base.prio < thread_2->base.prio) {
40082dff:	0e08a2        	l8ui	a10, a8, 14
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
40082e02:	1022d2        	l32i	a13, a2, 64
40082e05:	23aa00        	sext	a10, a10, 7
40082e08:	0e09b2        	l8ui	a11, a9, 14
40082e0b:	23bb00        	sext	a11, a11, 7
40082e0e:	0faab7        	bge	a10, a11, 40082e21 <z_impl_k_yield+0x45>
	node->prev = successor->prev;
40082e11:	1928      	l32i.n	a2, a9, 4
	node->next = successor;
40082e13:	0899      	s32i.n	a9, a8, 0
	node->prev = successor->prev;
40082e15:	1829      	s32i.n	a2, a8, 4
	successor->prev->next = node;
40082e17:	0289      	s32i.n	a8, a2, 0
	successor->prev = node;
40082e19:	1989      	s32i.n	a8, a9, 4
40082e1b:	0006c6        	j	40082e3a <z_impl_k_yield+0x5e>
40082e1e:	000000        	ill
	return (node == list->tail) ? NULL : node->next;
40082e21:	0519d7        	beq	a9, a13, 40082e2a <z_impl_k_yield+0x4e>
40082e24:	002992        	l32i	a9, a9, 0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082e27:	fdd956        	bnez	a9, 40082e08 <z_impl_k_yield+0x2c>
	node->prev = list->tail;
40082e2a:	102292        	l32i	a9, a2, 64
	node->next = list;
40082e2d:	0068c2        	s32i	a12, a8, 0
	node->prev = list->tail;
40082e30:	1899      	s32i.n	a9, a8, 4
	list->tail->next = node;
40082e32:	102292        	l32i	a9, a2, 64
40082e35:	0989      	s32i.n	a8, a9, 0
	list->tail = node;
40082e37:	106282        	s32i	a8, a2, 64
	thread->base.thread_state |= states;
40082e3a:	0d0822        	l8ui	a2, a8, 13
40082e3d:	80af92        	movi	a9, -128
40082e40:	202290        	or	a2, a2, a9
40082e43:	0d4822        	s8i	a2, a8, 13
			update_cache(1);
40082e46:	01a0a2        	movi	a10, 1
40082e49:	fface5        	call8	40082918 <update_cache>
	XTOS_RESTORE_INTLEVEL(key);
40082e4c:	13e630        	wsr.ps	a3
40082e4f:	002010        	rsync
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082e52:	0063a0        	rsil	a10, 3
	(void) z_swap(&lock, key);
40082e55:	ff9ce5        	call8	40082824 <z_swap$isra$14>
}
40082e58:	f01d      	retw.n
	...

40082e5c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
40082e5c:	004136        	entry	a1, 32
40082e5f:	20a220        	or	a10, a2, a2
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
40082e62:	140266        	bnei	a2, -1, 40082e7a <z_impl_k_sleep+0x1e>
40082e65:	110366        	bnei	a3, -1, 40082e7a <z_impl_k_sleep+0x1e>
		k_thread_suspend(_current);
40082e68:	f5c081        	l32r	a8, 40080568 <_iram_text_start+0x20>
40082e6b:	0228a2        	l32i	a10, a8, 8
	z_impl_k_thread_suspend(thread);
40082e6e:	ffcee5        	call8	40082b5c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
40082e71:	20a330        	or	a10, a3, a3
40082e74:	000846        	j	40082e99 <z_impl_k_sleep+0x3d>
40082e77:	000000        	ill
	ticks = k_ms_to_ticks_ceil32(timeout);
#else
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
40082e7a:	0a3d      	mov.n	a3, a10
	if (ticks == 0) {
40082e7c:	4acc      	bnez.n	a10, 40082e84 <z_impl_k_sleep+0x28>
	z_impl_k_yield();
40082e7e:	fff5e5        	call8	40082ddc <z_impl_k_yield>
40082e81:	000146        	j	40082e8a <z_impl_k_sleep+0x2e>
40082e84:	ffe1a5        	call8	40082ca0 <z_tick_sleep$part$23>
40082e87:	203aa0        	or	a3, a10, a10
			return t / (from_hz / to_hz);
40082e8a:	f652c1        	l32r	a12, 400807d4 <_iram_text_start+0x28c>
40082e8d:	f5ced1        	l32r	a13, 400805c8 <_iram_text_start+0x80>
40082e90:	20a330        	or	a10, a3, a3
40082e93:	31bf30        	srai	a11, a3, 31
40082e96:	0081a5        	call8	400836b0 <__udivdi3>
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
40082e99:	0a2d      	mov.n	a2, a10
40082e9b:	f01d      	retw.n
40082e9d:	000000        	ill

40082ea0 <z_impl_k_current_get>:
}
#include <syscalls/k_wakeup_mrsh.c>
#endif

k_tid_t z_impl_k_current_get(void)
{
40082ea0:	004136        	entry	a1, 32

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
40082ea3:	f5b181        	l32r	a8, 40080568 <_iram_text_start+0x20>
40082ea6:	2828      	l32i.n	a2, a8, 8
40082ea8:	f01d      	retw.n
	...

40082eac <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
40082eac:	004136        	entry	a1, 32
40082eaf:	006330        	rsil	a3, 3
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
40082eb2:	20a220        	or	a10, a2, a2
40082eb5:	ffece5        	call8	40082d84 <z_unpend_first_thread>

	if (thread != NULL) {
40082eb8:	00da16        	beqz	a10, 40082ec9 <z_impl_k_sem_give+0x1d>
40082ebb:	00a022        	movi	a2, 0
40082ebe:	136a22        	s32i	a2, a10, 76
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
40082ec1:	ffb465        	call8	40082a08 <z_ready_thread>
40082ec4:	000506        	j	40082edc <z_impl_k_sem_give+0x30>
40082ec7:	920000        	lsi	f0, a0, 0x248
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
40082eca:	820222        	l8ui	a2, a2, 130
40082ecd:	b20322        	l8ui	a2, a3, 178
40082ed0:	9001a0        	addx2	a0, a1, a10
40082ed3:	c088      	l32i.n	a8, a0, 48
40082ed5:	93ab80        	movnez	a10, a11, a8
40082ed8:	8a9a      	add.n	a8, a10, a9
40082eda:	2289      	s32i.n	a8, a2, 8
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
40082edc:	f63fa1        	l32r	a10, 400807d8 <_iram_text_start+0x290>
40082edf:	03bd      	mov.n	a11, a3
40082ee1:	ff9a25        	call8	40082884 <z_reschedule>
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
40082ee4:	f01d      	retw.n
	...

40082ee8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
40082ee8:	004136        	entry	a1, 32
40082eeb:	02cd      	mov.n	a12, a2
40082eed:	04ed      	mov.n	a14, a4
40082eef:	05fd      	mov.n	a15, a5
40082ef1:	0063b0        	rsil	a11, 3
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
40082ef4:	2288      	l32i.n	a8, a2, 8
40082ef6:	e88c      	beqz.n	a8, 40082f08 <z_impl_k_sem_take+0x20>
		sem->count--;
40082ef8:	880b      	addi.n	a8, a8, -1
40082efa:	2289      	s32i.n	a8, a2, 8
	XTOS_RESTORE_INTLEVEL(key);
40082efc:	13e6b0        	wsr.ps	a11
40082eff:	002010        	rsync
		k_spin_unlock(&lock, key);
		ret = 0;
40082f02:	0a0c      	movi.n	a10, 0
		goto out;
40082f04:	000586        	j	40082f1e <z_impl_k_sem_take+0x36>
40082f07:	845000        	extui	a5, a0, 0, 9
	}

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
40082f0a:	98cc20        	lsi	f2, a12, 0x260
40082f0d:	13e6b0        	wsr.ps	a11
40082f10:	002010        	rsync
		k_spin_unlock(&lock, key);
		ret = -EBUSY;
40082f13:	0a7c      	movi.n	a10, -16
		goto out;
40082f15:	000146        	j	40082f1e <z_impl_k_sem_take+0x36>
	}

	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
40082f18:	f630a1        	l32r	a10, 400807d8 <_iram_text_start+0x290>
40082f1b:	ffe4e5        	call8	40082d68 <z_pend_curr>

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
40082f1e:	0a2d      	mov.n	a2, a10
40082f20:	f01d      	retw.n
	...

40082f24 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
40082f24:	006136        	entry	a1, 48
40082f27:	07fd      	mov.n	a15, a7
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
40082f29:	e178      	l32i.n	a7, a1, 56
	sys_dlist_init(&w->waitq);
40082f2b:	30c282        	addi	a8, a2, 48
40082f2e:	0c4272        	s8i	a7, a2, 12
	thread_base->thread_state = (uint8_t)initial_state;
40082f31:	470c      	movi.n	a7, 4
40082f33:	0d4272        	s8i	a7, a2, 13

	thread_base->prio = priority;
40082f36:	d178      	l32i.n	a7, a1, 52
	list->head = (sys_dnode_t *)list;
40082f38:	c289      	s32i.n	a8, a2, 48
	list->tail = (sys_dnode_t *)list;
40082f3a:	d289      	s32i.n	a8, a2, 52
40082f3c:	0e4272        	s8i	a7, a2, 14
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
40082f3f:	087c      	movi.n	a8, -16

	thread_base->sched_locked = 0U;
40082f41:	070c      	movi.n	a7, 0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
40082f43:	44fb      	addi.n	a4, a4, 15
	thread_base->sched_locked = 0U;
40082f45:	0f4272        	s8i	a7, a2, 15
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
40082f48:	104480        	and	a4, a4, a8
	node->next = NULL;
40082f4b:	070c      	movi.n	a7, 0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
40082f4d:	c188      	l32i.n	a8, a1, 48
40082f4f:	6279      	s32i.n	a7, a2, 24
	node->prev = NULL;
40082f51:	7279      	s32i.n	a7, a2, 28
	stack_ptr = (char *)stack + stack_obj_size;
40082f53:	434a      	add.n	a4, a3, a4
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
40082f55:	02ad      	mov.n	a10, a2
{
40082f57:	03bd      	mov.n	a11, a3
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
40082f59:	0189      	s32i.n	a8, a1, 0
40082f5b:	06ed      	mov.n	a14, a6
40082f5d:	05dd      	mov.n	a13, a5
40082f5f:	04cd      	mov.n	a12, a4
40082f61:	fe8de5        	call8	40081840 <arch_new_thread>
	new_thread->init_data = NULL;
40082f64:	106272        	s32i	a7, a2, 64
	new_thread->fn_abort = NULL;
40082f67:	116272        	s32i	a7, a2, 68
	new_thread->resource_pool = _current->resource_pool;
40082f6a:	f57f71        	l32r	a7, 40080568 <_iram_text_start+0x20>
40082f6d:	2778      	l32i.n	a7, a7, 8
40082f6f:	152772        	l32i	a7, a7, 84
40082f72:	156272        	s32i	a7, a2, 84
}
40082f75:	042d      	mov.n	a2, a4
40082f77:	f01d      	retw.n
40082f79:	000000        	ill

40082f7c <z_init_static_threads>:
{
40082f7c:	006136        	entry	a1, 48
	_FOREACH_STATIC_THREAD(thread_data) {
40082f7f:	f61721        	l32r	a2, 400807dc <_iram_text_start+0x294>
40082f82:	f61631        	l32r	a3, 400807dc <_iram_text_start+0x294>
40082f85:	024d      	mov.n	a4, a2
40082f87:	000a46        	j	40082fb4 <z_init_static_threads+0x38>
		z_setup_new_thread(
40082f8a:	0b2282        	l32i	a8, a2, 44
40082f8d:	036182        	s32i	a8, a1, 12
40082f90:	8288      	l32i.n	a8, a2, 32
40082f92:	2189      	s32i.n	a8, a1, 8
40082f94:	7288      	l32i.n	a8, a2, 28
40082f96:	1189      	s32i.n	a8, a1, 4
40082f98:	6288      	l32i.n	a8, a2, 24
40082f9a:	0189      	s32i.n	a8, a1, 0
40082f9c:	52f8      	l32i.n	a15, a2, 20
40082f9e:	42e8      	l32i.n	a14, a2, 16
40082fa0:	32d8      	l32i.n	a13, a2, 12
40082fa2:	22c8      	l32i.n	a12, a2, 8
40082fa4:	12b8      	l32i.n	a11, a2, 4
40082fa6:	0022a2        	l32i	a10, a2, 0
40082fa9:	fff7a5        	call8	40082f24 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
40082fac:	0288      	l32i.n	a8, a2, 0
40082fae:	106822        	s32i	a2, a8, 64
	_FOREACH_STATIC_THREAD(thread_data) {
40082fb1:	30c222        	addi	a2, a2, 48
40082fb4:	d23237        	bltu	a2, a3, 40082f8a <z_init_static_threads+0xe>
	_FOREACH_STATIC_THREAD(thread_data) {
40082fb7:	042d      	mov.n	a2, a4
	k_sched_lock();
40082fb9:	ff9265        	call8	400828e0 <k_sched_lock>
					    K_MSEC(thread_data->init_delay));
40082fbc:	040c      	movi.n	a4, 0
	_FOREACH_STATIC_THREAD(thread_data) {
40082fbe:	000a86        	j	40082fec <z_init_static_threads+0x70>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
40082fc1:	92d8      	l32i.n	a13, a2, 36
40082fc3:	220d26        	beqi	a13, -1, 40082fe9 <z_init_static_threads+0x6d>
		} else {
			return t * (to_hz / from_hz);
40082fc6:	a80c      	movi.n	a8, 10
					    K_MSEC(thread_data->init_delay));
40082fc8:	53dd40        	max	a13, a13, a4
40082fcb:	82cd80        	mull	a12, a13, a8
40082fce:	b2dd80        	mulsh	a13, a13, a8
			schedule_new_thread(thread_data->init_thread,
40082fd1:	02a8      	l32i.n	a10, a2, 0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
40082fd3:	208cd0        	or	a8, a12, a13
40082fd6:	006856        	bnez	a8, 40082fe0 <z_init_static_threads+0x64>
	z_sched_start(thread);
40082fd9:	ffa825        	call8	40082a5c <z_sched_start>
40082fdc:	000246        	j	40082fe9 <z_init_static_threads+0x6d>
40082fdf:	fcb100        	lsi	f0, a1, 0x3f0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
40082fe2:	caa2f5        	call12	4004da10 <esp32_rom_gpio_matrix_out+0x43b04>
40082fe5:	a518      	l32i.n	a1, a5, 40
40082fe7:	000c      	movi.n	a0, 0
	_FOREACH_STATIC_THREAD(thread_data) {
40082fe9:	30c222        	addi	a2, a2, 48
40082fec:	d13237        	bltu	a2, a3, 40082fc1 <z_init_static_threads+0x45>
	k_sched_unlock();
40082fef:	ff9765        	call8	40082964 <k_sched_unlock>
}
40082ff2:	f01d      	retw.n

40082ff4 <z_impl_k_thread_abort>:
#include <sys/__assert.h>
#include <syscall_handler.h>

#if !defined(CONFIG_ARCH_HAS_THREAD_ABORT)
void z_impl_k_thread_abort(k_tid_t thread)
{
40082ff4:	004136        	entry	a1, 32
	z_thread_single_abort(thread);
40082ff7:	02ad      	mov.n	a10, a2
40082ff9:	ffbb25        	call8	40082bac <z_thread_single_abort>
40082ffc:	03f430        	rsr.misc0	a3

	/* If we're in an interrupt handler, we reschedule on the way out
	 * anyway, nothing needs to be done here.
	 */
	if (!arch_is_in_isr()) {
40082fff:	0338      	l32i.n	a3, a3, 0
40083001:	23fc      	bnez.n	a3, 40083037 <z_impl_k_thread_abort+0x43>
		if (thread == _current) {
40083003:	f55931        	l32r	a3, 40080568 <_iram_text_start+0x20>
40083006:	2348      	l32i.n	a4, a3, 8
40083008:	259427        	bne	a4, a2, 40083031 <z_impl_k_thread_abort+0x3d>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008300b:	006350        	rsil	a5, 3
	old_thread = _current;
4008300e:	2348      	l32i.n	a4, a3, 8
	return _kernel.ready_q.cache;
40083010:	e328      	l32i.n	a2, a3, 56
	if (new_thread != old_thread) {
40083012:	121427        	beq	a4, a2, 40083028 <z_impl_k_thread_abort+0x34>
		z_reset_time_slice();
40083015:	ff7ba5        	call8	400827d0 <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
40083018:	587c      	movi.n	a8, -11
4008301a:	1422a2        	l32i	a10, a2, 80
4008301d:	136482        	s32i	a8, a4, 76
		_current_cpu->current = new_thread;
40083020:	2329      	s32i.n	a2, a3, 8
40083022:	50c4b2        	addi	a11, a4, 80
40083025:	fe6aa5        	call8	400816d0 <xtensa_switch>
	XTOS_RESTORE_INTLEVEL(key);
40083028:	13e650        	wsr.ps	a5
4008302b:	002010        	rsync
	return _current->swap_retval;
4008302e:	000146        	j	40083037 <z_impl_k_thread_abort+0x43>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083031:	0063a0        	rsil	a10, 3
	(void) z_reschedule_irqlock(arch_irq_lock());
40083034:	ff87a5        	call8	400828b0 <z_reschedule_irqlock>
			z_swap_unlocked();
		} else {
			z_reschedule_unlocked();
		}
	}
}
40083037:	f01d      	retw.n
40083039:	000000        	ill

4008303c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
4008303c:	004136        	entry	a1, 32
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
4008303f:	f5e881        	l32r	a8, 400807e0 <_iram_text_start+0x298>
40083042:	0a0c      	movi.n	a10, 0
40083044:	0888      	l32i.n	a8, a8, 0
40083046:	0298a7        	bne	a8, a10, 4008304c <elapsed+0x10>
40083049:	fe5765        	call8	400815c0 <z_clock_elapsed>
}
4008304c:	0a2d      	mov.n	a2, a10
4008304e:	f01d      	retw.n

40083050 <remove_timeout>:
{
40083050:	004136        	entry	a1, 32
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
40083053:	0288      	l32i.n	a8, a2, 0
40083055:	12ac      	beqz.n	a2, 4008307a <remove_timeout+0x2a>
40083057:	f5e391        	l32r	a9, 400807e4 <_iram_text_start+0x29c>
	return (node == list->tail) ? NULL : node->next;
4008305a:	1998      	l32i.n	a9, a9, 4
4008305c:	1a1297        	beq	a2, a9, 4008307a <remove_timeout+0x2a>
	if (next(t) != NULL) {
4008305f:	789c      	beqz.n	a8, 4008307a <remove_timeout+0x2a>
		next(t)->dticks += t->dticks;
40083061:	48c8      	l32i.n	a12, a8, 16
40083063:	42a8      	l32i.n	a10, a2, 16
40083065:	58b8      	l32i.n	a11, a8, 20
40083067:	acaa      	add.n	a10, a12, a10
40083069:	52d8      	l32i.n	a13, a2, 20
4008306b:	190c      	movi.n	a9, 1
4008306d:	013ac7        	bltu	a10, a12, 40083072 <remove_timeout+0x22>
40083070:	090c      	movi.n	a9, 0
40083072:	bbda      	add.n	a11, a11, a13
40083074:	99ba      	add.n	a9, a9, a11
40083076:	48a9      	s32i.n	a10, a8, 16
40083078:	5899      	s32i.n	a9, a8, 20
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
4008307a:	1298      	l32i.n	a9, a2, 4
4008307c:	0989      	s32i.n	a8, a9, 0
	node->next->prev = node->prev;
4008307e:	1899      	s32i.n	a9, a8, 4
	node->next = NULL;
40083080:	080c      	movi.n	a8, 0
40083082:	0289      	s32i.n	a8, a2, 0
	node->prev = NULL;
40083084:	1289      	s32i.n	a8, a2, 4
}
40083086:	f01d      	retw.n

40083088 <next_timeout>:

static int32_t next_timeout(void)
{
40083088:	004136        	entry	a1, 32
	return list->head == list;
4008308b:	f5d681        	l32r	a8, 400807e4 <_iram_text_start+0x29c>
4008308e:	0828      	l32i.n	a2, a8, 0
	return sys_dlist_is_empty(list) ? NULL : list->head;
40083090:	019287        	bne	a2, a8, 40083095 <next_timeout+0xd>
40083093:	020c      	movi.n	a2, 0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
40083095:	fffa65        	call8	4008303c <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
40083098:	f5d481        	l32r	a8, 400807e8 <_iram_text_start+0x2a0>
4008309b:	328c      	beqz.n	a2, 400830a2 <next_timeout+0x1a>
4008309d:	4288      	l32i.n	a8, a2, 16
4008309f:	c088a0        	sub	a8, a8, a10

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
400830a2:	f53121        	l32r	a2, 40080568 <_iram_text_start+0x20>
400830a5:	4228      	l32i.n	a2, a2, 16
400830a7:	128c      	beqz.n	a2, 400830ac <next_timeout+0x24>
400830a9:	012287        	blt	a2, a8, 400830ae <next_timeout+0x26>
400830ac:	082d      	mov.n	a2, a8
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
400830ae:	f01d      	retw.n

400830b0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
400830b0:	006136        	entry	a1, 48
400830b3:	046d      	mov.n	a6, a4
400830b5:	207550        	or	a7, a5, a5
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
400830b8:	050466        	bnei	a4, -1, 400830c1 <z_add_timeout+0x11>
400830bb:	020566        	bnei	a5, -1, 400830c1 <z_add_timeout+0x11>
400830be:	004b86        	j	400831f0 <z_add_timeout+0x140>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
400830c1:	441b      	addi.n	a4, a4, 1
400830c3:	180c      	movi.n	a8, 1
400830c5:	013467        	bltu	a4, a6, 400830ca <z_add_timeout+0x1a>
400830c8:	080c      	movi.n	a8, 0
400830ca:	885a      	add.n	a8, a8, a5

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
400830cc:	e57c      	movi.n	a5, -2
400830ce:	c0a540        	sub	a10, a5, a4
	k_ticks_t ticks = timeout.ticks + 1;
400830d1:	047d      	mov.n	a7, a4
400830d3:	086d      	mov.n	a6, a8
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
400830d5:	190c      	movi.n	a9, 1
400830d7:	0235a7        	bltu	a5, a10, 400830dd <z_add_timeout+0x2d>
400830da:	00a092        	movi	a9, 0
400830dd:	f57c      	movi.n	a5, -1
400830df:	c05580        	sub	a5, a5, a8
400830e2:	c05590        	sub	a5, a5, a9
400830e5:	045596        	bltz	a5, 4008312e <z_add_timeout+0x7e>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
400830e8:	0189      	s32i.n	a8, a1, 0
400830ea:	fff525        	call8	4008303c <elapsed>
400830ed:	f5bf51        	l32r	a5, 400807ec <_iram_text_start+0x2a4>
400830f0:	e97c      	movi.n	a9, -2
400830f2:	0568      	l32i.n	a6, a5, 0
400830f4:	15b8      	l32i.n	a11, a5, 4
400830f6:	c06960        	sub	a6, a9, a6
400830f9:	170c      	movi.n	a7, 1
400830fb:	0188      	l32i.n	a8, a1, 0
400830fd:	013967        	bltu	a9, a6, 40083102 <z_add_timeout+0x52>
40083100:	070c      	movi.n	a7, 0
40083102:	f57c      	movi.n	a5, -1
40083104:	c055b0        	sub	a5, a5, a11
40083107:	c04640        	sub	a4, a6, a4
4008310a:	c05570        	sub	a5, a5, a7
4008310d:	170c      	movi.n	a7, 1
4008310f:	023647        	bltu	a6, a4, 40083115 <z_add_timeout+0x65>
40083112:	00a072        	movi	a7, 0
40083115:	c05580        	sub	a5, a5, a8
40083118:	c05570        	sub	a5, a5, a7
4008311b:	c074a0        	sub	a7, a4, a10
4008311e:	318fa0        	srai	a8, a10, 31
40083121:	160c      	movi.n	a6, 1
40083123:	013477        	bltu	a4, a7, 40083128 <z_add_timeout+0x78>
40083126:	060c      	movi.n	a6, 0
40083128:	c05580        	sub	a5, a5, a8
4008312b:	c06560        	sub	a6, a5, a6
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
4008312e:	026232        	s32i	a3, a2, 8
40083131:	006330        	rsil	a3, 3
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
40083134:	fff065        	call8	4008303c <elapsed>
	ticks = MAX(1, ticks);
40083137:	205770        	or	a5, a7, a7
4008313a:	204660        	or	a4, a6, a6
4008313d:	0716e6        	bgei	a6, 1, 40083148 <z_add_timeout+0x98>
40083140:	06cc      	bnez.n	a6, 40083144 <z_add_timeout+0x94>
40083142:	27cc      	bnez.n	a7, 40083148 <z_add_timeout+0x98>
40083144:	150c      	movi.n	a5, 1
40083146:	040c      	movi.n	a4, 0
		to->dticks = ticks + elapsed();
40083148:	317fa0        	srai	a7, a10, 31
4008314b:	a5aa      	add.n	a10, a5, a10
4008314d:	160c      	movi.n	a6, 1
4008314f:	013a57        	bltu	a10, a5, 40083154 <z_add_timeout+0xa4>
40083152:	060c      	movi.n	a6, 0
40083154:	447a      	add.n	a4, a4, a7
40083156:	464a      	add.n	a4, a6, a4
40083158:	5249      	s32i.n	a4, a2, 20
	return list->head == list;
4008315a:	f5a241        	l32r	a4, 400807e4 <_iram_text_start+0x29c>
4008315d:	42a9      	s32i.n	a10, a2, 16
4008315f:	0458      	l32i.n	a5, a4, 0
	return sys_dlist_is_empty(list) ? NULL : list->head;
40083161:	029547        	bne	a5, a4, 40083167 <z_add_timeout+0xb7>
40083164:	001e46        	j	400831e1 <z_add_timeout+0x131>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
40083167:	14a8      	l32i.n	a10, a4, 4
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
40083169:	1b0c      	movi.n	a11, 1
4008316b:	0c0c      	movi.n	a12, 0
4008316d:	001386        	j	400831bf <z_add_timeout+0x10f>
			if (t->dticks > to->dticks) {
40083170:	5588      	l32i.n	a8, a5, 20
40083172:	5268      	l32i.n	a6, a2, 20
40083174:	4578      	l32i.n	a7, a5, 16
40083176:	4298      	l32i.n	a9, a2, 16
40083178:	053687        	bltu	a6, a8, 40083181 <z_add_timeout+0xd1>
4008317b:	259867        	bne	a8, a6, 400831a4 <z_add_timeout+0xf4>
4008317e:	22b977        	bgeu	a9, a7, 400831a4 <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
40083181:	c09790        	sub	a9, a7, a9
40083184:	1a0c      	movi.n	a10, 1
40083186:	023797        	bltu	a7, a9, 4008318c <z_add_timeout+0xdc>
40083189:	00a0a2        	movi	a10, 0
4008318c:	c06860        	sub	a6, a8, a6
4008318f:	c066a0        	sub	a6, a6, a10
40083192:	5569      	s32i.n	a6, a5, 20
	node->prev = successor->prev;
40083194:	1568      	l32i.n	a6, a5, 4
40083196:	4599      	s32i.n	a9, a5, 16
40083198:	1269      	s32i.n	a6, a2, 4
	node->next = successor;
4008319a:	0259      	s32i.n	a5, a2, 0
	successor->prev->next = node;
4008319c:	0629      	s32i.n	a2, a6, 0
	successor->prev = node;
4008319e:	1529      	s32i.n	a2, a5, 4
		}

		if (t == NULL) {
400831a0:	000886        	j	400831c6 <z_add_timeout+0x116>
400831a3:	797000        	lsi	f0, a0, 0x1e4
			to->dticks -= t->dticks;
400831a6:	dbb0c0        	movt.s	f11, f0, b12
400831a9:	397720        	lsi	f2, a7, 228
400831ac:	dcc002        	addi	a0, a0, -36
400831af:	668020        	lsi	f2, a0, 0x198
400831b2:	66d0c0        	lsi	f12, a0, 0x198
400831b5:	4279c0        	xorb	b7, b9, b12
400831b8:	5269      	s32i.n	a6, a2, 20
	return (node == list->tail) ? NULL : node->next;
400831ba:	2315a7        	beq	a5, a10, 400831e1 <z_add_timeout+0x131>
400831bd:	0558      	l32i.n	a5, a5, 0
		for (t = first(); t != NULL; t = next(t)) {
400831bf:	fad556        	bnez	a5, 40083170 <z_add_timeout+0xc0>
400831c2:	0006c6        	j	400831e1 <z_add_timeout+0x131>
400831c5:	245200        	extui	a5, a0, 2, 3
	return list->head == list;
400831c8:	925700        	lsi	f0, a7, 0x248
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
400831cb:	470b      	addi.n	a4, a7, -1
400831cd:	a50815        	call4	40028250 <esp32_rom_gpio_matrix_out+0x1e344>
			z_clock_set_timeout(next_timeout(), false);
400831d0:	ffeb      	addi.n	a15, a15, 14
400831d2:	00a0b2        	movi	a11, 0
400831d5:	fe38a5        	call8	40081560 <z_clock_set_timeout>
	XTOS_RESTORE_INTLEVEL(key);
400831d8:	13e630        	wsr.ps	a3
400831db:	002010        	rsync
	LOCKED(&timeout_lock) {
400831de:	000386        	j	400831f0 <z_add_timeout+0x140>
	node->prev = list->tail;
400831e1:	1458      	l32i.n	a5, a4, 4
	node->next = list;
400831e3:	0249      	s32i.n	a4, a2, 0
	node->prev = list->tail;
400831e5:	1259      	s32i.n	a5, a2, 4
	list->tail->next = node;
400831e7:	1458      	l32i.n	a5, a4, 4
400831e9:	0529      	s32i.n	a2, a5, 0
	list->tail = node;
400831eb:	1429      	s32i.n	a2, a4, 4
400831ed:	fff546        	j	400831c6 <z_add_timeout+0x116>
		}
	}
}
400831f0:	f01d      	retw.n
	...

400831f4 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
400831f4:	004136        	entry	a1, 32
400831f7:	02ad      	mov.n	a10, a2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400831f9:	006320        	rsil	a2, 3
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
400831fc:	0a98      	l32i.n	a9, a10, 0
	int ret = -EINVAL;
400831fe:	a86c      	movi.n	a8, -22
		if (sys_dnode_is_linked(&to->node)) {
40083200:	004916        	beqz	a9, 40083208 <z_abort_timeout+0x14>
			remove_timeout(to);
40083203:	ffe4e5        	call8	40083050 <remove_timeout>
			ret = 0;
40083206:	080c      	movi.n	a8, 0
	XTOS_RESTORE_INTLEVEL(key);
40083208:	13e620        	wsr.ps	a2
4008320b:	002010        	rsync
		}
	}

	return ret;
}
4008320e:	082d      	mov.n	a2, a8
40083210:	f01d      	retw.n
	...

40083214 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
40083214:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083217:	006320        	rsil	a2, 3
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
4008321a:	ffe6e5        	call8	40083088 <next_timeout>
	XTOS_RESTORE_INTLEVEL(key);
4008321d:	13e620        	wsr.ps	a2
40083220:	002010        	rsync
	}
	return ret;
}
40083223:	0a2d      	mov.n	a2, a10
40083225:	f01d      	retw.n
	...

40083228 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
40083228:	004136        	entry	a1, 32
4008322b:	743030        	extui	a3, a3, 0, 8
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008322e:	006340        	rsil	a4, 3
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
40083231:	ffe565        	call8	40083088 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
40083234:	00a0c2        	movi	a12, 0
40083237:	01ca92        	addi	a9, a10, 1
4008323a:	01a082        	movi	a8, 1
4008323d:	0c5d      	mov.n	a5, a12
4008323f:	835890        	moveqz	a5, a8, a9
40083242:	059d      	mov.n	a9, a5
			      || (ticks < next_to);
40083244:	0122a7        	blt	a2, a10, 40083249 <z_set_timeout_expiry+0x21>
40083247:	0c8d      	mov.n	a8, a12
40083249:	208980        	or	a8, a9, a8
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
4008324c:	0b6807        	bbci	a8, 0, 4008325b <z_set_timeout_expiry+0x33>
4008324f:	082aa6        	blti	a10, 2, 4008325b <z_set_timeout_expiry+0x33>
			z_clock_set_timeout(ticks, is_idle);
40083252:	20b330        	or	a11, a3, a3
40083255:	20a220        	or	a10, a2, a2
40083258:	fe3065        	call8	40081560 <z_clock_set_timeout>
	XTOS_RESTORE_INTLEVEL(key);
4008325b:	13e640        	wsr.ps	a4
4008325e:	002010        	rsync
		}
	}
}
40083261:	000090        	retw

40083264 <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
40083264:	004136        	entry	a1, 32
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
40083267:	02ad      	mov.n	a10, a2
40083269:	ff8a25        	call8	40082b0c <z_time_slice>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008326c:	006330        	rsil	a3, 3
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
4008326f:	f55c61        	l32r	a6, 400807e0 <_iram_text_start+0x298>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
		announce_remaining -= dt;
		t->dticks = 0;
40083272:	f4d541        	l32r	a4, 400805c8 <_iram_text_start+0x80>
	announce_remaining = ticks;
40083275:	0629      	s32i.n	a2, a6, 0
		t->dticks = 0;
40083277:	f4d451        	l32r	a5, 400805c8 <_iram_text_start+0x80>
	while (first() != NULL && first()->dticks <= announce_remaining) {
4008327a:	000c86        	j	400832b0 <z_clock_announce+0x4c>
		curr_tick += dt;
4008327d:	989a      	add.n	a9, a8, a9
4008327f:	31bf80        	srai	a11, a8, 31
40083282:	1a0c      	movi.n	a10, 1
40083284:	013987        	bltu	a9, a8, 40083289 <z_clock_announce+0x25>
40083287:	0a0c      	movi.n	a10, 0
40083289:	ebea      	add.n	a14, a11, a14
4008328b:	aaea      	add.n	a10, a10, a14
4008328d:	1da9      	s32i.n	a10, a13, 4
		announce_remaining -= dt;
4008328f:	c08c80        	sub	a8, a12, a8
		t->dticks = 0;
40083292:	4249      	s32i.n	a4, a2, 16
40083294:	5259      	s32i.n	a5, a2, 20
		remove_timeout(t);
40083296:	02ad      	mov.n	a10, a2
		curr_tick += dt;
40083298:	0d99      	s32i.n	a9, a13, 0
		announce_remaining -= dt;
4008329a:	006682        	s32i	a8, a6, 0
		remove_timeout(t);
4008329d:	ffdb25        	call8	40083050 <remove_timeout>
	XTOS_RESTORE_INTLEVEL(key);
400832a0:	13e630        	wsr.ps	a3
400832a3:	002010        	rsync

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
400832a6:	2238      	l32i.n	a3, a2, 8
400832a8:	02ad      	mov.n	a10, a2
400832aa:	0003e0        	callx8	a3
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400832ad:	006330        	rsil	a3, 3
	return list->head == list;
400832b0:	f54d81        	l32r	a8, 400807e4 <_iram_text_start+0x29c>
400832b3:	f54ed1        	l32r	a13, 400807ec <_iram_text_start+0x2a4>
400832b6:	06c8      	l32i.n	a12, a6, 0
400832b8:	0828      	l32i.n	a2, a8, 0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
400832ba:	31bfc0        	srai	a11, a12, 31
400832bd:	0d98      	l32i.n	a9, a13, 0
400832bf:	1de8      	l32i.n	a14, a13, 4
	while (first() != NULL && first()->dticks <= announce_remaining) {
400832c1:	129c      	beqz.n	a2, 400832d6 <z_clock_announce+0x72>
400832c3:	0f1287        	beq	a2, a8, 400832d6 <z_clock_announce+0x72>
400832c6:	52a8      	l32i.n	a10, a2, 20
400832c8:	4288      	l32i.n	a8, a2, 16
400832ca:	323ba7        	bltu	a11, a10, 40083300 <z_clock_announce+0x9c>
400832cd:	ac9ab7        	bne	a10, a11, 4008327d <z_clock_announce+0x19>
400832d0:	a9bc87        	bgeu	a12, a8, 4008327d <z_clock_announce+0x19>
400832d3:	000a46        	j	40083300 <z_clock_announce+0x9c>

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
	}

	curr_tick += announce_remaining;
400832d6:	9c9a      	add.n	a9, a12, a9
400832d8:	01a022        	movi	a2, 1
400832db:	0139c7        	bltu	a9, a12, 400832e0 <z_clock_announce+0x7c>
400832de:	020c      	movi.n	a2, 0
400832e0:	80bbe0        	add	a11, a11, a14
400832e3:	8022b0        	add	a2, a2, a11
400832e6:	1d29      	s32i.n	a2, a13, 4
	announce_remaining = 0;
400832e8:	020c      	movi.n	a2, 0
	curr_tick += announce_remaining;
400832ea:	0d99      	s32i.n	a9, a13, 0
	announce_remaining = 0;
400832ec:	0629      	s32i.n	a2, a6, 0

	z_clock_set_timeout(next_timeout(), false);
400832ee:	ffd9a5        	call8	40083088 <next_timeout>
400832f1:	02bd      	mov.n	a11, a2
400832f3:	fe26e5        	call8	40081560 <z_clock_set_timeout>
	XTOS_RESTORE_INTLEVEL(key);
400832f6:	13e630        	wsr.ps	a3
400832f9:	002010        	rsync

	k_spin_unlock(&timeout_lock, key);
}
400832fc:	f01d      	retw.n
400832fe:	c00000        	sub	a0, a0, a0
		first()->dticks -= announce_remaining;
40083301:	c048      	l32i.n	a4, a0, 48
40083303:	01a052        	movi	a5, 1
40083306:	023847        	bltu	a8, a4, 4008330c <z_clock_announce+0xa8>
40083309:	00a052        	movi	a5, 0
4008330c:	c0aab0        	sub	a10, a10, a11
4008330f:	c0aa50        	sub	a10, a10, a5
40083312:	4249      	s32i.n	a4, a2, 16
40083314:	52a9      	s32i.n	a10, a2, 20
40083316:	ffef06        	j	400832d6 <z_clock_announce+0x72>
40083319:	000000        	ill

4008331c <z_tick_get>:

int64_t z_tick_get(void)
{
4008331c:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008331f:	006340        	rsil	a4, 3
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
40083322:	fe29e5        	call8	400815c0 <z_clock_elapsed>
40083325:	f53131        	l32r	a3, 400807ec <_iram_text_start+0x2a4>
40083328:	002322        	l32i	a2, a3, 0
4008332b:	012382        	l32i	a8, a3, 4
4008332e:	802a20        	add	a2, a10, a2
40083331:	130c      	movi.n	a3, 1
40083333:	0132a7        	bltu	a2, a10, 40083338 <z_tick_get+0x1c>
40083336:	030c      	movi.n	a3, 0
40083338:	338a      	add.n	a3, a3, a8
	XTOS_RESTORE_INTLEVEL(key);
4008333a:	13e640        	wsr.ps	a4
4008333d:	002010        	rsync
	}
	return t;
}
40083340:	f01d      	retw.n
	...

40083344 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
40083344:	004136        	entry	a1, 32
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
40083347:	fffd65        	call8	4008331c <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
4008334a:	0a2d      	mov.n	a2, a10
4008334c:	f01d      	retw.n
	...

40083350 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
40083350:	004136        	entry	a1, 32
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
40083353:	120c      	movi.n	a2, 1
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083355:	006380        	rsil	a8, 3
	int32_t ticks = z_get_next_timeout_expiry();
40083358:	ffeba5        	call8	40083214 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
4008335b:	013ae6        	bgei	a10, 3, 40083360 <idle+0x10>
4008335e:	02ad      	mov.n	a10, a2
40083360:	02bd      	mov.n	a11, a2
40083362:	ffec65        	call8	40083228 <z_set_timeout_expiry>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
40083365:	0008a5        	call8	400833f0 <arch_cpu_idle>
40083368:	fffa46        	j	40083355 <idle+0x5>
	...

4008336c <k_heap_init>:
#include <ksched.h>
#include <wait_q.h>
#include <init.h>

void k_heap_init(struct k_heap *h, void *mem, size_t bytes)
{
4008336c:	004136        	entry	a1, 32
4008336f:	0cc282        	addi	a8, a2, 12
40083372:	20a220        	or	a10, a2, a2
	list->head = (sys_dnode_t *)list;
40083375:	036282        	s32i	a8, a2, 12
	list->tail = (sys_dnode_t *)list;
40083378:	4289      	s32i.n	a8, a2, 16
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
4008337a:	04cd      	mov.n	a12, a4
4008337c:	03bd      	mov.n	a11, a3
4008337e:	fdc9e5        	call8	4008101c <sys_heap_init>
}
40083381:	f01d      	retw.n
	...

40083384 <statics_init>:

static int statics_init(const struct device *unused)
{
40083384:	004136        	entry	a1, 32
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
40083387:	f51a21        	l32r	a2, 400807f0 <_iram_text_start+0x2a8>
4008338a:	000386        	j	4008339c <statics_init+0x18>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
4008338d:	0222c2        	l32i	a12, a2, 8
40083390:	0122b2        	l32i	a11, a2, 4
40083393:	20a220        	or	a10, a2, a2
40083396:	fffd65        	call8	4008336c <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
40083399:	14c222        	addi	a2, a2, 20
4008339c:	f51531        	l32r	a3, 400807f0 <_iram_text_start+0x2a8>
4008339f:	ea3237        	bltu	a2, a3, 4008338d <statics_init+0x9>
	}
	return 0;
}
400833a2:	020c      	movi.n	a2, 0
400833a4:	f01d      	retw.n
	...

400833a8 <i2c_read>:
 * @retval 0 If successful.
 * @retval -EIO General input / output error.
 */
static inline int i2c_read(const struct device *dev, uint8_t *buf,
			   uint32_t num_bytes, uint16_t addr)
{
400833a8:	006136        	entry	a1, 48
	struct i2c_msg msg;

	msg.buf = buf;
	msg.len = num_bytes;
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
400833ab:	380c      	movi.n	a8, 3
{
400833ad:	02ad      	mov.n	a10, a2
400833af:	05dd      	mov.n	a13, a5
	msg.buf = buf;
400833b1:	0139      	s32i.n	a3, a1, 0
	msg.len = num_bytes;
400833b3:	1149      	s32i.n	a4, a1, 4
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
400833b5:	084182        	s8i	a8, a1, 8
	return api->transfer(dev, msgs, num_msgs, addr);
400833b8:	2288      	l32i.n	a8, a2, 8
400833ba:	1c0c      	movi.n	a12, 1
400833bc:	1888      	l32i.n	a8, a8, 4
400833be:	20b110        	or	a11, a1, a1
400833c1:	0008e0        	callx8	a8

	return i2c_transfer(dev, &msg, 1, addr);
}
400833c4:	0a2d      	mov.n	a2, a10
400833c6:	f01d      	retw.n

400833c8 <i2c_write>:
{
400833c8:	006136        	entry	a1, 48
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
400833cb:	280c      	movi.n	a8, 2
{
400833cd:	02ad      	mov.n	a10, a2
400833cf:	05dd      	mov.n	a13, a5
	msg.buf = (uint8_t *)buf;
400833d1:	0139      	s32i.n	a3, a1, 0
	msg.len = num_bytes;
400833d3:	1149      	s32i.n	a4, a1, 4
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
400833d5:	084182        	s8i	a8, a1, 8
	return api->transfer(dev, msgs, num_msgs, addr);
400833d8:	2288      	l32i.n	a8, a2, 8
400833da:	1c0c      	movi.n	a12, 1
400833dc:	1888      	l32i.n	a8, a8, 4
400833de:	20b110        	or	a11, a1, a1
400833e1:	0008e0        	callx8	a8
}
400833e4:	0a2d      	mov.n	a2, a10
400833e6:	f01d      	retw.n

400833e8 <_ConfigAbsSyms>:

/* file is auto-generated, do not modify ! */

#include <toolchain.h>

GEN_ABS_SYM_BEGIN (_ConfigAbsSyms)
400833e8:	004136        	entry	a1, 32
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_BOOTLOADER_SRAM_SIZE, 16);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
400833eb:	f01d      	retw.n
400833ed:	000000        	ill

400833f0 <arch_cpu_idle>:
 */

#include <tracing/tracing.h>

void arch_cpu_idle(void)
{
400833f0:	004136        	entry	a1, 32
	sys_trace_idle();
	__asm__ volatile ("waiti 0");
400833f3:	007000        	waiti	0
}
400833f6:	f01d      	retw.n

400833f8 <z_xtensa_dump_stack>:
{
400833f8:	004136        	entry	a1, 32
}
400833fb:	f01d      	retw.n
400833fd:	000000        	ill

40083400 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
40083400:	004136        	entry	a1, 32
	while ((*s1 == *s2) && (*s1 != '\0')) {
40083403:	0000c6        	j	4008340a <strcmp+0xa>
		s1++;
40083406:	221b      	addi.n	a2, a2, 1
		s2++;
40083408:	331b      	addi.n	a3, a3, 1
	while ((*s1 == *s2) && (*s1 != '\0')) {
4008340a:	000282        	l8ui	a8, a2, 0
4008340d:	000392        	l8ui	a9, a3, 0
40083410:	029897        	bne	a8, a9, 40083416 <strcmp+0x16>
40083413:	fef856        	bnez	a8, 40083406 <strcmp+0x6>
	}

	return *s1 - *s2;
}
40083416:	c02890        	sub	a2, a8, a9
40083419:	f01d      	retw.n
	...

4008341c <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
4008341c:	004136        	entry	a1, 32
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
4008341f:	74b030        	extui	a11, a3, 0, 8

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
40083422:	028d      	mov.n	a8, a2
40083424:	000286        	j	40083432 <memset+0x16>
40083427:	441600        	extui	a1, a0, 6, 5
		if (n == 0) {
4008342a:	48b204        	lsi	f0, a2, 0x120
			return buf;
		}
		*(d_byte++) = c_byte;
4008342d:	440b00        	extui	a0, a0, 11, 5
		n--;
40083430:	881b      	addi.n	a8, a8, 1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
40083432:	149080        	extui	a9, a8, 0, 2
40083435:	08cd      	mov.n	a12, a8
40083437:	fed956        	bnez	a9, 40083428 <memset+0xc>
	};

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
4008343a:	743030        	extui	a3, a3, 0, 8

	c_word |= c_word << 8;
4008343d:	11a380        	slli	a10, a3, 8
40083440:	203a30        	or	a3, a10, a3
	c_word |= c_word << 16;
40083443:	11a300        	slli	a10, a3, 16
40083446:	203a30        	or	a3, a10, a3
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
40083449:	41a240        	srli	a10, a4, 2
4008344c:	11dae0        	slli	a13, a10, 2
4008344f:	ed8a      	add.n	a14, a13, a8
40083451:	0000c6        	j	40083458 <memset+0x3c>
		*(d_word++) = c_word;
40083454:	0839      	s32i.n	a3, a8, 0
		n -= sizeof(mem_word_t);
40083456:	884b      	addi.n	a8, a8, 4
	while (n >= sizeof(mem_word_t)) {
40083458:	f898e7        	bne	a8, a14, 40083454 <memset+0x38>
4008345b:	11aae0        	slli	a10, a10, 2
4008345e:	c044a0        	sub	a4, a4, a10
40083461:	000206        	j	4008346d <memset+0x51>
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
		*(d_byte++) = c_byte;
40083464:	39da      	add.n	a3, a9, a13
40083466:	3c3a      	add.n	a3, a12, a3
40083468:	0043b2        	s8i	a11, a3, 0
		n--;
4008346b:	991b      	addi.n	a9, a9, 1
	while (n > 0) {
4008346d:	f39497        	bne	a4, a9, 40083464 <memset+0x48>
	}

	return buf;
}
40083470:	f01d      	retw.n
	...

40083474 <_stdout_hook_default>:
{
40083474:	004136        	entry	a1, 32
}
40083477:	f27c      	movi.n	a2, -1
40083479:	f01d      	retw.n
	...

4008347c <gpio_esp32_port_get_raw>:
{
4008347c:	004136        	entry	a1, 32
	*value = *data->port.input_reg;
4008347f:	3288      	l32i.n	a8, a2, 12
}
40083481:	020c      	movi.n	a2, 0
	*value = *data->port.input_reg;
40083483:	4888      	l32i.n	a8, a8, 16
40083485:	0020c0        	memw
40083488:	0888      	l32i.n	a8, a8, 0
4008348a:	0389      	s32i.n	a8, a3, 0
}
4008348c:	f01d      	retw.n
	...

40083490 <gpio_esp32_port_set_masked_raw>:
{
40083490:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = port->data;
40083493:	3288      	l32i.n	a8, a2, 12
40083495:	0063a0        	rsil	a10, 3
	*data->port.output_reg = (*data->port.output_reg & ~mask)
40083498:	5888      	l32i.n	a8, a8, 20
4008349a:	0020c0        	memw
4008349d:	0898      	l32i.n	a9, a8, 0
				 | (mask & value);
4008349f:	304940        	xor	a4, a9, a4
400834a2:	104430        	and	a4, a4, a3
400834a5:	304490        	xor	a4, a4, a9
	*data->port.output_reg = (*data->port.output_reg & ~mask)
400834a8:	0020c0        	memw
400834ab:	0849      	s32i.n	a4, a8, 0
	XTOS_RESTORE_INTLEVEL(key);
400834ad:	13e6a0        	wsr.ps	a10
400834b0:	002010        	rsync
}
400834b3:	020c      	movi.n	a2, 0
400834b5:	f01d      	retw.n
	...

400834b8 <gpio_esp32_port_set_bits_raw>:
{
400834b8:	004136        	entry	a1, 32
	*data->port.set_reg = pins;
400834bb:	3288      	l32i.n	a8, a2, 12
}
400834bd:	020c      	movi.n	a2, 0
	*data->port.set_reg = pins;
400834bf:	2888      	l32i.n	a8, a8, 8
400834c1:	0020c0        	memw
400834c4:	0839      	s32i.n	a3, a8, 0
}
400834c6:	f01d      	retw.n

400834c8 <gpio_esp32_port_clear_bits_raw>:
{
400834c8:	004136        	entry	a1, 32
	*data->port.clear_reg = pins;
400834cb:	3288      	l32i.n	a8, a2, 12
}
400834cd:	020c      	movi.n	a2, 0
	*data->port.clear_reg = pins;
400834cf:	3888      	l32i.n	a8, a8, 12
400834d1:	0020c0        	memw
400834d4:	0839      	s32i.n	a3, a8, 0
}
400834d6:	f01d      	retw.n

400834d8 <gpio_esp32_port_toggle_bits>:
{
400834d8:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = port->data;
400834db:	3288      	l32i.n	a8, a2, 12
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400834dd:	0063a0        	rsil	a10, 3
	*data->port.output_reg = (*data->port.output_reg ^ pins);
400834e0:	5898      	l32i.n	a9, a8, 20
400834e2:	0020c0        	memw
400834e5:	0988      	l32i.n	a8, a9, 0
400834e7:	308830        	xor	a8, a8, a3
400834ea:	0020c0        	memw
400834ed:	0989      	s32i.n	a8, a9, 0
	XTOS_RESTORE_INTLEVEL(key);
400834ef:	13e6a0        	wsr.ps	a10
400834f2:	002010        	rsync
}
400834f5:	020c      	movi.n	a2, 0
400834f7:	f01d      	retw.n
400834f9:	000000        	ill

400834fc <gpio_esp32_manage_callback>:
{
400834fc:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = dev->data;
400834ff:	3288      	l32i.n	a8, a2, 12
{
40083501:	744040        	extui	a4, a4, 0, 8
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
40083504:	9828      	l32i.n	a2, a8, 36
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
40083506:	090c      	movi.n	a9, 0
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
40083508:	42cc      	bnez.n	a2, 40083510 <gpio_esp32_manage_callback+0x14>
4008350a:	000fc6        	j	4008354d <gpio_esp32_manage_callback+0x51>
4008350d:	0a2d00        	add.s	f2, f13, f0
40083510:	209327        	bne	a3, a2, 40083534 <gpio_esp32_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
40083513:	0328      	l32i.n	a2, a3, 0
40083515:	b9cc      	bnez.n	a9, 40083524 <gpio_esp32_manage_callback+0x28>
40083517:	a898      	l32i.n	a9, a8, 40
	list->head = node;
40083519:	9829      	s32i.n	a2, a8, 36
Z_GENLIST_REMOVE(slist, snode)
4008351b:	0e9397        	bne	a3, a9, 4008352d <gpio_esp32_manage_callback+0x31>
	list->tail = node;
4008351e:	a829      	s32i.n	a2, a8, 40
40083520:	000246        	j	4008352d <gpio_esp32_manage_callback+0x31>
40083523:	092900        	l32e	a0, a9, -56
Z_GENLIST_REMOVE(slist, snode)
40083526:	a828      	l32i.n	a2, a8, 40
40083528:	019327        	bne	a3, a2, 4008352d <gpio_esp32_manage_callback+0x31>
	list->tail = node;
4008352b:	a899      	s32i.n	a9, a8, 40
	parent->next = child;
4008352d:	020c      	movi.n	a2, 0
4008352f:	0329      	s32i.n	a2, a3, 0
40083531:	000606        	j	4008354d <gpio_esp32_manage_callback+0x51>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
40083534:	02a8      	l32i.n	a10, a2, 0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
40083536:	029d      	mov.n	a9, a2
40083538:	fd2a56        	bnez	a10, 4008350e <gpio_esp32_manage_callback+0x12>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
			if (!set) {
				return -EINVAL;
4008353b:	a26c      	movi.n	a2, -22
			if (!set) {
4008353d:	017416        	beqz	a4, 40083558 <gpio_esp32_manage_callback+0x5c>
Z_GENLIST_PREPEND(slist, snode)
40083540:	9828      	l32i.n	a2, a8, 36
	parent->next = child;
40083542:	0329      	s32i.n	a2, a3, 0
Z_GENLIST_PREPEND(slist, snode)
40083544:	a828      	l32i.n	a2, a8, 40
	list->head = node;
40083546:	9839      	s32i.n	a3, a8, 36
Z_GENLIST_PREPEND(slist, snode)
40083548:	42cc      	bnez.n	a2, 40083550 <gpio_esp32_manage_callback+0x54>
4008354a:	000206        	j	40083556 <gpio_esp32_manage_callback+0x5a>
			}
		}
	}

	if (set) {
4008354d:	fef456        	bnez	a4, 40083540 <gpio_esp32_manage_callback+0x44>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
40083550:	020c      	movi.n	a2, 0
40083552:	000086        	j	40083558 <gpio_esp32_manage_callback+0x5c>
40083555:	a83900        	lsi	f0, a9, 0x2a0
}
40083558:	f01d      	retw.n
	...

4008355c <gpio_esp32_fire_callbacks>:
{
4008355c:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = device->data;
4008355f:	3238      	l32i.n	a3, a2, 12
	uint32_t irq_status = *data->port.irq_status_reg;
40083561:	6348      	l32i.n	a4, a3, 24
	*data->port.irq_ack_reg = irq_status;
40083563:	7388      	l32i.n	a8, a3, 28
	uint32_t irq_status = *data->port.irq_status_reg;
40083565:	0020c0        	memw
40083568:	0448      	l32i.n	a4, a4, 0
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
4008356a:	93b8      	l32i.n	a11, a3, 36
	*data->port.irq_ack_reg = irq_status;
4008356c:	0020c0        	memw
4008356f:	0849      	s32i.n	a4, a8, 0
40083571:	8b9c      	beqz.n	a11, 4008358d <gpio_esp32_fire_callbacks+0x31>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
40083573:	0b38      	l32i.n	a3, a11, 0
		if (cb->pin_mask & pins) {
40083575:	2bc8      	l32i.n	a12, a11, 8
40083577:	10c4c0        	and	a12, a4, a12
4008357a:	6c8c      	beqz.n	a12, 40083584 <gpio_esp32_fire_callbacks+0x28>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
4008357c:	1b88      	l32i.n	a8, a11, 4
4008357e:	20a220        	or	a10, a2, a2
40083581:	0008e0        	callx8	a8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
40083584:	538c      	beqz.n	a3, 4008358d <gpio_esp32_fire_callbacks+0x31>
40083586:	03bd      	mov.n	a11, a3
40083588:	0338      	l32i.n	a3, a3, 0
4008358a:	fff9c6        	j	40083575 <gpio_esp32_fire_callbacks+0x19>
}
4008358d:	f01d      	retw.n
	...

40083590 <i2c_esp32_connect_irq_0>:
{
40083590:	004136        	entry	a1, 32
}
40083593:	f01d      	retw.n
40083595:	000000        	ill

40083598 <uart_esp32_poll_in>:
{
40083598:	004136        	entry	a1, 32
	if (UART_RXFIFO_COUNT(DEV_BASE(dev)->status) == 0) {
4008359b:	1228      	l32i.n	a2, a2, 4
4008359d:	0298      	l32i.n	a9, a2, 0
		return -1;
4008359f:	f27c      	movi.n	a2, -1
	if (UART_RXFIFO_COUNT(DEV_BASE(dev)->status) == 0) {
400835a1:	0020c0        	memw
400835a4:	7988      	l32i.n	a8, a9, 28
400835a6:	748080        	extui	a8, a8, 0, 8
400835a9:	888c      	beqz.n	a8, 400835b5 <uart_esp32_poll_in+0x1d>
	*p_char = DEV_BASE(dev)->fifo;
400835ab:	0020c0        	memw
400835ae:	0928      	l32i.n	a2, a9, 0
400835b0:	004322        	s8i	a2, a3, 0
	return 0;
400835b3:	020c      	movi.n	a2, 0
}
400835b5:	f01d      	retw.n
	...

400835b8 <uart_esp32_poll_out>:
{
400835b8:	004136        	entry	a1, 32
	while (UART_TXFIFO_COUNT(DEV_BASE(dev)->status) >= UART_FIFO_LIMIT) {
400835bb:	1288      	l32i.n	a8, a2, 4
{
400835bd:	743030        	extui	a3, a3, 0, 8
	while (UART_TXFIFO_COUNT(DEV_BASE(dev)->status) >= UART_FIFO_LIMIT) {
400835c0:	0898      	l32i.n	a9, a8, 0
400835c2:	7ea0a2        	movi	a10, 126
400835c5:	0020c0        	memw
400835c8:	7988      	l32i.n	a8, a9, 28
400835ca:	758080        	extui	a8, a8, 16, 8
400835cd:	f43a87        	bltu	a10, a8, 400835c5 <uart_esp32_poll_out+0xd>
	DEV_BASE(dev)->fifo = (uint32_t)c;
400835d0:	0020c0        	memw
400835d3:	0939      	s32i.n	a3, a9, 0
}
400835d5:	f01d      	retw.n
	...

400835d8 <uart_esp32_err_check>:
{
400835d8:	004136        	entry	a1, 32
	uint32_t err = UART_GET_PARITY_ERR(DEV_BASE(dev)->int_st)
400835db:	1228      	l32i.n	a2, a2, 4
400835dd:	0288      	l32i.n	a8, a2, 0
400835df:	0020c0        	memw
400835e2:	2828      	l32i.n	a2, a8, 8
		    | UART_GET_FRAME_ERR(DEV_BASE(dev)->int_st);
400835e4:	0020c0        	memw
400835e7:	2888      	l32i.n	a8, a8, 8
	uint32_t err = UART_GET_PARITY_ERR(DEV_BASE(dev)->int_st)
400835e9:	412220        	srli	a2, a2, 2
		    | UART_GET_FRAME_ERR(DEV_BASE(dev)->int_st);
400835ec:	418380        	srli	a8, a8, 3
400835ef:	202280        	or	a2, a2, a8
}
400835f2:	042020        	extui	a2, a2, 0, 1
400835f5:	f01d      	retw.n
	...

400835f8 <uart_esp32_config_get>:
{
400835f8:	004136        	entry	a1, 32
	cfg->baudrate = data->uart_config.baudrate;
400835fb:	3288      	l32i.n	a8, a2, 12
	if (UART_GET_PARITY_EN(DEV_BASE(dev)->conf0)) {
400835fd:	1228      	l32i.n	a2, a2, 4
	cfg->baudrate = data->uart_config.baudrate;
400835ff:	0888      	l32i.n	a8, a8, 0
		cfg->parity = UART_CFG_PARITY_NONE;
40083601:	090c      	movi.n	a9, 0
	cfg->baudrate = data->uart_config.baudrate;
40083603:	0389      	s32i.n	a8, a3, 0
	if (UART_GET_PARITY_EN(DEV_BASE(dev)->conf0)) {
40083605:	0288      	l32i.n	a8, a2, 0
40083607:	0020c0        	memw
4008360a:	082822        	l32i	a2, a8, 32
4008360d:	076217        	bbci	a2, 1, 40083618 <uart_esp32_config_get+0x20>
		cfg->parity = UART_GET_PARITY(DEV_BASE(dev)->conf0);
40083610:	0020c0        	memw
40083613:	8898      	l32i.n	a9, a8, 32
40083615:	049090        	extui	a9, a9, 0, 1
40083618:	044392        	s8i	a9, a3, 4
	cfg->stop_bits = UART_GET_STOP_BITS(DEV_BASE(dev)->conf0);
4008361b:	0020c0        	memw
4008361e:	8898      	l32i.n	a9, a8, 32
40083620:	149490        	extui	a9, a9, 4, 2
40083623:	054392        	s8i	a9, a3, 5
	cfg->data_bits = UART_GET_DATA_BITS(DEV_BASE(dev)->conf0);
40083626:	0020c0        	memw
40083629:	082892        	l32i	a9, a8, 32
4008362c:	149290        	extui	a9, a9, 2, 2
4008362f:	064392        	s8i	a9, a3, 6
	if (UART_GET_TX_FLOW(DEV_BASE(dev)->conf0)) {
40083632:	0020c0        	memw
40083635:	8828      	l32i.n	a2, a8, 32
40083637:	0562f7        	bbci	a2, 15, 40083640 <uart_esp32_config_get+0x48>
		cfg->flow_ctrl = UART_CFG_FLOW_CTRL_RTS_CTS;
4008363a:	01a022        	movi	a2, 1
4008363d:	074322        	s8i	a2, a3, 7
	if (UART_GET_RX_FLOW(DEV_BASE(dev)->conf1)) {
40083640:	0020c0        	memw
40083643:	9828      	l32i.n	a2, a8, 36
40083645:	047277        	bbci	a2, 23, 4008364d <uart_esp32_config_get+0x55>
		cfg->flow_ctrl = UART_CFG_FLOW_CTRL_DTR_DSR;
40083648:	220c      	movi.n	a2, 2
4008364a:	074322        	s8i	a2, a3, 7
}
4008364d:	020c      	movi.n	a2, 0
4008364f:	f01d      	retw.n
40083651:	000000        	ill

40083654 <arch_system_halt>:
{
40083654:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083657:	006380        	rsil	a8, 3
	for (;;) {
4008365a:	ffff06        	j	4008365a <arch_system_halt+0x6>
4008365d:	000000        	ill

40083660 <sys_dlist_remove>:
{
40083660:	004136        	entry	a1, 32
	node->prev->next = node->next;
40083663:	0288      	l32i.n	a8, a2, 0
40083665:	1298      	l32i.n	a9, a2, 4
40083667:	0989      	s32i.n	a8, a9, 0
	node->next->prev = node->prev;
40083669:	1899      	s32i.n	a9, a8, 4
	node->next = NULL;
4008366b:	080c      	movi.n	a8, 0
4008366d:	0289      	s32i.n	a8, a2, 0
	node->prev = NULL;
4008366f:	1289      	s32i.n	a8, a2, 4
	sys_dnode_init(node);
}
40083671:	f01d      	retw.n
	...

40083674 <z_priq_dumb_best>:
{
40083674:	004136        	entry	a1, 32
	return list->head == list;
40083677:	0288      	l32i.n	a8, a2, 0
	if (n != NULL) {
40083679:	188c      	beqz.n	a8, 4008367e <z_priq_dumb_best+0xa>
4008367b:	019287        	bne	a2, a8, 40083680 <z_priq_dumb_best+0xc>
	struct k_thread *thread = NULL;
4008367e:	080c      	movi.n	a8, 0
}
40083680:	082d      	mov.n	a2, a8
40083682:	f01d      	retw.n

40083684 <z_impl_k_sem_init>:
{
40083684:	004136        	entry	a1, 32
	CHECKIF(limit == 0U || initial_count > limit) {
40083687:	180c      	movi.n	a8, 1
40083689:	090c      	movi.n	a9, 0
4008368b:	938940        	movnez	a8, a9, a4
4008368e:	748080        	extui	a8, a8, 0, 8
40083691:	0f9897        	bne	a8, a9, 400836a4 <z_impl_k_sem_init+0x20>
40083694:	0c3437        	bltu	a4, a3, 400836a4 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
40083697:	2239      	s32i.n	a3, a2, 8
	sem->limit = limit;
40083699:	3249      	s32i.n	a4, a2, 12
	list->head = (sys_dnode_t *)list;
4008369b:	0229      	s32i.n	a2, a2, 0
	list->tail = (sys_dnode_t *)list;
4008369d:	1229      	s32i.n	a2, a2, 4
	return 0;
4008369f:	082d      	mov.n	a2, a8
400836a1:	000046        	j	400836a6 <z_impl_k_sem_init+0x22>
		return -EINVAL;
400836a4:	a26c      	movi.n	a2, -22
}
400836a6:	f01d      	retw.n

400836a8 <_OffsetAbsSyms>:
/*
 * The final link step uses the symbol _OffsetAbsSyms to force the linkage of
 * offsets.o into the ELF image.
 */

GEN_ABS_SYM_BEGIN(_OffsetAbsSyms)
400836a8:	004136        	entry	a1, 32
/* size of the struct k_thread structure without save area for coproc regs */
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF,
		 sizeof(struct k_thread) - sizeof(tCoopCoprocReg) -
			 sizeof(tPreempCoprocReg) + XT_CP_DESCR_SIZE);

GEN_ABS_SYM_END
400836ab:	f01d      	retw.n
400836ad:	000000        	ill

400836b0 <__udivdi3>:
400836b0:	004136        	entry	a1, 32
400836b3:	03dd      	mov.n	a13, a3
400836b5:	04ad      	mov.n	a10, a4
400836b7:	053d      	mov.n	a3, a5
400836b9:	02cd      	mov.n	a12, a2
400836bb:	0d9d      	mov.n	a9, a13
400836bd:	184556        	bnez	a5, 40083845 <__udivdi3+0x195>
400836c0:	023d47        	bltu	a13, a4, 400836c6 <__udivdi3+0x16>
400836c3:	002086        	j	40083749 <__udivdi3+0x99>
400836c6:	40f420        	nsau	a2, a4
400836c9:	c29c      	beqz.n	a2, 400836e9 <__udivdi3+0x39>
400836cb:	608020        	neg	a8, a2
400836ce:	400800        	ssr	a8
400836d1:	9180c0        	srl	a8, a12
400836d4:	401200        	ssl	a2
400836d7:	a19d00        	sll	a9, a13
400836da:	401200        	ssl	a2
400836dd:	a1a400        	sll	a10, a4
400836e0:	209890        	or	a9, a8, a9
400836e3:	401200        	ssl	a2
400836e6:	a1cc00        	sll	a12, a12
400836e9:	f580a0        	extui	a8, a10, 16, 16
400836ec:	e2d980        	remu	a13, a9, a8
400836ef:	f440a0        	extui	a4, a10, 0, 16
400836f2:	c29980        	quou	a9, a9, a8
400836f5:	11dd00        	slli	a13, a13, 16
400836f8:	f5b0c0        	extui	a11, a12, 16, 16
400836fb:	822490        	mull	a2, a4, a9
400836fe:	20bdb0        	or	a11, a13, a11
40083701:	13bb27        	bgeu	a11, a2, 40083718 <__udivdi3+0x68>
40083704:	bbaa      	add.n	a11, a11, a10
40083706:	590b      	addi.n	a5, a9, -1
40083708:	0a3ba7        	bltu	a11, a10, 40083716 <__udivdi3+0x66>
4008370b:	07bb27        	bgeu	a11, a2, 40083716 <__udivdi3+0x66>
4008370e:	fec992        	addi	a9, a9, -2
40083711:	bbaa      	add.n	a11, a11, a10
40083713:	000046        	j	40083718 <__udivdi3+0x68>
40083716:	059d      	mov.n	a9, a5
40083718:	c0bb20        	sub	a11, a11, a2
4008371b:	e22b80        	remu	a2, a11, a8
4008371e:	c2bb80        	quou	a11, a11, a8
40083721:	112200        	slli	a2, a2, 16
40083724:	f4c0c0        	extui	a12, a12, 0, 16
40083727:	8244b0        	mull	a4, a4, a11
4008372a:	20c2c0        	or	a12, a2, a12
4008372d:	0fbc47        	bgeu	a12, a4, 40083740 <__udivdi3+0x90>
40083730:	caca      	add.n	a12, a10, a12
40083732:	ffcb22        	addi	a2, a11, -1
40083735:	05bc47        	bgeu	a12, a4, 4008373e <__udivdi3+0x8e>
40083738:	fecbb2        	addi	a11, a11, -2
4008373b:	01bca7        	bgeu	a12, a10, 40083740 <__udivdi3+0x90>
4008373e:	02bd      	mov.n	a11, a2
40083740:	118900        	slli	a8, a9, 16
40083743:	2088b0        	or	a8, a8, a11
40083746:	007406        	j	4008391a <__udivdi3+0x26a>
40083749:	34cc      	bnez.n	a4, 40083750 <__udivdi3+0xa0>
4008374b:	130c      	movi.n	a3, 1
4008374d:	c2a340        	quou	a10, a3, a4
40083750:	40fa50        	nsau	a5, a10
40083753:	c08da0        	sub	a8, a13, a10
40083756:	130c      	movi.n	a3, 1
40083758:	089516        	beqz	a5, 400837e5 <__udivdi3+0x135>
4008375b:	042c      	movi.n	a4, 32
4008375d:	c04450        	sub	a4, a4, a5
40083760:	401500        	ssl	a5
40083763:	a1aa00        	sll	a10, a10
40083766:	400400        	ssr	a4
40083769:	9130d0        	srl	a3, a13
4008376c:	401500        	ssl	a5
4008376f:	a18d00        	sll	a8, a13
40083772:	400400        	ssr	a4
40083775:	914020        	srl	a4, a2
40083778:	401500        	ssl	a5
4008377b:	a1c200        	sll	a12, a2
4008377e:	f520a0        	extui	a2, a10, 16, 16
40083781:	204480        	or	a4, a4, a8
40083784:	e2b320        	remu	a11, a3, a2
40083787:	f480a0        	extui	a8, a10, 0, 16
4008378a:	c23320        	quou	a3, a3, a2
4008378d:	11bb00        	slli	a11, a11, 16
40083790:	f59040        	extui	a9, a4, 16, 16
40083793:	825830        	mull	a5, a8, a3
40083796:	209b90        	or	a9, a11, a9
40083799:	13b957        	bgeu	a9, a5, 400837b0 <__udivdi3+0x100>
4008379c:	99aa      	add.n	a9, a9, a10
4008379e:	b30b      	addi.n	a11, a3, -1
400837a0:	0a39a7        	bltu	a9, a10, 400837ae <__udivdi3+0xfe>
400837a3:	07b957        	bgeu	a9, a5, 400837ae <__udivdi3+0xfe>
400837a6:	fec332        	addi	a3, a3, -2
400837a9:	99aa      	add.n	a9, a9, a10
400837ab:	000046        	j	400837b0 <__udivdi3+0x100>
400837ae:	0b3d      	mov.n	a3, a11
400837b0:	c09950        	sub	a9, a9, a5
400837b3:	e2b920        	remu	a11, a9, a2
400837b6:	c29920        	quou	a9, a9, a2
400837b9:	822890        	mull	a2, a8, a9
400837bc:	11bb00        	slli	a11, a11, 16
400837bf:	f48040        	extui	a8, a4, 0, 16
400837c2:	208b80        	or	a8, a11, a8
400837c5:	13b827        	bgeu	a8, a2, 400837dc <__udivdi3+0x12c>
400837c8:	88aa      	add.n	a8, a8, a10
400837ca:	490b      	addi.n	a4, a9, -1
400837cc:	0a38a7        	bltu	a8, a10, 400837da <__udivdi3+0x12a>
400837cf:	07b827        	bgeu	a8, a2, 400837da <__udivdi3+0x12a>
400837d2:	fec992        	addi	a9, a9, -2
400837d5:	88aa      	add.n	a8, a8, a10
400837d7:	000046        	j	400837dc <__udivdi3+0x12c>
400837da:	049d      	mov.n	a9, a4
400837dc:	113300        	slli	a3, a3, 16
400837df:	c08820        	sub	a8, a8, a2
400837e2:	203390        	or	a3, a3, a9
400837e5:	f550a0        	extui	a5, a10, 16, 16
400837e8:	e2b850        	remu	a11, a8, a5
400837eb:	f440a0        	extui	a4, a10, 0, 16
400837ee:	c28850        	quou	a8, a8, a5
400837f1:	11bb00        	slli	a11, a11, 16
400837f4:	f590c0        	extui	a9, a12, 16, 16
400837f7:	822480        	mull	a2, a4, a8
400837fa:	209b90        	or	a9, a11, a9
400837fd:	13b927        	bgeu	a9, a2, 40083814 <__udivdi3+0x164>
40083800:	99aa      	add.n	a9, a9, a10
40083802:	b80b      	addi.n	a11, a8, -1
40083804:	0a39a7        	bltu	a9, a10, 40083812 <__udivdi3+0x162>
40083807:	07b927        	bgeu	a9, a2, 40083812 <__udivdi3+0x162>
4008380a:	fec882        	addi	a8, a8, -2
4008380d:	99aa      	add.n	a9, a9, a10
4008380f:	000046        	j	40083814 <__udivdi3+0x164>
40083812:	0b8d      	mov.n	a8, a11
40083814:	c09920        	sub	a9, a9, a2
40083817:	e22950        	remu	a2, a9, a5
4008381a:	c29950        	quou	a9, a9, a5
4008381d:	112200        	slli	a2, a2, 16
40083820:	f4c0c0        	extui	a12, a12, 0, 16
40083823:	824490        	mull	a4, a4, a9
40083826:	20c2c0        	or	a12, a2, a12
40083829:	0fbc47        	bgeu	a12, a4, 4008383c <__udivdi3+0x18c>
4008382c:	caca      	add.n	a12, a10, a12
4008382e:	ffc922        	addi	a2, a9, -1
40083831:	053ca7        	bltu	a12, a10, 4008383a <__udivdi3+0x18a>
40083834:	fec992        	addi	a9, a9, -2
40083837:	013c47        	bltu	a12, a4, 4008383c <__udivdi3+0x18c>
4008383a:	029d      	mov.n	a9, a2
4008383c:	118800        	slli	a8, a8, 16
4008383f:	208890        	or	a8, a8, a9
40083842:	003506        	j	4008391a <__udivdi3+0x26a>
40083845:	030c      	movi.n	a3, 0
40083847:	038d      	mov.n	a8, a3
40083849:	02bd57        	bgeu	a13, a5, 4008384f <__udivdi3+0x19f>
4008384c:	003286        	j	4008391a <__udivdi3+0x26a>
4008384f:	40f5b0        	nsau	a11, a5
40083852:	179b37        	bne	a11, a3, 4008386d <__udivdi3+0x1bd>
40083855:	180c      	movi.n	a8, 1
40083857:	0235d7        	bltu	a5, a13, 4008385d <__udivdi3+0x1ad>
4008385a:	208bb0        	or	a8, a11, a11
4008385d:	130c      	movi.n	a3, 1
4008385f:	01b247        	bgeu	a2, a4, 40083864 <__udivdi3+0x1b4>
40083862:	030c      	movi.n	a3, 0
40083864:	208830        	or	a8, a8, a3
40083867:	748080        	extui	a8, a8, 0, 8
4008386a:	002a86        	j	40083918 <__udivdi3+0x268>
4008386d:	092c      	movi.n	a9, 32
4008386f:	c099b0        	sub	a9, a9, a11
40083872:	400900        	ssr	a9
40083875:	913040        	srl	a3, a4
40083878:	401b00        	ssl	a11
4008387b:	a15500        	sll	a5, a5
4008387e:	205350        	or	a5, a3, a5
40083881:	400900        	ssr	a9
40083884:	9180d0        	srl	a8, a13
40083887:	401b00        	ssl	a11
4008388a:	a13d00        	sll	a3, a13
4008388d:	400900        	ssr	a9
40083890:	919020        	srl	a9, a2
40083893:	f5d050        	extui	a13, a5, 16, 16
40083896:	203930        	or	a3, a9, a3
40083899:	f4c050        	extui	a12, a5, 0, 16
4008389c:	e298d0        	remu	a9, a8, a13
4008389f:	c288d0        	quou	a8, a8, a13
400838a2:	119900        	slli	a9, a9, 16
400838a5:	f5e030        	extui	a14, a3, 16, 16
400838a8:	82ac80        	mull	a10, a12, a8
400838ab:	2099e0        	or	a9, a9, a14
400838ae:	401b00        	ssl	a11
400838b1:	a14400        	sll	a4, a4
400838b4:	14b9a7        	bgeu	a9, a10, 400838cc <__udivdi3+0x21c>
400838b7:	995a      	add.n	a9, a9, a5
400838b9:	e80b      	addi.n	a14, a8, -1
400838bb:	0bb9a7        	bgeu	a9, a10, 400838ca <__udivdi3+0x21a>
400838be:	083957        	bltu	a9, a5, 400838ca <__udivdi3+0x21a>
400838c1:	fec882        	addi	a8, a8, -2
400838c4:	995a      	add.n	a9, a9, a5
400838c6:	000086        	j	400838cc <__udivdi3+0x21c>
400838c9:	0e8d00        	lsi	f0, a13, 56
400838cc:	c0a9a0        	sub	a10, a9, a10
400838cf:	e29ad0        	remu	a9, a10, a13
400838d2:	c2aad0        	quou	a10, a10, a13
400838d5:	119900        	slli	a9, a9, 16
400838d8:	f43030        	extui	a3, a3, 0, 16
400838db:	82cca0        	mull	a12, a12, a10
400838de:	203930        	or	a3, a9, a3
400838e1:	13b3c7        	bgeu	a3, a12, 400838f8 <__udivdi3+0x248>
400838e4:	335a      	add.n	a3, a3, a5
400838e6:	9a0b      	addi.n	a9, a10, -1
400838e8:	0a3357        	bltu	a3, a5, 400838f6 <__udivdi3+0x246>
400838eb:	07b3c7        	bgeu	a3, a12, 400838f6 <__udivdi3+0x246>
400838ee:	fecaa2        	addi	a10, a10, -2
400838f1:	335a      	add.n	a3, a3, a5
400838f3:	000046        	j	400838f8 <__udivdi3+0x248>
400838f6:	09ad      	mov.n	a10, a9
400838f8:	118800        	slli	a8, a8, 16
400838fb:	2088a0        	or	a8, a8, a10
400838fe:	825840        	mull	a5, a8, a4
40083901:	a24840        	muluh	a4, a8, a4
40083904:	c033c0        	sub	a3, a3, a12
40083907:	0b3347        	bltu	a3, a4, 40083916 <__udivdi3+0x266>
4008390a:	401b00        	ssl	a11
4008390d:	a12200        	sll	a2, a2
40083910:	04b257        	bgeu	a2, a5, 40083918 <__udivdi3+0x268>
40083913:	019347        	bne	a3, a4, 40083918 <__udivdi3+0x268>
40083916:	880b      	addi.n	a8, a8, -1
40083918:	030c      	movi.n	a3, 0
4008391a:	082d      	mov.n	a2, a8
4008391c:	f01d      	retw.n
	...

40083920 <__umoddi3>:
40083920:	004136        	entry	a1, 32
40083923:	04bd      	mov.n	a11, a4
40083925:	208220        	or	a8, a2, a2
40083928:	039d      	mov.n	a9, a3
4008392a:	152556        	bnez	a5, 40083a80 <__umoddi3+0x160>
4008392d:	71b347        	bgeu	a3, a4, 400839a2 <__umoddi3+0x82>
40083930:	40f4a0        	nsau	a10, a4
40083933:	01da16        	beqz	a10, 40083954 <__umoddi3+0x34>
40083936:	401a00        	ssl	a10
40083939:	a19300        	sll	a9, a3
4008393c:	6030a0        	neg	a3, a10
4008393f:	400300        	ssr	a3
40083942:	913020        	srl	a3, a2
40083945:	401a00        	ssl	a10
40083948:	a1b400        	sll	a11, a4
4008394b:	209390        	or	a9, a3, a9
4008394e:	401a00        	ssl	a10
40083951:	a18200        	sll	a8, a2
40083954:	f540b0        	extui	a4, a11, 16, 16
40083957:	e23940        	remu	a3, a9, a4
4008395a:	f420b0        	extui	a2, a11, 0, 16
4008395d:	c29940        	quou	a9, a9, a4
40083960:	113300        	slli	a3, a3, 16
40083963:	f55080        	extui	a5, a8, 16, 16
40083966:	829290        	mull	a9, a2, a9
40083969:	203350        	or	a3, a3, a5
4008396c:	09b397        	bgeu	a3, a9, 40083979 <__umoddi3+0x59>
4008396f:	33ba      	add.n	a3, a3, a11
40083971:	0433b7        	bltu	a3, a11, 40083979 <__umoddi3+0x59>
40083974:	01b397        	bgeu	a3, a9, 40083979 <__umoddi3+0x59>
40083977:	33ba      	add.n	a3, a3, a11
40083979:	c09390        	sub	a9, a3, a9
4008397c:	e23940        	remu	a3, a9, a4
4008397f:	c29940        	quou	a9, a9, a4
40083982:	829290        	mull	a9, a2, a9
40083985:	f48080        	extui	a8, a8, 0, 16
40083988:	112300        	slli	a2, a3, 16
4008398b:	208280        	or	a8, a2, a8
4008398e:	0ab897        	bgeu	a8, a9, 4008399c <__umoddi3+0x7c>
40083991:	88ba      	add.n	a8, a8, a11
40083993:	05b897        	bgeu	a8, a9, 4008399c <__umoddi3+0x7c>
40083996:	0238b7        	bltu	a8, a11, 4008399c <__umoddi3+0x7c>
40083999:	8088b0        	add	a8, a8, a11
4008399c:	c08890        	sub	a8, a8, a9
4008399f:	003406        	j	40083a73 <__umoddi3+0x153>
400839a2:	34cc      	bnez.n	a4, 400839a9 <__umoddi3+0x89>
400839a4:	140c      	movi.n	a4, 1
400839a6:	c2b4b0        	quou	a11, a4, a11
400839a9:	40fba0        	nsau	a10, a11
400839ac:	5acc      	bnez.n	a10, 400839b5 <__umoddi3+0x95>
400839ae:	c033b0        	sub	a3, a3, a11
400839b1:	001c86        	j	40083a27 <__umoddi3+0x107>
400839b4:	042c00        	extui	a2, a0, 12, 1
400839b7:	c044a0        	sub	a4, a4, a10
400839ba:	401a00        	ssl	a10
400839bd:	a1bb00        	sll	a11, a11
400839c0:	400400        	ssr	a4
400839c3:	915030        	srl	a5, a3
400839c6:	f5c0b0        	extui	a12, a11, 16, 16
400839c9:	401a00        	ssl	a10
400839cc:	a13300        	sll	a3, a3
400839cf:	400400        	ssr	a4
400839d2:	914020        	srl	a4, a2
400839d5:	204430        	or	a4, a4, a3
400839d8:	401a00        	ssl	a10
400839db:	a18200        	sll	a8, a2
400839de:	f430b0        	extui	a3, a11, 0, 16
400839e1:	e225c0        	remu	a2, a5, a12
400839e4:	c255c0        	quou	a5, a5, a12
400839e7:	112200        	slli	a2, a2, 16
400839ea:	f59040        	extui	a9, a4, 16, 16
400839ed:	825350        	mull	a5, a3, a5
400839f0:	202290        	or	a2, a2, a9
400839f3:	09b257        	bgeu	a2, a5, 40083a00 <__umoddi3+0xe0>
400839f6:	22ba      	add.n	a2, a2, a11
400839f8:	0432b7        	bltu	a2, a11, 40083a00 <__umoddi3+0xe0>
400839fb:	01b257        	bgeu	a2, a5, 40083a00 <__umoddi3+0xe0>
400839fe:	22ba      	add.n	a2, a2, a11
40083a00:	c09250        	sub	a9, a2, a5
40083a03:	e229c0        	remu	a2, a9, a12
40083a06:	c299c0        	quou	a9, a9, a12
40083a09:	829390        	mull	a9, a3, a9
40083a0c:	112200        	slli	a2, a2, 16
40083a0f:	f43040        	extui	a3, a4, 0, 16
40083a12:	203230        	or	a3, a2, a3
40083a15:	0bb397        	bgeu	a3, a9, 40083a24 <__umoddi3+0x104>
40083a18:	8033b0        	add	a3, a3, a11
40083a1b:	05b397        	bgeu	a3, a9, 40083a24 <__umoddi3+0x104>
40083a1e:	0233b7        	bltu	a3, a11, 40083a24 <__umoddi3+0x104>
40083a21:	8033b0        	add	a3, a3, a11
40083a24:	c03390        	sub	a3, a3, a9
40083a27:	f540b0        	extui	a4, a11, 16, 16
40083a2a:	e29340        	remu	a9, a3, a4
40083a2d:	f420b0        	extui	a2, a11, 0, 16
40083a30:	c23340        	quou	a3, a3, a4
40083a33:	119900        	slli	a9, a9, 16
40083a36:	f55080        	extui	a5, a8, 16, 16
40083a39:	823230        	mull	a3, a2, a3
40083a3c:	209950        	or	a9, a9, a5
40083a3f:	09b937        	bgeu	a9, a3, 40083a4c <__umoddi3+0x12c>
40083a42:	99ba      	add.n	a9, a9, a11
40083a44:	0439b7        	bltu	a9, a11, 40083a4c <__umoddi3+0x12c>
40083a47:	01b937        	bgeu	a9, a3, 40083a4c <__umoddi3+0x12c>
40083a4a:	99ba      	add.n	a9, a9, a11
40083a4c:	c03930        	sub	a3, a9, a3
40083a4f:	e25340        	remu	a5, a3, a4
40083a52:	c23340        	quou	a3, a3, a4
40083a55:	823230        	mull	a3, a2, a3
40083a58:	f48080        	extui	a8, a8, 0, 16
40083a5b:	112500        	slli	a2, a5, 16
40083a5e:	208280        	or	a8, a2, a8
40083a61:	0bb837        	bgeu	a8, a3, 40083a70 <__umoddi3+0x150>
40083a64:	8088b0        	add	a8, a8, a11
40083a67:	05b837        	bgeu	a8, a3, 40083a70 <__umoddi3+0x150>
40083a6a:	0238b7        	bltu	a8, a11, 40083a70 <__umoddi3+0x150>
40083a6d:	8088b0        	add	a8, a8, a11
40083a70:	c08830        	sub	a8, a8, a3
40083a73:	400a00        	ssr	a10
40083a76:	912080        	srl	a2, a8
40083a79:	030c      	movi.n	a3, 0
40083a7b:	004446        	j	40083b90 <__umoddi3+0x270>
40083a7e:	570000        	lsi	f0, a0, 0x15c
40083a81:	4602b3        	lsi	f11, a2, 0x118
40083a84:	c00042        	l8ui	a4, a0, 192
40083a87:	dc40f5        	call12	4005fe94 <esp32_rom_gpio_matrix_out+0x55f88>
40083a8a:	37dc      	bnez.n	a7, 40083aa1 <__umoddi3+0x181>
40083a8c:	470235        	call12	400caab0 <_iram_text_end+0x46f1e>
40083a8f:	401132        	l16ui	a3, a1, 128
40083a92:	50c082        	addi	a8, a0, 80
40083a95:	92c033        	ssip	f3, a0, 0x248
40083a98:	8701a0        	lsi	f10, a1, 0x21c
40083a9b:	920232        	l8ui	a3, a2, 146
40083a9e:	9000a0        	addx2	a0, a0, a10
40083aa1:	2dc093        	ssip	f9, a0, 180
40083aa4:	3d08      	l32i.n	a0, a13, 12
40083aa6:	4609      	s32i.n	a0, a6, 16
40083aa8:	0039      	s32i.n	a3, a0, 0
40083aaa:	092c      	movi.n	a9, 32
40083aac:	c099c0        	sub	a9, a9, a12
40083aaf:	400900        	ssr	a9
40083ab2:	91a040        	srl	a10, a4
40083ab5:	401c00        	ssl	a12
40083ab8:	a15500        	sll	a5, a5
40083abb:	205a50        	or	a5, a10, a5
40083abe:	400900        	ssr	a9
40083ac1:	91d020        	srl	a13, a2
40083ac4:	400900        	ssr	a9
40083ac7:	91a030        	srl	a10, a3
40083aca:	f5e050        	extui	a14, a5, 16, 16
40083acd:	401c00        	ssl	a12
40083ad0:	a13300        	sll	a3, a3
40083ad3:	20dd30        	or	a13, a13, a3
40083ad6:	e2bae0        	remu	a11, a10, a14
40083ad9:	f43050        	extui	a3, a5, 0, 16
40083adc:	c2aae0        	quou	a10, a10, a14
40083adf:	11bb00        	slli	a11, a11, 16
40083ae2:	f5f0d0        	extui	a15, a13, 16, 16
40083ae5:	8283a0        	mull	a8, a3, a10
40083ae8:	20bbf0        	or	a11, a11, a15
40083aeb:	401c00        	ssl	a12
40083aee:	a14400        	sll	a4, a4
40083af1:	401c00        	ssl	a12
40083af4:	a12200        	sll	a2, a2
40083af7:	15bb87        	bgeu	a11, a8, 40083b10 <__umoddi3+0x1f0>
40083afa:	bb5a      	add.n	a11, a11, a5
40083afc:	fa0b      	addi.n	a15, a10, -1
40083afe:	0c3b57        	bltu	a11, a5, 40083b0e <__umoddi3+0x1ee>
40083b01:	09bb87        	bgeu	a11, a8, 40083b0e <__umoddi3+0x1ee>
40083b04:	fecaa2        	addi	a10, a10, -2
40083b07:	bb5a      	add.n	a11, a11, a5
40083b09:	0000c6        	j	40083b10 <__umoddi3+0x1f0>
40083b0c:	ad0000        	lsi	f0, a0, 0x2b4
40083b0f:	0f          	.byte 0xf
40083b10:	c0bb80        	sub	a11, a11, a8
40083b13:	e28be0        	remu	a8, a11, a14
40083b16:	c2bbe0        	quou	a11, a11, a14
40083b19:	82e3b0        	mull	a14, a3, a11
40083b1c:	118800        	slli	a8, a8, 16
40083b1f:	f430d0        	extui	a3, a13, 0, 16
40083b22:	203830        	or	a3, a8, a3
40083b25:	13b3e7        	bgeu	a3, a14, 40083b3c <__umoddi3+0x21c>
40083b28:	335a      	add.n	a3, a3, a5
40083b2a:	8b0b      	addi.n	a8, a11, -1
40083b2c:	0ab3e7        	bgeu	a3, a14, 40083b3a <__umoddi3+0x21a>
40083b2f:	073357        	bltu	a3, a5, 40083b3a <__umoddi3+0x21a>
40083b32:	fecbb2        	addi	a11, a11, -2
40083b35:	335a      	add.n	a3, a3, a5
40083b37:	000046        	j	40083b3c <__umoddi3+0x21c>
40083b3a:	08bd      	mov.n	a11, a8
40083b3c:	11aa00        	slli	a10, a10, 16
40083b3f:	20aab0        	or	a10, a10, a11
40083b42:	82da40        	mull	a13, a10, a4
40083b45:	a2aa40        	muluh	a10, a10, a4
40083b48:	c033e0        	sub	a3, a3, a14
40083b4b:	0abd      	mov.n	a11, a10
40083b4d:	0d8d      	mov.n	a8, a13
40083b4f:	0533a7        	bltu	a3, a10, 40083b58 <__umoddi3+0x238>
40083b52:	1493a7        	bne	a3, a10, 40083b6a <__umoddi3+0x24a>
40083b55:	11b2d7        	bgeu	a2, a13, 40083b6a <__umoddi3+0x24a>
40083b58:	c04d40        	sub	a4, a13, a4
40083b5b:	c0aa50        	sub	a10, a10, a5
40083b5e:	1b0c      	movi.n	a11, 1
40083b60:	013d47        	bltu	a13, a4, 40083b65 <__umoddi3+0x245>
40083b63:	0b0c      	movi.n	a11, 0
40083b65:	c0bab0        	sub	a11, a10, a11
40083b68:	048d      	mov.n	a8, a4
40083b6a:	c04280        	sub	a4, a2, a8
40083b6d:	c033b0        	sub	a3, a3, a11
40083b70:	150c      	movi.n	a5, 1
40083b72:	023247        	bltu	a2, a4, 40083b78 <__umoddi3+0x258>
40083b75:	00a052        	movi	a5, 0
40083b78:	c03350        	sub	a3, a3, a5
40083b7b:	401900        	ssl	a9
40083b7e:	a18300        	sll	a8, a3
40083b81:	400c00        	ssr	a12
40083b84:	912040        	srl	a2, a4
40083b87:	202820        	or	a2, a8, a2
40083b8a:	400c00        	ssr	a12
40083b8d:	913030        	srl	a3, a3
40083b90:	f01d      	retw.n
