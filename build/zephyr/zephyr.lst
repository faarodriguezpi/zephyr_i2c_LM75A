
zephyr.elf:     file format elf32-xtensa-le


Disassembly of section .iram0.vectors:

40080000 <_WindowOverflow4>:

    .org    0x0
    .global _WindowOverflow4
_WindowOverflow4:

    s32e    a0, a5, -16     /* save a0 to call[j+1]'s stack frame */
40080000:	49c500        	s32e	a0, a5, -16
    s32e    a1, a5, -12     /* save a1 to call[j+1]'s stack frame */
40080003:	49d510        	s32e	a1, a5, -12
    s32e    a2, a5,  -8     /* save a2 to call[j+1]'s stack frame */
40080006:	49e520        	s32e	a2, a5, -8
    s32e    a3, a5,  -4     /* save a3 to call[j+1]'s stack frame */
40080009:	49f530        	s32e	a3, a5, -4
    rfwo                    /* rotates back to call[i] position */
4008000c:	003400        	rfwo
	...

40080040 <_WindowUnderflow4>:

    .org    0x40
    .global _WindowUnderflow4
_WindowUnderflow4:

    l32e    a0, a5, -16     /* restore a0 from call[i+1]'s stack frame */
40080040:	09c500        	l32e	a0, a5, -16
    l32e    a1, a5, -12     /* restore a1 from call[i+1]'s stack frame */
40080043:	09d510        	l32e	a1, a5, -12
    l32e    a2, a5,  -8     /* restore a2 from call[i+1]'s stack frame */
40080046:	09e520        	l32e	a2, a5, -8
    l32e    a3, a5,  -4     /* restore a3 from call[i+1]'s stack frame */
40080049:	09f530        	l32e	a3, a5, -4
    rfwu
4008004c:	003500        	rfwu
	...

40080050 <_xt_alloca_exc>:

    .align  4
    .global _xt_alloca_exc
_xt_alloca_exc:

    rsr     a0, WINDOWBASE  /* grab WINDOWBASE before rotw changes it */
40080050:	034800        	rsr.windowbase	a0
    rotw    -1      /* WINDOWBASE goes to a4, new a0-a3 are scratch */
40080053:	4080f0        	rotw	-1
    rsr     a2, PS
40080056:	03e620        	rsr.ps	a2
    extui   a3, a2, XCHAL_PS_OWB_SHIFT, XCHAL_PS_OWB_BITS
40080059:	343820        	extui	a3, a2, 8, 4
    xor     a3, a3, a4    /* bits changed from old to current windowbase */
4008005c:	303340        	xor	a3, a3, a4
    rsr     a4, EXCSAVE_1   /* restore original a0 (now in a4) */
4008005f:	03d140        	rsr.excsave1	a4
    slli    a3, a3, XCHAL_PS_OWB_SHIFT
40080062:	113380        	slli	a3, a3, 8
    xor     a2, a2, a3      /* flip changed bits in old window base */
40080065:	302230        	xor	a2, a2, a3
    wsr     a2, PS          /* update PS.OWB to new window base */
40080068:	13e620        	wsr.ps	a2
    rsync
4008006b:	002010        	rsync

    _bbci.l a4, 31, _WindowUnderflow4
4008006e:	ce74f7        	bbci	a4, 31, 40080040 <_WindowUnderflow4>
    rotw    -1              /* original a0 goes to a8 */
40080071:	4080f0        	rotw	-1
    _bbci.l a8, 30, _WindowUnderflow8
40080074:	4878e7        	bbci	a8, 30, 400800c0 <_WindowUnderflow8>
    rotw    -1
40080077:	4080f0        	rotw	-1
    j               _WindowUnderflow12
4008007a:	003086        	j	40080140 <_WindowUnderflow12>
4008007d:	000000        	ill

40080080 <_WindowOverflow8>:

    .org    0x80
    .global _WindowOverflow8
_WindowOverflow8:

    s32e    a0, a9, -16     /* save a0 to call[j+1]'s stack frame */
40080080:	49c900        	s32e	a0, a9, -16
    l32e    a0, a1, -12     /* a0 <- call[j-1]'s sp
40080083:	09d100        	l32e	a0, a1, -12
                               (used to find end of call[j]'s frame) */
    s32e    a1, a9, -12     /* save a1 to call[j+1]'s stack frame */
40080086:	49d910        	s32e	a1, a9, -12
    s32e    a2, a9,  -8     /* save a2 to call[j+1]'s stack frame */
40080089:	49e920        	s32e	a2, a9, -8
    s32e    a3, a9,  -4     /* save a3 to call[j+1]'s stack frame */
4008008c:	49f930        	s32e	a3, a9, -4
    s32e    a4, a0, -32     /* save a4 to call[j]'s stack frame */
4008008f:	498040        	s32e	a4, a0, -32
    s32e    a5, a0, -28     /* save a5 to call[j]'s stack frame */
40080092:	499050        	s32e	a5, a0, -28
    s32e    a6, a0, -24     /* save a6 to call[j]'s stack frame */
40080095:	49a060        	s32e	a6, a0, -24
    s32e    a7, a0, -20     /* save a7 to call[j]'s stack frame */
40080098:	49b070        	s32e	a7, a0, -20
    rfwo                    /* rotates back to call[i] position */
4008009b:	003400        	rfwo
	...

400800c0 <_WindowUnderflow8>:

    .org    0xC0
    .global _WindowUnderflow8
_WindowUnderflow8:

    l32e    a0, a9, -16     /* restore a0 from call[i+1]'s stack frame */
400800c0:	09c900        	l32e	a0, a9, -16
    l32e    a1, a9, -12     /* restore a1 from call[i+1]'s stack frame */
400800c3:	09d910        	l32e	a1, a9, -12
    l32e    a2, a9,  -8     /* restore a2 from call[i+1]'s stack frame */
400800c6:	09e920        	l32e	a2, a9, -8
    l32e    a7, a1, -12     /* a7 <- call[i-1]'s sp
400800c9:	09d170        	l32e	a7, a1, -12
                               (used to find end of call[i]'s frame) */
    l32e    a3, a9,  -4     /* restore a3 from call[i+1]'s stack frame */
400800cc:	09f930        	l32e	a3, a9, -4
    l32e    a4, a7, -32     /* restore a4 from call[i]'s stack frame */
400800cf:	098740        	l32e	a4, a7, -32
    l32e    a5, a7, -28     /* restore a5 from call[i]'s stack frame */
400800d2:	099750        	l32e	a5, a7, -28
    l32e    a6, a7, -24     /* restore a6 from call[i]'s stack frame */
400800d5:	09a760        	l32e	a6, a7, -24
    l32e    a7, a7, -20     /* restore a7 from call[i]'s stack frame */
400800d8:	09b770        	l32e	a7, a7, -20
    rfwu
400800db:	003500        	rfwu
	...

40080100 <_WindowOverflow12>:

    .org    0x100
    .global _WindowOverflow12
_WindowOverflow12:

    s32e    a0,  a13, -16   /* save a0 to call[j+1]'s stack frame */
40080100:	49cd00        	s32e	a0, a13, -16
    l32e    a0,  a1,  -12   /* a0 <- call[j-1]'s sp
40080103:	09d100        	l32e	a0, a1, -12
                               (used to find end of call[j]'s frame) */
    s32e    a1,  a13, -12   /* save a1 to call[j+1]'s stack frame */
40080106:	49dd10        	s32e	a1, a13, -12
    s32e    a2,  a13,  -8   /* save a2 to call[j+1]'s stack frame */
40080109:	49ed20        	s32e	a2, a13, -8
    s32e    a3,  a13,  -4   /* save a3 to call[j+1]'s stack frame */
4008010c:	49fd30        	s32e	a3, a13, -4
    s32e    a4,  a0,  -48   /* save a4 to end of call[j]'s stack frame */
4008010f:	494040        	s32e	a4, a0, -48
    s32e    a5,  a0,  -44   /* save a5 to end of call[j]'s stack frame */
40080112:	495050        	s32e	a5, a0, -44
    s32e    a6,  a0,  -40   /* save a6 to end of call[j]'s stack frame */
40080115:	496060        	s32e	a6, a0, -40
    s32e    a7,  a0,  -36   /* save a7 to end of call[j]'s stack frame */
40080118:	497070        	s32e	a7, a0, -36
    s32e    a8,  a0,  -32   /* save a8 to end of call[j]'s stack frame */
4008011b:	498080        	s32e	a8, a0, -32
    s32e    a9,  a0,  -28   /* save a9 to end of call[j]'s stack frame */
4008011e:	499090        	s32e	a9, a0, -28
    s32e    a10, a0,  -24   /* save a10 to end of call[j]'s stack frame */
40080121:	49a0a0        	s32e	a10, a0, -24
    s32e    a11, a0,  -20   /* save a11 to end of call[j]'s stack frame */
40080124:	49b0b0        	s32e	a11, a0, -20
    rfwo                    /* rotates back to call[i] position */
40080127:	003400        	rfwo
	...

40080140 <_WindowUnderflow12>:

    .org 0x140
    .global _WindowUnderflow12
_WindowUnderflow12:

    l32e    a0,  a13, -16 /* restore a0 from call[i+1]'s stack frame */
40080140:	09cd00        	l32e	a0, a13, -16
    l32e    a1,  a13, -12 /* restore a1 from call[i+1]'s stack frame */
40080143:	09dd10        	l32e	a1, a13, -12
    l32e    a2,  a13,  -8 /* restore a2 from call[i+1]'s stack frame */
40080146:	09ed20        	l32e	a2, a13, -8
    l32e    a11, a1,  -12 /* a11 <- call[i-1]'s sp
40080149:	09d1b0        	l32e	a11, a1, -12
                           * (used to find end of call[i]'s frame) */
    l32e    a3,  a13,  -4 /* restore a3 from call[i+1]'s stack frame */
4008014c:	09fd30        	l32e	a3, a13, -4
    l32e    a4,  a11, -48 /* restore a4 from end of call[i]'s stack frame */
4008014f:	094b40        	l32e	a4, a11, -48
    l32e    a5,  a11, -44 /* restore a5 from end of call[i]'s stack frame */
40080152:	095b50        	l32e	a5, a11, -44
    l32e    a6,  a11, -40 /* restore a6 from end of call[i]'s stack frame */
40080155:	096b60        	l32e	a6, a11, -40
    l32e    a7,  a11, -36 /* restore a7 from end of call[i]'s stack frame */
40080158:	097b70        	l32e	a7, a11, -36
    l32e    a8,  a11, -32 /* restore a8 from end of call[i]'s stack frame */
4008015b:	098b80        	l32e	a8, a11, -32
    l32e    a9,  a11, -28 /* restore a9 from end of call[i]'s stack frame */
4008015e:	099b90        	l32e	a9, a11, -28
    l32e    a10, a11, -24 /* restore a10 from end of call[i]'s stack
40080161:	09aba0        	l32e	a10, a11, -24
    		       * frame */
    l32e    a11, a11, -20   /* restore a11 from end of call[i]'s stack
40080164:	09bbb0        	l32e	a11, a11, -20
    			 * frame */
    rfwu
40080167:	003500        	rfwu
	...

40080180 <_Level2Vector>:
 */

DEF_EXCINT 1, _handle_excint, xtensa_excint1_c

#if XCHAL_NMILEVEL >= 2
DEF_EXCINT 2, _handle_excint, xtensa_int2_c
40080180:	c4c112        	addi	a1, a1, -60
40080183:	7109      	s32i.n	a0, a1, 28
40080185:	9129      	s32i.n	a2, a1, 36
40080187:	a139      	s32i.n	a3, a1, 40
40080189:	03c200        	rsr.eps2	a0
4008018c:	5109      	s32i.n	a0, a1, 20
4008018e:	03b200        	rsr.epc2	a0
40080191:	6109      	s32i.n	a0, a1, 24
40080193:	000246        	j	400801a0 <_after_imms2>
	...

40080198 <_handle_excint_imm2>:
40080198:	0816c0        	lsx	f1, a6, a12
4008019b:	40          	.byte 0x40

4008019c <_c_handler_imm2>:
4008019c:	17fc      	bnez.n	a7, 400801d1 <_Level3Vector+0x11>
4008019e:	4008      	l32i.n	a0, a0, 16

400801a0 <_after_imms2>:
400801a0:	ffff21        	l32r	a2, 4008019c <_c_handler_imm2>
400801a3:	fffd01        	l32r	a0, 40080198 <_handle_excint_imm2>
400801a6:	0000a0        	jx	a0
	...

400801c0 <_Level3Vector>:
#endif

#if XCHAL_NMILEVEL >= 3
DEF_EXCINT 3, _handle_excint, xtensa_int3_c
400801c0:	c4c112        	addi	a1, a1, -60
400801c3:	7109      	s32i.n	a0, a1, 28
400801c5:	9129      	s32i.n	a2, a1, 36
400801c7:	a139      	s32i.n	a3, a1, 40
400801c9:	03c300        	rsr.eps3	a0
400801cc:	5109      	s32i.n	a0, a1, 20
400801ce:	03b300        	rsr.epc3	a0
400801d1:	6109      	s32i.n	a0, a1, 24
400801d3:	000146        	j	400801dc <_after_imms3>
	...

400801d8 <_c_handler_imm3>:
400801d8:	081850        	lsx	f1, a8, a5
400801db:	40          	.byte 0x40

400801dc <_after_imms3>:
400801dc:	ffff21        	l32r	a2, 400801d8 <_c_handler_imm3>
400801df:	ffee01        	l32r	a0, 40080198 <_handle_excint_imm2>
400801e2:	0000a0        	jx	a0
	...

40080200 <_Level4Vector>:
#endif

#if XCHAL_NMILEVEL >= 4
DEF_EXCINT 4, _handle_excint, xtensa_int4_c
40080200:	c4c112        	addi	a1, a1, -60
40080203:	7109      	s32i.n	a0, a1, 28
40080205:	9129      	s32i.n	a2, a1, 36
40080207:	a139      	s32i.n	a3, a1, 40
40080209:	03c400        	rsr.eps4	a0
4008020c:	5109      	s32i.n	a0, a1, 20
4008020e:	03b400        	rsr.epc4	a0
40080211:	6109      	s32i.n	a0, a1, 24
40080213:	000146        	j	4008021c <_after_imms4>
	...

40080218 <_c_handler_imm4>:
40080218:	18cc      	bnez.n	a8, 4008021d <_after_imms4+0x1>
4008021a:	4008      	l32i.n	a0, a0, 16

4008021c <_after_imms4>:
4008021c:	ffff21        	l32r	a2, 40080218 <_c_handler_imm4>
4008021f:	ffde01        	l32r	a0, 40080198 <_handle_excint_imm2>
40080222:	0000a0        	jx	a0
	...

40080240 <_Level5Vector>:
#endif

#if XCHAL_NMILEVEL >= 5
DEF_EXCINT 5, _handle_excint, xtensa_int5_c
40080240:	c4c112        	addi	a1, a1, -60
40080243:	7109      	s32i.n	a0, a1, 28
40080245:	9129      	s32i.n	a2, a1, 36
40080247:	a139      	s32i.n	a3, a1, 40
40080249:	03c500        	rsr.eps5	a0
4008024c:	5109      	s32i.n	a0, a1, 20
4008024e:	03b500        	rsr.epc5	a0
40080251:	6109      	s32i.n	a0, a1, 24
40080253:	000146        	j	4008025c <_after_imms5>
	...

40080258 <_c_handler_imm5>:
40080258:	081930        	lsx	f1, a9, a3
4008025b:	40          	.byte 0x40

4008025c <_after_imms5>:
4008025c:	ffff21        	l32r	a2, 40080258 <_c_handler_imm5>
4008025f:	ffce01        	l32r	a0, 40080198 <_handle_excint_imm2>
40080262:	0000a0        	jx	a0
	...

40080280 <_Level6Vector>:
#endif

#if XCHAL_NMILEVEL >= 6
DEF_EXCINT 6, _handle_excint, xtensa_int6_c
40080280:	c4c112        	addi	a1, a1, -60
40080283:	7109      	s32i.n	a0, a1, 28
40080285:	9129      	s32i.n	a2, a1, 36
40080287:	a139      	s32i.n	a3, a1, 40
40080289:	03c600        	rsr.eps6	a0
4008028c:	5109      	s32i.n	a0, a1, 20
4008028e:	03b600        	rsr.epc6	a0
40080291:	6109      	s32i.n	a0, a1, 24
40080293:	000146        	j	4008029c <_after_imms6>
	...

40080298 <_c_handler_imm6>:
40080298:	1988      	l32i.n	a8, a9, 4
4008029a:	4008      	l32i.n	a0, a0, 16

4008029c <_after_imms6>:
4008029c:	ffff21        	l32r	a2, 40080298 <_c_handler_imm6>
4008029f:	ffbe01        	l32r	a0, 40080198 <_handle_excint_imm2>
400802a2:	0000a0        	jx	a0
	...

400802c0 <_Level7Vector>:
#endif

#if XCHAL_NMILEVEL >= 7
DEF_EXCINT 7, _handle_excint, xtensa_int7_c
400802c0:	c4c112        	addi	a1, a1, -60
400802c3:	7109      	s32i.n	a0, a1, 28
400802c5:	9129      	s32i.n	a2, a1, 36
400802c7:	a139      	s32i.n	a3, a1, 40
400802c9:	03c700        	rsr.eps7	a0
400802cc:	5109      	s32i.n	a0, a1, 20
400802ce:	03b700        	rsr.epc7	a0
400802d1:	6109      	s32i.n	a0, a1, 24
400802d3:	000146        	j	400802dc <_after_imms7>
	...

400802d8 <_c_handler_imm7>:
400802d8:	0819a0        	lsx	f1, a9, a10
400802db:	40          	.byte 0x40

400802dc <_after_imms7>:
400802dc:	ffff21        	l32r	a2, 400802d8 <_c_handler_imm7>
400802df:	ffae01        	l32r	a0, 40080198 <_handle_excint_imm2>
400802e2:	0000a0        	jx	a0
	...

40080300 <_KernelExceptionVector>:
 * out of simple caution in case app code clears the UM bit by mistake.
 */
.pushsection .KernelExceptionVector.text, "ax"
.global _KernelExceptionVector
_KernelExceptionVector:
	j _Level1Vector
40080300:	015106        	j	40080848 <_Level1Vector>
	...

40080340 <_Level1RealVector>:
	wsr.excsave1 a0
40080340:	13d100        	wsr.excsave1	a0
	rsr.exccause a0
40080343:	03e800        	rsr.exccause	a0
	bnei a0, EXCCAUSE_ALLOCA, _not_alloca
40080346:	025066        	bnei	a0, 5, 4008034c <_not_alloca>
	j _xt_alloca_exc
40080349:	ff40c6        	j	40080050 <_xt_alloca_exc>

4008034c <_not_alloca>:
	rsr.excsave1 a0
4008034c:	03d100        	rsr.excsave1	a0
	j _Level1Vector
4008034f:	013d46        	j	40080848 <_Level1Vector>
	...

400803c0 <_DoubleExceptionVector>:
.pushsection .DoubleExceptionVector.text, "ax"
.global _DoubleExceptionVector
_DoubleExceptionVector:
#if XCHAL_HAVE_DEBUG
/* Signals an unhandled double exception */
1:	break	1, 4
400803c0:	004140        	break	1, 4
#else
1:
#endif
	j	1b
400803c3:	fffe46        	j	400803c0 <_DoubleExceptionVector>
	...

Disassembly of section text:

40080548 <__start-0x29c>:
40080548:	080000        	lsx	f0, a0, a0
4008054b:	080040        	lsx	f0, a0, a4
4008054e:	3ffb      	addi.n	a3, a15, 15
40080550:	fb0530        	f64addc	a3, a5, 0, 0
40080553:	3f          	.byte 0x3f
40080554:	808c      	beqz.n	a0, 40080560 <_iram_text_start+0x18>
40080556:	483ff4        	mula.da.ll.ldinc	m3, a15, m0, a15
40080559:	3ff5f0        	f64cmph	a15, a5, a15, 3
4008055c:	ff          	.byte 0xff
4008055d:	bf          	.byte 0xbf
4008055e:	ff          	.byte 0xff
4008055f:	ff          	.byte 0xff
40080560:	040023        	lsi	f2, a0, 16
40080563:	003000        	rfe
40080566:	b43ff0        	extui	a3, a15, 15, 12
40080569:	3ffb07        	bbsi	a11, 16, 400805ac <_iram_text_start+0x64>
4008056c:	fb0244        	lsi	f4, a2, 0x3ec
4008056f:	3f          	.byte 0x3f
40080570:	024a      	add.n	a0, a2, a4
40080572:	3ffb      	addi.n	a3, a15, 15
40080574:	0269      	s32i.n	a6, a2, 0
40080576:	3ffb      	addi.n	a3, a15, 15
40080578:	7f          	.byte 0x7f
40080579:	3ffb02        	s32ri	a0, a11, 252
4008057c:	02a8      	l32i.n	a10, a2, 0
4008057e:	3ffb      	addi.n	a3, a15, 15
40080580:	fb02d5        	call4	4007b5b0 <esp32_rom_gpio_matrix_out+0x716a4>
40080583:	3f          	.byte 0x3f
40080584:	ff          	.byte 0xff
40080585:	3ffb02        	s32ri	a0, a11, 252
40080588:	fb0326        	beqi	a3, -1, 40080587 <_iram_text_start+0x3f>
4008058b:	3f          	.byte 0x3f
4008058c:	0369      	s32i.n	a6, a3, 0
4008058e:	3ffb      	addi.n	a3, a15, 15
40080590:	0379      	s32i.n	a7, a3, 0
40080592:	3ffb      	addi.n	a3, a15, 15
40080594:	fb0385        	call0	4007b5d0 <esp32_rom_gpio_matrix_out+0x716c4>
40080597:	3f          	.byte 0x3f
40080598:	000000        	ill
4008059b:	3e          	.byte 0x3e
4008059c:	9e          	.byte 0x9e
4008059d:	3ffb03        	lsi	f0, a11, 252
400805a0:	0009c4        	lsi	f12, a9, 0
400805a3:	03ba00        	lsi	f0, a10, 12
400805a6:	3ffb      	addi.n	a3, a15, 15
400805a8:	0088      	l32i.n	a8, a0, 0
400805aa:	3ffb      	addi.n	a3, a15, 15
400805ac:	0abc      	beqz.n	a10, 400805e0 <_iram_text_start+0x98>
400805ae:	4008      	l32i.n	a0, a0, 16
400805b0:	ff          	.byte 0xff
400805b1:	7f          	.byte 0x7f
400805b2:	ff0000        	f64cmph	a0, a0, a0, 15
400805b5:	ff          	.byte 0xff
400805b6:	000003        	lsi	f0, a0, 0
400805b9:	000000        	ill
400805bc:	009200        	all4	b0, b0:b1:b2:b3
400805bf:	03cb40        	lsi	f4, a11, 12
400805c2:	3ffb      	addi.n	a3, a15, 15
400805c4:	0778      	l32i.n	a7, a7, 0
400805c6:	3ffb      	addi.n	a3, a15, 15
400805c8:	081090        	lsx	f1, a0, a9
400805cb:	014040        	slli	a4, a0, 28
400805ce:	3ffb      	addi.n	a3, a15, 15
400805d0:	f48070        	extui	a8, a7, 0, 16
400805d3:	3f          	.byte 0x3f
400805d4:	0138      	l32i.n	a3, a1, 0
400805d6:	3ffb      	addi.n	a3, a15, 15
400805d8:	c4b400        	extui	a11, a0, 4, 13
400805db:	600004        	lsi	f0, a0, 0x180
400805de:	043ff6        	bgeui	a15, 3, 400805e6 <_iram_text_start+0x9e>
400805e1:	3ff660        	f64cmph	a15, a6, a6, 3
400805e4:	ff          	.byte 0xff
400805e5:	ff          	.byte 0xff
400805e6:	ff          	.byte 0xff
400805e7:	8000e7        	bnone	a0, a14, 4008056b <_iram_text_start+0x23>
400805ea:	bf3ff4        	lsi	f15, a15, 0x2fc
400805ed:	fbfa      	add.n	a15, a11, a15
400805ef:	ff          	.byte 0xff
400805f0:	807c      	movi.n	a0, -8
400805f2:	ff3ff4        	lsi	f15, a15, 0x3fc
400805f5:	ffffc7        	bbsi	a15, 28, 400805f8 <_iram_text_start+0xb0>
400805f8:	002000        	isync
400805fb:	03d600        	rsr.excsave6	a0
400805fe:	3ffb      	addi.n	a3, a15, 15
40080600:	003c      	movi.n	a0, 48
40080602:	003ff0        	lsi	f15, a15, 0
40080605:	080000        	lsx	f0, a0, a0
40080608:	6008      	l32i.n	a0, a0, 24
4008060a:	783ff6        	bgeui	a15, 3, 40080686 <_iram_text_start+0x13e>
4008060d:	400092        	l8ui	a9, a0, 64
40080610:	0041a4        	lsi	f10, a1, 0
40080613:	040140        	extui	a0, a4, 1, 1
40080616:	3ffb      	addi.n	a3, a15, 15
40080618:	f49000        	extui	a9, a0, 0, 16
4008061b:	3f          	.byte 0x3f
4008061c:	000800        	lsi	f0, a8, 0
4008061f:	700000        	lsi	f0, a0, 0x1c0
40080622:	f40000        	extui	a0, a0, 0, 16
40080625:	3ffb03        	lsi	f0, a11, 252
40080628:	f44000        	extui	a4, a0, 0, 16
4008062b:	3f          	.byte 0x3f
4008062c:	077c      	movi.n	a7, -16
4008062e:	3ffb      	addi.n	a3, a15, 15
40080630:	7619f1        	l32r	a15, 4005de94 <esp32_rom_gpio_matrix_out+0x53f88>
40080633:	5dc005        	call0	400de234 <_iram_text_end+0x5a712>
40080636:	000000        	ill
40080639:	000080        	ret
4008063c:	bb0b      	addi.n	a11, a11, -1
4008063e:	bf0002        	l8ui	a0, a0, 191
40080641:	005d      	mov.n	a5, a0
40080643:	16bb00        	lsi	f0, a11, 88
40080646:	4008      	l32i.n	a0, a0, 16
40080648:	080e30        	lsx	f0, a14, a3
4008064b:	002040        	lsi	f4, a0, 0
4008064e:	000005        	call0	40080650 <_iram_text_start+0x108>
40080651:	000800        	lsi	f0, a8, 0
40080654:	100000        	and	a0, a0, a0
40080657:	000000        	ill
4008065a:	480020        	ssx	f0, a0, a2
4008065d:	400804        	lsi	f0, a8, 0x100
40080660:	400000        	ssr	a0
40080663:	000000        	ill
40080666:	000080        	ret
40080669:	200000        	or	a0, a0, a0
4008066c:	408800        	lsi	f0, a8, 0x100
4008066f:	000000        	ill
40080672:	000100        	lsi	f0, a1, 0
40080675:	020000        	andb	b0, b0, b0
40080678:	000000        	ill
4008067b:	000010        	lsi	f1, a0, 0
4008067e:	004000        	break	0, 0
40080681:	030000        	rsr.lbeg	a0
40080684:	010000        	slli	a0, a0, 32
40080687:	000000        	ill
4008068a:	000400        	lsi	f0, a4, 0
4008068d:	800000        	add	a0, a0, a0
40080690:	004000        	break	0, 0
40080693:	100000        	and	a0, a0, a0
40080696:	000000        	ill
40080699:	000200        	lsi	f0, a2, 0
4008069c:	040000        	extui	a0, a0, 0, 1
4008069f:	300000        	xor	a0, a0, a0
400806a2:	9c0000        	lsi	f0, a0, 0x270
400806a5:	3ffb00        	f64cmph	a15, a11, a0, 3
400806a8:	060000        	lsi	f0, a0, 24
400806ab:	102200        	and	a2, a2, a0
400806ae:	0ffd      	mov.n	a15, a15
400806b0:	7f          	.byte 0x7f
400806b1:	fc1c      	movi.n	a12, 31
400806b3:	ff          	.byte 0xff
400806b4:	fb0050        	f64addc	a5, a0, 0, 0
400806b7:	3f          	.byte 0x3f
400806b8:	fb0040        	f64addc	a4, a0, 0, 0
400806bb:	3f          	.byte 0x3f
400806bc:	03fa      	add.n	a0, a3, a15
400806be:	3ffb      	addi.n	a3, a15, 15
400806c0:	07fc      	bnez.n	a7, 400806f4 <_iram_text_start+0x1ac>
400806c2:	3ffb      	addi.n	a3, a15, 15
400806c4:	681c      	movi.n	a8, 22
400806c6:	2c4000        	lsi	f0, a0, 176
400806c9:	3ff530        	f64cmph	a15, a5, a3, 3
400806cc:	f53024        	lsi	f2, a0, 0x3d4
400806cf:	3f          	.byte 0x3f
400806d0:	3018      	l32i.n	a1, a0, 12
400806d2:	ff3ff5        	call12	4007fad0 <esp32_rom_gpio_matrix_out+0x75bc4>
400806d5:	cf          	.byte 0xcf
400806d6:	ff          	.byte 0xff
400806d7:	ff          	.byte 0xff
400806d8:	301c      	movi.n	a0, 19
400806da:	336001        	l32r	a0, 4004d45c <esp32_rom_gpio_matrix_out+0x43550>
400806dd:	3ffb04        	lsi	f0, a11, 252
400806e0:	043a      	add.n	a0, a4, a3
400806e2:	3ffb      	addi.n	a3, a15, 15
400806e4:	000a16        	beqz	a10, 400806e8 <_iram_text_start+0x1a0>
400806e7:	9f0c00        	f64cmph	a0, a12, a0, 9
400806ea:	dc4000        	lsi	f0, a0, 0x370
400806ed:	9e          	.byte 0x9e
400806ee:	104000        	and	a4, a0, a0
400806f1:	3ff530        	f64cmph	a15, a5, a3, 3
400806f4:	f53004        	lsi	f0, a0, 0x3d4
400806f7:	3f          	.byte 0x3f
400806f8:	ff          	.byte 0xff
400806f9:	fffff7        	bbsi	a15, 31, 400806fc <_iram_text_start+0x1b4>
400806fc:	017c      	movi.n	a1, -16
400806fe:	3ffb      	addi.n	a3, a15, 15
40080700:	f53000        	extui	a3, a0, 16, 16
40080703:	3f          	.byte 0x3f
40080704:	3038      	l32i.n	a3, a0, 12
40080706:	403ff5        	call12	400c0b04 <_iram_text_end+0x3cfe2>
40080709:	3ff530        	f64cmph	a15, a5, a3, 3
4008070c:	f53044        	lsi	f4, a0, 0x3d4
4008070f:	3f          	.byte 0x3f
40080710:	3048      	l32i.n	a4, a0, 12
40080712:	4c3ff5        	call12	400ccb10 <_iram_text_end+0x48fee>
40080715:	3ff530        	f64cmph	a15, a5, a3, 3
40080718:	f53030        	extui	a3, a3, 16, 16
4008071b:	3f          	.byte 0x3f
4008071c:	f53034        	lsi	f3, a0, 0x3d4
4008071f:	3f          	.byte 0x3f
40080720:	300c      	movi.n	a0, 3
40080722:	403ff5        	call12	400c0b20 <_iram_text_end+0x3cffe>
40080725:	030d      	mov.n	a0, a3
40080727:	302800        	xor	a2, a8, a0
4008072a:	e83ff5        	call12	40068b28 <esp32_rom_gpio_matrix_out+0x5ec1c>
4008072d:	000003        	lsi	f0, a0, 0
40080730:	f53020        	extui	a3, a2, 16, 16
40080733:	3f          	.byte 0x3f
40080734:	0f4240        	f64cmph	a4, a2, a4, 0
40080737:	86a000        	lsi	f0, a0, 0x218
4008073a:	800001        	l32r	a0, 4006073c <esp32_rom_gpio_matrix_out+0x56830>
4008073d:	061a      	add.n	a0, a6, a1
4008073f:	e14000        	lsi	f0, a0, 0x384
40080742:	400033        	lsi	f3, a0, 0x100
40080745:	4c4b      	addi.n	a4, a12, 4
40080747:	300800        	xor	a0, a8, a0
4008074a:	ff3ff5        	call12	4007fb48 <esp32_rom_gpio_matrix_out+0x75c3c>
4008074d:	ff          	.byte 0xff
4008074e:	ff          	.byte 0xff
4008074f:	ff          	.byte 0xff
40080750:	3058      	l32i.n	a5, a0, 12
40080752:	003ff5        	call12	40080b50 <z_vprintk+0x70>
40080755:	0018      	l32i.n	a1, a0, 0
40080757:	140100        	extui	a0, a0, 1, 2
4008075a:	010000        	slli	a0, a0, 32
4008075d:	080000        	lsx	f0, a0, a0
40080760:	800101        	l32r	a0, 40060764 <esp32_rom_gpio_matrix_out+0x56858>
40080763:	023000        	andb	b3, b0, b0
40080766:	3ffb      	addi.n	a3, a15, 15
40080768:	fb0000        	f64addc	a0, a0, 0, 0
4008076b:	3f          	.byte 0x3f
4008076c:	fb0070        	f64addc	a7, a0, 0, 0
4008076f:	3f          	.byte 0x3f
40080770:	07fd      	mov.n	a15, a7
40080772:	3ffb      	addi.n	a3, a15, 15
40080774:	0368      	l32i.n	a6, a3, 0
40080776:	3ffb      	addi.n	a3, a15, 15
40080778:	fb0441        	l32r	a4, 4007f388 <esp32_rom_gpio_matrix_out+0x7547c>
4008077b:	3f          	.byte 0x3f
4008077c:	045d      	mov.n	a5, a4
4008077e:	3ffb      	addi.n	a3, a15, 15
40080780:	fb06b0        	f64addc	a11, a6, 0, 0
40080783:	3f          	.byte 0x3f
40080784:	263c      	movi.n	a6, 50
40080786:	4008      	l32i.n	a0, a0, 16
40080788:	fb1000        	f64addc	a0, a0, 0, 1
4008078b:	3f          	.byte 0x3f
4008078c:	fb0484        	lsi	f8, a4, 0x3ec
4008078f:	3f          	.byte 0x3f
40080790:	0832e0        	lsx	f3, a2, a14
40080793:	080040        	lsx	f0, a0, a4
40080796:	3ffb      	addi.n	a3, a15, 15
40080798:	fb0530        	f64addc	a3, a5, 0, 0
4008079b:	3f          	.byte 0x3f
4008079c:	fb2000        	f64addc	a0, a0, 1, 0
4008079f:	3f          	.byte 0x3f
400807a0:	fb0c00        	f64addc	a0, a12, 0, 0
400807a3:	3f          	.byte 0x3f
400807a4:	fb05f0        	f64addc	a15, a5, 0, 0
400807a7:	3f          	.byte 0x3f
400807a8:	fb2800        	f64addc	a0, a8, 1, 0
400807ab:	3f          	.byte 0x3f
400807ac:	fb07e4        	lsi	f14, a7, 0x3ec
400807af:	3f          	.byte 0x3f
400807b0:	fb07b0        	f64addc	a11, a7, 0, 0
400807b3:	3f          	.byte 0x3f
400807b4:	07ac      	beqz.n	a7, 400807d8 <_iram_text_start+0x290>
400807b6:	3ffb      	addi.n	a3, a15, 15
400807b8:	fb07f0        	f64addc	a15, a7, 0, 0
400807bb:	3f          	.byte 0x3f
400807bc:	fe          	.byte 0xfe
400807bd:	3ffb07        	bbsi	a11, 16, 40080800 <__start+0x1c>
400807c0:	29ac      	beqz.n	a9, 400807e6 <__start+0x2>
400807c2:	4008      	l32i.n	a0, a0, 16
400807c4:	000a      	add.n	a0, a0, a0
400807c6:	fe0000        	f64iter	a0, a0, a0, 3, 1
400807c9:	3ffb07        	bbsi	a11, 16, 4008080c <__start+0x28>
400807cc:	fb0074        	lsi	f7, a0, 0x3ec
400807cf:	3f          	.byte 0x3f
400807d0:	07f8      	l32i.n	a15, a7, 0
400807d2:	3ffb      	addi.n	a3, a15, 15
400807d4:	010c      	movi.n	a1, 0
400807d6:	3ffb      	addi.n	a3, a15, 15
400807d8:	ff          	.byte 0xff
400807d9:	ff          	.byte 0xff
400807da:	ff          	.byte 0xff
400807db:	7f          	.byte 0x7f
400807dc:	fb0770        	f64addc	a7, a7, 0, 0
400807df:	3f          	.byte 0x3f
400807e0:	fb0074        	lsi	f7, a0, 0x3ec
400807e3:	3f          	.byte 0x3f

400807e4 <__start>:
 * This is written in C rather than assembly since, during the port bring up,
 * Zephyr is being booted by the Espressif bootloader.  With it, the C stack
 * is already set up.
 */
void __attribute__((section(".iram1"))) __start(void)
{
400807e4:	004136        	entry	a1, 32
	extern uint32_t _init_start;
	extern uint32_t _bss_start;
	extern uint32_t _bss_end;

	/* Move the exception vector table to IRAM. */
	__asm__ __volatile__ (
400807e7:	ff5881        	l32r	a8, 40080548 <_iram_text_start>
400807ea:	13e780        	wsr.vecbase	a8
		:
		: "r"(&_init_start));

	/* Zero out BSS.  Clobber _bss_start to avoid memset() elision. */
	(void)memset(&_bss_start, 0,
		     (&_bss_end - &_bss_start) * sizeof(_bss_start));
400807ed:	ff58a1        	l32r	a10, 40080550 <_iram_text_start+0x8>
	(void)memset(&_bss_start, 0,
400807f0:	ff57c1        	l32r	a12, 4008054c <_iram_text_start+0x4>
400807f3:	00a0b2        	movi	a11, 0
400807f6:	c0cca0        	sub	a12, a12, a10
400807f9:	02bb25        	call8	400833ac <memset>
		: "memory");

	/* The watchdog timer is enabled in the bootloader.  We're done booting,
	 * so disable it.
	 */
	*wdt_rtc_reg &= ~RTC_CNTL_WDT_FLASHBOOT_MOD_EN;
400807fc:	ff5691        	l32r	a9, 40080554 <_iram_text_start+0xc>
400807ff:	ffaba2        	movi	a10, 0xfffffbff
40080802:	0020c0        	memw
40080805:	002982        	l32i	a8, a9, 0
40080808:	1088a0        	and	a8, a8, a10
4008080b:	0020c0        	memw
4008080e:	0989      	s32i.n	a8, a9, 0
	*wdt_timg_reg &= ~TIMG_WDT_FLASHBOOT_MOD_EN;
40080810:	ff5291        	l32r	a9, 40080558 <_iram_text_start+0x10>
40080813:	ff52a1        	l32r	a10, 4008055c <_iram_text_start+0x14>
40080816:	0020c0        	memw
40080819:	0988      	l32i.n	a8, a9, 0
4008081b:	1088a0        	and	a8, a8, a10
4008081e:	0020c0        	memw
40080821:	0989      	s32i.n	a8, a9, 0

	/* Disable normal interrupts. */
	__asm__ __volatile__ (
40080823:	ff4f81        	l32r	a8, 40080560 <_iram_text_start+0x18>
40080826:	13e680        	wsr.ps	a8
		"wsr %0, PS"
		:
		: "r"(PS_INTLEVEL(XCHAL_EXCM_LEVEL) | PS_UM | PS_WOE));

	/* Disable CPU1 while we figure out how to have SMP in Zephyr. */
	*app_cpu_config_reg &= ~DPORT_APPCPU_CLKGATE_EN;
40080829:	ff4e91        	l32r	a9, 40080564 <_iram_text_start+0x1c>
4008082c:	ea7c      	movi.n	a10, -2
4008082e:	0020c0        	memw
40080831:	0988      	l32i.n	a8, a9, 0
40080833:	1088a0        	and	a8, a8, a10
40080836:	0020c0        	memw
40080839:	006982        	s32i	a8, a9, 0

	/* Initialize the architecture CPU pointer.  Some of the
	 * initialization code wants a valid _current before
	 * arch_kernel_init() is invoked.
	 */
	__asm__ volatile("wsr.MISC0 %0; rsync" : : "r"(&_kernel.cpus[0]));
4008083c:	ff4b81        	l32r	a8, 40080568 <_iram_text_start+0x20>
4008083f:	13f480        	wsr.misc0	a8
40080842:	002010        	rsync


	/* Start Zephyr */
	z_cstart();
40080845:	01e2e5        	call8	40082674 <z_cstart>

40080848 <_Level1Vector>:
DEF_EXCINT 1, _handle_excint, xtensa_excint1_c
40080848:	c4c112        	addi	a1, a1, -60
4008084b:	7109      	s32i.n	a0, a1, 28
4008084d:	9129      	s32i.n	a2, a1, 36
4008084f:	a139      	s32i.n	a3, a1, 40
40080851:	03e600        	rsr.ps	a0
40080854:	026c      	movi.n	a2, -32
40080856:	100020        	and	a0, a0, a2
40080859:	5109      	s32i.n	a0, a1, 20
4008085b:	03b100        	rsr.epc1	a0
4008085e:	6109      	s32i.n	a0, a1, 24
40080860:	000206        	j	4008086c <_after_imms1>
	...

40080864 <_handle_excint_imm1>:
40080864:	0816c0        	lsx	f1, a6, a12
40080867:	40          	.byte 0x40

40080868 <_c_handler_imm1>:
40080868:	0819d4        	lsi	f13, a9, 32
4008086b:	40          	.byte 0x40

4008086c <_after_imms1>:
4008086c:	ffff21        	l32r	a2, 40080868 <_c_handler_imm1>
4008086f:	fffd01        	l32r	a0, 40080864 <_handle_excint_imm1>
40080872:	0000a0        	jx	a0
40080875:	000000        	ill

40080878 <k_msleep>:
 *
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
40080878:	004136        	entry	a1, 32
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * (to_hz / from_hz);
4008087b:	0aa0b2        	movi	a11, 10
4008087e:	82a2b0        	mull	a10, a2, a11
40080881:	b2b2b0        	mulsh	a11, a2, a11
		parm0.val = timeout;
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
40080884:	025665        	call8	40082dec <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
}
40080887:	202aa0        	or	a2, a10, a10
4008088a:	000090        	retw
4008088d:	000000        	ill

40080890 <main>:

const float LM75A_DEGREES_RESOLUTION = 0.125;
const int LM75A_REG_ADDR_TEMP = 0;

void main(void)
{   
40080890:	008136        	entry	a1, 64
	const struct device *i2c_dev;
	uint8_t cmp_data[16];
	uint8_t data[16];
	int i, ret;
	uint16_t temp = 0x00;
    uint8_t pointer = 0x00;
40080893:	00a032        	movi	a3, 0
40080896:	104132        	s8i	a3, a1, 16
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
40080899:	ff34a1        	l32r	a10, 4008056c <_iram_text_start+0x24>
4008089c:	01d225        	call8	400825c0 <z_impl_device_get_binding>
4008089f:	202aa0        	or	a2, a10, a10

	i2c_dev = device_get_binding(I2C_DEV);
	if (!i2c_dev) {
400808a2:	7acc      	bnez.n	a10, 400808ad <main+0x1d>
		printk("I2C: Device driver not found.\n");
400808a4:	ff33a1        	l32r	a10, 40080570 <_iram_text_start+0x28>
400808a7:	005665        	call8	40080e0c <printk>
		printk("Read 0x%X from address 0x01.\n", data[0]);
	}
    */
	
	
}
400808aa:	f01d      	retw.n
400808ac:	31a100        	srai	a10, a0, 17
	printk("I2C LM75A - Pruebas.\n");
400808af:	ff          	.byte 0xff
	pointer = 0x03; //Tos register pointer - 5000h por defecto
400808b0:	340c      	movi.n	a4, 3
	printk("I2C LM75A - Pruebas.\n");
400808b2:	0055a5        	call8	40080e0c <printk>
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400808b5:	1c0c      	movi.n	a12, 1
400808b7:	10c1b2        	addi	a11, a1, 16
400808ba:	02ad      	mov.n	a10, a2
	pointer = 0x03; //Tos register pointer - 5000h por defecto
400808bc:	104142        	s8i	a4, a1, 16
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400808bf:	02a7a5        	call8	40083338 <i2c_write$constprop$1>
	k_msleep(5);
400808c2:	5a0c      	movi.n	a10, 5
400808c4:	fffb25        	call8	40080878 <k_msleep>
	ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
400808c7:	2c0c      	movi.n	a12, 2
400808c9:	01bd      	mov.n	a11, a1
400808cb:	02ad      	mov.n	a10, a2
400808cd:	02a8a5        	call8	40083358 <i2c_read$constprop$0>
	k_msleep(5);
400808d0:	5a0c      	movi.n	a10, 5
400808d2:	fffa65        	call8	40080878 <k_msleep>
	printk("----->> SetPoint - Tos Register: %x|%x\n\n", data[0], data[1]);
400808d5:	ff2851        	l32r	a5, 40080578 <_iram_text_start+0x30>
400808d8:	0101c2        	l8ui	a12, a1, 1
400808db:	0001b2        	l8ui	a11, a1, 0
400808de:	05ad      	mov.n	a10, a5
400808e0:	0052a5        	call8	40080e0c <printk>
	pointer = 0x02; //Thyst register pointer - 4B00h por defecto
400808e3:	280c      	movi.n	a8, 2
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400808e5:	1c0c      	movi.n	a12, 1
400808e7:	10c1b2        	addi	a11, a1, 16
400808ea:	02ad      	mov.n	a10, a2
	pointer = 0x02; //Thyst register pointer - 4B00h por defecto
400808ec:	104182        	s8i	a8, a1, 16
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400808ef:	02a4a5        	call8	40083338 <i2c_write$constprop$1>
	k_msleep(5);
400808f2:	5a0c      	movi.n	a10, 5
400808f4:	fff825        	call8	40080878 <k_msleep>
	ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
400808f7:	2c0c      	movi.n	a12, 2
400808f9:	01bd      	mov.n	a11, a1
400808fb:	02ad      	mov.n	a10, a2
400808fd:	02a5a5        	call8	40083358 <i2c_read$constprop$0>
	k_msleep(5);
40080900:	5a0c      	movi.n	a10, 5
40080902:	fff765        	call8	40080878 <k_msleep>
	printk("----->> Hysteresis - Thyst Register: %x|%x\n\n", data[0], data[1]);
40080905:	0101c2        	l8ui	a12, a1, 1
40080908:	0001b2        	l8ui	a11, a1, 0
4008090b:	ff1ca1        	l32r	a10, 4008057c <_iram_text_start+0x34>
4008090e:	004fe5        	call8	40080e0c <printk>
	pointer = 0x01; //Configuration register pointer - 00h por defecto
40080911:	180c      	movi.n	a8, 1
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
40080913:	1c0c      	movi.n	a12, 1
40080915:	10c1b2        	addi	a11, a1, 16
40080918:	02ad      	mov.n	a10, a2
	pointer = 0x01; //Configuration register pointer - 00h por defecto
4008091a:	104182        	s8i	a8, a1, 16
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
4008091d:	02a1a5        	call8	40083338 <i2c_write$constprop$1>
	k_msleep(5);
40080920:	5a0c      	movi.n	a10, 5
40080922:	fff565        	call8	40080878 <k_msleep>
	ret = i2c_read(i2c_dev, &data[0], 1, LM75A_DEFAULT_ADDRESS);
40080925:	1c0c      	movi.n	a12, 1
40080927:	01bd      	mov.n	a11, a1
40080929:	02ad      	mov.n	a10, a2
4008092b:	02a2e5        	call8	40083358 <i2c_read$constprop$0>
	k_msleep(5);
4008092e:	5a0c      	movi.n	a10, 5
40080930:	fff465        	call8	40080878 <k_msleep>
	printk("----->>  Configuration - Register %x|%x\n\n", data[0], data[1]);
40080933:	0101c2        	l8ui	a12, a1, 1
40080936:	0001b2        	l8ui	a11, a1, 0
40080939:	ff11a1        	l32r	a10, 40080580 <_iram_text_start+0x38>
4008093c:	004ce5        	call8	40080e0c <printk>
	printk("----->>  Writing - Tos Register %x|%x\n", data[0], data[1]);
4008093f:	0101c2        	l8ui	a12, a1, 1
40080942:	0001b2        	l8ui	a11, a1, 0
40080945:	ff0fa1        	l32r	a10, 40080584 <_iram_text_start+0x3c>
40080948:	004c25        	call8	40080e0c <printk>
	i2c_write(i2c_dev, &data[0], 3, LM75A_DEFAULT_ADDRESS);
4008094b:	3c0c      	movi.n	a12, 3
4008094d:	01bd      	mov.n	a11, a1
4008094f:	02ad      	mov.n	a10, a2
	pointer = 0x03;
40080951:	104142        	s8i	a4, a1, 16
	data[0] = pointer;
40080954:	004142        	s8i	a4, a1, 0
	data[1] = temp >> 8;//MSByte
40080957:	014132        	s8i	a3, a1, 1
	data[2] = (uint16_t)temp & 0x0F;//LSByte
4008095a:	024132        	s8i	a3, a1, 2
	i2c_write(i2c_dev, &data[0], 3, LM75A_DEFAULT_ADDRESS);
4008095d:	029da5        	call8	40083338 <i2c_write$constprop$1>
	printk("----->>  Tos Register wrote temp: <%x>, MSByte <%x>, LSByte <%x>\n\n", temp, data[1], data[2]);
40080960:	0201d2        	l8ui	a13, a1, 2
40080963:	0101c2        	l8ui	a12, a1, 1
40080966:	ff08a1        	l32r	a10, 40080588 <_iram_text_start+0x40>
40080969:	0b3c      	movi.n	a11, 48
4008096b:	004a25        	call8	40080e0c <printk>
	k_msleep(5);
4008096e:	5a0c      	movi.n	a10, 5
40080970:	fff065        	call8	40080878 <k_msleep>
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
40080973:	1c0c      	movi.n	a12, 1
40080975:	10c1b2        	addi	a11, a1, 16
40080978:	02ad      	mov.n	a10, a2
	pointer = 0x03; //Tos register pointer - 5000h por defecto
4008097a:	104142        	s8i	a4, a1, 16
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
4008097d:	029ba5        	call8	40083338 <i2c_write$constprop$1>
	k_msleep(5);
40080980:	5a0c      	movi.n	a10, 5
40080982:	ffef65        	call8	40080878 <k_msleep>
	ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
40080985:	2c0c      	movi.n	a12, 2
40080987:	01bd      	mov.n	a11, a1
40080989:	02ad      	mov.n	a10, a2
4008098b:	029ce5        	call8	40083358 <i2c_read$constprop$0>
	k_msleep(5);
4008098e:	5a0c      	movi.n	a10, 5
40080990:	ffee65        	call8	40080878 <k_msleep>
	printk("----->> SetPoint - Tos Register: %x|%x\n\n", data[0], data[1]);
40080993:	0101c2        	l8ui	a12, a1, 1
40080996:	0001b2        	l8ui	a11, a1, 0
40080999:	05ad      	mov.n	a10, a5
4008099b:	004725        	call8	40080e0c <printk>
    i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
4008099e:	1c0c      	movi.n	a12, 1
400809a0:	10c1b2        	addi	a11, a1, 16
400809a3:	02ad      	mov.n	a10, a2
	pointer = 0x00; // Temp register pointer
400809a5:	104132        	s8i	a3, a1, 16
    i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400809a8:	0298e5        	call8	40083338 <i2c_write$constprop$1>
        ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
400809ab:	2c0c      	movi.n	a12, 2
400809ad:	01bd      	mov.n	a11, a1
400809af:	02ad      	mov.n	a10, a2
400809b1:	029a65        	call8	40083358 <i2c_read$constprop$0>
        if(~ret) {
400809b4:	050a26        	beqi	a10, -1, 400809bd <main+0x12d>
            printk("Succesful read\n");
400809b7:	fef5a1        	l32r	a10, 4008058c <_iram_text_start+0x44>
400809ba:	000086        	j	400809c0 <main+0x130>
            printk("Error read\n");
400809bd:	fef4a1        	l32r	a10, 40080590 <_iram_text_start+0x48>
400809c0:	0044a5        	call8	40080e0c <printk>
        printk("data[0]: %X data[1] %X \n", data[0], data[1]);
400809c3:	0101c2        	l8ui	a12, a1, 1
400809c6:	0001b2        	l8ui	a11, a1, 0
400809c9:	fef2a1        	l32r	a10, 40080594 <_iram_text_start+0x4c>
        temp = data[0] << 8 | (data[1] & 0x80 );
400809cc:	80a042        	movi	a4, 128
        printk("data[0]: %X data[1] %X \n", data[0], data[1]);
400809cf:	0043e5        	call8	40080e0c <printk>
        temp = data[0] << 8 | (data[1] & 0x80 );
400809d2:	000182        	l8ui	a8, a1, 0
        printk("Temperatura en Celsius: %d\n", temp); //float not supported by printk
400809d5:	fef1a1        	l32r	a10, 4008059c <_iram_text_start+0x54>
        temp = data[0] << 8 | (data[1] & 0x80 );
400809d8:	113880        	slli	a3, a8, 8
400809db:	010182        	l8ui	a8, a1, 1
400809de:	108840        	and	a8, a8, a4
400809e1:	208830        	or	a8, a8, a3
        temp = temp * LM75A_DEGREES_RESOLUTION;
400809e4:	418580        	srli	a8, a8, 5
400809e7:	feec31        	l32r	a3, 40080598 <_iram_text_start+0x50>
400809ea:	ca0800        	float.s	f0, a8, 0
400809ed:	fa1350        	wfr	f1, a3
400809f0:	2a0010        	mul.s	f0, f0, f1
400809f3:	eab000        	utrunc.s	a11, f0, 0
        printk("Temperatura en Celsius: %d\n", temp); //float not supported by printk
400809f6:	f4b0b0        	extui	a11, a11, 0, 16
400809f9:	004125        	call8	40080e0c <printk>
        k_msleep(2500);
400809fc:	fee9a1        	l32r	a10, 400805a0 <_iram_text_start+0x58>
400809ff:	ffe7a5        	call8	40080878 <k_msleep>
        ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
40080a02:	ffe946        	j	400809ab <main+0x11b>
40080a05:	000000        	ill

40080a08 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
40080a08:	00a136        	entry	a1, 80
40080a0b:	049d      	mov.n	a9, a4
40080a0d:	744070        	extui	a4, a7, 0, 8
40080a10:	058d      	mov.n	a8, a5
40080a12:	8149      	s32i.n	a4, a1, 32
40080a14:	500142        	l8ui	a4, a1, 80
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
40080a17:	471c      	movi.n	a7, 20
		buf[i] = "0123456789abcdef"[num % base];
40080a19:	315f60        	srai	a5, a6, 31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
40080a1c:	000e86        	j	40080a5a <print_digits+0x52>
40080a1f:	000000        	ill
		buf[i] = "0123456789abcdef"[num % base];
40080a22:	80f170        	add	a15, a1, a7
40080a25:	20c660        	or	a12, a6, a6
40080a28:	05dd      	mov.n	a13, a5
40080a2a:	09ad      	mov.n	a10, a9
40080a2c:	08bd      	mov.n	a11, a8
40080a2e:	b189      	s32i.n	a8, a1, 44
40080a30:	a199      	s32i.n	a9, a1, 40
40080a32:	0961f2        	s32i	a15, a1, 36
40080a35:	02e7a5        	call8	400838b0 <__umoddi3>
40080a38:	fedbb1        	l32r	a11, 400805a4 <_iram_text_start+0x5c>
40080a3b:	91f8      	l32i.n	a15, a1, 36
40080a3d:	abaa      	add.n	a10, a11, a10
40080a3f:	000aa2        	l8ui	a10, a10, 0
		num /= base;
40080a42:	06cd      	mov.n	a12, a6
		buf[i] = "0123456789abcdef"[num % base];
40080a44:	004fa2        	s8i	a10, a15, 0
		num /= base;
40080a47:	a198      	l32i.n	a9, a1, 40
40080a49:	b188      	l32i.n	a8, a1, 44
40080a4b:	09ad      	mov.n	a10, a9
40080a4d:	08bd      	mov.n	a11, a8
40080a4f:	05dd      	mov.n	a13, a5
40080a51:	02bee5        	call8	40083640 <__udivdi3>
40080a54:	0a9d      	mov.n	a9, a10
40080a56:	0b8d      	mov.n	a8, a11
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
40080a58:	770b      	addi.n	a7, a7, -1
40080a5a:	20a980        	or	a10, a9, a8
40080a5d:	fc1a56        	bnez	a10, 40080a22 <print_digits+0x1a>
	}

	if (i == DIGITS_BUFLEN - 1) {
40080a60:	451c      	movi.n	a5, 20
40080a62:	079757        	bne	a7, a5, 40080a6d <print_digits+0x65>
		buf[i] = '0';
40080a65:	053c      	movi.n	a5, 48
40080a67:	144152        	s8i	a5, a1, 20
40080a6a:	000046        	j	40080a6f <print_digits+0x67>
	} else {
		i++;
40080a6d:	771b      	addi.n	a7, a7, 1
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
40080a6f:	152182        	l32i	a8, a1, 84
40080a72:	591c      	movi.n	a9, 21
40080a74:	878a      	add.n	a8, a7, a8
40080a76:	050c      	movi.n	a5, 0
40080a78:	1c1897        	beq	a8, a9, 40080a98 <print_digits+0x90>
40080a7b:	ebc852        	addi	a5, a8, -21
40080a7e:	000206        	j	40080a8a <print_digits+0x82>

	for (/**/; pad > 0 && pad_before; pad--) {
		out(pad_char, ctx);
40080a81:	03bd      	mov.n	a11, a3
40080a83:	04ad      	mov.n	a10, a4
40080a85:	0002e0        	callx8	a2
	for (/**/; pad > 0 && pad_before; pad--) {
40080a88:	550b      	addi.n	a5, a5, -1
40080a8a:	318f50        	srai	a8, a5, 31
40080a8d:	c08850        	sub	a8, a8, a5
40080a90:	0048d6        	bgez	a8, 40080a98 <print_digits+0x90>
40080a93:	8168      	l32i.n	a6, a1, 32
40080a95:	fe8656        	bnez	a6, 40080a81 <print_digits+0x79>
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
40080a98:	561c      	movi.n	a6, 21
		out(buf[i], ctx);
40080a9a:	817a      	add.n	a8, a1, a7
40080a9c:	0008a2        	l8ui	a10, a8, 0
40080a9f:	20b330        	or	a11, a3, a3
	for (/**/; i < DIGITS_BUFLEN; i++) {
40080aa2:	01c772        	addi	a7, a7, 1
		out(buf[i], ctx);
40080aa5:	0002e0        	callx8	a2
	for (/**/; i < DIGITS_BUFLEN; i++) {
40080aa8:	ee9767        	bne	a7, a6, 40080a9a <print_digits+0x92>
40080aab:	000206        	j	40080ab7 <print_digits+0xaf>
	}
	for (/**/; pad > 0; pad--) {
		out(pad_char, ctx);
40080aae:	03bd      	mov.n	a11, a3
40080ab0:	04ad      	mov.n	a10, a4
40080ab2:	0002e0        	callx8	a2
	for (/**/; pad > 0; pad--) {
40080ab5:	550b      	addi.n	a5, a5, -1
40080ab7:	f315e6        	bgei	a5, 1, 40080aae <print_digits+0xa6>
	}
}
40080aba:	f01d      	retw.n

40080abc <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
40080abc:	004136        	entry	a1, 32
	struct out_context *ctx = ctx_p;

	ctx->count++;
40080abf:	0388      	l32i.n	a8, a3, 0
	return _char_out(c);
40080ac1:	02ad      	mov.n	a10, a2
	ctx->count++;
40080ac3:	881b      	addi.n	a8, a8, 1
40080ac5:	0389      	s32i.n	a8, a3, 0
	return _char_out(c);
40080ac7:	feb831        	l32r	a3, 400805a8 <_iram_text_start+0x60>
40080aca:	002332        	l32i	a3, a3, 0
40080acd:	0003e0        	callx8	a3
}
40080ad0:	0a2d      	mov.n	a2, a10
40080ad2:	f01d      	retw.n

40080ad4 <__printk_hook_install>:
{
40080ad4:	004136        	entry	a1, 32
	_char_out = fn;
40080ad7:	feb481        	l32r	a8, 400805a8 <_iram_text_start+0x60>
40080ada:	0829      	s32i.n	a2, a8, 0
}
40080adc:	f01d      	retw.n
	...

40080ae0 <z_vprintk>:
{
40080ae0:	00a136        	entry	a1, 80
40080ae3:	9149      	s32i.n	a4, a1, 36
	char length_mod = 0;
40080ae5:	040c      	movi.n	a4, 0
{
40080ae7:	4159      	s32i.n	a5, a1, 16
40080ae9:	5169      	s32i.n	a6, a1, 20
40080aeb:	6179      	s32i.n	a7, a1, 24
40080aed:	7159      	s32i.n	a5, a1, 28
40080aef:	8169      	s32i.n	a6, a1, 32
40080af1:	076d      	mov.n	a6, a7
	int min_width = -1;
40080af3:	f57c      	movi.n	a5, -1
	enum pad_type padding = PAD_NONE;
40080af5:	047d      	mov.n	a7, a4
	int might_format = 0; /* 1 if encountered a '%' */
40080af7:	048d      	mov.n	a8, a4
	while (*fmt) {
40080af9:	00ba46        	j	40080de6 <z_vprintk+0x306>
		if (!might_format) {
40080afc:	08dc      	bnez.n	a8, 40080b10 <z_vprintk+0x30>
			if (*fmt != '%') {
40080afe:	592c      	movi.n	a9, 37
40080b00:	029a97        	bne	a10, a9, 40080b06 <z_vprintk+0x26>
40080b03:	00ad86        	j	40080dbd <z_vprintk+0x2dd>
				out((int)*fmt, ctx);
40080b06:	03bd      	mov.n	a11, a3
40080b08:	a189      	s32i.n	a8, a1, 40
40080b0a:	0002e0        	callx8	a2
40080b0d:	008046        	j	40080d12 <z_vprintk+0x232>
			switch (*fmt) {
40080b10:	64a092        	movi	a9, 100
40080b13:	029a97        	bne	a10, a9, 40080b19 <z_vprintk+0x39>
40080b16:	003186        	j	40080be0 <z_vprintk+0x100>
40080b19:	3739a7        	bltu	a9, a10, 40080b54 <z_vprintk+0x74>
40080b1c:	993c      	movi.n	a9, 57
40080b1e:	1c39a7        	bltu	a9, a10, 40080b3e <z_vprintk+0x5e>
40080b21:	193c      	movi.n	a9, 49
40080b23:	7bba97        	bgeu	a10, a9, 40080ba2 <z_vprintk+0xc2>
40080b26:	d92c      	movi.n	a9, 45
40080b28:	029a97        	bne	a10, a9, 40080b2e <z_vprintk+0x4e>
40080b2b:	00a646        	j	40080dc8 <z_vprintk+0x2e8>
40080b2e:	093c      	movi.n	a9, 48
40080b30:	681a97        	beq	a10, a9, 40080b9c <z_vprintk+0xbc>
40080b33:	582c      	movi.n	a8, 37
40080b35:	021a87        	beq	a10, a8, 40080b3b <z_vprintk+0x5b>
40080b38:	009a86        	j	40080da6 <z_vprintk+0x2c6>
40080b3b:	009886        	j	40080da1 <z_vprintk+0x2c1>
40080b3e:	885c      	movi.n	a8, 88
40080b40:	029a87        	bne	a10, a8, 40080b46 <z_vprintk+0x66>
40080b43:	005286        	j	40080c91 <z_vprintk+0x1b1>
40080b46:	63a082        	movi	a8, 99
40080b49:	029a87        	bne	a10, a8, 40080b4f <z_vprintk+0x6f>
40080b4c:	008b06        	j	40080d7c <z_vprintk+0x29c>
40080b4f:	0094c6        	j	40080da6 <z_vprintk+0x2c6>
40080b52:	920000        	lsi	f0, a0, 0x248
40080b55:	9770a0        	lsi	f10, a0, 0x25c
40080b58:	029a      	add.n	a0, a2, a9
40080b5a:	004806        	j	40080c7e <z_vprintk+0x19e>
40080b5d:	1339a7        	bltu	a9, a10, 40080b74 <z_vprintk+0x94>
40080b60:	69a092        	movi	a9, 105
40080b63:	791a97        	beq	a10, a9, 40080be0 <z_vprintk+0x100>
40080b66:	6ca092        	movi	a9, 108
40080b69:	541a97        	beq	a10, a9, 40080bc1 <z_vprintk+0xe1>
40080b6c:	68a092        	movi	a9, 104
40080b6f:	000886        	j	40080b95 <z_vprintk+0xb5>
40080b72:	920000        	lsi	f0, a0, 0x248
40080b75:	9775a0        	lsi	f10, a5, 0x25c
40080b78:	651a      	add.n	a6, a5, a1
40080b7a:	0b39a7        	bltu	a9, a10, 40080b89 <z_vprintk+0xa9>
40080b7d:	73a082        	movi	a8, 115
40080b80:	029a87        	bne	a10, a8, 40080b86 <z_vprintk+0xa6>
40080b83:	006446        	j	40080d18 <z_vprintk+0x238>
40080b86:	008706        	j	40080da6 <z_vprintk+0x2c6>
40080b89:	78a092        	movi	a9, 120
40080b8c:	029a97        	bne	a10, a9, 40080b92 <z_vprintk+0xb2>
40080b8f:	003f86        	j	40080c91 <z_vprintk+0x1b1>
40080b92:	7aa092        	movi	a9, 122
40080b95:	281a97        	beq	a10, a9, 40080bc1 <z_vprintk+0xe1>
40080b98:	008286        	j	40080da6 <z_vprintk+0x2c6>
40080b9b:	25d600        	extui	a13, a0, 22, 3
				if (min_width < 0 && padding == PAD_NONE) {
40080b9e:	a71600        	lsi	f0, a6, 0x29c
40080ba1:	65d622        	addmi	a2, a6, 0x6500
				if (min_width < 0) {
40080ba4:	ca5200        	float.s	f5, a2, 0
					min_width = *fmt - '0';
40080ba7:	0346d0        	lsi	f13, a6, 12
40080baa:	e00000        	subx4	a0, a0, a0
					min_width = 10 * min_width + *fmt - '0';
40080bad:	5a1195        	call4	400dacc8 <_iram_text_end+0x571a6>
40080bb0:	f059      	s32i.n	a5, a0, 60
40080bb2:	521155        	call4	400d2cc8 <_iram_text_end+0x4f1a6>
40080bb5:	5ad0c5        	call0	400db8c4 <_iram_text_end+0x57da2>
40080bb8:	565a      	add.n	a5, a6, a5
				if (padding == PAD_NONE) {
40080bba:	0c2237        	blt	a2, a3, 40080bca <z_vprintk+0xea>
					padding = PAD_SPACE_BEFORE;
40080bbd:	878627        	bany	a6, a2, 40080b48 <z_vprintk+0x68>
40080bc0:	a09200        	addx4	a9, a2, a0
				if (*fmt == 'h' && length_mod == 'h') {
40080bc3:	9768      	l32i.n	a6, a7, 36
40080bc5:	059a      	add.n	a0, a5, a9
40080bc7:	0d94a7        	bne	a4, a10, 40080bd8 <z_vprintk+0xf8>
40080bca:	008146        	j	40080dd3 <z_vprintk+0x2f3>
				} else if (*fmt == 'l' && length_mod == 'l') {
40080bcd:	94c492        	addi	a9, a4, -108
40080bd0:	49cc      	bnez.n	a9, 40080bd8 <z_vprintk+0xf8>
40080bd2:	94ca92        	addi	a9, a10, -108
40080bd5:	1ff916        	beqz	a9, 40080dd8 <z_vprintk+0x2f8>
				} else if (length_mod == 0) {
40080bd8:	202416        	beqz	a4, 40080dde <z_vprintk+0x2fe>
					out((int)'%', ctx);
40080bdb:	0071c6        	j	40080da6 <z_vprintk+0x2c6>
40080bde:	920000        	lsi	f0, a0, 0x248
				if (length_mod == 'z') {
40080be1:	1c7aa0        	lsi	f10, a10, 112
40080be4:	9788      	l32i.n	a8, a7, 36
40080be6:	060394        	lsi	f9, a3, 24
					d = va_arg(ap, ssize_t);
40080be9:	000c      	movi.n	a0, 0
40080beb:	a09200        	addx4	a9, a2, a0
				} else if (length_mod == 'l') {
40080bee:	976c      	movi.n	a7, -23
40080bf0:	860294        	lsi	f9, a2, 0x218
					d = va_arg(ap, long);
40080bf3:	0009      	s32i.n	a0, a0, 0
				} else if (length_mod == 'L') {
40080bf5:	c94c      	movi.n	a9, 76
40080bf7:	219497        	bne	a4, a9, 40080c1c <z_vprintk+0x13c>
					long long lld = va_arg(ap, long long);
40080bfa:	897c      	movi.n	a9, -8
40080bfc:	c67b      	addi.n	a12, a6, 7
40080bfe:	10cc90        	and	a12, a12, a9
40080c01:	9c8b      	addi.n	a9, a12, 8
40080c03:	81b8      	l32i.n	a11, a1, 32
40080c05:	07a897        	bge	a8, a9, 40080c10 <z_vprintk+0x130>
40080c08:	0228c7        	blt	a8, a12, 40080c0e <z_vprintk+0x12e>
40080c0b:	28a092        	movi	a9, 40
40080c0e:	71b8      	l32i.n	a11, a1, 28
40080c10:	8b9a      	add.n	a8, a11, a9
40080c12:	f8c882        	addi	a8, a8, -8
					d = (printk_val_t) lld;
40080c15:	08c8      	l32i.n	a12, a8, 0
40080c17:	1868      	l32i.n	a6, a8, 4
40080c19:	0005c6        	j	40080c34 <z_vprintk+0x154>
					d = va_arg(ap, int);
40080c1c:	964b      	addi.n	a9, a6, 4
40080c1e:	81b8      	l32i.n	a11, a1, 32
40080c20:	06a897        	bge	a8, a9, 40080c2a <z_vprintk+0x14a>
40080c23:	012867        	blt	a8, a6, 40080c28 <z_vprintk+0x148>
40080c26:	492c      	movi.n	a9, 36
40080c28:	71b8      	l32i.n	a11, a1, 28
40080c2a:	bb9a      	add.n	a11, a11, a9
40080c2c:	fccbb2        	addi	a11, a11, -4
40080c2f:	0bc8      	l32i.n	a12, a11, 0
40080c31:	316fc0        	srai	a6, a12, 31
				if (*fmt != 'u' && negative(d)) {
40080c34:	75a082        	movi	a8, 117
40080c37:	251a87        	beq	a10, a8, 40080c60 <z_vprintk+0x180>
40080c3a:	0226d6        	bgez	a6, 40080c60 <z_vprintk+0x180>
					out((int)'-', ctx);
40080c3d:	03bd      	mov.n	a11, a3
40080c3f:	da2c      	movi.n	a10, 45
40080c41:	0b6192        	s32i	a9, a1, 44
40080c44:	0a61c2        	s32i	a12, a1, 40
40080c47:	0002e0        	callx8	a2
					d = -d;
40080c4a:	a1c8      	l32i.n	a12, a1, 40
40080c4c:	180c      	movi.n	a8, 1
40080c4e:	60c0c0        	neg	a12, a12
40080c51:	0a0c      	movi.n	a10, 0
40080c53:	838ac0        	moveqz	a8, a10, a12
40080c56:	60d060        	neg	a13, a6
					min_width--;
40080c59:	b198      	l32i.n	a9, a1, 44
					d = -d;
40080c5b:	c06d80        	sub	a6, a13, a8
					min_width--;
40080c5e:	550b      	addi.n	a5, a5, -1
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
40080c60:	fdc7a2        	addi	a10, a7, -3
40080c63:	080c      	movi.n	a8, 0
40080c65:	1f0c      	movi.n	a15, 1
40080c67:	0e3c      	movi.n	a14, 48
40080c69:	83f8a0        	moveqz	a15, a8, a10
40080c6c:	0b2c      	movi.n	a11, 32
40080c6e:	a70b      	addi.n	a10, a7, -1
40080c70:	83bea0        	moveqz	a11, a14, a10
40080c73:	1159      	s32i.n	a5, a1, 4
40080c75:	01b9      	s32i.n	a11, a1, 0
40080c77:	ae0c      	movi.n	a14, 10
40080c79:	06dd      	mov.n	a13, a6
40080c7b:	002106        	j	40080d03 <z_vprintk+0x223>
				out('0', ctx);
40080c7e:	03bd      	mov.n	a11, a3
40080c80:	0a3c      	movi.n	a10, 48
40080c82:	0002e0        	callx8	a2
				out('x', ctx);
40080c85:	03bd      	mov.n	a11, a3
40080c87:	78a0a2        	movi	a10, 120
40080c8a:	0002e0        	callx8	a2
				min_width = sizeof(void *) * 2;
40080c8d:	850c      	movi.n	a5, 8
				padding = PAD_ZERO_BEFORE;
40080c8f:	170c      	movi.n	a7, 1
				if (*fmt == 'p') {
40080c91:	9198      	l32i.n	a9, a1, 36
40080c93:	881c      	movi.n	a8, 24
40080c95:	0009a2        	l8ui	a10, a9, 0
40080c98:	70a092        	movi	a9, 112
40080c9b:	029a97        	bne	a10, a9, 40080ca1 <z_vprintk+0x1c1>
					x = (uintptr_t)va_arg(ap, void *);
40080c9e:	000b86        	j	40080cd0 <z_vprintk+0x1f0>
				} else if (length_mod == 'l') {
40080ca1:	6ca092        	movi	a9, 108
40080ca4:	029497        	bne	a4, a9, 40080caa <z_vprintk+0x1ca>
					x = va_arg(ap, unsigned long);
40080ca7:	000946        	j	40080cd0 <z_vprintk+0x1f0>
				} else if (length_mod == 'L') {
40080caa:	c94c      	movi.n	a9, 76
40080cac:	209497        	bne	a4, a9, 40080cd0 <z_vprintk+0x1f0>
					x = va_arg(ap, unsigned long long);
40080caf:	897c      	movi.n	a9, -8
40080cb1:	c67b      	addi.n	a12, a6, 7
40080cb3:	10cc90        	and	a12, a12, a9
40080cb6:	9c8b      	addi.n	a9, a12, 8
40080cb8:	81a8      	l32i.n	a10, a1, 32
40080cba:	06a897        	bge	a8, a9, 40080cc4 <z_vprintk+0x1e4>
40080cbd:	0128c7        	blt	a8, a12, 40080cc2 <z_vprintk+0x1e2>
40080cc0:	892c      	movi.n	a9, 40
40080cc2:	71a8      	l32i.n	a10, a1, 28
40080cc4:	8a9a      	add.n	a8, a10, a9
40080cc6:	f8c882        	addi	a8, a8, -8
40080cc9:	08c8      	l32i.n	a12, a8, 0
40080ccb:	18d8      	l32i.n	a13, a8, 4
40080ccd:	000646        	j	40080cea <z_vprintk+0x20a>
					x = va_arg(ap, unsigned int);
40080cd0:	964b      	addi.n	a9, a6, 4
40080cd2:	81a8      	l32i.n	a10, a1, 32
40080cd4:	06a897        	bge	a8, a9, 40080cde <z_vprintk+0x1fe>
40080cd7:	012867        	blt	a8, a6, 40080cdc <z_vprintk+0x1fc>
40080cda:	492c      	movi.n	a9, 36
40080cdc:	71a8      	l32i.n	a10, a1, 28
40080cde:	80aa90        	add	a10, a10, a9
40080ce1:	fccaa2        	addi	a10, a10, -4
40080ce4:	002ac2        	l32i	a12, a10, 0
40080ce7:	00a0d2        	movi	a13, 0
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
40080cea:	fdc7a2        	addi	a10, a7, -3
40080ced:	080c      	movi.n	a8, 0
40080cef:	1f0c      	movi.n	a15, 1
40080cf1:	0e3c      	movi.n	a14, 48
40080cf3:	83f8a0        	moveqz	a15, a8, a10
40080cf6:	0b2c      	movi.n	a11, 32
40080cf8:	a70b      	addi.n	a10, a7, -1
40080cfa:	83bea0        	moveqz	a11, a14, a10
40080cfd:	1159      	s32i.n	a5, a1, 4
40080cff:	01b9      	s32i.n	a11, a1, 0
40080d01:	0e1c      	movi.n	a14, 16
40080d03:	03bd      	mov.n	a11, a3
40080d05:	02ad      	mov.n	a10, a2
40080d07:	b199      	s32i.n	a9, a1, 44
40080d09:	a189      	s32i.n	a8, a1, 40
40080d0b:	ffcfe5        	call8	40080a08 <print_digits>
40080d0e:	b198      	l32i.n	a9, a1, 44
40080d10:	096d      	mov.n	a6, a9
			might_format = 0;
40080d12:	a188      	l32i.n	a8, a1, 40
40080d14:	003206        	j	40080de0 <z_vprintk+0x300>
40080d17:	964b00        	lsi	f0, a11, 0x258
				char *s = va_arg(ap, char *);
40080d1a:	881c      	movi.n	a8, 24
40080d1c:	0ca897        	bge	a8, a9, 40080d2c <z_vprintk+0x24c>
40080d1f:	012867        	blt	a8, a6, 40080d24 <z_vprintk+0x244>
40080d22:	492c      	movi.n	a9, 36
40080d24:	096d      	mov.n	a6, a9
40080d26:	7188      	l32i.n	a8, a1, 28
40080d28:	000106        	j	40080d30 <z_vprintk+0x250>
40080d2b:	818800        	src	a8, a8, a0
40080d2e:	096d      	mov.n	a6, a9
40080d30:	889a      	add.n	a8, a8, a9
40080d32:	fcc882        	addi	a8, a8, -4
40080d35:	08d8      	l32i.n	a13, a8, 0
40080d37:	0d9d      	mov.n	a9, a13
				while (*s) {
40080d39:	0003c6        	j	40080d4c <z_vprintk+0x26c>
					out((int)(*s++), ctx);
40080d3c:	991b      	addi.n	a9, a9, 1
40080d3e:	03bd      	mov.n	a11, a3
40080d40:	b199      	s32i.n	a9, a1, 44
40080d42:	0a61d2        	s32i	a13, a1, 40
40080d45:	0002e0        	callx8	a2
40080d48:	a1d8      	l32i.n	a13, a1, 40
40080d4a:	b198      	l32i.n	a9, a1, 44
				while (*s) {
40080d4c:	0009a2        	l8ui	a10, a9, 0
40080d4f:	fe9a56        	bnez	a10, 40080d3c <z_vprintk+0x25c>
			might_format = 0;
40080d52:	0a8d      	mov.n	a8, a10
				if (padding == PAD_SPACE_AFTER) {
40080d54:	023726        	beqi	a7, 3, 40080d5a <z_vprintk+0x27a>
40080d57:	002146        	j	40080de0 <z_vprintk+0x300>
					int remaining = min_width - (s - start);
40080d5a:	c099d0        	sub	a9, a9, a13
40080d5d:	c09590        	sub	a9, a5, a9
						out(' ', ctx);
40080d60:	082c      	movi.n	a8, 32
					while (remaining-- > 0) {
40080d62:	000406        	j	40080d76 <z_vprintk+0x296>
						out(' ', ctx);
40080d65:	08ad      	mov.n	a10, a8
40080d67:	03bd      	mov.n	a11, a3
40080d69:	a189      	s32i.n	a8, a1, 40
40080d6b:	b199      	s32i.n	a9, a1, 44
40080d6d:	0002e0        	callx8	a2
40080d70:	b198      	l32i.n	a9, a1, 44
40080d72:	a188      	l32i.n	a8, a1, 40
40080d74:	990b      	addi.n	a9, a9, -1
					while (remaining-- > 0) {
40080d76:	eb19e6        	bgei	a9, 1, 40080d65 <z_vprintk+0x285>
40080d79:	000ec6        	j	40080db8 <z_vprintk+0x2d8>
				int c = va_arg(ap, int);
40080d7c:	964b      	addi.n	a9, a6, 4
40080d7e:	8a1c      	movi.n	a10, 24
40080d80:	8188      	l32i.n	a8, a1, 32
40080d82:	06aa97        	bge	a10, a9, 40080d8c <z_vprintk+0x2ac>
40080d85:	012a67        	blt	a10, a6, 40080d8a <z_vprintk+0x2aa>
40080d88:	492c      	movi.n	a9, 36
40080d8a:	7188      	l32i.n	a8, a1, 28
40080d8c:	889a      	add.n	a8, a8, a9
40080d8e:	fcc882        	addi	a8, a8, -4
				out(c, ctx);
40080d91:	08a8      	l32i.n	a10, a8, 0
40080d93:	03bd      	mov.n	a11, a3
40080d95:	b199      	s32i.n	a9, a1, 44
40080d97:	0002e0        	callx8	a2
				break;
40080d9a:	b198      	l32i.n	a9, a1, 44
40080d9c:	096d      	mov.n	a6, a9
40080d9e:	000586        	j	40080db8 <z_vprintk+0x2d8>
				out((int)'%', ctx);
40080da1:	03bd      	mov.n	a11, a3
40080da3:	000386        	j	40080db5 <z_vprintk+0x2d5>
				out((int)'%', ctx);
40080da6:	03bd      	mov.n	a11, a3
40080da8:	25a0a2        	movi	a10, 37
40080dab:	0002e0        	callx8	a2
				out((int)*fmt, ctx);
40080dae:	9188      	l32i.n	a8, a1, 36
40080db0:	03bd      	mov.n	a11, a3
40080db2:	0008a2        	l8ui	a10, a8, 0
40080db5:	0002e0        	callx8	a2
			might_format = 0;
40080db8:	080c      	movi.n	a8, 0
				break;
40080dba:	000886        	j	40080de0 <z_vprintk+0x300>
				length_mod = 0;
40080dbd:	084d      	mov.n	a4, a8
				padding = PAD_NONE;
40080dbf:	087d      	mov.n	a7, a8
				min_width = -1;
40080dc1:	f57c      	movi.n	a5, -1
				might_format = 1;
40080dc3:	180c      	movi.n	a8, 1
40080dc5:	0005c6        	j	40080de0 <z_vprintk+0x300>
				padding = PAD_SPACE_AFTER;
40080dc8:	370c      	movi.n	a7, 3
40080dca:	000486        	j	40080de0 <z_vprintk+0x300>
					padding = PAD_ZERO_BEFORE;
40080dcd:	170c      	movi.n	a7, 1
40080dcf:	000346        	j	40080de0 <z_vprintk+0x300>
40080dd2:	844c00        	extui	a4, a0, 12, 9
					length_mod = 'H';
40080dd5:	0001c6        	j	40080de0 <z_vprintk+0x300>
					length_mod = 'L';
40080dd8:	c44c      	movi.n	a4, 76
40080dda:	000086        	j	40080de0 <z_vprintk+0x300>
40080ddd:	0a4d00        	add.s	f4, f13, f0
		++fmt;
40080de0:	9198      	l32i.n	a9, a1, 36
40080de2:	991b      	addi.n	a9, a9, 1
40080de4:	9199      	s32i.n	a9, a1, 36
	while (*fmt) {
40080de6:	9198      	l32i.n	a9, a1, 36
40080de8:	0009a2        	l8ui	a10, a9, 0
40080deb:	d0da56        	bnez	a10, 40080afc <z_vprintk+0x1c>
}
40080dee:	f01d      	retw.n

40080df0 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
40080df0:	008136        	entry	a1, 64
	struct out_context ctx = { 0 };
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
40080df3:	fdeea1        	l32r	a10, 400805ac <_iram_text_start+0x64>
	struct out_context ctx = { 0 };
40080df6:	00a082        	movi	a8, 0
	z_vprintk(char_out, &ctx, fmt, ap);
40080df9:	20d330        	or	a13, a3, a3
40080dfc:	20e440        	or	a14, a4, a4
40080dff:	05fd      	mov.n	a15, a5
40080e01:	02cd      	mov.n	a12, a2
40080e03:	01bd      	mov.n	a11, a1
	struct out_context ctx = { 0 };
40080e05:	0189      	s32i.n	a8, a1, 0
	z_vprintk(char_out, &ctx, fmt, ap);
40080e07:	ffcda5        	call8	40080ae0 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
40080e0a:	f01d      	retw.n

40080e0c <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
40080e0c:	00a136        	entry	a1, 80
	va_list ap;

	va_start(ap, fmt);
40080e0f:	10c1c2        	addi	a12, a1, 16
40080e12:	30c1b2        	addi	a11, a1, 48
40080e15:	4d0c      	movi.n	a13, 4

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
40080e17:	02ad      	mov.n	a10, a2
	va_start(ap, fmt);
40080e19:	5139      	s32i.n	a3, a1, 20
40080e1b:	6149      	s32i.n	a4, a1, 24
40080e1d:	7159      	s32i.n	a5, a1, 28
40080e1f:	8169      	s32i.n	a6, a1, 32
40080e21:	9179      	s32i.n	a7, a1, 36
40080e23:	11c9      	s32i.n	a12, a1, 4
40080e25:	01b9      	s32i.n	a11, a1, 0
40080e27:	21d9      	s32i.n	a13, a1, 8
		vprintk(fmt, ap);
40080e29:	fffc65        	call8	40080df0 <vprintk>
	}
	va_end(ap);
}
40080e2c:	f01d      	retw.n
	...

40080e30 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
40080e30:	004136        	entry	a1, 32
	entry(p1, p2, p3);
40080e33:	20c550        	or	a12, a5, a5
40080e36:	20b440        	or	a11, a4, a4
40080e39:	03ad      	mov.n	a10, a3
40080e3b:	0002e0        	callx8	a2
	if (z_syscall_trap()) {
		return (k_tid_t) arch_syscall_invoke0(K_SYSCALL_K_CURRENT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_current_get();
40080e3e:	01ff25        	call8	40082e30 <z_impl_k_current_get>
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
40080e41:	021425        	call8	40082f84 <z_impl_k_thread_abort>

40080e44 <chunk_field>:
	return (chunk_unit_t *)h;
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
40080e44:	004136        	entry	a1, 32
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
40080e47:	1133d0        	slli	a3, a3, 3
40080e4a:	323a      	add.n	a3, a2, a3

	if (big_heap(h)) {
40080e4c:	fdd981        	l32r	a8, 400805b0 <_iram_text_start+0x68>
40080e4f:	2228      	l32i.n	a2, a2, 8
40080e51:	0bb827        	bgeu	a8, a2, 40080e60 <chunk_field+0x1c>
		return ((uint32_t *)cmem)[f];
40080e54:	1144e0        	slli	a4, a4, 2
40080e57:	334a      	add.n	a3, a3, a4
40080e59:	0328      	l32i.n	a2, a3, 0
40080e5b:	000246        	j	40080e68 <chunk_field+0x24>
40080e5e:	f00000        	subx8	a0, a0, a0
	} else {
		return ((uint16_t *)cmem)[f];
40080e61:	4a1144        	mula.da.lh.ldinc	m1, a1, m0, a4
40080e64:	132233        	lsi	f3, a2, 76
40080e67:	f01d00        	subx8	a1, a13, a0
	...

40080e6c <chunk_set>:
	}
}

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
40080e6c:	004136        	entry	a1, 32
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
40080e6f:	1133d0        	slli	a3, a3, 3
40080e72:	323a      	add.n	a3, a2, a3

	if (big_heap(h)) {
40080e74:	fdcf81        	l32r	a8, 400805b0 <_iram_text_start+0x68>
40080e77:	2228      	l32i.n	a2, a2, 8
40080e79:	0bb827        	bgeu	a8, a2, 40080e88 <chunk_set+0x1c>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
40080e7c:	1144e0        	slli	a4, a4, 2
40080e7f:	334a      	add.n	a3, a3, a4
40080e81:	0359      	s32i.n	a5, a3, 0
40080e83:	000246        	j	40080e90 <chunk_set+0x24>
40080e86:	f00000        	subx8	a0, a0, a0
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
40080e89:	4a1144        	mula.da.lh.ldinc	m1, a1, m0, a4
40080e8c:	535233        	lsi	f3, a2, 0x14c
40080e8f:	f01d00        	subx8	a1, a13, a0
	...

40080e94 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
40080e94:	004136        	entry	a1, 32
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
40080e97:	1c0c      	movi.n	a12, 1
40080e99:	03bd      	mov.n	a11, a3
40080e9b:	02ad      	mov.n	a10, a2
40080e9d:	fffa65        	call8	40080e44 <chunk_field>
}
40080ea0:	4121a0        	srli	a2, a10, 1
40080ea3:	f01d      	retw.n
40080ea5:	000000        	ill

40080ea8 <set_chunk_used>:

static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
40080ea8:	004136        	entry	a1, 32
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
40080eab:	1133d0        	slli	a3, a3, 3
40080eae:	323a      	add.n	a3, a2, a3

	if (big_heap(h)) {
40080eb0:	fdc081        	l32r	a8, 400805b0 <_iram_text_start+0x68>
40080eb3:	2228      	l32i.n	a2, a2, 8
40080eb5:	17b827        	bgeu	a8, a2, 40080ed0 <set_chunk_used+0x28>
		if (used) {
40080eb8:	1388      	l32i.n	a8, a3, 4
40080eba:	648c      	beqz.n	a4, 40080ec4 <set_chunk_used+0x1c>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
40080ebc:	120c      	movi.n	a2, 1
40080ebe:	208820        	or	a8, a8, a2
40080ec1:	000106        	j	40080ec9 <set_chunk_used+0x21>
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
40080ec4:	e27c      	movi.n	a2, -2
40080ec6:	108820        	and	a8, a8, a2
40080ec9:	1389      	s32i.n	a8, a3, 4
40080ecb:	000586        	j	40080ee5 <set_chunk_used+0x3d>
40080ece:	820000        	mull	a0, a0, a0
		}
	} else {
		if (used) {
40080ed1:	8c0113        	lsi	f1, a1, 0x230
40080ed4:	120c64        	lsi	f6, a12, 72
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
40080ed7:	208820        	or	a8, a8, a2
40080eda:	000106        	j	40080ee2 <set_chunk_used+0x3a>
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
40080edd:	e27c      	movi.n	a2, -2
40080edf:	108820        	and	a8, a8, a2
40080ee2:	015382        	s16i	a8, a3, 2
		}
	}
}
40080ee5:	f01d      	retw.n
	...

40080ee8 <set_chunk_size>:
 * Note: no need to preserve the used bit here as the chunk is never in use
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
40080ee8:	004136        	entry	a1, 32
	chunk_set(h, c, SIZE_AND_USED, size << 1);
40080eeb:	11d4f0        	slli	a13, a4, 1
40080eee:	01a0c2        	movi	a12, 1
40080ef1:	20b330        	or	a11, a3, a3
40080ef4:	20a220        	or	a10, a2, a2
40080ef7:	fff765        	call8	40080e6c <chunk_set>
}
40080efa:	f01d      	retw.n

40080efc <bucket_idx>:
{
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
40080efc:	004136        	entry	a1, 32
	return big_heap(h) ? 8 : 4;
40080eff:	fdac91        	l32r	a9, 400805b0 <_iram_text_start+0x68>
40080f02:	2228      	l32i.n	a2, a2, 8
40080f04:	880c      	movi.n	a8, 8
40080f06:	023927        	bltu	a9, a2, 40080f0c <bucket_idx+0x10>
40080f09:	04a082        	movi	a8, 4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
40080f0c:	888b      	addi.n	a8, a8, 8
40080f0e:	412380        	srli	a2, a8, 3
	size_t usable_sz = sz - min_chunk_size(h) + 1;
40080f11:	331b      	addi.n	a3, a3, 1
40080f13:	c03320        	sub	a3, a3, a2
	return 31 - __builtin_clz(usable_sz);
40080f16:	40f330        	nsau	a3, a3
}
40080f19:	f21c      	movi.n	a2, 31
40080f1b:	c02230        	sub	a2, a2, a3
40080f1e:	f01d      	retw.n

40080f20 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
40080f20:	004136        	entry	a1, 32
	return sizeof(void *) > 4 || chunks > 0x7fff;
40080f23:	03bd      	mov.n	a11, a3
40080f25:	02ad      	mov.n	a10, a2
40080f27:	fff6e5        	call8	40080e94 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
40080f2a:	fda151        	l32r	a5, 400805b0 <_iram_text_start+0x68>
40080f2d:	2248      	l32i.n	a4, a2, 8
40080f2f:	05b547        	bgeu	a5, a4, 40080f38 <free_list_add+0x18>
	if (!solo_free_header(h, c)) {
40080f32:	021a66        	bnei	a10, 1, 40080f38 <free_list_add+0x18>
40080f35:	001bc6        	j	40080fa8 <free_list_add+0x88>
		int bidx = bucket_idx(h, chunk_size(h, c));
40080f38:	0abd      	mov.n	a11, a10
40080f3a:	02ad      	mov.n	a10, a2
40080f3c:	fffbe5        	call8	40080efc <bucket_idx>
	if (b->next == 0) {
40080f3f:	118ae0        	slli	a8, a10, 2
40080f42:	828a      	add.n	a8, a2, a8
40080f44:	4848      	l32i.n	a4, a8, 16
40080f46:	44ec      	bnez.n	a4, 40080f6e <free_list_add+0x4e>
		h->avail_buckets |= (1 << bidx);
40080f48:	140c      	movi.n	a4, 1
40080f4a:	401a00        	ssl	a10
40080f4d:	a14400        	sll	a4, a4
40080f50:	32a8      	l32i.n	a10, a2, 12
	chunk_set(h, c, FREE_PREV, prev);
40080f52:	03dd      	mov.n	a13, a3
40080f54:	20aa40        	or	a10, a10, a4
40080f57:	32a9      	s32i.n	a10, a2, 12
40080f59:	2c0c      	movi.n	a12, 2
40080f5b:	03bd      	mov.n	a11, a3
		b->next = c;
40080f5d:	4839      	s32i.n	a3, a8, 16
40080f5f:	02ad      	mov.n	a10, a2
40080f61:	fff0a5        	call8	40080e6c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
40080f64:	03dd      	mov.n	a13, a3
40080f66:	3c0c      	movi.n	a12, 3
40080f68:	03bd      	mov.n	a11, a3
40080f6a:	000d46        	j	40080fa3 <free_list_add+0x83>
40080f6d:	a0c200        	addx4	a12, a2, a0
	return chunk_field(h, c, FREE_PREV);
40080f70:	b44002        	s8i	a0, a0, 180
40080f73:	a22020        	muluh	a2, a0, a2
40080f76:	ece520        	lsi	f2, a5, 0x3b0
40080f79:	ff          	.byte 0xff
	chunk_set(h, c, FREE_PREV, prev);
40080f7a:	0add      	mov.n	a13, a10
	return chunk_field(h, c, FREE_PREV);
40080f7c:	0a5d      	mov.n	a5, a10
	chunk_set(h, c, FREE_PREV, prev);
40080f7e:	2c0c      	movi.n	a12, 2
40080f80:	03bd      	mov.n	a11, a3
40080f82:	02ad      	mov.n	a10, a2
40080f84:	ffee65        	call8	40080e6c <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
40080f87:	04dd      	mov.n	a13, a4
40080f89:	3c0c      	movi.n	a12, 3
40080f8b:	03bd      	mov.n	a11, a3
40080f8d:	02ad      	mov.n	a10, a2
40080f8f:	ffede5        	call8	40080e6c <chunk_set>
40080f92:	03dd      	mov.n	a13, a3
40080f94:	3c0c      	movi.n	a12, 3
40080f96:	05bd      	mov.n	a11, a5
40080f98:	02ad      	mov.n	a10, a2
40080f9a:	ffed25        	call8	40080e6c <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
40080f9d:	03dd      	mov.n	a13, a3
40080f9f:	2c0c      	movi.n	a12, 2
40080fa1:	04bd      	mov.n	a11, a4
40080fa3:	02ad      	mov.n	a10, a2
40080fa5:	ffec65        	call8	40080e6c <chunk_set>
		free_list_add_bidx(h, c, bidx);
	}
}
40080fa8:	f01d      	retw.n
	...

40080fac <sys_heap_init>:
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
40080fac:	004136        	entry	a1, 32
	return big_heap_bytes(size) ? 8 : 4;
40080faf:	fd8151        	l32r	a5, 400805b4 <_iram_text_start+0x6c>
40080fb2:	890c      	movi.n	a9, 8
40080fb4:	013547        	bltu	a5, a4, 40080fb9 <sys_heap_init+0xd>
40080fb7:	490c      	movi.n	a9, 4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
40080fb9:	c04490        	sub	a4, a4, a9

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
40080fbc:	887c      	movi.n	a8, -8
40080fbe:	537b      	addi.n	a5, a3, 7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
40080fc0:	334a      	add.n	a3, a3, a4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
40080fc2:	105580        	and	a5, a5, a8
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
40080fc5:	103380        	and	a3, a3, a8
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
40080fc8:	fd7c91        	l32r	a9, 400805b8 <_iram_text_start+0x70>
40080fcb:	fd7b81        	l32r	a8, 400805b8 <_iram_text_start+0x70>
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
40080fce:	c03350        	sub	a3, a3, a5
	heap->heap = h;
40080fd1:	0259      	s32i.n	a5, a2, 0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
40080fd3:	413330        	srli	a3, a3, 3
	h->len = buf_sz;
	h->avail_buckets = 0;
40080fd6:	040c      	movi.n	a4, 0
	h->chunk0_hdr_area = 0;
40080fd8:	0589      	s32i.n	a8, a5, 0
40080fda:	1599      	s32i.n	a9, a5, 4

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
40080fdc:	03bd      	mov.n	a11, a3
	h->len = buf_sz;
40080fde:	2539      	s32i.n	a3, a5, 8
	h->avail_buckets = 0;
40080fe0:	3549      	s32i.n	a4, a5, 12
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
40080fe2:	20a550        	or	a10, a5, a5
40080fe5:	fff165        	call8	40080efc <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
40080fe8:	112ae0        	slli	a2, a10, 2
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
40080feb:	1bc222        	addi	a2, a2, 27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
40080fee:	ba1b      	addi.n	a11, a10, 1
40080ff0:	412320        	srli	a2, a2, 3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
40080ff3:	10c592        	addi	a9, a5, 16
40080ff6:	048d      	mov.n	a8, a4
40080ff8:	000186        	j	40081002 <sys_heap_init+0x56>
40080ffb:	094900        	l32e	a0, a9, -48
40080ffe:	881b      	addi.n	a8, a8, 1
40081000:	994b      	addi.n	a9, a9, 4
40081002:	f628b7        	blt	a8, a11, 40080ffc <sys_heap_init+0x50>
		h->buckets[i].next = 0;
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
40081005:	02cd      	mov.n	a12, a2
40081007:	05ad      	mov.n	a10, a5
40081009:	0b0c      	movi.n	a11, 0
4008100b:	ffede5        	call8	40080ee8 <set_chunk_size>
	set_chunk_used(h, 0, true);
4008100e:	05ad      	mov.n	a10, a5
40081010:	1c0c      	movi.n	a12, 1
40081012:	0b0c      	movi.n	a11, 0
40081014:	ffe925        	call8	40080ea8 <set_chunk_used>

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
40081017:	c04320        	sub	a4, a3, a2
4008101a:	04cd      	mov.n	a12, a4
4008101c:	02bd      	mov.n	a11, a2
4008101e:	05ad      	mov.n	a10, a5
40081020:	ffec65        	call8	40080ee8 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
40081023:	02dd      	mov.n	a13, a2
40081025:	02bd      	mov.n	a11, a2
40081027:	05ad      	mov.n	a10, a5
40081029:	0c0c      	movi.n	a12, 0
4008102b:	ffe425        	call8	40080e6c <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
4008102e:	03bd      	mov.n	a11, a3
40081030:	05ad      	mov.n	a10, a5
40081032:	0c0c      	movi.n	a12, 0
40081034:	ffeb25        	call8	40080ee8 <set_chunk_size>
40081037:	04dd      	mov.n	a13, a4
40081039:	03bd      	mov.n	a11, a3
4008103b:	05ad      	mov.n	a10, a5
4008103d:	0c0c      	movi.n	a12, 0
4008103f:	ffe2e5        	call8	40080e6c <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
40081042:	03bd      	mov.n	a11, a3
40081044:	05ad      	mov.n	a10, a5
40081046:	1c0c      	movi.n	a12, 1
40081048:	ffe5e5        	call8	40080ea8 <set_chunk_used>

	free_list_add(h, chunk0_size);
4008104b:	02bd      	mov.n	a11, a2
4008104d:	05ad      	mov.n	a10, a5
4008104f:	ffed25        	call8	40080f20 <free_list_add>
}
40081052:	f01d      	retw.n

40081054 <arch_printk_char_out>:
	CODE_UNREACHABLE;
}

/* Boot-time static default printk handler, possibly to be overridden later. */
int arch_printk_char_out(int c)
{
40081054:	004136        	entry	a1, 32
	if (c == '\n') {
40081057:	079266        	bnei	a2, 10, 40081062 <arch_printk_char_out+0xe>
		esp32_rom_uart_tx_one_char('\r');
4008105a:	da0c      	movi.n	a10, 13
4008105c:	fd5881        	l32r	a8, 400805bc <_iram_text_start+0x74>
4008105f:	0008e0        	callx8	a8
	}
	esp32_rom_uart_tx_one_char(c);
40081062:	74a020        	extui	a10, a2, 0, 8
40081065:	fd5581        	l32r	a8, 400805bc <_iram_text_start+0x74>
40081068:	0008e0        	callx8	a8
	return 0;
}
4008106b:	020c      	movi.n	a2, 0
4008106d:	f01d      	retw.n
	...

40081070 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
40081070:	004136        	entry	a1, 32
40081073:	fd53a1        	l32r	a10, 400805c0 <_iram_text_start+0x78>
40081076:	0154a5        	call8	400825c0 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
40081079:	fd5221        	l32r	a2, 400805c4 <_iram_text_start+0x7c>
4008107c:	0062a2        	s32i	a10, a2, 0
	__stdout_hook_install(console_out);
4008107f:	fd5221        	l32r	a2, 400805c8 <_iram_text_start+0x80>
40081082:	02ad      	mov.n	a10, a2
40081084:	00a9a5        	call8	40081b20 <__stdout_hook_install>
	__printk_hook_install(console_out);
40081087:	02ad      	mov.n	a10, a2
40081089:	ffa4a5        	call8	40080ad4 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
4008108c:	020c      	movi.n	a2, 0
4008108e:	f01d      	retw.n

40081090 <console_out>:
{
40081090:	004136        	entry	a1, 32
	if ('\n' == c) {
40081093:	fd4c31        	l32r	a3, 400805c4 <_iram_text_start+0x7c>
40081096:	0a9266        	bnei	a2, 10, 400810a4 <console_out+0x14>
40081099:	03a8      	l32i.n	a10, a3, 0
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
4008109b:	2a88      	l32i.n	a8, a10, 8
4008109d:	db0c      	movi.n	a11, 13
4008109f:	1888      	l32i.n	a8, a8, 4
400810a1:	0008e0        	callx8	a8
	uart_poll_out(uart_console_dev, c);
400810a4:	03a8      	l32i.n	a10, a3, 0
400810a6:	2a38      	l32i.n	a3, a10, 8
400810a8:	74b020        	extui	a11, a2, 0, 8
400810ab:	1338      	l32i.n	a3, a3, 4
400810ad:	0003e0        	callx8	a3
}
400810b0:	f01d      	retw.n
	...

400810b4 <clock_control_esp32_on>:
	REG_WRITE(APB_CTRL_PLL_TICK_CONF_REG, PLL_APB_CLK_FREQ - 1);
}

static int clock_control_esp32_on(const struct device *dev,
				  clock_control_subsys_t sys)
{
400810b4:	004136        	entry	a1, 32
	uint32_t bank = GET_REG_BANK(sys);
	uint32_t offset =  GET_REG_OFFSET(sys);

	__ASSERT_NO_MSG(bank >= CLOCK_REGS_BANK_COUNT);

	esp32_set_mask32(BIT(offset), clock_control_regs[bank].clk);
400810b7:	180c      	movi.n	a8, 1
	uint32_t bank = GET_REG_BANK(sys);
400810b9:	419530        	srli	a9, a3, 5
	esp32_set_mask32(BIT(offset), clock_control_regs[bank].clk);
400810bc:	401300        	ssl	a3
400810bf:	a13800        	sll	a3, a8
400810c2:	fd4281        	l32r	a8, 400805cc <_iram_text_start+0x84>
400810c5:	1199d0        	slli	a9, a9, 3
400810c8:	889a      	add.n	a8, a8, a9
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
400810ca:	08a8      	l32i.n	a10, a8, 0
	esp32_clear_mask32(BIT(offset), clock_control_regs[bank].rst);
	return 0;
}
400810cc:	020c      	movi.n	a2, 0
400810ce:	0020c0        	memw
400810d1:	0a98      	l32i.n	a9, a10, 0
#include <stdbool.h>
#include <arch/xtensa/arch.h>

static inline void esp32_set_mask32(uint32_t v, uint32_t mem_addr)
{
	sys_write32(sys_read32(mem_addr) | v, mem_addr);
400810d3:	209390        	or	a9, a3, a9
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
400810d6:	0020c0        	memw
400810d9:	0a99      	s32i.n	a9, a10, 0
	return *(volatile uint32_t *)addr;
400810db:	1898      	l32i.n	a9, a8, 4
}

static inline void esp32_clear_mask32(uint32_t v, uint32_t mem_addr)
{
	sys_write32(sys_read32(mem_addr) & ~v, mem_addr);
400810dd:	f87c      	movi.n	a8, -1
400810df:	0020c0        	memw
400810e2:	09a8      	l32i.n	a10, a9, 0
400810e4:	308830        	xor	a8, a8, a3
400810e7:	1088a0        	and	a8, a8, a10
	*(volatile uint32_t *)addr = data;
400810ea:	0020c0        	memw
400810ed:	0989      	s32i.n	a8, a9, 0
400810ef:	f01d      	retw.n
400810f1:	000000        	ill

400810f4 <clock_control_esp32_get_status>:
	return 0;
}

static enum clock_control_status clock_control_esp32_get_status(const struct device *dev,
								clock_control_subsys_t sys)
{
400810f4:	004136        	entry	a1, 32
	ARG_UNUSED(dev);
	uint32_t bank = GET_REG_BANK(sys);
400810f7:	418530        	srli	a8, a3, 5
	uint32_t offset =  GET_REG_OFFSET(sys);

	if (DPORT_GET_PERI_REG_MASK(clock_control_regs[bank].clk, BIT(offset))) {
400810fa:	1198d0        	slli	a9, a8, 3
400810fd:	fd3381        	l32r	a8, 400805cc <_iram_text_start+0x84>
40081100:	889a      	add.n	a8, a8, a9
 * @return Value
 */
static inline uint32_t IRAM_ATTR DPORT_READ_PERI_REG(uint32_t reg)
{
#if defined(BOOTLOADER_BUILD) || defined(CONFIG_FREERTOS_UNICORE) || !defined(ESP_PLATFORM)
    return _DPORT_REG_READ(reg);
40081102:	0828      	l32i.n	a2, a8, 0
		return CLOCK_CONTROL_STATUS_ON;
	}
	return CLOCK_CONTROL_STATUS_OFF;
}
40081104:	180c      	movi.n	a8, 1
40081106:	0020c0        	memw
40081109:	0228      	l32i.n	a2, a2, 0
	if (DPORT_GET_PERI_REG_MASK(clock_control_regs[bank].clk, BIT(offset))) {
4008110b:	400300        	ssr	a3
4008110e:	912020        	srl	a2, a2
40081111:	043020        	extui	a3, a2, 0, 1
}
40081114:	220c      	movi.n	a2, 2
40081116:	832830        	moveqz	a2, a8, a3
40081119:	f01d      	retw.n
	...

4008111c <clock_control_esp32_get_rate>:

static int clock_control_esp32_get_rate(const struct device *dev,
					clock_control_subsys_t sub_system,
					uint32_t *rate)
{
4008111c:	004136        	entry	a1, 32
	ARG_UNUSED(sub_system);

	uint32_t xtal_freq_sel = DEV_CFG(dev)->xtal_freq_sel;
	uint32_t soc_clk_sel = REG_GET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL);
4008111f:	fd2c81        	l32r	a8, 400805d0 <_iram_text_start+0x88>
40081122:	0020c0        	memw
40081125:	0888      	l32i.n	a8, a8, 0
40081127:	158b80        	extui	a8, a8, 27, 2

	switch (soc_clk_sel) {
4008112a:	688c      	beqz.n	a8, 40081134 <clock_control_esp32_get_rate+0x18>
4008112c:	020c      	movi.n	a2, 0
4008112e:	171826        	beqi	a8, 1, 40081149 <clock_control_esp32_get_rate+0x2d>
40081131:	000706        	j	40081151 <clock_control_esp32_get_rate+0x35>
	uint32_t xtal_freq_sel = DEV_CFG(dev)->xtal_freq_sel;
40081134:	1228      	l32i.n	a2, a2, 4
	case RTC_CNTL_SOC_CLK_SEL_XTL:
		*rate = xtal_freq[xtal_freq_sel];
40081136:	2228      	l32i.n	a2, a2, 8
40081138:	1192e0        	slli	a9, a2, 2
4008113b:	fd2621        	l32r	a2, 400805d4 <_iram_text_start+0x8c>
4008113e:	229a      	add.n	a2, a2, a9
40081140:	0228      	l32i.n	a2, a2, 0
40081142:	0429      	s32i.n	a2, a4, 0
		return 0;
40081144:	082d      	mov.n	a2, a8
40081146:	000306        	j	40081156 <clock_control_esp32_get_rate+0x3a>
	case RTC_CNTL_SOC_CLK_SEL_PLL:
		*rate = MHZ(80);
40081149:	fd2381        	l32r	a8, 400805d8 <_iram_text_start+0x90>
4008114c:	0489      	s32i.n	a8, a4, 0
		return 0;
4008114e:	000106        	j	40081156 <clock_control_esp32_get_rate+0x3a>
	default:
		*rate = 0;
40081151:	0429      	s32i.n	a2, a4, 0
		return -ENOTSUP;
40081153:	ddaf22        	movi	a2, -35
	}
}
40081156:	f01d      	retw.n

40081158 <clock_control_esp32_init>:

static int clock_control_esp32_init(const struct device *dev)
{
40081158:	004136        	entry	a1, 32
	struct esp32_clock_config *cfg = DEV_CFG(dev);
4008115b:	1238      	l32i.n	a3, a2, 4

	/* Wait for UART first before changing freq to avoid garbage on console */
	esp32_rom_uart_tx_wait_idle(0);
4008115d:	0a0c      	movi.n	a10, 0
4008115f:	fd2b81        	l32r	a8, 4008060c <_iram_text_start+0xc4>
40081162:	0008e0        	callx8	a8

	switch (cfg->clk_src_sel) {
40081165:	0368      	l32i.n	a6, a3, 0
40081167:	968c      	beqz.n	a6, 40081174 <clock_control_esp32_init+0x1c>
		break;
	case ESP32_CLK_SRC_PLL:
		cpuclk_pll_configure(cfg->xtal_freq_sel, cfg->cpu_freq);
		break;
	default:
		return -EINVAL;
40081169:	a26c      	movi.n	a2, -22
	switch (cfg->clk_src_sel) {
4008116b:	021626        	beqi	a6, 1, 40081171 <clock_control_esp32_init+0x19>
4008116e:	006ec6        	j	4008132d <clock_control_esp32_init+0x1d5>
40081171:	001186        	j	400811bb <clock_control_esp32_init+0x63>
		REG_SET_FIELD(APB_CTRL_SYSCLK_CONF_REG, APB_CTRL_PRE_DIV_CNT, cfg->xtal_div);
40081174:	fd1a51        	l32r	a5, 400805dc <_iram_text_start+0x94>
40081177:	3328      	l32i.n	a2, a3, 12
40081179:	0020c0        	memw
4008117c:	0548      	l32i.n	a4, a5, 0
4008117e:	00ac62        	movi	a6, 0xfffffc00
40081181:	104460        	and	a4, a4, a6
40081184:	942020        	extui	a2, a2, 0, 10
40081187:	202240        	or	a2, a2, a4
4008118a:	0020c0        	memw
4008118d:	0529      	s32i.n	a2, a5, 0
		REG_WRITE(APB_CTRL_XTAL_TICK_CONF_REG, xtal_freq[cfg->xtal_freq_sel] - 1);
4008118f:	2328      	l32i.n	a2, a3, 8
		REG_SET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL, RTC_CNTL_SOC_CLK_SEL_XTL);
40081191:	fd1451        	l32r	a5, 400805e4 <_iram_text_start+0x9c>
		REG_WRITE(APB_CTRL_XTAL_TICK_CONF_REG, xtal_freq[cfg->xtal_freq_sel] - 1);
40081194:	1142e0        	slli	a4, a2, 2
40081197:	fd0f21        	l32r	a2, 400805d4 <_iram_text_start+0x8c>
4008119a:	224a      	add.n	a2, a2, a4
4008119c:	0228      	l32i.n	a2, a2, 0
4008119e:	fd1041        	l32r	a4, 400805e0 <_iram_text_start+0x98>
400811a1:	220b      	addi.n	a2, a2, -1
400811a3:	0020c0        	memw
400811a6:	0429      	s32i.n	a2, a4, 0
		REG_SET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL, RTC_CNTL_SOC_CLK_SEL_XTL);
400811a8:	fd0a41        	l32r	a4, 400805d0 <_iram_text_start+0x88>
400811ab:	0020c0        	memw
400811ae:	0428      	l32i.n	a2, a4, 0
400811b0:	102250        	and	a2, a2, a5
400811b3:	0020c0        	memw
400811b6:	0429      	s32i.n	a2, a4, 0
		break;
400811b8:	0051c6        	j	40081303 <clock_control_esp32_init+0x1ab>
		cpuclk_pll_configure(cfg->xtal_freq_sel, cfg->cpu_freq);
400811bb:	1328      	l32i.n	a2, a3, 4
	switch (cpu_freq) {
400811bd:	a0a042        	movi	a4, 160
		cpuclk_pll_configure(cfg->xtal_freq_sel, cfg->cpu_freq);
400811c0:	2378      	l32i.n	a7, a3, 8
	switch (cpu_freq) {
400811c2:	0c1247        	beq	a2, a4, 400811d2 <clock_control_esp32_init+0x7a>
400811c5:	f0a052        	movi	a5, 240
		cpu_period_sel = DPORT_CPUPERIOD_SEL_240;
400811c8:	240c      	movi.n	a4, 2
	switch (cpu_freq) {
400811ca:	081257        	beq	a2, a5, 400811d6 <clock_control_esp32_init+0x7e>
	uint32_t cpu_period_sel = DPORT_CPUPERIOD_SEL_80;
400811cd:	040c      	movi.n	a4, 0
400811cf:	000046        	j	400811d4 <clock_control_esp32_init+0x7c>
		cpu_period_sel = DPORT_CPUPERIOD_SEL_160;
400811d2:	064d      	mov.n	a4, a6
		pll_freq = RTC_PLL_FREQ_320M;
400811d4:	060c      	movi.n	a6, 0
	CLEAR_PERI_REG_MASK(RTC_CNTL_OPTIONS0_REG,
400811d6:	fd0451        	l32r	a5, 400805e8 <_iram_text_start+0xa0>
400811d9:	fd0481        	l32r	a8, 400805ec <_iram_text_start+0xa4>
400811dc:	0020c0        	memw
400811df:	0528      	l32i.n	a2, a5, 0
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_IR_CAL_DELAY, BBPLL_IR_CAL_DELAY_VAL);
400811e1:	8d1c      	movi.n	a13, 24
	CLEAR_PERI_REG_MASK(RTC_CNTL_OPTIONS0_REG,
400811e3:	102280        	and	a2, a2, a8
400811e6:	0020c0        	memw
400811e9:	0529      	s32i.n	a2, a5, 0
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_IR_CAL_DELAY, BBPLL_IR_CAL_DELAY_VAL);
400811eb:	0c0c      	movi.n	a12, 0
400811ed:	04a0b2        	movi	a11, 4
400811f0:	66a0a2        	movi	a10, 102
400811f3:	fd0781        	l32r	a8, 40080610 <_iram_text_start+0xc8>
400811f6:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_IR_CAL_EXT_CAP, BBPLL_IR_CAL_EXT_CAP_VAL);
400811f9:	0d2c      	movi.n	a13, 32
400811fb:	1c0c      	movi.n	a12, 1
400811fd:	04a0b2        	movi	a11, 4
40081200:	66a0a2        	movi	a10, 102
40081203:	fd0381        	l32r	a8, 40080610 <_iram_text_start+0xc8>
40081206:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_ENB_FCAL, BBPLL_OC_ENB_FCAL_VAL);
40081209:	4c0c      	movi.n	a12, 4
4008120b:	0cbd      	mov.n	a11, a12
4008120d:	9aa0d2        	movi	a13, 154
40081210:	66a0a2        	movi	a10, 102
40081213:	fcff81        	l32r	a8, 40080610 <_iram_text_start+0xc8>
40081216:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_ENB_VCON, BBPLL_OC_ENB_VCON_VAL);
40081219:	0d0c      	movi.n	a13, 0
4008121b:	ac0c      	movi.n	a12, 10
4008121d:	4b0c      	movi.n	a11, 4
4008121f:	66a0a2        	movi	a10, 102
40081222:	fcfb81        	l32r	a8, 40080610 <_iram_text_start+0xc8>
40081225:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_BBADC_CAL_7_0, BBPLL_BBADC_CAL_7_0_VAL);
40081228:	0d0c      	movi.n	a13, 0
4008122a:	cc0c      	movi.n	a12, 12
4008122c:	4b0c      	movi.n	a11, 4
4008122e:	66a0a2        	movi	a10, 102
40081231:	fcf781        	l32r	a8, 40080610 <_iram_text_start+0xc8>
40081234:	0008e0        	callx8	a8
	REG_SET_FIELD(RTC_CNTL_REG, RTC_CNTL_DIG_DBIAS_WAK, dbias_wak);
40081237:	fcee21        	l32r	a2, 400805f0 <_iram_text_start+0xa8>
4008123a:	fcee81        	l32r	a8, 400805f4 <_iram_text_start+0xac>
4008123d:	0020c0        	memw
40081240:	0258      	l32i.n	a5, a2, 0
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_ENDIV5, cfg->endiv5);
40081242:	bc0c      	movi.n	a12, 11
	REG_SET_FIELD(RTC_CNTL_REG, RTC_CNTL_DIG_DBIAS_WAK, dbias_wak);
40081244:	105580        	and	a5, a5, a8
40081247:	fcec81        	l32r	a8, 400805f8 <_iram_text_start+0xb0>
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_ENDIV5, cfg->endiv5);
4008124a:	4b0c      	movi.n	a11, 4
	REG_SET_FIELD(RTC_CNTL_REG, RTC_CNTL_DIG_DBIAS_WAK, dbias_wak);
4008124c:	205580        	or	a5, a5, a8
4008124f:	0020c0        	memw
40081252:	0259      	s32i.n	a5, a2, 0
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_ENDIV5, cfg->endiv5);
40081254:	fcea51        	l32r	a5, 400805fc <_iram_text_start+0xb4>
40081257:	1126c0        	slli	a2, a6, 4
4008125a:	c06260        	sub	a6, a2, a6
4008125d:	256a      	add.n	a2, a5, a6
4008125f:	0102d2        	l8ui	a13, a2, 1
40081262:	66a0a2        	movi	a10, 102
40081265:	fcea81        	l32r	a8, 40080610 <_iram_text_start+0xc8>
40081268:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_BBADC_DSMP, cfg->bbadc_dsmp);
4008126b:	0202d2        	l8ui	a13, a2, 2
	uint8_t i2c_bbpll_lref = (bb_cfg->lref << 7) | (bb_cfg->div10_8 << 4) | (bb_cfg->div_ref);
4008126e:	1127f0        	slli	a2, a7, 1
40081271:	227a      	add.n	a2, a2, a7
40081273:	1122f0        	slli	a2, a2, 1
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_BBADC_DSMP, cfg->bbadc_dsmp);
40081276:	9c0c      	movi.n	a12, 9
40081278:	4b0c      	movi.n	a11, 4
4008127a:	66a0a2        	movi	a10, 102
	uint8_t i2c_bbpll_lref = (bb_cfg->lref << 7) | (bb_cfg->div10_8 << 4) | (bb_cfg->div_ref);
4008127d:	226a      	add.n	a2, a2, a6
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_BBADC_DSMP, cfg->bbadc_dsmp);
4008127f:	fce481        	l32r	a8, 40080610 <_iram_text_start+0xc8>
40081282:	0008e0        	callx8	a8
	uint8_t i2c_bbpll_lref = (bb_cfg->lref << 7) | (bb_cfg->div10_8 << 4) | (bb_cfg->div_ref);
40081285:	252a      	add.n	a2, a5, a2
40081287:	0602d2        	l8ui	a13, a2, 6
4008128a:	050252        	l8ui	a5, a2, 5
4008128d:	11dd90        	slli	a13, a13, 7
40081290:	1155c0        	slli	a5, a5, 4
40081293:	20dd50        	or	a13, a13, a5
40081296:	030252        	l8ui	a5, a2, 3
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_LREF, i2c_bbpll_lref);
40081299:	2c0c      	movi.n	a12, 2
	uint8_t i2c_bbpll_lref = (bb_cfg->lref << 7) | (bb_cfg->div10_8 << 4) | (bb_cfg->div_ref);
4008129b:	20dd50        	or	a13, a13, a5
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_LREF, i2c_bbpll_lref);
4008129e:	74d0d0        	extui	a13, a13, 0, 8
400812a1:	4b0c      	movi.n	a11, 4
400812a3:	66a0a2        	movi	a10, 102
400812a6:	fcda81        	l32r	a8, 40080610 <_iram_text_start+0xc8>
400812a9:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_DIV_7_0, bb_cfg->div7_0);
400812ac:	0402d2        	l8ui	a13, a2, 4
400812af:	3c0c      	movi.n	a12, 3
400812b1:	4b0c      	movi.n	a11, 4
400812b3:	66a0a2        	movi	a10, 102
400812b6:	fcd681        	l32r	a8, 40080610 <_iram_text_start+0xc8>
400812b9:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_DCUR, ((bb_cfg->bw << 6) | bb_cfg->dcur));
400812bc:	0802d2        	l8ui	a13, a2, 8
400812bf:	070222        	l8ui	a2, a2, 7
400812c2:	11dda0        	slli	a13, a13, 6
400812c5:	20dd20        	or	a13, a13, a2
400812c8:	74d0d0        	extui	a13, a13, 0, 8
400812cb:	5c0c      	movi.n	a12, 5
400812cd:	4b0c      	movi.n	a11, 4
400812cf:	66a0a2        	movi	a10, 102
400812d2:	fccf81        	l32r	a8, 40080610 <_iram_text_start+0xc8>
400812d5:	0008e0        	callx8	a8
	DPORT_REG_WRITE(DPORT_CPU_PER_CONF_REG, cpu_period_sel);
400812d8:	fcca21        	l32r	a2, 40080600 <_iram_text_start+0xb8>
	REG_SET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL, RTC_CNTL_SOC_CLK_SEL_PLL);
400812db:	fcc251        	l32r	a5, 400805e4 <_iram_text_start+0x9c>
	DPORT_REG_WRITE(DPORT_CPU_PER_CONF_REG, cpu_period_sel);
400812de:	0020c0        	memw
400812e1:	0249      	s32i.n	a4, a2, 0
	REG_SET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL, RTC_CNTL_SOC_CLK_SEL_PLL);
400812e3:	fcbb41        	l32r	a4, 400805d0 <_iram_text_start+0x88>
400812e6:	0020c0        	memw
400812e9:	0428      	l32i.n	a2, a4, 0
400812eb:	102250        	and	a2, a2, a5
400812ee:	fcc551        	l32r	a5, 40080604 <_iram_text_start+0xbc>
400812f1:	202250        	or	a2, a2, a5
400812f4:	0020c0        	memw
400812f7:	0429      	s32i.n	a2, a4, 0
	REG_WRITE(APB_CTRL_PLL_TICK_CONF_REG, PLL_APB_CLK_FREQ - 1);
400812f9:	fcc321        	l32r	a2, 40080608 <_iram_text_start+0xc0>
400812fc:	f44c      	movi.n	a4, 79
400812fe:	0020c0        	memw
40081301:	0249      	s32i.n	a4, a2, 0

	/* Re-calculate the CCOUNT register value to make time calculation correct.
	 * This should be updated on each frequency change
	 * New CCOUNT = Current CCOUNT * (new freq / old freq)
	 */
	XTHAL_SET_CCOUNT((uint64_t)XTHAL_GET_CCOUNT() * cfg->cpu_freq / xtal_freq[cfg->xtal_freq_sel]);
40081303:	03ea40        	rsr.ccount	a4
40081306:	13a8      	l32i.n	a10, a3, 4
40081308:	2338      	l32i.n	a3, a3, 8
4008130a:	312f40        	srai	a2, a4, 31
4008130d:	1153e0        	slli	a5, a3, 2
40081310:	fcb131        	l32r	a3, 400805d4 <_iram_text_start+0x8c>
40081313:	8222a0        	mull	a2, a2, a10
40081316:	a2ba40        	muluh	a11, a10, a4
40081319:	335a      	add.n	a3, a3, a5
4008131b:	03c8      	l32i.n	a12, a3, 0
4008131d:	82aa40        	mull	a10, a10, a4
40081320:	0d0c      	movi.n	a13, 0
40081322:	80b2b0        	add	a11, a2, a11
40081325:	0231a5        	call8	40083640 <__udivdi3>
40081328:	13eaa0        	wsr.ccount	a10
	return 0;
4008132b:	020c      	movi.n	a2, 0
}
4008132d:	f01d      	retw.n
	...

40081330 <clock_control_esp32_off>:
{
40081330:	004136        	entry	a1, 32
	uint32_t bank = GET_REG_BANK(sys);
40081333:	419530        	srli	a9, a3, 5
	esp32_clear_mask32(BIT(offset), clock_control_regs[bank].clk);
40081336:	180c      	movi.n	a8, 1
40081338:	401300        	ssl	a3
4008133b:	a13800        	sll	a3, a8
4008133e:	1189d0        	slli	a8, a9, 3
40081341:	fca291        	l32r	a9, 400805cc <_iram_text_start+0x84>
}
40081344:	020c      	movi.n	a2, 0
	esp32_clear_mask32(BIT(offset), clock_control_regs[bank].clk);
40081346:	998a      	add.n	a9, a9, a8
	return *(volatile uint32_t *)addr;
40081348:	09a8      	l32i.n	a10, a9, 0
4008134a:	f87c      	movi.n	a8, -1
4008134c:	0020c0        	memw
4008134f:	0ab8      	l32i.n	a11, a10, 0
40081351:	308830        	xor	a8, a8, a3
40081354:	1088b0        	and	a8, a8, a11
	*(volatile uint32_t *)addr = data;
40081357:	0020c0        	memw
4008135a:	0a89      	s32i.n	a8, a10, 0
	return *(volatile uint32_t *)addr;
4008135c:	1988      	l32i.n	a8, a9, 4
4008135e:	0020c0        	memw
40081361:	0898      	l32i.n	a9, a8, 0
	sys_write32(sys_read32(mem_addr) | v, mem_addr);
40081363:	203390        	or	a3, a3, a9
	*(volatile uint32_t *)addr = data;
40081366:	0020c0        	memw
40081369:	0839      	s32i.n	a3, a8, 0
}
4008136b:	f01d      	retw.n
4008136d:	000000        	ill

40081370 <set_reg>:

	return (uint32_t *)(DT_INST_REG_ADDR(0) + off);
}

static int set_reg(uint32_t pin, uint32_t clr_mask, uint32_t set_mask)
{
40081370:	004136        	entry	a1, 32
	if (pin >= ARRAY_SIZE(pin_mux_off)) {
40081373:	782c      	movi.n	a8, 39
	volatile uint32_t *reg = reg_for_pin(pin);
	uint32_t v;

	if (!reg) {
		return -EINVAL;
40081375:	aa6c      	movi.n	a10, -22
	if (pin >= ARRAY_SIZE(pin_mux_off)) {
40081377:	253827        	bltu	a8, a2, 400813a0 <set_reg+0x30>
	off = pin_mux_off[pin];
4008137a:	fca691        	l32r	a9, 40080614 <_iram_text_start+0xcc>
4008137d:	992a      	add.n	a9, a9, a2
4008137f:	000992        	l8ui	a9, a9, 0
	if (!off) {
40081382:	a99c      	beqz.n	a9, 400813a0 <set_reg+0x30>
	return (uint32_t *)(DT_INST_REG_ADDR(0) + off);
40081384:	fca521        	l32r	a2, 40080618 <_iram_text_start+0xd0>
	}

	v = *reg;
	v &= ~clr_mask;
40081387:	f87c      	movi.n	a8, -1
	return (uint32_t *)(DT_INST_REG_ADDR(0) + off);
40081389:	992a      	add.n	a9, a9, a2
	v = *reg;
4008138b:	0020c0        	memw
4008138e:	0928      	l32i.n	a2, a9, 0
	v &= ~clr_mask;
40081390:	308830        	xor	a8, a8, a3
40081393:	108820        	and	a8, a8, a2
	v |= set_mask;
40081396:	208840        	or	a8, a8, a4
	*reg = v;
40081399:	0020c0        	memw
4008139c:	0989      	s32i.n	a8, a9, 0

	return 0;
4008139e:	0a0c      	movi.n	a10, 0
}
400813a0:	0a2d      	mov.n	a2, a10
400813a2:	f01d      	retw.n

400813a4 <pinmux_set>:

static int pinmux_set(const struct device *dev, uint32_t pin, uint32_t func)
{
400813a4:	004136        	entry	a1, 32
400813a7:	20a330        	or	a10, a3, a3
	 * value due to a deficiency in the pinmux API.  This setting is
	 * part of the GPIO API.
	 */

	if (func > 6) {
		return -EINVAL;
400813aa:	eaaf22        	movi	a2, -22
	if (func > 6) {
400813ad:	1174f6        	bgeui	a4, 7, 400813c2 <pinmux_set+0x1e>
	}

	return set_reg(pin, MCU_SEL_M, func<<MCU_SEL_S | 2<<FUN_DRV_S);
400813b0:	fc9bc1        	l32r	a12, 4008061c <_iram_text_start+0xd4>
400813b3:	114440        	slli	a4, a4, 12
400813b6:	fc9ab1        	l32r	a11, 40080620 <_iram_text_start+0xd8>
400813b9:	20c4c0        	or	a12, a4, a12
400813bc:	fffb25        	call8	40081370 <set_reg>
400813bf:	202aa0        	or	a2, a10, a10
}
400813c2:	f01d      	retw.n

400813c4 <pinmux_input>:
	return -EINVAL;
}

#define CFG(id)   ((GPIO_ ## id ## _REG) & 0xff)
static int pinmux_input(const struct device *dev, uint32_t pin, uint8_t func)
{
400813c4:	004136        	entry	a1, 32
	static const uint8_t offs[2][3] = {
		{ CFG(ENABLE1_W1TC), CFG(ENABLE1_W1TS), 32 },
		{ CFG(ENABLE_W1TC), CFG(ENABLE_W1TS), 0 },
	};
	const uint8_t *line = offs[pin < 32];
400813c7:	f81c      	movi.n	a8, 31
{
400813c9:	744040        	extui	a4, a4, 0, 8
	const uint8_t *line = offs[pin < 32];
400813cc:	00a052        	movi	a5, 0
400813cf:	013837        	bltu	a8, a3, 400813d4 <pinmux_input+0x10>
400813d2:	350c      	movi.n	a5, 3
400813d4:	fc9481        	l32r	a8, 40080624 <_iram_text_start+0xdc>
	/* Since PINMUX_INPUT_ENABLED == 1 and PINMUX_OUTPUT_ENABLED == 0,
	 * we can not set a gpio port as input and output at the same time,
	 * So we always set the gpio as input. Thus, the gpio can be used on
	 * I2C drivers for example.
	 */
	r = set_reg(pin, 0, FUN_IE);
400813d7:	00a2c2        	movi	a12, 0x200
400813da:	0b0c      	movi.n	a11, 0
400813dc:	03ad      	mov.n	a10, a3
	const uint8_t *line = offs[pin < 32];
400813de:	805580        	add	a5, a5, a8
	r = set_reg(pin, 0, FUN_IE);
400813e1:	fff8e5        	call8	40081370 <set_reg>
	if (func == PINMUX_INPUT_ENABLED) {
400813e4:	051466        	bnei	a4, 1, 400813ed <pinmux_input+0x29>
		reg = (uint32_t *)(DR_REG_GPIO_BASE + line[0]);
400813e7:	000582        	l8ui	a8, a5, 0
400813ea:	000286        	j	400813f8 <pinmux_input+0x34>
	} else if (func == PINMUX_OUTPUT_ENABLED) {
400813ed:	74ec      	bnez.n	a4, 40081418 <pinmux_input+0x54>
		if (pin >= 34U && pin <= 39U) {
400813ef:	dec342        	addi	a4, a3, -34
400813f2:	2264b6        	bltui	a4, 6, 40081418 <pinmux_input+0x54>
			/* These pins are input only */
			return -EINVAL;
		}
		reg = (uint32_t *)(DR_REG_GPIO_BASE + line[1]);
400813f5:	010582        	l8ui	a8, a5, 1
400813f8:	fc8c41        	l32r	a4, 40080628 <_iram_text_start+0xe0>
400813fb:	884a      	add.n	a8, a8, a4
	} else {
		return -EINVAL;
	}

	if (r < 0) {
400813fd:	019a96        	bltz	a10, 4008141a <pinmux_input+0x56>
		return r;
	}

	*reg = BIT(pin - line[2]);
40081400:	020542        	l8ui	a4, a5, 2
40081403:	150c      	movi.n	a5, 1
40081405:	c03340        	sub	a3, a3, a4
40081408:	401300        	ssl	a3
4008140b:	a13500        	sll	a3, a5
4008140e:	0020c0        	memw
40081411:	0839      	s32i.n	a3, a8, 0

	ARG_UNUSED(dev);
	return 0;
40081413:	0a0c      	movi.n	a10, 0
40081415:	000046        	j	4008141a <pinmux_input+0x56>
		return -EINVAL;
40081418:	aa6c      	movi.n	a10, -22
}
4008141a:	0a2d      	mov.n	a2, a10
4008141c:	f01d      	retw.n
	...

40081420 <pinmux_initialize>:
	.pullup = pinmux_pullup,
	.input = pinmux_input
};

static int pinmux_initialize(const struct device *device)
{
40081420:	004136        	entry	a1, 32
	uint32_t pin;

	for (pin = 0U; pin < ARRAY_SIZE(pin_mux_off); pin++) {
40081423:	020c      	movi.n	a2, 0
		pinmux_set(NULL, pin, 0);
40081425:	203220        	or	a3, a2, a2
40081428:	20b220        	or	a11, a2, a2
4008142b:	20c330        	or	a12, a3, a3
4008142e:	20a330        	or	a10, a3, a3
40081431:	fff725        	call8	400813a4 <pinmux_set>
	for (pin = 0U; pin < ARRAY_SIZE(pin_mux_off); pin++) {
40081434:	221b      	addi.n	a2, a2, 1
40081436:	882c      	movi.n	a8, 40
40081438:	ec9287        	bne	a2, a8, 40081428 <pinmux_initialize+0x8>
	}

	ARG_UNUSED(device);
	return 0;
}
4008143b:	020c      	movi.n	a2, 0
4008143d:	f01d      	retw.n
	...

40081440 <pinmux_pullup>:
{
40081440:	004136        	entry	a1, 32
40081443:	744040        	extui	a4, a4, 0, 8
40081446:	03ad      	mov.n	a10, a3
	switch (func) {
40081448:	848c      	beqz.n	a4, 40081454 <pinmux_pullup+0x14>
4008144a:	0f1426        	beqi	a4, 1, 4008145d <pinmux_pullup+0x1d>
	return -EINVAL;
4008144d:	aa6c      	movi.n	a10, -22
4008144f:	0004c6        	j	40081466 <pinmux_pullup+0x26>
40081452:	c20000        	quou	a0, a0, a0
		return set_reg(pin, FUN_PU, FUN_PD);
40081455:	b280a0        	mulsh	a8, a0, a10
40081458:	4600a1        	l32r	a10, 40052c58 <esp32_rom_gpio_matrix_out+0x48d4c>
4008145b:	c20001        	l32r	a0, 40071c5c <esp32_rom_gpio_matrix_out+0x67d50>
		return set_reg(pin, FUN_PD, FUN_PU);
4008145e:	b200a1        	l32r	a10, 4006dc60 <esp32_rom_gpio_matrix_out+0x63d54>
40081461:	e580a0        	extui	a8, a10, 16, 15
40081464:	2dfff0        	lsi	f15, a15, 180
}
40081467:	1d0a      	add.n	a1, a13, a0
40081469:	0000f0        	callx12	a0

4008146c <pinmux_get>:
{
4008146c:	004136        	entry	a1, 32
	if (pin >= ARRAY_SIZE(pin_mux_off)) {
4008146f:	782c      	movi.n	a8, 39
		return -EINVAL;
40081471:	a26c      	movi.n	a2, -22
	if (pin >= ARRAY_SIZE(pin_mux_off)) {
40081473:	1d3837        	bltu	a8, a3, 40081494 <pinmux_get+0x28>
	off = pin_mux_off[pin];
40081476:	fc6721        	l32r	a2, 40080614 <_iram_text_start+0xcc>
40081479:	223a      	add.n	a2, a2, a3
4008147b:	000282        	l8ui	a8, a2, 0
		return -EINVAL;
4008147e:	a26c      	movi.n	a2, -22
	if (!off) {
40081480:	089c      	beqz.n	a8, 40081494 <pinmux_get+0x28>
	return (uint32_t *)(DT_INST_REG_ADDR(0) + off);
40081482:	fc6521        	l32r	a2, 40080618 <_iram_text_start+0xd0>
40081485:	882a      	add.n	a8, a8, a2
	*func = (*reg & MCU_SEL_M) >> MCU_SEL_S;
40081487:	0020c0        	memw
4008148a:	0828      	l32i.n	a2, a8, 0
4008148c:	242c20        	extui	a2, a2, 12, 3
4008148f:	0429      	s32i.n	a2, a4, 0
	return 0;
40081491:	00a022        	movi	a2, 0
}
40081494:	f01d      	retw.n
	...

40081498 <ccompare_isr>:
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
	return val;
}

static void ccompare_isr(const void *arg)
{
40081498:	004136        	entry	a1, 32
	z_xt_ints_off(1 << irq);
}

static ALWAYS_INLINE unsigned int arch_irq_lock(void)
{
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008149b:	0063c0        	rsil	a12, 3
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
4008149e:	03eaa0        	rsr.ccount	a10
	ARG_UNUSED(arg);

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t curr = ccount();
	uint32_t dticks = (curr - last_count) / CYC_PER_TICK;
400814a1:	fc6291        	l32r	a9, 4008062c <_iram_text_start+0xe4>
400814a4:	fc6381        	l32r	a8, 40080630 <_iram_text_start+0xe8>
400814a7:	0029b2        	l32i	a11, a9, 0
400814aa:	c0aab0        	sub	a10, a10, a11
400814ad:	a2aa80        	muluh	a10, a10, a8

	last_count += dticks * CYC_PER_TICK;
400814b0:	fc6181        	l32r	a8, 40080634 <_iram_text_start+0xec>
	uint32_t dticks = (curr - last_count) / CYC_PER_TICK;
400814b3:	41a9a0        	srli	a10, a10, 9
	last_count += dticks * CYC_PER_TICK;
400814b6:	828a80        	mull	a8, a10, a8
400814b9:	8088b0        	add	a8, a8, a11
400814bc:	006982        	s32i	a8, a9, 0
	return key;
}

static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
	XTOS_RESTORE_INTLEVEL(key);
400814bf:	13e6c0        	wsr.ps	a12
400814c2:	002010        	rsync
		}
		set_ccompare(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
400814c5:	01d2e5        	call8	400831f4 <z_clock_announce>
}
400814c8:	f01d      	retw.n
	...

400814cc <z_clock_driver_init>:

int z_clock_driver_init(const struct device *device)
{
400814cc:	004136        	entry	a1, 32
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
400814cf:	03ea80        	rsr.ccount	a8
	ARG_UNUSED(device);

	IRQ_CONNECT(TIMER_IRQ, 0, ccompare_isr, 0, 0);
	set_ccompare(ccount() + CYC_PER_TICK);
400814d2:	fc5891        	l32r	a9, 40080634 <_iram_text_start+0xec>
400814d5:	889a      	add.n	a8, a8, a9
	__asm__ volatile ("wsr.CCOMPARE" STRINGIFY(CONFIG_XTENSA_TIMER_ID) " %0"
400814d7:	13f180        	wsr.ccompare1	a8
 */
static inline void z_xt_ints_on(unsigned int mask)
{
	int val;

	__asm__ volatile("rsr.intenable %0" : "=r"(val));
400814da:	03e480        	rsr.intenable	a8
	val |= mask;
400814dd:	fc5691        	l32r	a9, 40080638 <_iram_text_start+0xf0>
400814e0:	208890        	or	a8, a8, a9
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
400814e3:	13e480        	wsr.intenable	a8
400814e6:	002010        	rsync
	irq_enable(TIMER_IRQ);
	return 0;
}
400814e9:	020c      	movi.n	a2, 0
400814eb:	f01d      	retw.n
400814ed:	000000        	ill

400814f0 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
400814f0:	004136        	entry	a1, 32
	ARG_UNUSED(idle);

#if defined(CONFIG_TICKLESS_KERNEL)
	ticks = ticks == K_TICKS_FOREVER ? MAX_TICKS : ticks;
400814f3:	020266        	bnei	a2, -1, 400814f9 <z_clock_set_timeout+0x9>
400814f6:	fc5121        	l32r	a2, 4008063c <_iram_text_start+0xf4>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400814f9:	0063c0        	rsil	a12, 3
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
400814fc:	03eab0        	rsr.ccount	a11

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t curr = ccount(), cyc, adj;

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK;
400814ff:	080c      	movi.n	a8, 0
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
40081501:	220b      	addi.n	a2, a2, -1
	cyc = ticks * CYC_PER_TICK;
40081503:	532280        	max	a2, a2, a8
40081506:	fc4d81        	l32r	a8, 4008063c <_iram_text_start+0xf4>
	adj = (curr - last_count) + (CYC_PER_TICK - 1);
40081509:	fc4da1        	l32r	a10, 40080640 <_iram_text_start+0xf8>
	cyc = ticks * CYC_PER_TICK;
4008150c:	432280        	min	a2, a2, a8
	adj = (curr - last_count) + (CYC_PER_TICK - 1);
4008150f:	fc4781        	l32r	a8, 4008062c <_iram_text_start+0xe4>
	cyc = ticks * CYC_PER_TICK;
40081512:	fc48d1        	l32r	a13, 40080634 <_iram_text_start+0xec>
	adj = (curr - last_count) + (CYC_PER_TICK - 1);
40081515:	0898      	l32i.n	a9, a8, 0
	cyc = ticks * CYC_PER_TICK;
40081517:	8222d0        	mull	a2, a2, a13
	adj = (curr - last_count) + (CYC_PER_TICK - 1);
4008151a:	c0aa90        	sub	a10, a10, a9
4008151d:	aaba      	add.n	a10, a10, a11
	if (cyc <= MAX_CYC - adj) {
4008151f:	f87c      	movi.n	a8, -1
40081521:	30e8a0        	xor	a14, a8, a10
40081524:	013e27        	bltu	a14, a2, 40081529 <z_clock_set_timeout+0x39>
		cyc += adj;
40081527:	82aa      	add.n	a8, a2, a10
	} else {
		cyc = MAX_CYC;
	}
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
40081529:	fc4121        	l32r	a2, 40080630 <_iram_text_start+0xe8>
4008152c:	a28820        	muluh	a8, a8, a2
	cyc += last_count;

	if ((cyc - curr) < MIN_DELAY) {
4008152f:	e7a322        	movi	a2, 0x3e7
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
40081532:	418980        	srli	a8, a8, 9
40081535:	8288d0        	mull	a8, a8, a13
	cyc += last_count;
40081538:	808980        	add	a8, a9, a8
	if ((cyc - curr) < MIN_DELAY) {
4008153b:	c0b8b0        	sub	a11, a8, a11
4008153e:	0232b7        	bltu	a2, a11, 40081544 <z_clock_set_timeout+0x54>
		cyc += CYC_PER_TICK;
40081541:	8088d0        	add	a8, a8, a13
	__asm__ volatile ("wsr.CCOMPARE" STRINGIFY(CONFIG_XTENSA_TIMER_ID) " %0"
40081544:	13f180        	wsr.ccompare1	a8
	XTOS_RESTORE_INTLEVEL(key);
40081547:	13e6c0        	wsr.ps	a12
4008154a:	002010        	rsync
	}

	set_ccompare(cyc);
	k_spin_unlock(&lock, key);
#endif
}
4008154d:	f01d      	retw.n
	...

40081550 <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
40081550:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40081553:	006380        	rsil	a8, 3
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
40081556:	03ea20        	rsr.ccount	a2
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = (ccount() - last_count) / CYC_PER_TICK;
40081559:	fc3491        	l32r	a9, 4008062c <_iram_text_start+0xe4>
4008155c:	0998      	l32i.n	a9, a9, 0
4008155e:	c02290        	sub	a2, a2, a9
40081561:	fc3391        	l32r	a9, 40080630 <_iram_text_start+0xe8>
40081564:	a22290        	muluh	a2, a2, a9
40081567:	412920        	srli	a2, a2, 9
	XTOS_RESTORE_INTLEVEL(key);
4008156a:	13e680        	wsr.ps	a8
4008156d:	002010        	rsync

	k_spin_unlock(&lock, key);
	return ret;
}
40081570:	f01d      	retw.n
	...

40081574 <z_xtensa_fatal_error>:
	return "na";
#endif
}

void z_xtensa_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
40081574:	004136        	entry	a1, 32
	if (esf) {
40081577:	338c      	beqz.n	a3, 4008157e <z_xtensa_fatal_error+0xa>
		z_xtensa_dump_stack(esf);
40081579:	03ad      	mov.n	a10, a3
4008157b:	01e0e5        	call8	40083388 <z_xtensa_dump_stack>
	}

	z_fatal_error(reason, esf);
4008157e:	20b330        	or	a11, a3, a3
40081581:	20a220        	or	a10, a2, a2
40081584:	010965        	call8	4008261c <z_fatal_error>
}
40081587:	000090        	retw
	...

4008158c <xtensa_spill_reg_windows>:
        SPILL_ALL_WINDOWS
4008158c:	10ccc0        	and	a12, a12, a12
4008158f:	408030        	rotw	3
40081592:	10ccc0        	and	a12, a12, a12
40081595:	408030        	rotw	3
40081598:	10ccc0        	and	a12, a12, a12
4008159b:	408030        	rotw	3
4008159e:	10ccc0        	and	a12, a12, a12
400815a1:	408030        	rotw	3
400815a4:	10ccc0        	and	a12, a12, a12
400815a7:	408040        	rotw	4
        ret
400815aa:	f00d      	ret.n

400815ac <xtensa_save_high_regs>:
	rsr.WINDOWSTART a2
400815ac:	034920        	rsr.windowstart	a2
	slli a3, a2, (XCHAL_NUM_AREGS / 4)
400815af:	113200        	slli	a3, a2, 16
	or a2, a2, a3
400815b2:	202230        	or	a2, a2, a3
	rsr.WINDOWBASE a3
400815b5:	034830        	rsr.windowbase	a3
	ssr a3
400815b8:	400300        	ssr	a3
	srl a2, a2
400815bb:	912020        	srl	a2, a2
	mov a3, a1 /* Stash our original stack pointer */
400815be:	013d      	mov.n	a3, a1
	bbsi a2, 1, _high_gpr_spill_done
400815c0:	28e217        	bbsi	a2, 1, 400815ec <_high_gpr_spill_done>
	addi a1, a1, -16
400815c3:	f0c112        	addi	a1, a1, -16
	s32i a4, a1, 0
400815c6:	0149      	s32i.n	a4, a1, 0
	s32i a5, a1, 4
400815c8:	1159      	s32i.n	a5, a1, 4
	s32i a6, a1, 8
400815ca:	2169      	s32i.n	a6, a1, 8
	s32i a7, a1, 12
400815cc:	3179      	s32i.n	a7, a1, 12
	bbsi a2, 2, _high_gpr_spill_done
400815ce:	1ae227        	bbsi	a2, 2, 400815ec <_high_gpr_spill_done>
	addi a1, a1, -16
400815d1:	f0c112        	addi	a1, a1, -16
	s32i a8, a1, 0
400815d4:	0189      	s32i.n	a8, a1, 0
	s32i a9, a1, 4
400815d6:	1199      	s32i.n	a9, a1, 4
	s32i a10, a1, 8
400815d8:	21a9      	s32i.n	a10, a1, 8
	s32i a11, a1, 12
400815da:	31b9      	s32i.n	a11, a1, 12
	bbsi a2, 3, _high_gpr_spill_done
400815dc:	0ce237        	bbsi	a2, 3, 400815ec <_high_gpr_spill_done>
	addi a1, a1, -16
400815df:	f0c112        	addi	a1, a1, -16
	s32i a12, a1, 0
400815e2:	01c9      	s32i.n	a12, a1, 0
	s32i a13, a1, 4
400815e4:	11d9      	s32i.n	a13, a1, 4
	s32i a14, a1, 8
400815e6:	0261e2        	s32i	a14, a1, 8
	s32i a15, a1, 12
400815e9:	0361f2        	s32i	a15, a1, 12

400815ec <_high_gpr_spill_done>:
	addi a1, a1, -4
400815ec:	fcc112        	addi	a1, a1, -4
	s32i a3, a1, 0
400815ef:	0139      	s32i.n	a3, a1, 0
	ret
400815f1:	f00d      	ret.n
	...

400815f4 <xtensa_restore_high_regs>:
	l32i a2, a1, 0
400815f4:	0128      	l32i.n	a2, a1, 0
	addi a1, a1, 4
400815f6:	114b      	addi.n	a1, a1, 4
	mov a3, a2
400815f8:	023d      	mov.n	a3, a2
	beq a1, a2, _high_restore_done
400815fa:	261127        	beq	a1, a2, 40081624 <_high_restore_done>
	addi a2, a2, -16
400815fd:	f0c222        	addi	a2, a2, -16
	l32i a4, a2, 0
40081600:	0248      	l32i.n	a4, a2, 0
	l32i a5, a2, 4
40081602:	1258      	l32i.n	a5, a2, 4
	l32i a6, a2, 8
40081604:	2268      	l32i.n	a6, a2, 8
	l32i a7, a2, 12
40081606:	3278      	l32i.n	a7, a2, 12
	beq a1, a2, _high_restore_done
40081608:	181127        	beq	a1, a2, 40081624 <_high_restore_done>
	addi a2, a2, -16
4008160b:	f0c222        	addi	a2, a2, -16
	l32i a8, a2, 0
4008160e:	0288      	l32i.n	a8, a2, 0
	l32i a9, a2, 4
40081610:	1298      	l32i.n	a9, a2, 4
	l32i a10, a2, 8
40081612:	22a8      	l32i.n	a10, a2, 8
	l32i a11, a2, 12
40081614:	32b8      	l32i.n	a11, a2, 12
	beq a1, a2, _high_restore_done
40081616:	0a1127        	beq	a1, a2, 40081624 <_high_restore_done>
	addi a2, a2, -16
40081619:	f0c222        	addi	a2, a2, -16
	l32i a12, a2, 0
4008161c:	02c8      	l32i.n	a12, a2, 0
	l32i a13, a2, 4
4008161e:	12d8      	l32i.n	a13, a2, 4
	l32i a14, a2, 8
40081620:	22e8      	l32i.n	a14, a2, 8
	l32i a15, a2, 12
40081622:	32f8      	l32i.n	a15, a2, 12

40081624 <_high_restore_done>:
	mov a1, a3 /* Original stack */
40081624:	031d      	mov.n	a1, a3
	ret
40081626:	f00d      	ret.n
	...

40081629 <_restore_context>:
	call0 xtensa_restore_high_regs
40081629:	fffc85        	call0	400815f4 <xtensa_restore_high_regs>
	l32i a0, a1, BSA_PC_OFF
4008162c:	6108      	l32i.n	a0, a1, 24
	wsr.EPC6 a0
4008162e:	13b600        	wsr.epc6	a0
	l32i a0, a1, BSA_PS_OFF
40081631:	5108      	l32i.n	a0, a1, 20
	wsr.EPS6 a0
40081633:	13c600        	wsr.eps6	a0
	l32i a0, a1, BSA_SAR_OFF
40081636:	4108      	l32i.n	a0, a1, 16
	wsr.SAR a0
40081638:	130300        	wsr.sar	a0
	l32i a0, a1, BSA_LBEG_OFF
4008163b:	3108      	l32i.n	a0, a1, 12
	wsr.LBEG a0
4008163d:	130000        	wsr.lbeg	a0
	l32i a0, a1, BSA_LEND_OFF
40081640:	2108      	l32i.n	a0, a1, 8
	wsr.LEND a0
40081642:	130100        	wsr.lend	a0
	l32i a0, a1, BSA_LCOUNT_OFF
40081645:	1108      	l32i.n	a0, a1, 4
	wsr.LCOUNT a0
40081647:	130200        	wsr.lcount	a0
	l32i a0, a1, BSA_SCOMPARE1_OFF
4008164a:	0108      	l32i.n	a0, a1, 0
	wsr.SCOMPARE1 a0
4008164c:	130c00        	wsr.scompare1	a0
	rsync
4008164f:	002010        	rsync
	l32i a0, a1, BSA_A0_OFF
40081652:	7108      	l32i.n	a0, a1, 28
	l32i a2, a1, BSA_A2_OFF
40081654:	9128      	l32i.n	a2, a1, 36
	l32i a3, a1, BSA_A3_OFF
40081656:	a138      	l32i.n	a3, a1, 40
	addi a1, a1, BASE_SAVE_AREA_SIZE
40081658:	3cc112        	addi	a1, a1, 60
	rfi 6
4008165b:	003610        	rfi	6
	...

40081660 <xtensa_switch>:
	entry a1, 16
40081660:	002136        	entry	a1, 16
	SPILL_ALL_WINDOWS
40081663:	10ccc0        	and	a12, a12, a12
40081666:	408030        	rotw	3
40081669:	10ccc0        	and	a12, a12, a12
4008166c:	408030        	rotw	3
4008166f:	10ccc0        	and	a12, a12, a12
40081672:	408030        	rotw	3
40081675:	10ccc0        	and	a12, a12, a12
40081678:	408030        	rotw	3
4008167b:	10ccc0        	and	a12, a12, a12
4008167e:	408040        	rotw	4
	addi a1, a1, -BASE_SAVE_AREA_SIZE
40081681:	c4c112        	addi	a1, a1, -60
	s32i a0, a1, BSA_A0_OFF
40081684:	7109      	s32i.n	a0, a1, 28
	s32i a2, a1, BSA_A2_OFF
40081686:	9129      	s32i.n	a2, a1, 36
	s32i a3, a1, BSA_A3_OFF
40081688:	a139      	s32i.n	a3, a1, 40
	ODD_REG_SAVE
4008168a:	030300        	rsr.sar	a0
4008168d:	4109      	s32i.n	a0, a1, 16
4008168f:	030000        	rsr.lbeg	a0
40081692:	3109      	s32i.n	a0, a1, 12
40081694:	030100        	rsr.lend	a0
40081697:	2109      	s32i.n	a0, a1, 8
40081699:	030200        	rsr.lcount	a0
4008169c:	1109      	s32i.n	a0, a1, 4
4008169e:	030c00        	rsr.scompare1	a0
400816a1:	0109      	s32i.n	a0, a1, 0
	rsr.PS a0
400816a3:	03e600        	rsr.ps	a0
	s32i a0, a1, BSA_PS_OFF
400816a6:	5109      	s32i.n	a0, a1, 20
	movi a0, _switch_restore_pc
400816a8:	fbe701        	l32r	a0, 40080644 <_iram_text_start+0xfc>
	s32i a0, a1, BSA_PC_OFF
400816ab:	6109      	s32i.n	a0, a1, 24
	call0 xtensa_save_high_regs
400816ad:	ffefc5        	call0	400815ac <xtensa_save_high_regs>
	l32i a2, a1, 0
400816b0:	0128      	l32i.n	a2, a1, 0
	l32i a3, a2, BSA_A3_OFF
400816b2:	a238      	l32i.n	a3, a2, 40
	s32i a1, a3, 0
400816b4:	0319      	s32i.n	a1, a3, 0
	l32i a1, a2, BSA_A2_OFF
400816b6:	9218      	l32i.n	a1, a2, 36
	j _restore_context
400816b8:	ffdb46        	j	40081629 <_restore_context>

400816bb <_switch_restore_pc>:
	retw
400816bb:	f01d      	retw.n
400816bd:	000000        	ill

400816c0 <_handle_excint>:
	EXCINT_HANDLER CONFIG_XTENSA_KERNEL_CPU_PTR_SR, ___cpu_t_nested_OFFSET, ___cpu_t_irq_stack_OFFSET
400816c0:	8129      	s32i.n	a2, a1, 32
400816c2:	030300        	rsr.sar	a0
400816c5:	4109      	s32i.n	a0, a1, 16
400816c7:	030000        	rsr.lbeg	a0
400816ca:	3109      	s32i.n	a0, a1, 12
400816cc:	030100        	rsr.lend	a0
400816cf:	2109      	s32i.n	a0, a1, 8
400816d1:	030200        	rsr.lcount	a0
400816d4:	1109      	s32i.n	a0, a1, 4
400816d6:	030c00        	rsr.scompare1	a0
400816d9:	0109      	s32i.n	a0, a1, 0
400816db:	ffed05        	call0	400815ac <xtensa_save_high_regs>
400816de:	0128      	l32i.n	a2, a1, 0
400816e0:	8228      	l32i.n	a2, a2, 32
400816e2:	03e600        	rsr.ps	a0
400816e5:	f30c      	movi.n	a3, 15
400816e7:	100030        	and	a0, a0, a3
400816ea:	a0cc      	bnez.n	a0, 400816f8 <_not_l1>
400816ec:	03e600        	rsr.ps	a0
400816ef:	01a032        	movi	a3, 1
400816f2:	200030        	or	a0, a0, a3
400816f5:	13e600        	wsr.ps	a0

400816f8 <_not_l1>:
400816f8:	03e600        	rsr.ps	a0
400816fb:	f36c      	movi.n	a3, -17
400816fd:	100030        	and	a0, a0, a3
40081700:	13e600        	wsr.ps	a0
40081703:	002010        	rsync
40081706:	03f430        	rsr.misc0	a3
40081709:	0308      	l32i.n	a0, a3, 0
4008170b:	708c      	beqz.n	a0, 40081716 <_switch_stacks_3>
4008170d:	001b      	addi.n	a0, a0, 1
4008170f:	0309      	s32i.n	a0, a3, 0
40081711:	013d      	mov.n	a3, a1
40081713:	000146        	j	4008171c <_do_call_3>

40081716 <_switch_stacks_3>:
40081716:	001b      	addi.n	a0, a0, 1
40081718:	0309      	s32i.n	a0, a3, 0
4008171a:	1338      	l32i.n	a3, a3, 4

4008171c <_do_call_3>:
4008171c:	036d      	mov.n	a6, a3
4008171e:	01ad      	mov.n	a10, a1
40081720:	013d      	mov.n	a3, a1
40081722:	02bd      	mov.n	a11, a2
40081724:	0118      	l32i.n	a1, a1, 0
40081726:	3cc112        	addi	a1, a1, 60
40081729:	000095        	call4	40081734 <_xstack_call0_5>
4008172c:	031d      	mov.n	a1, a3
4008172e:	062d      	mov.n	a2, a6
40081730:	0003c6        	j	40081743 <_xstack_returned_5>
	...

40081734 <_xstack_call0_5>:
40081734:	002136        	entry	a1, 16
40081737:	021d      	mov.n	a1, a2
40081739:	000055        	call4	40081740 <_xstack_call1_5>
4008173c:	062d      	mov.n	a2, a6
4008173e:	f01d      	retw.n

40081740 <_xstack_call1_5>:
40081740:	0007a0        	jx	a7

40081743 <_xstack_returned_5>:
40081743:	006700        	rsil	a0, 7
40081746:	03f430        	rsr.misc0	a3
40081749:	0308      	l32i.n	a0, a3, 0
4008174b:	000b      	addi.n	a0, a0, -1
4008174d:	0309      	s32i.n	a0, a3, 0
4008174f:	251617        	beq	a6, a1, 40081778 <_restore_3>
40081752:	0118      	l32i.n	a1, a1, 0
40081754:	3cc112        	addi	a1, a1, 60
40081757:	10ccc0        	and	a12, a12, a12
4008175a:	408030        	rotw	3
4008175d:	10ccc0        	and	a12, a12, a12
40081760:	408030        	rotw	3
40081763:	10ccc0        	and	a12, a12, a12
40081766:	408030        	rotw	3
40081769:	10ccc0        	and	a12, a12, a12
4008176c:	408030        	rotw	3
4008176f:	10ccc0        	and	a12, a12, a12
40081772:	408040        	rotw	4
40081775:	201660        	or	a1, a6, a6

40081778 <_restore_3>:
40081778:	ffab46        	j	40081629 <_restore_context>
	...

4008177c <xtensa_init_stack>:
LOG_MODULE_DECLARE(os);

void *xtensa_init_stack(int *stack_top,
			void (*entry)(void *, void *, void *),
			void *arg1, void *arg2, void *arg3)
{
4008177c:	004136        	entry	a1, 32
	 * arrange to enter the function with a CALLINC of 1 and a
	 * stack pointer 16 bytes above the top, so its ENTRY at the
	 * start will decrement the stack pointer by 16.
	 */
	const int bsasz = BASE_SAVE_AREA_SIZE - 16;
	void **bsa = (void **) (((char *) stack_top) - bsasz);
4008177f:	d4c272        	addi	a7, a2, -44

	(void)memset(bsa, 0, bsasz);
40081782:	cc2c      	movi.n	a12, 44
40081784:	0b0c      	movi.n	a11, 0
40081786:	20a770        	or	a10, a7, a7
40081789:	01c225        	call8	400833ac <memset>

	bsa[BSA_PC_OFF/4] = z_thread_entry;
4008178c:	fbaf91        	l32r	a9, 40080648 <_iram_text_start+0x100>
4008178f:	ecc282        	addi	a8, a2, -20
40081792:	0899      	s32i.n	a9, a8, 0
	bsa[BSA_PS_OFF/4] = (void *)(PS_WOE | PS_UM | PS_CALLINC(1));
40081794:	fbae91        	l32r	a9, 4008064c <_iram_text_start+0x104>
40081797:	e8c282        	addi	a8, a2, -24
4008179a:	0899      	s32i.n	a9, a8, 0
	/* Arguments to z_thread_entry().  Remember these start at A6,
	 * which will be rotated into A2 by the ENTRY instruction that
	 * begins the C function.  And A4-A7 and A8-A11 are optional
	 * quads that live below the BSA!
	 */
	bsa[-1] = arg1;  /* a7 */
4008179c:	d0c282        	addi	a8, a2, -48
4008179f:	0849      	s32i.n	a4, a8, 0
	bsa[-2] = entry; /* a6 */
400817a1:	ccc282        	addi	a8, a2, -52
400817a4:	0839      	s32i.n	a3, a8, 0
	bsa[-3] = 0;     /* a5 */
400817a6:	c8c292        	addi	a9, a2, -56
400817a9:	080c      	movi.n	a8, 0
400817ab:	0989      	s32i.n	a8, a9, 0
	bsa[-4] = 0;     /* a4 */
400817ad:	c4c292        	addi	a9, a2, -60
400817b0:	0989      	s32i.n	a8, a9, 0

	bsa[-5] = 0;     /* a11 */
400817b2:	c0c292        	addi	a9, a2, -64
400817b5:	0989      	s32i.n	a8, a9, 0
	bsa[-6] = 0;     /* a10 */
400817b7:	bcc292        	addi	a9, a2, -68
400817ba:	0989      	s32i.n	a8, a9, 0
	bsa[-7] = arg3;  /* a9 */
400817bc:	b8c282        	addi	a8, a2, -72
400817bf:	0869      	s32i.n	a6, a8, 0
	bsa[-8] = arg2;  /* a8 */
400817c1:	b4c282        	addi	a8, a2, -76
400817c4:	0859      	s32i.n	a5, a8, 0

	/* Finally push the BSA pointer and return the stack pointer
	 * as the handle
	 */
	bsa[-9] = bsa;
400817c6:	b0c222        	addi	a2, a2, -80
400817c9:	0279      	s32i.n	a7, a2, 0
	return &bsa[-9];
}
400817cb:	f01d      	retw.n
400817cd:	000000        	ill

400817d0 <arch_new_thread>:

void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
400817d0:	004136        	entry	a1, 32
	thread->switch_handle = xtensa_init_stack((int *)stack_ptr, entry,
400817d3:	81e8      	l32i.n	a14, a1, 32
{
400817d5:	07dd      	mov.n	a13, a7
	thread->switch_handle = xtensa_init_stack((int *)stack_ptr, entry,
400817d7:	06cd      	mov.n	a12, a6
400817d9:	05bd      	mov.n	a11, a5
400817db:	04ad      	mov.n	a10, a4
400817dd:	fff9e5        	call8	4008177c <xtensa_init_stack>
400817e0:	1462a2        	s32i	a10, a2, 80
						  p1, p2, p3);
}
400817e3:	f01d      	retw.n
400817e5:	000000        	ill

400817e8 <z_irq_spurious>:

void z_irq_spurious(const void *arg)
{
400817e8:	004136        	entry	a1, 32
	int irqs, ie;

	ARG_UNUSED(arg);

	__asm__ volatile("rsr.interrupt %0" : "=r"(irqs));
400817eb:	03e280        	rsr.interrupt	a8
	__asm__ volatile("rsr.intenable %0" : "=r"(ie));
400817ee:	03e480        	rsr.intenable	a8
	LOG_ERR(" ** Spurious INTERRUPT(s) %p, INTENABLE = %p",
		(void *)irqs, (void *)ie);
	z_xtensa_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
400817f1:	0b0c      	movi.n	a11, 0
400817f3:	1a0c      	movi.n	a10, 1
400817f5:	ffd7e5        	call8	40081574 <z_xtensa_fatal_error>
}
400817f8:	f01d      	retw.n
	...

400817fc <xtensa_int2_c>:
		__asm__ volatile("wsr.intclear %0" : : "r"(m)); \
	}							\
	return z_get_next_switch_handle(interrupted_stack);		\
}

DEF_INT_C_HANDLER(2)
400817fc:	004136        	entry	a1, 32
400817ff:	03e240        	rsr.interrupt	a4
40081802:	03e430        	rsr.intenable	a3

static inline int _xtensa_handle_one_int2(unsigned int mask)
{
	int irq;

	if (mask & BIT(19)) {
40081805:	fb9251        	l32r	a5, 40080650 <_iram_text_start+0x108>
40081808:	104430        	and	a4, a4, a3
4008180b:	0e8457        	bany	a4, a5, 4008181d <xtensa_int2_c+0x21>
		mask = BIT(19);
		irq = 19;
		goto handle_irq;
	}
	if (mask & BIT(20)) {
4008180e:	fb9131        	l32r	a3, 40080654 <_iram_text_start+0x10c>
40081811:	0f8437        	bany	a4, a3, 40081824 <xtensa_int2_c+0x28>
		mask = BIT(20);
		irq = 20;
		goto handle_irq;
	}
	if (mask & BIT(21)) {
40081814:	fb9131        	l32r	a3, 40080658 <_iram_text_start+0x110>
40081817:	0e8437        	bany	a4, a3, 40081829 <xtensa_int2_c+0x2d>
4008181a:	000986        	j	40081844 <xtensa_int2_c+0x48>
		irq = 19;
4008181d:	381c      	movi.n	a8, 19
		mask = BIT(19);
4008181f:	053d      	mov.n	a3, a5
40081821:	000186        	j	4008182b <xtensa_int2_c+0x2f>
		irq = 20;
40081824:	481c      	movi.n	a8, 20
40081826:	000046        	j	4008182b <xtensa_int2_c+0x2f>
		mask = BIT(21);
		irq = 21;
40081829:	581c      	movi.n	a8, 21
		goto handle_irq;
	}
	return 0;
handle_irq:
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
4008182b:	fb8c91        	l32r	a9, 4008065c <_iram_text_start+0x114>
4008182e:	1188d0        	slli	a8, a8, 3
40081831:	898a      	add.n	a8, a9, a8
40081833:	1898      	l32i.n	a9, a8, 4
40081835:	08a8      	l32i.n	a10, a8, 0
40081837:	304430        	xor	a4, a4, a3
4008183a:	0009e0        	callx8	a9
4008183d:	13e330        	wsr.intclear	a3
40081840:	fff1c6        	j	4008180b <xtensa_int2_c+0xf>
40081843:	a22000        	muluh	a2, a0, a0
40081846:	046520        	extui	a6, a2, 5, 1
40081849:	2aa001        	l32r	a0, 4004c2cc <esp32_rom_gpio_matrix_out+0x423c0>
4008184c:	009020        	all4	b2, b0:b1:b2:b3
	...

40081850 <xtensa_int3_c>:
DEF_INT_C_HANDLER(3)
40081850:	004136        	entry	a1, 32
40081853:	03e240        	rsr.interrupt	a4
40081856:	03e430        	rsr.intenable	a3
40081859:	104430        	and	a4, a4, a3
	if (mask & 0x408800) {
4008185c:	fb8431        	l32r	a3, 4008066c <_iram_text_start+0x124>
4008185f:	150437        	bnone	a4, a3, 40081878 <xtensa_int3_c+0x28>
		if (mask & BIT(11)) {
40081862:	fb6e31        	l32r	a3, 4008061c <_iram_text_start+0xd4>
40081865:	268437        	bany	a4, a3, 4008188f <xtensa_int3_c+0x3f>
		if (mask & BIT(15)) {
40081868:	fb7431        	l32r	a3, 40080638 <_iram_text_start+0xf0>
4008186b:	258437        	bany	a4, a3, 40081894 <xtensa_int3_c+0x44>
		if (mask & BIT(22)) {
4008186e:	fb7c31        	l32r	a3, 40080660 <_iram_text_start+0x118>
40081871:	490437        	bnone	a4, a3, 400818be <xtensa_int3_c+0x6e>
40081874:	000846        	j	40081899 <xtensa_int3_c+0x49>
40081877:	7b3100        	ule.s	b3, f1, f0
		if (mask & BIT(23)) {
4008187a:	37fb      	addi.n	a3, a7, 15
4008187c:	311f84        	lsi	f8, a15, 196
		if (mask & BIT(27)) {
4008187f:	37fb61        	l32r	a6, 4004f86c <esp32_rom_gpio_matrix_out+0x45960>
40081882:	311f84        	lsi	f8, a15, 196
		if (mask & BIT(29)) {
40081885:	fb79      	s32i.n	a7, a11, 60
40081887:	330437        	bnone	a4, a3, 400818be <xtensa_int3_c+0x6e>
			irq = 29;
4008188a:	d81c      	movi.n	a8, 29
4008188c:	000586        	j	400818a6 <xtensa_int3_c+0x56>
			irq = 11;
4008188f:	b80c      	movi.n	a8, 11
40081891:	000446        	j	400818a6 <xtensa_int3_c+0x56>
			irq = 15;
40081894:	f80c      	movi.n	a8, 15
40081896:	000306        	j	400818a6 <xtensa_int3_c+0x56>
			irq = 22;
40081899:	681c      	movi.n	a8, 22
4008189b:	0001c6        	j	400818a6 <xtensa_int3_c+0x56>
			irq = 23;
4008189e:	781c      	movi.n	a8, 23
400818a0:	000086        	j	400818a6 <xtensa_int3_c+0x56>
400818a3:	b81c00        	lsi	f0, a12, 0x2e0
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
400818a6:	fb6d91        	l32r	a9, 4008065c <_iram_text_start+0x114>
400818a9:	1188d0        	slli	a8, a8, 3
400818ac:	898a      	add.n	a8, a9, a8
400818ae:	1898      	l32i.n	a9, a8, 4
400818b0:	08a8      	l32i.n	a10, a8, 0
400818b2:	304430        	xor	a4, a4, a3
400818b5:	0009e0        	callx8	a9
400818b8:	13e330        	wsr.intclear	a3
400818bb:	ffe746        	j	4008185c <xtensa_int3_c+0xc>
400818be:	20a220        	or	a10, a2, a2
400818c1:	00fca5        	call8	4008288c <z_get_next_switch_handle>
400818c4:	202aa0        	or	a2, a10, a10
400818c7:	000090        	retw
	...

400818cc <xtensa_int4_c>:
DEF_INT_C_HANDLER(4)
400818cc:	004136        	entry	a1, 32
400818cf:	03e240        	rsr.interrupt	a4
400818d2:	03e430        	rsr.intenable	a3
400818d5:	104430        	and	a4, a4, a3

static inline int _xtensa_handle_one_int4(unsigned int mask)
{
	int irq;

	if (mask & 0x3000000) {
400818d8:	fb6a31        	l32r	a3, 40080680 <_iram_text_start+0x138>
400818db:	0e0437        	bnone	a4, a3, 400818ed <xtensa_int4_c+0x21>
		if (mask & BIT(24)) {
400818de:	fb6431        	l32r	a3, 40080670 <_iram_text_start+0x128>
400818e1:	198437        	bany	a4, a3, 400818fe <xtensa_int4_c+0x32>
			mask = BIT(24);
			irq = 24;
			goto handle_irq;
		}
		if (mask & BIT(25)) {
400818e4:	fb6431        	l32r	a3, 40080674 <_iram_text_start+0x12c>
400818e7:	370437        	bnone	a4, a3, 40081922 <xtensa_int4_c+0x56>
400818ea:	000546        	j	40081903 <xtensa_int4_c+0x37>
			mask = BIT(25);
			irq = 25;
			goto handle_irq;
		}
	} else {
		if (mask & BIT(28)) {
400818ed:	fb6231        	l32r	a3, 40080678 <_iram_text_start+0x130>
400818f0:	148437        	bany	a4, a3, 40081908 <xtensa_int4_c+0x3c>
			mask = BIT(28);
			irq = 28;
			goto handle_irq;
		}
		if (mask & BIT(30)) {
400818f3:	fb6231        	l32r	a3, 4008067c <_iram_text_start+0x134>
400818f6:	280437        	bnone	a4, a3, 40081922 <xtensa_int4_c+0x56>
			mask = BIT(30);
			irq = 30;
400818f9:	e81c      	movi.n	a8, 30
400818fb:	0002c6        	j	4008190a <xtensa_int4_c+0x3e>
			irq = 24;
400818fe:	881c      	movi.n	a8, 24
40081900:	000186        	j	4008190a <xtensa_int4_c+0x3e>
			irq = 25;
40081903:	981c      	movi.n	a8, 25
40081905:	000046        	j	4008190a <xtensa_int4_c+0x3e>
			irq = 28;
40081908:	c81c      	movi.n	a8, 28
			goto handle_irq;
		}
	}
	return 0;
handle_irq:
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
4008190a:	fb5491        	l32r	a9, 4008065c <_iram_text_start+0x114>
4008190d:	1188d0        	slli	a8, a8, 3
40081910:	898a      	add.n	a8, a9, a8
40081912:	1898      	l32i.n	a9, a8, 4
40081914:	08a8      	l32i.n	a10, a8, 0
40081916:	304430        	xor	a4, a4, a3
40081919:	0009e0        	callx8	a9
4008191c:	13e330        	wsr.intclear	a3
4008191f:	ffed46        	j	400818d8 <xtensa_int4_c+0xc>
40081922:	20a220        	or	a10, a2, a2
40081925:	00f665        	call8	4008288c <z_get_next_switch_handle>
40081928:	202aa0        	or	a2, a10, a10
4008192b:	000090        	retw
	...

40081930 <xtensa_int5_c>:
DEF_INT_C_HANDLER(5)
40081930:	004136        	entry	a1, 32
40081933:	03e240        	rsr.interrupt	a4
40081936:	03e430        	rsr.intenable	a3
	if (mask & BIT(16)) {
40081939:	fb5251        	l32r	a5, 40080684 <_iram_text_start+0x13c>
4008193c:	104430        	and	a4, a4, a3
4008193f:	0001c6        	j	4008194a <xtensa_int5_c+0x1a>
40081942:	300000        	xor	a0, a0, a0
40081945:	303044        	lsi	f4, a0, 192
40081948:	5713e3        	lsi	f14, a3, 0x15c
4008194b:	311084        	lsi	f8, a0, 196
	if (mask & BIT(26)) {
4008194e:	4e          	.byte 0x4e
4008194f:	37fb      	addi.n	a3, a7, 15
40081951:	d61184        	lsi	f8, a1, 0x358
	if (mask & BIT(31)) {
40081954:	1c0254        	lsi	f5, a2, 112
		irq = 31;
40081957:	31f8      	l32i.n	a15, a1, 12
		mask = BIT(31);
40081959:	fb4d      	lsi	f4, a11, 44
4008195b:	000206        	j	40081967 <xtensa_int5_c+0x37>
		irq = 16;
4008195e:	081c      	movi.n	a8, 16
		mask = BIT(16);
40081960:	053d      	mov.n	a3, a5
40081962:	000046        	j	40081967 <xtensa_int5_c+0x37>
		irq = 26;
40081965:	a81c      	movi.n	a8, 26
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
40081967:	fb3d91        	l32r	a9, 4008065c <_iram_text_start+0x114>
4008196a:	1188d0        	slli	a8, a8, 3
4008196d:	808980        	add	a8, a9, a8
40081970:	012892        	l32i	a9, a8, 4
40081973:	0028a2        	l32i	a10, a8, 0
40081976:	0009e0        	callx8	a9
40081979:	fc7356        	bnez	a3, 40081944 <xtensa_int5_c+0x14>
4008197c:	20a220        	or	a10, a2, a2
4008197f:	00f0e5        	call8	4008288c <z_get_next_switch_handle>
40081982:	202aa0        	or	a2, a10, a10
40081985:	000090        	retw

40081988 <xtensa_int6_c>:
DEF_INT_C_HANDLER(6)
40081988:	004136        	entry	a1, 32
4008198b:	20a220        	or	a10, a2, a2
4008198e:	03e280        	rsr.interrupt	a8
40081991:	03e480        	rsr.intenable	a8
40081994:	00ef65        	call8	4008288c <z_get_next_switch_handle>
40081997:	202aa0        	or	a2, a10, a10
4008199a:	000090        	retw
4008199d:	000000        	ill

400819a0 <xtensa_int7_c>:
DEF_INT_C_HANDLER(7)
400819a0:	004136        	entry	a1, 32
400819a3:	03e230        	rsr.interrupt	a3
400819a6:	03e440        	rsr.intenable	a4
400819a9:	103340        	and	a3, a3, a4
	if (mask & BIT(14)) {
400819ac:	fb3941        	l32r	a4, 40080690 <_iram_text_start+0x148>
400819af:	150347        	bnone	a3, a4, 400819c8 <xtensa_int7_c+0x28>
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
400819b2:	fb2a81        	l32r	a8, 4008065c <_iram_text_start+0x114>
400819b5:	303340        	xor	a3, a3, a4
400819b8:	1d2892        	l32i	a9, a8, 116
400819bb:	1c28a2        	l32i	a10, a8, 112
400819be:	0009e0        	callx8	a9
400819c1:	13e340        	wsr.intclear	a4
400819c4:	fff9c6        	j	400819af <xtensa_int7_c+0xf>
400819c7:	a22000        	muluh	a2, a0, a0
400819ca:	ec2520        	lsi	f2, a5, 0x3b0
400819cd:	2aa000        	mul.s	f10, f0, f0
400819d0:	009020        	all4	b2, b0:b1:b2:b3
	...

400819d4 <xtensa_excint1_c>:
 * DEF_EXCINT 1 vector declaration in assembly code.  This one looks
 * different because exceptions and interrupts land at the same
 * vector; other interrupt levels have their own vectors.
 */
void *xtensa_excint1_c(int *interrupted_stack)
{
400819d4:	004136        	entry	a1, 32
	int cause, vaddr, *bsa = *(int **)interrupted_stack;

	__asm__ volatile("rsr.exccause %0" : "=r"(cause));
400819d7:	03e850        	rsr.exccause	a5

	if (cause == EXCCAUSE_LEVEL1_INTERRUPT) {
400819da:	024526        	beqi	a5, 4, 400819e0 <xtensa_excint1_c+0xc>
400819dd:	0045c6        	j	40081af8 <xtensa_excint1_c+0x124>
static inline DEF_INT_C_HANDLER(1)
400819e0:	03e240        	rsr.interrupt	a4
400819e3:	03e430        	rsr.intenable	a3
		if (mask & 0x780) {
400819e6:	80a762        	movi	a6, 0x780
400819e9:	104430        	and	a4, a4, a3
	if (mask & 0x7f) {
400819ec:	643040        	extui	a3, a4, 0, 7
400819ef:	048316        	beqz	a3, 40081a3b <xtensa_excint1_c+0x67>
		if (mask & 0x7) {
400819f2:	243040        	extui	a3, a4, 0, 3
400819f5:	739c      	beqz.n	a3, 40081a10 <xtensa_excint1_c+0x3c>
			if (mask & BIT(0)) {
400819f7:	043040        	extui	a3, a4, 0, 1
400819fa:	09a356        	bnez	a3, 40081a98 <xtensa_excint1_c+0xc4>
			if (mask & BIT(1)) {
400819fd:	290c      	movi.n	a9, 2
400819ff:	020497        	bnone	a4, a9, 40081a05 <xtensa_excint1_c+0x31>
40081a02:	0025c6        	j	40081a9d <xtensa_excint1_c+0xc9>
			if (mask & BIT(2)) {
40081a05:	430c      	movi.n	a3, 4
40081a07:	028437        	bany	a4, a3, 40081a0d <xtensa_excint1_c+0x39>
40081a0a:	004186        	j	40081b14 <xtensa_excint1_c+0x140>
40081a0d:	0024c6        	j	40081aa4 <xtensa_excint1_c+0xd0>
			if (mask & 0x18) {
40081a10:	831c      	movi.n	a3, 24
40081a12:	120437        	bnone	a4, a3, 40081a28 <xtensa_excint1_c+0x54>
				if (mask & BIT(3)) {
40081a15:	830c      	movi.n	a3, 8
40081a17:	020437        	bnone	a4, a3, 40081a1d <xtensa_excint1_c+0x49>
40081a1a:	0022c6        	j	40081aa9 <xtensa_excint1_c+0xd5>
				if (mask & BIT(4)) {
40081a1d:	031c      	movi.n	a3, 16
40081a1f:	028437        	bany	a4, a3, 40081a25 <xtensa_excint1_c+0x51>
40081a22:	003b86        	j	40081b14 <xtensa_excint1_c+0x140>
40081a25:	002186        	j	40081aaf <xtensa_excint1_c+0xdb>
				if (mask & BIT(5)) {
40081a28:	032c      	movi.n	a3, 32
40081a2a:	020437        	bnone	a4, a3, 40081a30 <xtensa_excint1_c+0x5c>
40081a2d:	0020c6        	j	40081ab4 <xtensa_excint1_c+0xe0>
				if (mask & BIT(6)) {
40081a30:	034c      	movi.n	a3, 64
40081a32:	028437        	bany	a4, a3, 40081a38 <xtensa_excint1_c+0x64>
40081a35:	0036c6        	j	40081b14 <xtensa_excint1_c+0x140>
40081a38:	001f46        	j	40081ab9 <xtensa_excint1_c+0xe5>
		if (mask & 0x780) {
40081a3b:	2d0467        	bnone	a4, a6, 40081a6c <xtensa_excint1_c+0x98>
			if (mask & 0x180) {
40081a3e:	80a132        	movi	a3, 0x180
40081a41:	130437        	bnone	a4, a3, 40081a58 <xtensa_excint1_c+0x84>
				if (mask & BIT(7)) {
40081a44:	80a032        	movi	a3, 128
40081a47:	738437        	bany	a4, a3, 40081abe <xtensa_excint1_c+0xea>
				if (mask & BIT(8)) {
40081a4a:	00a132        	movi	a3, 0x100
40081a4d:	028437        	bany	a4, a3, 40081a53 <xtensa_excint1_c+0x7f>
40081a50:	003006        	j	40081b14 <xtensa_excint1_c+0x140>
40081a53:	001b06        	j	40081ac3 <xtensa_excint1_c+0xef>
40081a56:	320000        	orbc	b0, b0, b0
				if (mask & BIT(9)) {
40081a59:	3700a2        	l8ui	a10, a0, 55
40081a5c:	326984        	lsi	f8, a9, 200
				if (mask & BIT(10)) {
40081a5f:	3700a4        	lsi	f10, a0, 220
40081a62:	060284        	lsi	f8, a2, 24
40081a65:	002b      	addi.n	a0, a0, 2
40081a67:	001886        	j	40081acd <xtensa_excint1_c+0xf9>
40081a6a:	310000        	srai	a0, a0, 16
			if (mask & 0x3000) {
40081a6d:	fb0d      	ret.n
40081a6f:	110437        	bnone	a4, a3, 40081a84 <xtensa_excint1_c+0xb0>
				if (mask & BIT(12)) {
40081a72:	fb0831        	l32r	a3, 40080694 <_iram_text_start+0x14c>
40081a75:	598437        	bany	a4, a3, 40081ad2 <xtensa_excint1_c+0xfe>
				if (mask & BIT(13)) {
40081a78:	fae031        	l32r	a3, 400805f8 <_iram_text_start+0xb0>
40081a7b:	028437        	bany	a4, a3, 40081a81 <xtensa_excint1_c+0xad>
40081a7e:	002486        	j	40081b14 <xtensa_excint1_c+0x140>
40081a81:	001486        	j	40081ad7 <xtensa_excint1_c+0x103>
				if (mask & BIT(17)) {
40081a84:	fb0531        	l32r	a3, 40080698 <_iram_text_start+0x150>
40081a87:	518437        	bany	a4, a3, 40081adc <xtensa_excint1_c+0x108>
				if (mask & BIT(18)) {
40081a8a:	fb0431        	l32r	a3, 4008069c <_iram_text_start+0x154>
40081a8d:	028437        	bany	a4, a3, 40081a93 <xtensa_excint1_c+0xbf>
40081a90:	002006        	j	40081b14 <xtensa_excint1_c+0x140>
					irq = 18;
40081a93:	281c      	movi.n	a8, 18
40081a95:	001146        	j	40081ade <xtensa_excint1_c+0x10a>
				irq = 0;
40081a98:	080c      	movi.n	a8, 0
40081a9a:	001006        	j	40081ade <xtensa_excint1_c+0x10a>
				irq = 1;
40081a9d:	180c      	movi.n	a8, 1
				mask = BIT(1);
40081a9f:	093d      	mov.n	a3, a9
40081aa1:	000e46        	j	40081ade <xtensa_excint1_c+0x10a>
				irq = 2;
40081aa4:	098d      	mov.n	a8, a9
40081aa6:	000d06        	j	40081ade <xtensa_excint1_c+0x10a>
					irq = 3;
40081aa9:	380c      	movi.n	a8, 3
40081aab:	000bc6        	j	40081ade <xtensa_excint1_c+0x10a>
40081aae:	058d00        	extui	a8, a0, 29, 1
					irq = 4;
40081ab1:	000a46        	j	40081ade <xtensa_excint1_c+0x10a>
					irq = 5;
40081ab4:	580c      	movi.n	a8, 5
40081ab6:	000906        	j	40081ade <xtensa_excint1_c+0x10a>
					irq = 6;
40081ab9:	680c      	movi.n	a8, 6
40081abb:	0007c6        	j	40081ade <xtensa_excint1_c+0x10a>
					irq = 7;
40081abe:	780c      	movi.n	a8, 7
40081ac0:	000686        	j	40081ade <xtensa_excint1_c+0x10a>
					irq = 8;
40081ac3:	880c      	movi.n	a8, 8
40081ac5:	000546        	j	40081ade <xtensa_excint1_c+0x10a>
					irq = 9;
40081ac8:	980c      	movi.n	a8, 9
40081aca:	000406        	j	40081ade <xtensa_excint1_c+0x10a>
					irq = 10;
40081acd:	a80c      	movi.n	a8, 10
40081acf:	0002c6        	j	40081ade <xtensa_excint1_c+0x10a>
					irq = 12;
40081ad2:	c80c      	movi.n	a8, 12
40081ad4:	000186        	j	40081ade <xtensa_excint1_c+0x10a>
					irq = 13;
40081ad7:	d80c      	movi.n	a8, 13
40081ad9:	000046        	j	40081ade <xtensa_excint1_c+0x10a>
					irq = 17;
40081adc:	181c      	movi.n	a8, 17
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
40081ade:	fadf91        	l32r	a9, 4008065c <_iram_text_start+0x114>
40081ae1:	1188d0        	slli	a8, a8, 3
40081ae4:	898a      	add.n	a8, a9, a8
40081ae6:	1898      	l32i.n	a9, a8, 4
40081ae8:	08a8      	l32i.n	a10, a8, 0
40081aea:	304430        	xor	a4, a4, a3
40081aed:	0009e0        	callx8	a9
40081af0:	13e330        	wsr.intclear	a3
40081af3:	ffbd46        	j	400819ec <xtensa_excint1_c+0x18>
40081af6:	660000        	lsi	f0, a0, 0x198

		return xtensa_int1_c(interrupted_stack);

	} else if (cause == EXCCAUSE_SYSCALL) {
40081af9:	480c15        	call4	400c9bbc <_iram_text_end+0x4609a>
	int cause, vaddr, *bsa = *(int **)interrupted_stack;
40081afc:	643802        	lsi	f0, a8, 0x190

		/* Xtensa exceptions don't automatically advance PC,
		 * have to skip the SYSCALL instruction manually or
		 * else it will just loop forever
		 */
		bsa[BSA_PC_OFF/4] += 3;
40081aff:	333b      	addi.n	a3, a3, 3
40081b01:	6439      	s32i.n	a3, a4, 24
40081b03:	000346        	j	40081b14 <xtensa_excint1_c+0x140>
40081b06:	300000        	xor	a0, a0, a0

	} else {
		uint32_t ps = bsa[BSA_PS_OFF/4];

		__asm__ volatile("rsr.excvaddr %0" : "=r"(vaddr));
40081b09:	ee          	.byte 0xee
40081b0a:	a0a203        	lsi	f0, a2, 0x280
		/* FIXME: legacy xtensa port reported "HW" exception
		 * for all unhandled exceptions, which seems incorrect
		 * as these are software errors.  Should clean this
		 * up.
		 */
		z_xtensa_fatal_error(K_ERR_CPU_EXCEPTION,
40081b0d:	b22000        	mulsh	a2, a0, a0
40081b10:	a62520        	lsi	f2, a5, 0x298
40081b13:	ff          	.byte 0xff
				     (void *)interrupted_stack);
	}

	return z_get_next_switch_handle(interrupted_stack);
40081b14:	02ad      	mov.n	a10, a2
40081b16:	00d765        	call8	4008288c <z_get_next_switch_handle>
}
40081b19:	0a2d      	mov.n	a2, a10
40081b1b:	f01d      	retw.n
40081b1d:	000000        	ill

40081b20 <__stdout_hook_install>:
}

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
40081b20:	004136        	entry	a1, 32
	_stdout_hook = hook;
40081b23:	fae081        	l32r	a8, 400806a4 <_iram_text_start+0x15c>
40081b26:	0829      	s32i.n	a2, a8, 0
}
40081b28:	f01d      	retw.n
	...

40081b2c <gpio_esp32_pin_interrupt_configure>:

static int gpio_esp32_pin_interrupt_configure(const struct device *port,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
40081b2c:	004136        	entry	a1, 32
	if (mode == GPIO_INT_MODE_DISABLED) {
40081b2f:	fab281        	l32r	a8, 400805f8 <_iram_text_start+0xb0>
{
40081b32:	743030        	extui	a3, a3, 0, 8
	if (mode == GPIO_INT_MODE_DISABLED) {
40081b35:	211487        	beq	a4, a8, 40081b5a <gpio_esp32_pin_interrupt_configure+0x2e>
	if (mode == GPIO_INT_MODE_LEVEL) {
40081b38:	fad691        	l32r	a9, 40080690 <_iram_text_start+0x148>
			return -ENOTSUP;
40081b3b:	ddaf82        	movi	a8, -35
	if (mode == GPIO_INT_MODE_LEVEL) {
40081b3e:	4f1497        	beq	a4, a9, 40081b91 <gpio_esp32_pin_interrupt_configure+0x65>
		switch (trig) {
40081b41:	fad641        	l32r	a4, 4008069c <_iram_text_start+0x154>
40081b44:	181547        	beq	a5, a4, 40081b60 <gpio_esp32_pin_interrupt_configure+0x34>
40081b47:	fad841        	l32r	a4, 400806a8 <_iram_text_start+0x160>
40081b4a:	431547        	beq	a5, a4, 40081b91 <gpio_esp32_pin_interrupt_configure+0x65>
40081b4d:	fad241        	l32r	a4, 40080698 <_iram_text_start+0x150>
			return -EINVAL;
40081b50:	a86c      	movi.n	a8, -22
		switch (trig) {
40081b52:	3b9547        	bne	a5, a4, 40081b91 <gpio_esp32_pin_interrupt_configure+0x65>
			return 2;
40081b55:	280c      	movi.n	a8, 2
40081b57:	0001c6        	j	40081b62 <gpio_esp32_pin_interrupt_configure+0x36>
		return 0;       /* Disables interrupt for a pin. */
40081b5a:	080c      	movi.n	a8, 0
40081b5c:	000086        	j	40081b62 <gpio_esp32_pin_interrupt_configure+0x36>
40081b5f:	180c00        	lsxp	f0, a12, a0
	struct gpio_esp32_data *data = port->data;
	uint32_t io_pin = pin + data->port.pin_offset; /* Range from 0 - 39 */
40081b62:	3248      	l32i.n	a4, a2, 12
40081b64:	8498      	l32i.n	a9, a4, 32
40081b66:	939a      	add.n	a9, a3, a9
	uint32_t *reg = GET_GPIO_PIN_REG(io_pin);
40081b68:	fad131        	l32r	a3, 400806ac <_iram_text_start+0x164>
40081b6b:	993a      	add.n	a9, a9, a3
40081b6d:	1199e0        	slli	a9, a9, 2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40081b70:	006340        	rsil	a4, 3
	}

	key = irq_lock();

	reg_val = *reg;
	reg_val &= ~(GPIO_PIN_INT_ENA_M | GPIO_PIN_INT_TYPE_M);
40081b73:	facf51        	l32r	a5, 400806b0 <_iram_text_start+0x168>
	reg_val = *reg;
40081b76:	0938      	l32i.n	a3, a9, 0
	/* Enable Interrupt on CPU0 (PRO_CPU) */
	reg_val |= GPIO_CPU0_INT_ENABLE;
	/* Interrupt triggering mode */
	reg_val |= intr_trig_mode << GPIO_PIN_INT_TYPE_S;
40081b78:	118890        	slli	a8, a8, 7
	reg_val &= ~(GPIO_PIN_INT_ENA_M | GPIO_PIN_INT_TYPE_M);
40081b7b:	103350        	and	a3, a3, a5
40081b7e:	208830        	or	a8, a8, a3
	reg_val |= intr_trig_mode << GPIO_PIN_INT_TYPE_S;
40081b81:	faad31        	l32r	a3, 40080638 <_iram_text_start+0xf0>
40081b84:	208830        	or	a8, a8, a3
	*reg = reg_val;
40081b87:	0989      	s32i.n	a8, a9, 0
	XTOS_RESTORE_INTLEVEL(key);
40081b89:	13e640        	wsr.ps	a4
40081b8c:	002010        	rsync

	irq_unlock(key);

	return 0;
40081b8f:	080c      	movi.n	a8, 0
}
40081b91:	082d      	mov.n	a2, a8
40081b93:	f01d      	retw.n
40081b95:	000000        	ill

40081b98 <gpio_esp32_isr>:
#if defined(CONFIG_GPIO_ESP32_1)
GPIO_DEVICE_INIT(1);
#endif

static void gpio_esp32_isr(const void *param)
{
40081b98:	004136        	entry	a1, 32

#if defined(CONFIG_GPIO_ESP32_0)
	gpio_esp32_fire_callbacks(DEVICE_GET(gpio_esp32_0));
40081b9b:	fac6a1        	l32r	a10, 400806b4 <_iram_text_start+0x16c>
40081b9e:	0194e5        	call8	400834ec <gpio_esp32_fire_callbacks>
#endif
#if defined(CONFIG_GPIO_ESP32_1)
	gpio_esp32_fire_callbacks(DEVICE_GET(gpio_esp32_1));
40081ba1:	fac5a1        	l32r	a10, 400806b8 <_iram_text_start+0x170>
40081ba4:	019465        	call8	400834ec <gpio_esp32_fire_callbacks>
#endif

	ARG_UNUSED(param);
}
40081ba7:	f01d      	retw.n
40081ba9:	000000        	ill

40081bac <gpio_esp32_init>:
{
40081bac:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = device->data;
40081baf:	3228      	l32i.n	a2, a2, 12
40081bb1:	fac2a1        	l32r	a10, 400806bc <_iram_text_start+0x174>
40081bb4:	00a0a5        	call8	400825c0 <z_impl_device_get_binding>
	data->pinmux = device_get_binding(CONFIG_PINMUX_NAME);
40081bb7:	12a9      	s32i.n	a10, a2, 4
		return -ENOTSUP;
40081bb9:	ddaf22        	movi	a2, -35
	if (!data->pinmux) {
40081bbc:	8abc      	beqz.n	a10, 40081bf8 <gpio_esp32_init+0x4c>
	if (!isr_connected) {
40081bbe:	fac031        	l32r	a3, 400806c0 <_iram_text_start+0x178>
	return 0;
40081bc1:	020c      	movi.n	a2, 0
	if (!isr_connected) {
40081bc3:	000382        	l8ui	a8, a3, 0
40081bc6:	2e9827        	bne	a8, a2, 40081bf8 <gpio_esp32_init+0x4c>
 */
static inline void z_xt_ints_off(unsigned int mask)
{
	int val;

	__asm__ volatile("rsr.intenable %0" : "=r"(val));
40081bc9:	03e480        	rsr.intenable	a8
	val &= ~mask;
40081bcc:	ffab92        	movi	a9, 0xfffffbff
40081bcf:	108890        	and	a8, a8, a9
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
40081bd2:	13e480        	wsr.intenable	a8
40081bd5:	002010        	rsync
		esp32_rom_intr_matrix_set(0, ETS_GPIO_INTR_SOURCE,
40081bd8:	ac0c      	movi.n	a12, 10
40081bda:	6b1c      	movi.n	a11, 22
40081bdc:	02ad      	mov.n	a10, a2
40081bde:	fab981        	l32r	a8, 400806c4 <_iram_text_start+0x17c>
40081be1:	0008e0        	callx8	a8
	__asm__ volatile("rsr.intenable %0" : "=r"(val));
40081be4:	03e480        	rsr.intenable	a8
	val |= mask;
40081be7:	00a492        	movi	a9, 0x400
40081bea:	208890        	or	a8, a8, a9
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
40081bed:	13e480        	wsr.intenable	a8
40081bf0:	002010        	rsync
		isr_connected = true;
40081bf3:	180c      	movi.n	a8, 1
40081bf5:	004382        	s8i	a8, a3, 0
}
40081bf8:	f01d      	retw.n
	...

40081bfc <gpio_esp32_config>:
{
40081bfc:	006136        	entry	a1, 48
	struct gpio_esp32_data *data = dev->data;
40081bff:	3268      	l32i.n	a6, a2, 12
{
40081c01:	743030        	extui	a3, a3, 0, 8
	r = pinmux_pin_get(data->pinmux, io_pin, &func);
40081c04:	16a8      	l32i.n	a10, a6, 4
	uint32_t io_pin = pin + data->port.pin_offset; /* Range from 0 - 39 */
40081c06:	8658      	l32i.n	a5, a6, 32
				 uint32_t *func)
{
	const struct pinmux_driver_api *api =
		(const struct pinmux_driver_api *)dev->api;

	return api->get(dev, pin, func);
40081c08:	2a28      	l32i.n	a2, a10, 8
40081c0a:	535a      	add.n	a5, a3, a5
40081c0c:	1228      	l32i.n	a2, a2, 4
40081c0e:	01cd      	mov.n	a12, a1
40081c10:	20b550        	or	a11, a5, a5
40081c13:	0002e0        	callx8	a2
40081c16:	0a2d      	mov.n	a2, a10
	if (r < 0) {
40081c18:	090a96        	bltz	a10, 40081cac <gpio_esp32_config+0xb0>
	pinmux_pin_set(data->pinmux, io_pin, PIN_FUNC_GPIO);
40081c1b:	16a8      	l32i.n	a10, a6, 4
	return api->set(dev, pin, func);
40081c1d:	2c0c      	movi.n	a12, 2
40081c1f:	2a28      	l32i.n	a2, a10, 8
40081c21:	05bd      	mov.n	a11, a5
40081c23:	0228      	l32i.n	a2, a2, 0
40081c25:	0002e0        	callx8	a2
	if (flags & GPIO_PULL_UP) {
40081c28:	0c1c      	movi.n	a12, 16
40081c2a:	10c4c0        	and	a12, a4, a12
40081c2d:	16a8      	l32i.n	a10, a6, 4
40081c2f:	9c8c      	beqz.n	a12, 40081c3c <gpio_esp32_config+0x40>
				    uint8_t func)
{
	const struct pinmux_driver_api *api =
		(const struct pinmux_driver_api *)dev->api;

	return api->pullup(dev, pin, func);
40081c31:	2a28      	l32i.n	a2, a10, 8
40081c33:	1c0c      	movi.n	a12, 1
40081c35:	2228      	l32i.n	a2, a2, 8
40081c37:	000206        	j	40081c43 <gpio_esp32_config+0x47>
40081c3a:	570000        	lsi	f0, a0, 0x15c
	} else if (flags & GPIO_PULL_DOWN) {
40081c3d:	280864        	lsi	f6, a8, 160
40081c40:	282a      	add.n	a2, a8, a2
40081c42:	05bd22        	l32ai	a2, a13, 20
40081c45:	0002e0        	callx8	a2
	if (flags & GPIO_OUTPUT) {
40081c48:	16a8      	l32i.n	a10, a6, 4
40081c4a:	2a28      	l32i.n	a2, a10, 8
40081c4c:	3288      	l32i.n	a8, a2, 12
40081c4e:	00a222        	movi	a2, 0x200
40081c51:	102420        	and	a2, a4, a2
40081c54:	04c216        	beqz	a2, 40081ca4 <gpio_esp32_config+0xa8>
	uint32_t *reg = GET_GPIO_PIN_REG(io_pin);
40081c57:	fa9521        	l32r	a2, 400806ac <_iram_text_start+0x164>
40081c5a:	252a      	add.n	a2, a5, a2
40081c5c:	1122e0        	slli	a2, a2, 2
		if (flags & GPIO_SINGLE_ENDED) {
40081c5f:	0d6417        	bbci	a4, 1, 40081c70 <gpio_esp32_config+0x74>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
40081c62:	4b0c      	movi.n	a11, 4
40081c64:	1104b7        	bnone	a4, a11, 40081c79 <gpio_esp32_config+0x7d>
				*reg |= GPIO_PIN_PAD_DRIVER;
40081c67:	0298      	l32i.n	a9, a2, 0
40081c69:	2099b0        	or	a9, a9, a11
40081c6c:	0001c6        	j	40081c77 <gpio_esp32_config+0x7b>
40081c6f:	029800        	andb	b9, b8, b0
			*reg &= ~GPIO_PIN_PAD_DRIVER;
40081c72:	bb7c      	movi.n	a11, -5
40081c74:	1099b0        	and	a9, a9, a11
40081c77:	0299      	s32i.n	a9, a2, 0
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
40081c79:	0464b7        	bbci	a4, 11, 40081c81 <gpio_esp32_config+0x85>
			*data->port.set_reg = BIT(pin);
40081c7c:	2648      	l32i.n	a4, a6, 8
40081c7e:	000106        	j	40081c86 <gpio_esp32_config+0x8a>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
40081c81:	1064a7        	bbci	a4, 10, 40081c95 <gpio_esp32_config+0x99>
			*data->port.clear_reg = BIT(pin);
40081c84:	3648      	l32i.n	a4, a6, 12
40081c86:	01a022        	movi	a2, 1
40081c89:	401300        	ssl	a3
40081c8c:	a13200        	sll	a3, a2
40081c8f:	0020c0        	memw
40081c92:	006432        	s32i	a3, a4, 0
					  uint8_t func)
{
	const struct pinmux_driver_api *api =
		(const struct pinmux_driver_api *)dev->api;

	return api->input(dev, pin, func);
40081c95:	0c0c      	movi.n	a12, 0
40081c97:	05bd      	mov.n	a11, a5
40081c99:	0008e0        	callx8	a8
		if (r < 0) {
40081c9c:	020c      	movi.n	a2, 0
40081c9e:	432a20        	min	a2, a10, a2
40081ca1:	0001c6        	j	40081cac <gpio_esp32_config+0xb0>
40081ca4:	1c0c      	movi.n	a12, 1
40081ca6:	20b550        	or	a11, a5, a5
40081ca9:	0008e0        	callx8	a8
}
40081cac:	f01d      	retw.n
	...

40081cb0 <i2c_esp32_isr>:

	return ret;
}

static void i2c_esp32_isr(const struct device *device)
{
40081cb0:	004136        	entry	a1, 32
	const int fifo_give_mask = I2C_ACK_ERR_INT_ST |
				   I2C_TIME_OUT_INT_ST |
				   I2C_TRANS_COMPLETE_INT_ST |
				   I2C_ARBITRATION_LOST_INT_ST;
	const struct i2c_esp32_config *config = device->config;
40081cb3:	012232        	l32i	a3, a2, 4

	if (sys_read32(I2C_INT_STATUS_REG(config->index)) & fifo_give_mask) {
40081cb6:	002392        	l32i	a9, a3, 0
40081cb9:	1189e0        	slli	a8, a9, 2
40081cbc:	808890        	add	a8, a8, a9
40081cbf:	fa8291        	l32r	a9, 400806c8 <_iram_text_start+0x180>
40081cc2:	118820        	slli	a8, a8, 14
40081cc5:	889a      	add.n	a8, a8, a9
	return *(volatile uint32_t *)addr;
40081cc7:	0020c0        	memw
40081cca:	0898      	l32i.n	a9, a8, 0
40081ccc:	a0a582        	movi	a8, 0x5a0
40081ccf:	060987        	bnone	a9, a8, 40081cd9 <i2c_esp32_isr+0x29>

		/* Only give the semaphore if a watched interrupt happens.
		 * Error checking is performed at the other side of the
		 * semaphore, by reading the status register.
		 */
		k_sem_give(&data->fifo_sem);
40081cd2:	32a8      	l32i.n	a10, a2, 12
40081cd4:	aa8b      	addi.n	a10, a10, 8
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
40081cd6:	011665        	call8	40082e3c <z_impl_k_sem_give>
	}

	/* Acknowledge all I2C interrupts */
	sys_write32(~0, I2C_INT_CLR_REG(config->index));
40081cd9:	0398      	l32i.n	a9, a3, 0
40081cdb:	fa7c21        	l32r	a2, 400806cc <_iram_text_start+0x184>
40081cde:	1189e0        	slli	a8, a9, 2
40081ce1:	889a      	add.n	a8, a8, a9
40081ce3:	118820        	slli	a8, a8, 14
40081ce6:	882a      	add.n	a8, a8, a2
	*(volatile uint32_t *)addr = data;
40081ce8:	f27c      	movi.n	a2, -1
40081cea:	0020c0        	memw
40081ced:	0829      	s32i.n	a2, a8, 0
}
40081cef:	f01d      	retw.n
40081cf1:	000000        	ill

40081cf4 <i2c_esp32_reset_fifo$isra$0>:
static inline void i2c_esp32_reset_fifo(const struct i2c_esp32_config *config)
40081cf4:	004136        	entry	a1, 32
	uint32_t reg = I2C_FIFO_CONF_REG(config->index);
40081cf7:	1182e0        	slli	a8, a2, 2
40081cfa:	282a      	add.n	a2, a8, a2
40081cfc:	fa7581        	l32r	a8, 400806d0 <_iram_text_start+0x188>
40081cff:	112220        	slli	a2, a2, 14
40081d02:	228a      	add.n	a2, a2, a8
	return *(volatile uint32_t *)addr;
40081d04:	0020c0        	memw
40081d07:	0288      	l32i.n	a8, a2, 0
40081d09:	fa6591        	l32r	a9, 400806a0 <_iram_text_start+0x158>
40081d0c:	208890        	or	a8, a8, a9
	*(volatile uint32_t *)addr = data;
40081d0f:	0020c0        	memw
40081d12:	0289      	s32i.n	a8, a2, 0
	return *(volatile uint32_t *)addr;
40081d14:	0020c0        	memw
40081d17:	0288      	l32i.n	a8, a2, 0
	sys_write32(sys_read32(mem_addr) & ~v, mem_addr);
40081d19:	fa6e91        	l32r	a9, 400806d4 <_iram_text_start+0x18c>
40081d1c:	108890        	and	a8, a8, a9
	*(volatile uint32_t *)addr = data;
40081d1f:	0020c0        	memw
40081d22:	0289      	s32i.n	a8, a2, 0
}
40081d24:	f01d      	retw.n
	...

40081d28 <i2c_esp32_write_addr>:
{
40081d28:	004136        	entry	a1, 32
	const struct i2c_esp32_config *config = dev->config;
40081d2b:	1268      	l32i.n	a6, a2, 4
	struct i2c_esp32_data *data = dev->data;
40081d2d:	3278      	l32i.n	a7, a2, 12
	i2c_esp32_reset_fifo(config);
40081d2f:	06a8      	l32i.n	a10, a6, 0
40081d31:	fffc25        	call8	40081cf4 <i2c_esp32_reset_fifo$isra$0>
	sys_write32(addr & I2C_FIFO_RDATA, I2C_DATA_APB_REG(config->index));
40081d34:	0628      	l32i.n	a2, a6, 0
40081d36:	748050        	extui	a8, a5, 0, 8
40081d39:	1192e0        	slli	a9, a2, 2
40081d3c:	992a      	add.n	a9, a9, a2
40081d3e:	fa6621        	l32r	a2, 400806d8 <_iram_text_start+0x190>
40081d41:	119920        	slli	a9, a9, 14
40081d44:	992a      	add.n	a9, a9, a2
40081d46:	0020c0        	memw
40081d49:	0989      	s32i.n	a8, a9, 0
	if (data->dev_config & I2C_ADDR_10_BITS) {
40081d4b:	0788      	l32i.n	a8, a7, 0
	uint32_t addr_len = 1U;
40081d4d:	190c      	movi.n	a9, 1
	if (data->dev_config & I2C_ADDR_10_BITS) {
40081d4f:	156807        	bbci	a8, 0, 40081d68 <i2c_esp32_write_addr+0x40>
		sys_write32(I2C_DATA_APB_REG(config->index),
40081d52:	0668      	l32i.n	a6, a6, 0
			    (addr >> 8) & I2C_FIFO_RDATA);
40081d54:	415850        	srli	a5, a5, 8
		sys_write32(I2C_DATA_APB_REG(config->index),
40081d57:	1186e0        	slli	a8, a6, 2
40081d5a:	886a      	add.n	a8, a8, a6
40081d5c:	118820        	slli	a8, a8, 14
40081d5f:	882a      	add.n	a8, a8, a2
40081d61:	0020c0        	memw
40081d64:	0589      	s32i.n	a8, a5, 0
		addr_len++;
40081d66:	290c      	movi.n	a9, 2
	if ((msg->flags & I2C_MSG_RW_MASK) != I2C_MSG_WRITE) {
40081d68:	080422        	l8ui	a2, a4, 8
40081d6b:	116207        	bbci	a2, 0, 40081d80 <i2c_esp32_write_addr+0x58>
		*cmd++ = (struct i2c_esp32_cmd) {
40081d6e:	940c      	movi.n	a4, 9
40081d70:	114480        	slli	a4, a4, 8
40081d73:	209940        	or	a9, a9, a4
40081d76:	234b      	addi.n	a2, a3, 4
40081d78:	0020c0        	memw
40081d7b:	0399      	s32i.n	a9, a3, 0
40081d7d:	0001c6        	j	40081d88 <i2c_esp32_write_addr+0x60>
		msg->len += addr_len;
40081d80:	1458      	l32i.n	a5, a4, 4
40081d82:	032d      	mov.n	a2, a3
40081d84:	959a      	add.n	a9, a5, a9
40081d86:	1499      	s32i.n	a9, a4, 4
}
40081d88:	f01d      	retw.n
	...

40081d8c <i2c_esp32_configure_pins>:
{
40081d8c:	004136        	entry	a1, 32
#ifndef ZEPHYR_INCLUDE_DRIVERS_GPIO_GPIO_ESP32_H_
#define ZEPHYR_INCLUDE_DRIVERS_GPIO_GPIO_ESP32_H_

static const char *gpio_esp32_get_gpio_for_pin(int pin)
{
	if (pin < 32) {
40081d8f:	1fa052        	movi	a5, 31
		return NULL;
#endif /* CONFIG_GPIO_ESP32_0 */
	}

#if defined(CONFIG_GPIO_ESP32_1)
	return DT_LABEL(DT_INST(1, espressif_esp32_gpio));
40081d92:	fa52a1        	l32r	a10, 400806dc <_iram_text_start+0x194>
	if (pin < 32) {
40081d95:	022527        	blt	a5, a2, 40081d9b <i2c_esp32_configure_pins+0xf>
		return DT_LABEL(DT_INST(0, espressif_esp32_gpio));
40081d98:	fa52a1        	l32r	a10, 400806e0 <_iram_text_start+0x198>
40081d9b:	008265        	call8	400825c0 <z_impl_device_get_binding>
		return -EINVAL;
40081d9e:	eaaf82        	movi	a8, -22
	if (!gpio) {
40081da1:	047a16        	beqz	a10, 40081dec <i2c_esp32_configure_pins+0x60>
	ret = gpio_pin_configure(gpio, pin, pin_mode);
40081da4:	746020        	extui	a6, a2, 0, 8
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
40081da7:	032a52        	l32i	a5, a10, 12
	return api->pin_configure(port, pin, flags);
40081daa:	2a88      	l32i.n	a8, a10, 8
40081dac:	fa4ec1        	l32r	a12, 400806e4 <_iram_text_start+0x19c>
40081daf:	0888      	l32i.n	a8, a8, 0
40081db1:	06bd      	mov.n	a11, a6
40081db3:	0008e0        	callx8	a8
40081db6:	0a8d      	mov.n	a8, a10
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
40081db8:	0adc      	bnez.n	a10, 40081dcc <i2c_esp32_configure_pins+0x40>
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
40081dba:	eb7c      	movi.n	a11, -2
40081dbc:	401600        	ssl	a6
40081dbf:	818bb0        	src	a8, a11, a11
40081dc2:	05b8      	l32i.n	a11, a5, 0
40081dc4:	10bb80        	and	a11, a11, a8
40081dc7:	05b9      	s32i.n	a11, a5, 0
	if (ret < 0) {
40081dc9:	000086        	j	40081dcf <i2c_esp32_configure_pins+0x43>
40081dcc:	01ca96        	bltz	a10, 40081dec <i2c_esp32_configure_pins+0x60>
	esp32_rom_gpio_matrix_out(pin, matrix_out, false, false);
40081dcf:	0d0c      	movi.n	a13, 0
40081dd1:	0dcd      	mov.n	a12, a13
40081dd3:	03bd      	mov.n	a11, a3
40081dd5:	20a220        	or	a10, a2, a2
40081dd8:	fa4481        	l32r	a8, 400806e8 <_iram_text_start+0x1a0>
40081ddb:	0008e0        	callx8	a8
	esp32_rom_gpio_matrix_in(pin, matrix_in, false);
40081dde:	0c0c      	movi.n	a12, 0
40081de0:	04bd      	mov.n	a11, a4
40081de2:	02ad      	mov.n	a10, a2
40081de4:	fa4281        	l32r	a8, 400806ec <_iram_text_start+0x1a4>
40081de7:	0008e0        	callx8	a8
40081dea:	080c      	movi.n	a8, 0
}
40081dec:	082d      	mov.n	a2, a8
40081dee:	f01d      	retw.n

40081df0 <i2c_esp32_configure>:
{
40081df0:	006136        	entry	a1, 48
	const struct i2c_esp32_config *config = dev->config;
40081df3:	1248      	l32i.n	a4, a2, 4
	struct i2c_esp32_data *data = dev->data;
40081df5:	3278      	l32i.n	a7, a2, 12
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40081df7:	006360        	rsil	a6, 3
	ret = i2c_esp32_configure_pins(config->pins.scl,
40081dfa:	64c8      	l32i.n	a12, a4, 24
40081dfc:	54b8      	l32i.n	a11, a4, 20
40081dfe:	0724a2        	l32i	a10, a4, 28
40081e01:	fff8a5        	call8	40081d8c <i2c_esp32_configure_pins>
	if (ret < 0) {
40081e04:	242a96        	bltz	a10, 4008204a <i2c_esp32_configure+0x25a>
	ret = i2c_esp32_configure_pins(config->pins.sda,
40081e07:	44c8      	l32i.n	a12, a4, 16
40081e09:	34b8      	l32i.n	a11, a4, 12
40081e0b:	84a8      	l32i.n	a10, a4, 32
40081e0d:	fff7e5        	call8	40081d8c <i2c_esp32_configure_pins>
	if (ret < 0) {
40081e10:	236a96        	bltz	a10, 4008204a <i2c_esp32_configure+0x25a>
	clock_control_on(data->clock_dev, config->peripheral_id);
40081e13:	a7a8      	l32i.n	a10, a7, 40
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
40081e15:	0924b2        	l32i	a11, a4, 36
40081e18:	2a58      	l32i.n	a5, a10, 8
40081e1a:	002552        	l32i	a5, a5, 0
40081e1d:	0005e0        	callx8	a5
	if (config->mode.tx_lsb_first) {
40081e20:	280492        	l8ui	a9, a4, 40
		v |= I2C_TX_LSB_FIRST;
40081e23:	084c      	movi.n	a8, 64
40081e25:	050c      	movi.n	a5, 0
40081e27:	935890        	movnez	a5, a8, a9
	if (config->mode.rx_lsb_first) {
40081e2a:	290482        	l8ui	a8, a4, 41
40081e2d:	488c      	beqz.n	a8, 40081e35 <i2c_esp32_configure+0x45>
		v |= I2C_RX_LSB_FIRST;
40081e2f:	80a082        	movi	a8, 128
40081e32:	205580        	or	a5, a5, a8
	if (dev_config & I2C_MODE_MASTER) {
40081e35:	0498      	l32i.n	a9, a4, 0
40081e37:	1189e0        	slli	a8, a9, 2
40081e3a:	889a      	add.n	a8, a8, a9
40081e3c:	fa2d91        	l32r	a9, 400806f0 <_iram_text_start+0x1a8>
40081e3f:	118820        	slli	a8, a8, 14
40081e42:	889a      	add.n	a8, a8, a9
40081e44:	091c      	movi.n	a9, 16
40081e46:	0f0397        	bnone	a3, a9, 40081e59 <i2c_esp32_configure+0x69>
40081e49:	070c      	movi.n	a7, 0
		v |= I2C_MS_MODE;
40081e4b:	205590        	or	a5, a5, a9
40081e4e:	0020c0        	memw
40081e51:	0879      	s32i.n	a7, a8, 0
40081e53:	001506        	j	40081eab <i2c_esp32_configure+0xbb>
40081e56:	000000        	ill
		uint32_t addr = (data->address & I2C_SLAVE_ADDR_V);
40081e59:	021772        	l16ui	a7, a7, 4
40081e5c:	e47070        	extui	a7, a7, 0, 15
		if (dev_config & I2C_ADDR_10_BITS) {
40081e5f:	056307        	bbci	a3, 0, 40081e68 <i2c_esp32_configure+0x78>
			addr |= I2C_ADDR_10BIT_EN;
40081e62:	fa0a91        	l32r	a9, 4008068c <_iram_text_start+0x144>
40081e65:	207790        	or	a7, a7, a9
40081e68:	0020c0        	memw
40081e6b:	0879      	s32i.n	a7, a8, 0
		sys_clear_bit(I2C_CTR_REG(config->index), I2C_TRANS_START_S);
40081e6d:	0488      	l32i.n	a8, a4, 0

static ALWAYS_INLINE void sys_clear_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp & ~(1 << bit);
40081e6f:	dfaf92        	movi	a9, -33
40081e72:	1178e0        	slli	a7, a8, 2
40081e75:	778a      	add.n	a7, a7, a8
40081e77:	fa1f81        	l32r	a8, 400806f4 <_iram_text_start+0x1ac>
40081e7a:	117720        	slli	a7, a7, 14
40081e7d:	778a      	add.n	a7, a7, a8
	uint32_t temp = *(volatile uint32_t *)addr;
40081e7f:	0020c0        	memw
40081e82:	0788      	l32i.n	a8, a7, 0
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
40081e84:	108890        	and	a8, a8, a9
40081e87:	0020c0        	memw
40081e8a:	0789      	s32i.n	a8, a7, 0
		sys_clear_bit(I2C_FIFO_CONF_REG(config->index),
40081e8c:	0488      	l32i.n	a8, a4, 0
40081e8e:	fa1a91        	l32r	a9, 400806f8 <_iram_text_start+0x1b0>
40081e91:	1178e0        	slli	a7, a8, 2
40081e94:	778a      	add.n	a7, a7, a8
40081e96:	fa0e81        	l32r	a8, 400806d0 <_iram_text_start+0x188>
40081e99:	117720        	slli	a7, a7, 14
40081e9c:	778a      	add.n	a7, a7, a8
	uint32_t temp = *(volatile uint32_t *)addr;
40081e9e:	0020c0        	memw
40081ea1:	0788      	l32i.n	a8, a7, 0
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
40081ea3:	108890        	and	a8, a8, a9
40081ea6:	0020c0        	memw
40081ea9:	0789      	s32i.n	a8, a7, 0
	sys_write32(v, I2C_CTR_REG(config->index));
40081eab:	0488      	l32i.n	a8, a4, 0
	v |= I2C_CLK_EN;
40081ead:	03a172        	movi	a7, 0x103
40081eb0:	205570        	or	a5, a5, a7
	sys_write32(v, I2C_CTR_REG(config->index));
40081eb3:	1178e0        	slli	a7, a8, 2
40081eb6:	778a      	add.n	a7, a7, a8
40081eb8:	fa0f81        	l32r	a8, 400806f4 <_iram_text_start+0x1ac>
40081ebb:	117720        	slli	a7, a7, 14
40081ebe:	778a      	add.n	a7, a7, a8
40081ec0:	0020c0        	memw
40081ec3:	0759      	s32i.n	a5, a7, 0
	const struct i2c_esp32_config *config = dev->config;
40081ec5:	1258      	l32i.n	a5, a2, 4
	struct i2c_esp32_data *data = dev->data;
40081ec7:	3278      	l32i.n	a7, a2, 12
	uint32_t sys_clk_freq = 0;
40081ec9:	020c      	movi.n	a2, 0
40081ecb:	0129      	s32i.n	a2, a1, 0
	ret = i2c_esp32_configure_speed(dev, I2C_SPEED_GET(dev_config));
40081ecd:	243130        	extui	a3, a3, 1, 3
	uint32_t freq_hz = speed_to_freq_tbl[speed];
40081ed0:	fa0b21        	l32r	a2, 400806fc <_iram_text_start+0x1b4>
40081ed3:	1133e0        	slli	a3, a3, 2
40081ed6:	323a      	add.n	a3, a2, a3
40081ed8:	0328      	l32i.n	a2, a3, 0
		return -ENOTSUP;
40081eda:	ddafa2        	movi	a10, -35
	if (!freq_hz) {
40081edd:	163216        	beqz	a2, 40082044 <i2c_esp32_configure+0x254>
	if (clock_control_get_rate(data->clock_dev,
40081ee0:	a7a8      	l32i.n	a10, a7, 40
		(const struct clock_control_driver_api *)dev->api;

	__ASSERT(api->get_rate != NULL, "%s not implemented for device %s",
		__func__, dev->name);

	return api->get_rate(dev, sys, rate);
40081ee2:	95b8      	l32i.n	a11, a5, 36
40081ee4:	2a38      	l32i.n	a3, a10, 8
40081ee6:	01cd      	mov.n	a12, a1
40081ee8:	3338      	l32i.n	a3, a3, 12
40081eea:	0003e0        	callx8	a3
40081eed:	151a56        	bnez	a10, 40082042 <i2c_esp32_configure+0x252>
		   I2C_SCL_LOW_PERIOD_REG(config->index));
40081ef0:	0578      	l32i.n	a7, a5, 0
	period = (sys_clk_freq / freq_hz);
40081ef2:	0188      	l32i.n	a8, a1, 0
40081ef4:	c28820        	quou	a8, a8, a2
		   I2C_SCL_LOW_PERIOD_REG(config->index));
40081ef7:	1127e0        	slli	a2, a7, 2
40081efa:	227a      	add.n	a2, a2, a7
40081efc:	fa0171        	l32r	a7, 40080700 <_iram_text_start+0x1b8>
40081eff:	112220        	slli	a2, a2, 14
40081f02:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40081f04:	0020c0        	memw
40081f07:	0278      	l32i.n	a7, a2, 0
	period /= 2U; /* Set hold and setup times to 1/2th of period */
40081f09:	413180        	srli	a3, a8, 1
	sys_write32(sys_read32(mem_addr) | v, mem_addr);
40081f0c:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
40081f0f:	0020c0        	memw
40081f12:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_HIGH_PERIOD_REG(config->index));
40081f14:	0578      	l32i.n	a7, a5, 0
	period /= 2U; /* Set sample and hold times to 1/4th of period */
40081f16:	418280        	srli	a8, a8, 2
		   I2C_SCL_HIGH_PERIOD_REG(config->index));
40081f19:	1127e0        	slli	a2, a7, 2
40081f1c:	227a      	add.n	a2, a2, a7
40081f1e:	f9f971        	l32r	a7, 40080704 <_iram_text_start+0x1bc>
40081f21:	112220        	slli	a2, a2, 14
40081f24:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40081f26:	0020c0        	memw
40081f29:	0278      	l32i.n	a7, a2, 0
40081f2b:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
40081f2e:	0020c0        	memw
40081f31:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_START_HOLD_REG(config->index));
40081f33:	0578      	l32i.n	a7, a5, 0
40081f35:	1127e0        	slli	a2, a7, 2
40081f38:	227a      	add.n	a2, a2, a7
40081f3a:	f9f371        	l32r	a7, 40080708 <_iram_text_start+0x1c0>
40081f3d:	112220        	slli	a2, a2, 14
40081f40:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40081f42:	0020c0        	memw
40081f45:	0278      	l32i.n	a7, a2, 0
40081f47:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
40081f4a:	0020c0        	memw
40081f4d:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_RSTART_SETUP_REG(config->index));
40081f4f:	0578      	l32i.n	a7, a5, 0
40081f51:	1127e0        	slli	a2, a7, 2
40081f54:	227a      	add.n	a2, a2, a7
40081f56:	f9ed71        	l32r	a7, 4008070c <_iram_text_start+0x1c4>
40081f59:	112220        	slli	a2, a2, 14
40081f5c:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40081f5e:	0020c0        	memw
40081f61:	0278      	l32i.n	a7, a2, 0
40081f63:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
40081f66:	0020c0        	memw
40081f69:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_STOP_HOLD_REG(config->index));
40081f6b:	0578      	l32i.n	a7, a5, 0
40081f6d:	1127e0        	slli	a2, a7, 2
40081f70:	227a      	add.n	a2, a2, a7
40081f72:	f9e771        	l32r	a7, 40080710 <_iram_text_start+0x1c8>
40081f75:	112220        	slli	a2, a2, 14
40081f78:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40081f7a:	0020c0        	memw
40081f7d:	0278      	l32i.n	a7, a2, 0
40081f7f:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
40081f82:	0020c0        	memw
40081f85:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_STOP_SETUP_REG(config->index));
40081f87:	0578      	l32i.n	a7, a5, 0
40081f89:	1127e0        	slli	a2, a7, 2
40081f8c:	227a      	add.n	a2, a2, a7
40081f8e:	f9e171        	l32r	a7, 40080714 <_iram_text_start+0x1cc>
40081f91:	112220        	slli	a2, a2, 14
40081f94:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40081f96:	0020c0        	memw
40081f99:	0278      	l32i.n	a7, a2, 0
40081f9b:	203370        	or	a3, a3, a7
	*(volatile uint32_t *)addr = data;
40081f9e:	0020c0        	memw
40081fa1:	0239      	s32i.n	a3, a2, 0
		   I2C_SDA_HOLD_REG(config->index));
40081fa3:	0538      	l32i.n	a3, a5, 0
40081fa5:	1123e0        	slli	a2, a3, 2
40081fa8:	223a      	add.n	a2, a2, a3
40081faa:	f9db31        	l32r	a3, 40080718 <_iram_text_start+0x1d0>
40081fad:	112220        	slli	a2, a2, 14
40081fb0:	223a      	add.n	a2, a2, a3
	return *(volatile uint32_t *)addr;
40081fb2:	0020c0        	memw
40081fb5:	0238      	l32i.n	a3, a2, 0
40081fb7:	203830        	or	a3, a8, a3
	*(volatile uint32_t *)addr = data;
40081fba:	0020c0        	memw
40081fbd:	0239      	s32i.n	a3, a2, 0
		   I2C_SDA_SAMPLE_REG(config->index));
40081fbf:	0538      	l32i.n	a3, a5, 0
40081fc1:	ffab52        	movi	a5, 0xfffffbff
40081fc4:	1123e0        	slli	a2, a3, 2
40081fc7:	223a      	add.n	a2, a2, a3
40081fc9:	f9d431        	l32r	a3, 4008071c <_iram_text_start+0x1d4>
40081fcc:	112220        	slli	a2, a2, 14
40081fcf:	223a      	add.n	a2, a2, a3
	return *(volatile uint32_t *)addr;
40081fd1:	0020c0        	memw
40081fd4:	0238      	l32i.n	a3, a2, 0
40081fd6:	208830        	or	a8, a8, a3
	*(volatile uint32_t *)addr = data;
40081fd9:	0020c0        	memw
40081fdc:	0289      	s32i.n	a8, a2, 0
	sys_clear_bit(I2C_FIFO_CONF_REG(config->index), I2C_NONFIFO_EN_S);
40081fde:	0438      	l32i.n	a3, a4, 0
40081fe0:	1123e0        	slli	a2, a3, 2
40081fe3:	223a      	add.n	a2, a2, a3
40081fe5:	f9ba31        	l32r	a3, 400806d0 <_iram_text_start+0x188>
40081fe8:	112220        	slli	a2, a2, 14
40081feb:	223a      	add.n	a2, a2, a3
	uint32_t temp = *(volatile uint32_t *)addr;
40081fed:	0020c0        	memw
40081ff0:	0238      	l32i.n	a3, a2, 0
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
40081ff2:	103350        	and	a3, a3, a5
40081ff5:	0020c0        	memw
40081ff8:	0239      	s32i.n	a3, a2, 0
	sys_write32(v << I2C_TIME_OUT_REG_S, I2C_TO_REG(config->index));
40081ffa:	0438      	l32i.n	a3, a4, 0
40081ffc:	1123e0        	slli	a2, a3, 2
40081fff:	223a      	add.n	a2, a2, a3
40082001:	f9c731        	l32r	a3, 40080720 <_iram_text_start+0x1d8>
40082004:	112220        	slli	a2, a2, 14
40082007:	223a      	add.n	a2, a2, a3
40082009:	f9c631        	l32r	a3, 40080724 <_iram_text_start+0x1dc>
4008200c:	0020c0        	memw
4008200f:	0239      	s32i.n	a3, a2, 0
		    I2C_INT_ENA_REG(config->index));
40082011:	0438      	l32i.n	a3, a4, 0
40082013:	1123e0        	slli	a2, a3, 2
40082016:	223a      	add.n	a2, a2, a3
40082018:	f9c431        	l32r	a3, 40080728 <_iram_text_start+0x1e0>
4008201b:	112220        	slli	a2, a2, 14
4008201e:	223a      	add.n	a2, a2, a3
40082020:	a0a532        	movi	a3, 0x5a0
40082023:	0020c0        	memw
40082026:	0239      	s32i.n	a3, a2, 0
	__asm__ volatile("rsr.intenable %0" : "=r"(val));
40082028:	03e430        	rsr.intenable	a3
	z_xt_ints_on(1 << irq);
4008202b:	c448      	l32i.n	a4, a4, 48
4008202d:	120c      	movi.n	a2, 1
4008202f:	401400        	ssl	a4
40082032:	a12200        	sll	a2, a2
	val |= mask;
40082035:	202230        	or	a2, a2, a3
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
40082038:	13e420        	wsr.intenable	a2
4008203b:	002010        	rsync
4008203e:	000086        	j	40082044 <i2c_esp32_configure+0x254>
40082041:	aa6c00        	floor.s	a6, f12, 0
	XTOS_RESTORE_INTLEVEL(key);
40082044:	13e660        	wsr.ps	a6
40082047:	002010        	rsync
}
4008204a:	0a2d      	mov.n	a2, a10
4008204c:	f01d      	retw.n
	...

40082050 <i2c_esp32_transmit>:
{
40082050:	004136        	entry	a1, 32
	const struct i2c_esp32_config *config = dev->config;
40082053:	1238      	l32i.n	a3, a2, 4
	struct i2c_esp32_data *data = dev->data;
40082055:	32a8      	l32i.n	a10, a2, 12
	sys_set_bit(I2C_CTR_REG(config->index), I2C_TRANS_START_S);
40082057:	0328      	l32i.n	a2, a3, 0
	*(volatile uint32_t *)addr = temp | (1 << bit);
40082059:	092c      	movi.n	a9, 32
4008205b:	1182e0        	slli	a8, a2, 2
4008205e:	882a      	add.n	a8, a8, a2
40082060:	f9a521        	l32r	a2, 400806f4 <_iram_text_start+0x1ac>
40082063:	118820        	slli	a8, a8, 14
40082066:	882a      	add.n	a8, a8, a2
	uint32_t temp = *(volatile uint32_t *)addr;
40082068:	0020c0        	memw
4008206b:	0828      	l32i.n	a2, a8, 0
	*(volatile uint32_t *)addr = temp | (1 << bit);
4008206d:	202290        	or	a2, a2, a9
40082070:	0020c0        	memw
40082073:	0829      	s32i.n	a2, a8, 0
	return z_impl_k_sem_take(sem, timeout);
40082075:	f9adc1        	l32r	a12, 4008072c <_iram_text_start+0x1e4>
40082078:	f950d1        	l32r	a13, 400805b8 <_iram_text_start+0x70>
4008207b:	aa8b      	addi.n	a10, a10, 8
4008207d:	00dfa5        	call8	40082e78 <z_impl_k_sem_take>
		return -ETIMEDOUT;
40082080:	c4af22        	movi	a2, -60
	if (k_sem_take(&data->fifo_sem, K_MSEC(I2C_ESP32_TIMEOUT_MS)) < 0) {
40082083:	026a96        	bltz	a10, 400820ad <i2c_esp32_transmit+0x5d>
	status = sys_read32(I2C_INT_RAW_REG(config->index));
40082086:	0328      	l32i.n	a2, a3, 0
40082088:	1182e0        	slli	a8, a2, 2
4008208b:	882a      	add.n	a8, a8, a2
4008208d:	f9a821        	l32r	a2, 40080730 <_iram_text_start+0x1e8>
40082090:	118820        	slli	a8, a8, 14
40082093:	882a      	add.n	a8, a8, a2
	return *(volatile uint32_t *)addr;
40082095:	0020c0        	memw
40082098:	0898      	l32i.n	a9, a8, 0
	if (status & (I2C_ARBITRATION_LOST_INT_RAW | I2C_ACK_ERR_INT_RAW)) {
4008209a:	20a482        	movi	a8, 0x420
4008209d:	108980        	and	a8, a9, a8
		return -EIO;
400820a0:	b27c      	movi.n	a2, -5
	if (status & (I2C_ARBITRATION_LOST_INT_RAW | I2C_ACK_ERR_INT_RAW)) {
400820a2:	78cc      	bnez.n	a8, 400820ad <i2c_esp32_transmit+0x5d>
	if (status & I2C_TIME_OUT_INT_RAW) {
400820a4:	049890        	extui	a9, a9, 8, 1
	return 0;
400820a7:	c4af22        	movi	a2, -60
400820aa:	832890        	moveqz	a2, a8, a9
}
400820ad:	f01d      	retw.n
	...

400820b0 <i2c_esp32_init>:
		    POST_KERNEL, CONFIG_I2C_INIT_PRIORITY,
		    &i2c_esp32_driver_api);
#endif /* DT_NODE_HAS_STATUS(DT_DRV_INST(1), okay) */

static int i2c_esp32_init(const struct device *dev)
{
400820b0:	004136        	entry	a1, 32
	const struct i2c_esp32_config *config = dev->config;
400820b3:	1248      	l32i.n	a4, a2, 4
extern "C" {
#endif

static inline uint32_t i2c_map_dt_bitrate(uint32_t bitrate)
{
	switch (bitrate) {
400820b5:	f99f51        	l32r	a5, 40080734 <_iram_text_start+0x1ec>
	struct i2c_esp32_data *data = dev->data;
	uint32_t bitrate_cfg = i2c_map_dt_bitrate(config->bitrate);
400820b8:	e488      	l32i.n	a8, a4, 56
	struct i2c_esp32_data *data = dev->data;
400820ba:	3268      	l32i.n	a6, a2, 12
	case I2C_BITRATE_STANDARD:
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
	case I2C_BITRATE_FAST:
		return I2C_SPEED_FAST << I2C_SPEED_SHIFT;
	case I2C_BITRATE_FAST_PLUS:
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
400820bc:	630c      	movi.n	a3, 6
	switch (bitrate) {
400820be:	2c1857        	beq	a8, a5, 400820ee <i2c_esp32_init+0x3e>
400820c1:	143587        	bltu	a5, a8, 400820d9 <i2c_esp32_init+0x29>
400820c4:	f99d51        	l32r	a5, 40080738 <_iram_text_start+0x1f0>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
400820c7:	230c      	movi.n	a3, 2
	switch (bitrate) {
400820c9:	211857        	beq	a8, a5, 400820ee <i2c_esp32_init+0x3e>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
	}

	LOG_ERR("Invalid I2C bit rate value");

	return 0;
400820cc:	f99c31        	l32r	a3, 4008073c <_iram_text_start+0x1f4>
400820cf:	450c      	movi.n	a5, 4
400820d1:	c08830        	sub	a8, a8, a3
400820d4:	000446        	j	400820e9 <i2c_esp32_init+0x39>
400820d7:	510000        	lsi	f0, a0, 0x144
	switch (bitrate) {
400820da:	f999      	s32i.n	a9, a9, 60
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
400820dc:	830c      	movi.n	a3, 8
	switch (bitrate) {
400820de:	0c1857        	beq	a8, a5, 400820ee <i2c_esp32_init+0x3e>
	return 0;
400820e1:	f99831        	l32r	a3, 40080744 <_iram_text_start+0x1fc>
400820e4:	a50c      	movi.n	a5, 10
400820e6:	c08830        	sub	a8, a8, a3
400820e9:	030c      	movi.n	a3, 0
400820eb:	833580        	moveqz	a3, a5, a8
	data->clock_dev = device_get_binding(config->clock_name);
400820ee:	24a8      	l32i.n	a10, a4, 8
400820f0:	004ce5        	call8	400825c0 <z_impl_device_get_binding>
400820f3:	a6a9      	s32i.n	a10, a6, 40
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400820f5:	006350        	rsil	a5, 3
	return z_impl_k_sem_init(sem, initial_count, limit);
400820f8:	1c0c      	movi.n	a12, 1
400820fa:	0cbd      	mov.n	a11, a12
400820fc:	a68b      	addi.n	a10, a6, 8
400820fe:	015165        	call8	40083614 <z_impl_k_sem_init>
40082101:	1c0c      	movi.n	a12, 1
40082103:	20bcc0        	or	a11, a12, a12
40082106:	18c6a2        	addi	a10, a6, 24
40082109:	0150a5        	call8	40083614 <z_impl_k_sem_init>
	__asm__ volatile("rsr.intenable %0" : "=r"(val));
4008210c:	03e460        	rsr.intenable	a6
	z_xt_ints_off(1 << irq);
4008210f:	c498      	l32i.n	a9, a4, 48
	val &= ~mask;
40082111:	e87c      	movi.n	a8, -2
40082113:	401900        	ssl	a9
40082116:	818880        	src	a8, a8, a8
40082119:	108860        	and	a8, a8, a6
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
4008211c:	13e480        	wsr.intenable	a8
4008211f:	002010        	rsync
	irq_disable(config->irq.line);

	/* Even if irq_enable() is called on config->irq.line, disable
	 * interrupt sources in the I2C controller.
	 */
	sys_write32(0, I2C_INT_ENA_REG(config->index));
40082122:	0468      	l32i.n	a6, a4, 0
	*(volatile uint32_t *)addr = data;
40082124:	0a0c      	movi.n	a10, 0
40082126:	1186e0        	slli	a8, a6, 2
40082129:	886a      	add.n	a8, a8, a6
4008212b:	f97f61        	l32r	a6, 40080728 <_iram_text_start+0x1e0>
4008212e:	118820        	slli	a8, a8, 14
40082131:	886a      	add.n	a8, a8, a6
40082133:	0020c0        	memw
40082136:	0068a2        	s32i	a10, a8, 0
	esp32_rom_intr_matrix_set(0, config->irq.source, config->irq.line);
40082139:	0c24c2        	l32i	a12, a4, 48
4008213c:	b4b8      	l32i.n	a11, a4, 44
4008213e:	f96181        	l32r	a8, 400806c4 <_iram_text_start+0x17c>
40082141:	0008e0        	callx8	a8

	config->connect_irq();
40082144:	1468      	l32i.n	a6, a4, 4
40082146:	0006e0        	callx8	a6
	XTOS_RESTORE_INTLEVEL(key);
40082149:	13e650        	wsr.ps	a5
4008214c:	002010        	rsync
	irq_unlock(key);

	return i2c_esp32_configure(dev, config->default_config | bitrate_cfg);
4008214f:	d4b8      	l32i.n	a11, a4, 52
40082151:	02ad      	mov.n	a10, a2
40082153:	20b3b0        	or	a11, a3, a11
40082156:	ffc9a5        	call8	40081df0 <i2c_esp32_configure>
}
40082159:	0a2d      	mov.n	a2, a10
4008215b:	f01d      	retw.n
4008215d:	000000        	ill

40082160 <i2c_esp32_wait$isra$1>:
static int i2c_esp32_wait(const struct device *dev,
40082160:	004136        	entry	a1, 32
	int counter = 0;
40082163:	040c      	movi.n	a4, 0
	if (*counter > I2C_ESP32_TIMEOUT) {
40082165:	85a352        	movi	a5, 0x385
	if (wait_cmd) {
40082168:	199347        	bne	a3, a4, 40082185 <i2c_esp32_wait$isra$1+0x25>
4008216b:	000cc6        	j	400821a2 <i2c_esp32_wait$isra$1+0x42>
	*counter = *counter + 1;
4008216e:	441b      	addi.n	a4, a4, 1
	if (*counter > I2C_ESP32_TIMEOUT) {
40082170:	059457        	bne	a4, a5, 40082179 <i2c_esp32_wait$isra$1+0x19>
		return -ETIMEDOUT;
40082173:	c4af22        	movi	a2, -60
40082176:	001206        	j	400821c2 <i2c_esp32_wait$isra$1+0x62>
	if (*counter > I2C_ESP32_SPIN_THRESHOLD) {
40082179:	58a282        	movi	a8, 0x258
4008217c:	05a847        	bge	a8, a4, 40082185 <i2c_esp32_wait$isra$1+0x25>
	z_impl_k_yield();
4008217f:	201110        	or	a1, a1, a1
40082182:	00bea5        	call8	40082d6c <z_impl_k_yield>
		while (!wait_cmd->done) {
40082185:	0020c0        	memw
40082188:	0388      	l32i.n	a8, a3, 0
4008218a:	fe08d6        	bgez	a8, 4008216e <i2c_esp32_wait$isra$1+0xe>
4008218d:	000446        	j	400821a2 <i2c_esp32_wait$isra$1+0x42>
	*counter = *counter + 1;
40082190:	01c442        	addi	a4, a4, 1
	if (*counter > I2C_ESP32_TIMEOUT) {
40082193:	85a332        	movi	a3, 0x385
40082196:	d91437        	beq	a4, a3, 40082173 <i2c_esp32_wait$isra$1+0x13>
	if (*counter > I2C_ESP32_SPIN_THRESHOLD) {
40082199:	58a232        	movi	a3, 0x258
4008219c:	02a347        	bge	a3, a4, 400821a2 <i2c_esp32_wait$isra$1+0x42>
4008219f:	00bce5        	call8	40082d6c <z_impl_k_yield>
	while (sys_read32(I2C_SR_REG(config->index)) & I2C_BUS_BUSY) {
400821a2:	002292        	l32i	a9, a2, 0
400821a5:	f96831        	l32r	a3, 40080748 <_iram_text_start+0x200>
400821a8:	1189e0        	slli	a8, a9, 2
400821ab:	808890        	add	a8, a8, a9
400821ae:	118820        	slli	a8, a8, 14
400821b1:	883a      	add.n	a8, a8, a3
	return *(volatile uint32_t *)addr;
400821b3:	0020c0        	memw
400821b6:	0888      	l32i.n	a8, a8, 0
400821b8:	031c      	movi.n	a3, 16
400821ba:	108830        	and	a8, a8, a3
400821bd:	fcf856        	bnez	a8, 40082190 <i2c_esp32_wait$isra$1+0x30>
	return 0;
400821c0:	082d      	mov.n	a2, a8
}
400821c2:	f01d      	retw.n

400821c4 <i2c_esp32_transfer>:
{
400821c4:	008136        	entry	a1, 64
400821c7:	206220        	or	a6, a2, a2
	struct i2c_esp32_data *data = dev->data;
400821ca:	032222        	l32i	a2, a2, 12
{
400821cd:	744040        	extui	a4, a4, 0, 8
400821d0:	f45050        	extui	a5, a5, 0, 16
	k_sem_take(&data->transfer_sem, K_FOREVER);
400821d3:	18c272        	addi	a7, a2, 24
	return z_impl_k_sem_take(sem, timeout);
400821d6:	f95dc1        	l32r	a12, 4008074c <_iram_text_start+0x204>
400821d9:	f95cd1        	l32r	a13, 4008074c <_iram_text_start+0x204>
400821dc:	20a770        	or	a10, a7, a7
400821df:	00c9a5        	call8	40082e78 <z_impl_k_sem_take>
	addr &= BIT_MASK(data->dev_config & I2C_ADDR_10_BITS ? 10 : 7);
400821e2:	0228      	l32i.n	a2, a2, 0
400821e4:	ffa392        	movi	a9, 0x3ff
400821e7:	042020        	extui	a2, a2, 0, 1
400821ea:	7fa082        	movi	a8, 127
400821ed:	938920        	movnez	a8, a9, a2
400821f0:	1124f0        	slli	a2, a4, 1
400821f3:	224a      	add.n	a2, a2, a4
400821f5:	1122e0        	slli	a2, a2, 2
400821f8:	232a      	add.n	a2, a3, a2
400821fa:	105850        	and	a5, a8, a5
	addr <<= 1;
400821fd:	1155f0        	slli	a5, a5, 1
	for (i = 0U; i < num_msgs; i++) {
40082200:	4129      	s32i.n	a2, a1, 16
	addr |= BIT(0);
40082202:	120c      	movi.n	a2, 1
	cmd = i2c_esp32_write_addr(dev, cmd, &msg, addr);
40082204:	202520        	or	a2, a5, a2
40082207:	5129      	s32i.n	a2, a1, 20
	for (i = 0U; i < num_msgs; i++) {
40082209:	007906        	j	400823f1 <i2c_esp32_transfer+0x22d>
		if ((msgs[i].flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
4008220c:	012642        	l32i	a4, a6, 4
4008220f:	0123a2        	l32i	a10, a3, 4
40082212:	002482        	l32i	a8, a4, 0
40082215:	2398      	l32i.n	a9, a3, 8
40082217:	1128e0        	slli	a2, a8, 2
4008221a:	228a      	add.n	a2, a2, a8
4008221c:	f94d81        	l32r	a8, 40080750 <_iram_text_start+0x208>
4008221f:	112220        	slli	a2, a2, 14
40082222:	228a      	add.n	a2, a2, a8
40082224:	03c8      	l32i.n	a12, a3, 0
40082226:	080382        	l8ui	a8, a3, 8
40082229:	01c9      	s32i.n	a12, a1, 0
4008222b:	048080        	extui	a8, a8, 0, 1
4008222e:	11a9      	s32i.n	a10, a1, 4
40082230:	2199      	s32i.n	a9, a1, 8
40082232:	b24b      	addi.n	a11, a2, 4
40082234:	0c5856        	bnez	a8, 400822fd <i2c_esp32_transfer+0x139>
	*cmd++ = (struct i2c_esp32_cmd) {
40082237:	0020c0        	memw
4008223a:	0289      	s32i.n	a8, a2, 0
	cmd = i2c_esp32_write_addr(dev, cmd, &msg, addr);
4008223c:	05dd      	mov.n	a13, a5
4008223e:	01cd      	mov.n	a12, a1
40082240:	06ad      	mov.n	a10, a6
40082242:	ffae65        	call8	40081d28 <i2c_esp32_write_addr>
40082245:	0abd      	mov.n	a11, a10
		uint32_t to_send = MIN(I2C_ESP32_BUFFER_SIZE, msg.len);
40082247:	022c      	movi.n	a2, 32
40082249:	002986        	j	400822f3 <i2c_esp32_transfer+0x12f>
4008224c:	882000        	lsi	f0, a0, 0x220
4008224f:	22d163        	lsi	f6, a1, 136
				    I2C_DATA_APB_REG(config->index));
40082252:	adf9      	s32i.n	a15, a13, 40
40082254:	7608      	l32i.n	a0, a6, 28
40082256:	198a      	add.n	a1, a9, a8
			sys_write32(*msg.buf++,
40082258:	0198      	l32i.n	a9, a1, 0
				    I2C_DATA_APB_REG(config->index));
4008225a:	04e8      	l32i.n	a14, a4, 0
			sys_write32(*msg.buf++,
4008225c:	c91b      	addi.n	a12, a9, 1
4008225e:	01c9      	s32i.n	a12, a1, 0
40082260:	0009c2        	l8ui	a12, a9, 0
				    I2C_DATA_APB_REG(config->index));
40082263:	119ee0        	slli	a9, a14, 2
40082266:	99ea      	add.n	a9, a9, a14
40082268:	119920        	slli	a9, a9, 14
4008226b:	99da      	add.n	a9, a9, a13
	*(volatile uint32_t *)addr = data;
4008226d:	0020c0        	memw
40082270:	09c9      	s32i.n	a12, a9, 0
		*cmd++ = (struct i2c_esp32_cmd) {
40082272:	990c      	movi.n	a9, 9
40082274:	11a980        	slli	a10, a9, 8
40082277:	749080        	extui	a9, a8, 0, 8
4008227a:	2099a0        	or	a9, a9, a10
4008227d:	0020c0        	memw
40082280:	0b99      	s32i.n	a9, a11, 0
		msg.len -= to_send;
40082282:	1198      	l32i.n	a9, a1, 4
40082284:	c08980        	sub	a8, a9, a8
40082287:	1189      	s32i.n	a8, a1, 4
		if (!msg.len && (msg.flags & I2C_MSG_STOP)) {
40082289:	c8dc      	bnez.n	a8, 400822a9 <i2c_esp32_transfer+0xe5>
4008228b:	080192        	l8ui	a9, a1, 8
4008228e:	176917        	bbci	a9, 1, 400822a9 <i2c_esp32_transfer+0xe5>
			*cmd = (struct i2c_esp32_cmd) {
40082291:	0020c0        	memw
40082294:	1b89      	s32i.n	a8, a11, 4
40082296:	f8d791        	l32r	a9, 400805f4 <_iram_text_start+0xac>
40082299:	0020c0        	memw
4008229c:	1b88      	l32i.n	a8, a11, 4
4008229e:	108890        	and	a8, a8, a9
400822a1:	f92c91        	l32r	a9, 40080754 <_iram_text_start+0x20c>
400822a4:	000586        	j	400822be <i2c_esp32_transfer+0xfa>
400822a7:	0c0000        	lsi	f0, a0, 48
			*cmd = (struct i2c_esp32_cmd) {
400822aa:	c008      	l32i.n	a0, a0, 48
400822ac:	890020        	lsi	f2, a0, 0x224
400822af:	911b      	addi.n	a9, a1, 1
400822b1:	c0f8d1        	l32r	a13, 40072694 <esp32_rom_gpio_matrix_out+0x68788>
400822b4:	880020        	lsi	f2, a0, 0x220
400822b7:	901b      	addi.n	a9, a0, 1
400822b9:	1088      	l32i.n	a8, a0, 4
400822bb:	f8cf91        	l32r	a9, 400805f8 <_iram_text_start+0xb0>
400822be:	208890        	or	a8, a8, a9
400822c1:	0020c0        	memw
400822c4:	1b89      	s32i.n	a8, a11, 4
	ret = i2c_esp32_transmit(dev);
400822c6:	06ad      	mov.n	a10, a6
400822c8:	61b9      	s32i.n	a11, a1, 24
400822ca:	ffd865        	call8	40082050 <i2c_esp32_transmit>
400822cd:	0a8d      	mov.n	a8, a10
	if (!ret) {
400822cf:	61b8      	l32i.n	a11, a1, 24
400822d1:	7acc      	bnez.n	a10, 400822dc <i2c_esp32_transfer+0x118>
		return i2c_esp32_wait(dev, wait_cmd);
400822d3:	16a8      	l32i.n	a10, a6, 4
400822d5:	bb4b      	addi.n	a11, a11, 4
400822d7:	ffe8a5        	call8	40082160 <i2c_esp32_wait$isra$1>
400822da:	0a8d      	mov.n	a8, a10
		if (ret < 0) {
400822dc:	10d896        	bltz	a8, 400823ed <i2c_esp32_transfer+0x229>
		i2c_esp32_reset_fifo(config);
400822df:	04a8      	l32i.n	a10, a4, 0
400822e1:	ffa125        	call8	40081cf4 <i2c_esp32_reset_fifo$isra$0>
	for (; msg.len; cmd = (void *)I2C_COMD0_REG(config->index)) {
400822e4:	0488      	l32i.n	a8, a4, 0
400822e6:	11b8e0        	slli	a11, a8, 2
400822e9:	bb8a      	add.n	a11, a11, a8
400822eb:	f91981        	l32r	a8, 40080750 <_iram_text_start+0x208>
400822ee:	11bb20        	slli	a11, a11, 14
400822f1:	bb8a      	add.n	a11, a11, a8
400822f3:	1188      	l32i.n	a8, a1, 4
400822f5:	f54856        	bnez	a8, 4008224d <i2c_esp32_transfer+0x89>
400822f8:	003c46        	j	400823ed <i2c_esp32_transfer+0x229>
400822fb:	820000        	mull	a0, a0, a0
	*cmd++ = (struct i2c_esp32_cmd) {
400822fe:	d200a0        	quos	a0, a0, a10
	cmd = i2c_esp32_write_addr(dev, cmd, &msg, addr);
40082301:	c00521        	l32r	a2, 40072318 <esp32_rom_gpio_matrix_out+0x6840c>
	*cmd++ = (struct i2c_esp32_cmd) {
40082304:	820020        	mull	a0, a0, a2
40082307:	cd0062        	l8ui	a6, a0, 205
	cmd = i2c_esp32_write_addr(dev, cmd, &msg, addr);
4008230a:	06ad01        	l32r	a0, 40043dc0 <esp32_rom_gpio_matrix_out+0x39eb4>
4008230d:	ffa1a5        	call8	40081d28 <i2c_esp32_write_addr>
	for (; msg.len; cmd = (void *)I2C_COMD0_REG(config->index)) {
40082310:	003506        	j	400823e8 <i2c_esp32_transfer+0x224>
		uint32_t to_read = MIN(I2C_ESP32_BUFFER_SIZE, msg.len - 1);
40082313:	280b      	addi.n	a2, a8, -1
40082315:	092c      	movi.n	a9, 32
40082317:	632290        	minu	a2, a2, a9
		if (to_read) {
4008231a:	0f1826        	beqi	a8, 1, 4008232d <i2c_esp32_transfer+0x169>
			*cmd++ = (struct i2c_esp32_cmd) {
4008231d:	f8ddc1        	l32r	a12, 40080694 <_iram_text_start+0x14c>
40082320:	74b020        	extui	a11, a2, 0, 8
40082323:	20bbc0        	or	a11, a11, a12
40082326:	0020c0        	memw
40082329:	0ab9      	s32i.n	a11, a10, 0
4008232b:	aa4b      	addi.n	a10, a10, 4
		if (msg.len - to_read <= 1U) {
4008232d:	c08820        	sub	a8, a8, a2
40082330:	3828f6        	bgeui	a8, 2, 4008236c <i2c_esp32_transfer+0x1a8>
			*cmd++ = (struct i2c_esp32_cmd) {
40082333:	f90981        	l32r	a8, 40080758 <_iram_text_start+0x210>
40082336:	ba4b      	addi.n	a11, a10, 4
40082338:	0020c0        	memw
4008233b:	0a89      	s32i.n	a8, a10, 0
			if (msg.flags & I2C_MSG_STOP) {
4008233d:	080182        	l8ui	a8, a1, 8
			to_read++;
40082340:	221b      	addi.n	a2, a2, 1
			if (msg.flags & I2C_MSG_STOP) {
40082342:	246817        	bbci	a8, 1, 4008236a <i2c_esp32_transfer+0x1a6>
				*cmd++ = (struct i2c_esp32_cmd) {
40082345:	080c      	movi.n	a8, 0
40082347:	0020c0        	memw
4008234a:	1a89      	s32i.n	a8, a10, 4
4008234c:	0020c0        	memw
4008234f:	1a88      	l32i.n	a8, a10, 4
40082351:	f8a8c1        	l32r	a12, 400805f4 <_iram_text_start+0xac>
40082354:	1088c0        	and	a8, a8, a12
40082357:	f8ffc1        	l32r	a12, 40080754 <_iram_text_start+0x20c>
4008235a:	2088c0        	or	a8, a8, a12
4008235d:	0020c0        	memw
40082360:	1a89      	s32i.n	a8, a10, 4
40082362:	4a0c      	movi.n	a10, 4
		if (!wait_cmd) {
40082364:	4b8c      	beqz.n	a11, 4008236c <i2c_esp32_transfer+0x1a8>
40082366:	000846        	j	4008238b <i2c_esp32_transfer+0x1c7>
40082369:	0bad00        	lsi	f0, a13, 44
			*cmd++ = (struct i2c_esp32_cmd) {
4008236c:	00a0b2        	movi	a11, 0
4008236f:	0020c0        	memw
40082372:	006ab2        	s32i	a11, a10, 0
40082375:	0020c0        	memw
40082378:	0a88      	l32i.n	a8, a10, 0
4008237a:	f89ec1        	l32r	a12, 400805f4 <_iram_text_start+0xac>
4008237d:	1088c0        	and	a8, a8, a12
40082380:	f89ec1        	l32r	a12, 400805f8 <_iram_text_start+0xb0>
40082383:	2088c0        	or	a8, a8, a12
40082386:	0020c0        	memw
40082389:	0a89      	s32i.n	a8, a10, 0
	ret = i2c_esp32_transmit(dev);
4008238b:	20a660        	or	a10, a6, a6
4008238e:	61b9      	s32i.n	a11, a1, 24
40082390:	ffcbe5        	call8	40082050 <i2c_esp32_transmit>
40082393:	0a8d      	mov.n	a8, a10
	if (!ret) {
40082395:	61b8      	l32i.n	a11, a1, 24
40082397:	5acc      	bnez.n	a10, 400823a0 <i2c_esp32_transfer+0x1dc>
		return i2c_esp32_wait(dev, wait_cmd);
40082399:	16a8      	l32i.n	a10, a6, 4
4008239b:	ffdc65        	call8	40082160 <i2c_esp32_wait$isra$1>
4008239e:	0a8d      	mov.n	a8, a10
		if (ret < 0) {
400823a0:	049896        	bltz	a8, 400823ed <i2c_esp32_transfer+0x229>
		for (i = 0U; i < to_read; i++) {
400823a3:	0a0c      	movi.n	a10, 0
			uint32_t v = sys_read32(I2C_DATA_APB_REG(config->index));
400823a5:	f8ccb1        	l32r	a11, 400806d8 <_iram_text_start+0x190>
400823a8:	000786        	j	400823ca <i2c_esp32_transfer+0x206>
400823ab:	24c200        	extui	a12, a0, 2, 3
400823ae:	caa200        	float.s	f10, a2, 0
		for (i = 0U; i < to_read; i++) {
400823b1:	8ce001        	l32r	a0, 40065734 <esp32_rom_gpio_matrix_out+0x5b828>
			uint32_t v = sys_read32(I2C_DATA_APB_REG(config->index));
400823b4:	88ca11        	l32r	a1, 400646dc <esp32_rom_gpio_matrix_out+0x5a7d0>
400823b7:	118820        	slli	a8, a8, 14
400823ba:	88ba      	add.n	a8, a8, a11
	return *(volatile uint32_t *)addr;
400823bc:	0020c0        	memw
400823bf:	08c8      	l32i.n	a12, a8, 0
			*msg.buf++ = v & I2C_FIFO_RDATA;
400823c1:	0188      	l32i.n	a8, a1, 0
400823c3:	d81b      	addi.n	a13, a8, 1
400823c5:	01d9      	s32i.n	a13, a1, 0
400823c7:	0048c2        	s8i	a12, a8, 0
		for (i = 0U; i < to_read; i++) {
400823ca:	de9a27        	bne	a10, a2, 400823ac <i2c_esp32_transfer+0x1e8>
		msg.len -= to_read;
400823cd:	1188      	l32i.n	a8, a1, 4
400823cf:	c0a8a0        	sub	a10, a8, a10
400823d2:	11a9      	s32i.n	a10, a1, 4
		i2c_esp32_reset_fifo(config);
400823d4:	04a8      	l32i.n	a10, a4, 0
400823d6:	ff91e5        	call8	40081cf4 <i2c_esp32_reset_fifo$isra$0>
	for (; msg.len; cmd = (void *)I2C_COMD0_REG(config->index)) {
400823d9:	0488      	l32i.n	a8, a4, 0
400823db:	11a8e0        	slli	a10, a8, 2
400823de:	aa8a      	add.n	a10, a10, a8
400823e0:	f8dc81        	l32r	a8, 40080750 <_iram_text_start+0x208>
400823e3:	11aa20        	slli	a10, a10, 14
400823e6:	aa8a      	add.n	a10, a10, a8
400823e8:	1188      	l32i.n	a8, a1, 4
400823ea:	f25856        	bnez	a8, 40082313 <i2c_esp32_transfer+0x14f>
		if (ret < 0) {
400823ed:	33cb      	addi.n	a3, a3, 12
400823ef:	88cc      	bnez.n	a8, 400823fb <i2c_esp32_transfer+0x237>
	for (i = 0U; i < num_msgs; i++) {
400823f1:	4128      	l32i.n	a2, a1, 16
400823f3:	021237        	beq	a2, a3, 400823f9 <i2c_esp32_transfer+0x235>
400823f6:	ff8486        	j	4008220c <i2c_esp32_transfer+0x48>
400823f9:	080c      	movi.n	a8, 0
	z_impl_k_sem_give(sem);
400823fb:	07ad      	mov.n	a10, a7
400823fd:	6189      	s32i.n	a8, a1, 24
400823ff:	00a3e5        	call8	40082e3c <z_impl_k_sem_give>
}
40082402:	6188      	l32i.n	a8, a1, 24
40082404:	082d      	mov.n	a2, a8
40082406:	f01d      	retw.n

40082408 <uart_esp32_configure>:
	return 0;
}

static int uart_esp32_configure(const struct device *dev,
				const struct uart_config *cfg)
{
40082408:	006136        	entry	a1, 48
	uint32_t conf0 = UART_TICK_REF_ALWAYS_ON;
	uint32_t conf1 = (UART_RX_FIFO_THRESH << UART_RXFIFO_FULL_THRHD_S)
		      | (UART_TX_FIFO_THRESH << UART_TXFIFO_EMPTY_THRHD_S);

	uart_esp32_configure_pins(dev);
4008240b:	1248      	l32i.n	a4, a2, 4
	esp32_rom_gpio_matrix_out(cfg->pins.tx,
4008240d:	0d0c      	movi.n	a13, 0
4008240f:	34b8      	l32i.n	a11, a4, 12
40082411:	0724a2        	l32i	a10, a4, 28
40082414:	0dcd      	mov.n	a12, a13
40082416:	f8b481        	l32r	a8, 400806e8 <_iram_text_start+0x1a0>
40082419:	0008e0        	callx8	a8
	esp32_rom_gpio_matrix_in(cfg->pins.rx,
4008241c:	44b8      	l32i.n	a11, a4, 16
4008241e:	84a8      	l32i.n	a10, a4, 32
40082420:	0c0c      	movi.n	a12, 0
40082422:	f8b281        	l32r	a8, 400806ec <_iram_text_start+0x1a4>
40082425:	0008e0        	callx8	a8
	if (cfg->pins.cts) {
40082428:	a4a8      	l32i.n	a10, a4, 40
4008242a:	aa8c      	beqz.n	a10, 40082438 <uart_esp32_configure+0x30>
		esp32_rom_gpio_matrix_out(cfg->pins.cts,
4008242c:	0d0c      	movi.n	a13, 0
4008242e:	64b8      	l32i.n	a11, a4, 24
40082430:	0dcd      	mov.n	a12, a13
40082432:	f8ad81        	l32r	a8, 400806e8 <_iram_text_start+0x1a0>
40082435:	0008e0        	callx8	a8
	if (cfg->pins.rts) {
40082438:	94a8      	l32i.n	a10, a4, 36
4008243a:	8a8c      	beqz.n	a10, 40082446 <uart_esp32_configure+0x3e>
		esp32_rom_gpio_matrix_in(cfg->pins.rts,
4008243c:	54b8      	l32i.n	a11, a4, 20
4008243e:	0c0c      	movi.n	a12, 0
40082440:	f8ab81        	l32r	a8, 400806ec <_iram_text_start+0x1a4>
40082443:	0008e0        	callx8	a8
	clock_control_on(DEV_DATA(dev)->clock_dev, DEV_CFG(dev)->peripheral_id);
40082446:	3248      	l32i.n	a4, a2, 12
40082448:	1258      	l32i.n	a5, a2, 4
4008244a:	24a8      	l32i.n	a10, a4, 8
	return api->on(dev, sys);
4008244c:	b5b8      	l32i.n	a11, a5, 44
4008244e:	2a48      	l32i.n	a4, a10, 8
40082450:	0448      	l32i.n	a4, a4, 0
40082452:	0004e0        	callx8	a4

	/*
	 * Reset RX Buffer by reading all received bytes
	 * Hardware Reset functionality can't be used with UART 1/2
	 */
	while (UART_RXFIFO_COUNT(DEV_BASE(dev)->status) != 0) {
40082455:	12b8      	l32i.n	a11, a2, 4
40082457:	0b58      	l32i.n	a5, a11, 0
40082459:	000106        	j	40082461 <uart_esp32_configure+0x59>
		(void) DEV_BASE(dev)->fifo;
4008245c:	0020c0        	memw
4008245f:	0548      	l32i.n	a4, a5, 0
	while (UART_RXFIFO_COUNT(DEV_BASE(dev)->status) != 0) {
40082461:	0020c0        	memw
40082464:	7548      	l32i.n	a4, a5, 28
40082466:	744040        	extui	a4, a4, 0, 8
40082469:	fef456        	bnez	a4, 4008245c <uart_esp32_configure+0x54>
	}

	switch (cfg->parity) {
4008246c:	040342        	l8ui	a4, a3, 4
4008246f:	0d1426        	beqi	a4, 1, 40082480 <uart_esp32_configure+0x78>
40082472:	249c      	beqz.n	a4, 40082488 <uart_esp32_configure+0x80>
		break;
	case UART_CFG_PARITY_ODD:
		conf0 |= UART_PARITY;
		break;
	default:
		return -ENOTSUP;
40082474:	ddaf92        	movi	a9, -35
	switch (cfg->parity) {
40082477:	022426        	beqi	a4, 2, 4008247d <uart_esp32_configure+0x75>
4008247a:	002606        	j	40082516 <uart_esp32_configure+0x10e>
4008247d:	0001c6        	j	40082488 <uart_esp32_configure+0x80>
		conf0 |= UART_PARITY;
40082480:	f8b751        	l32r	a5, 4008075c <_iram_text_start+0x214>
40082483:	000106        	j	4008248b <uart_esp32_configure+0x83>
40082486:	510000        	lsi	f0, a0, 0x144
		conf0 &= ~(UART_PARITY);
40082489:	5f          	.byte 0x5f
4008248a:	82f8      	l32i.n	a15, a2, 32
	}

	switch (cfg->stop_bits) {
4008248c:	920503        	lsi	f0, a5, 0x248
	case UART_CFG_STOP_BITS_1_5:
	case UART_CFG_STOP_BITS_2:
		conf0 |= cfg->stop_bits << UART_STOP_BIT_NUM_S;
		break;
	default:
		return -ENOTSUP;
4008248f:	af          	.byte 0xaf
40082490:	0bdd      	mov.n	a13, a11
	switch (cfg->stop_bits) {
40082492:	f648      	l32i.n	a4, a6, 60
40082494:	c07f34        	lsi	f3, a15, 0x300
		conf0 |= cfg->stop_bits << UART_STOP_BIT_NUM_S;
40082497:	11a8      	l32i.n	a10, a1, 4
	}

	if (cfg->data_bits <= UART_CFG_DATA_BITS_8) {
40082499:	060382        	l8ui	a8, a3, 6
4008249c:	7648f6        	bgeui	a8, 4, 40082516 <uart_esp32_configure+0x10e>
		conf0 |= cfg->data_bits << UART_BIT_NUM_S;
4008249f:	1148e0        	slli	a4, a8, 2
400824a2:	2044a0        	or	a4, a4, a10
400824a5:	204450        	or	a4, a4, a5
	} else {
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
400824a8:	070352        	l8ui	a5, a3, 7
400824ab:	d58c      	beqz.n	a5, 400824bc <uart_esp32_configure+0xb4>
400824ad:	651566        	bnei	a5, 1, 40082516 <uart_esp32_configure+0x10e>
	case UART_CFG_FLOW_CTRL_NONE:
		conf0 &= ~(UART_TX_FLOW_EN);
		conf1 &= ~(UART_RX_FLOW_EN);
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		conf0 |= UART_TX_FLOW_EN;
400824b0:	f86251        	l32r	a5, 40080638 <_iram_text_start+0xf0>
400824b3:	204450        	or	a4, a4, a5
		conf1 |= UART_RX_FLOW_EN;
400824b6:	f8aa51        	l32r	a5, 40080760 <_iram_text_start+0x218>
		break;
400824b9:	000086        	j	400824bf <uart_esp32_configure+0xb7>
		conf1 &= ~(UART_RX_FLOW_EN);
400824bc:	01a152        	movi	a5, 0x101
	uint32_t sys_clk_freq = 0;
400824bf:	080c      	movi.n	a8, 0
400824c1:	0189      	s32i.n	a8, a1, 0
	if (clock_control_get_rate(DEV_DATA(dev)->clock_dev,
400824c3:	3288      	l32i.n	a8, a2, 12
	return api->get_rate(dev, sys, rate);
400824c5:	bbb8      	l32i.n	a11, a11, 44
400824c7:	28a8      	l32i.n	a10, a8, 8
400824c9:	01cd      	mov.n	a12, a1
400824cb:	2a88      	l32i.n	a8, a10, 8
	default:
		return -ENOTSUP;
	}

	if (uart_esp32_set_baudrate(dev, cfg->baudrate)) {
400824cd:	002362        	l32i	a6, a3, 0
400824d0:	032882        	l32i	a8, a8, 12
400824d3:	0008e0        	callx8	a8
400824d6:	12b8      	l32i.n	a11, a2, 4
	if (clock_control_get_rate(DEV_DATA(dev)->clock_dev,
400824d8:	6aec      	bnez.n	a10, 40082502 <uart_esp32_configure+0xfa>
	uint32_t clk_div = (((sys_clk_freq) << 4) / baudrate);
400824da:	0188      	l32i.n	a8, a1, 0
	while (UART_TXFIFO_COUNT(DEV_BASE(dev)->status)) {
400824dc:	0ba8      	l32i.n	a10, a11, 0
	uint32_t clk_div = (((sys_clk_freq) << 4) / baudrate);
400824de:	1188c0        	slli	a8, a8, 4
400824e1:	c28860        	quou	a8, a8, a6
	while (UART_TXFIFO_COUNT(DEV_BASE(dev)->status)) {
400824e4:	0020c0        	memw
400824e7:	7a98      	l32i.n	a9, a10, 28
400824e9:	759090        	extui	a9, a9, 16, 8
400824ec:	ff4956        	bnez	a9, 400824e4 <uart_esp32_configure+0xdc>
	if (clk_div < 16) {
400824ef:	f90c      	movi.n	a9, 15
400824f1:	0db987        	bgeu	a9, a8, 40082502 <uart_esp32_configure+0xfa>
	DEV_BASE(dev)->clk_div = ((clk_div >> 4) | (clk_div & 0xf));
400824f4:	419480        	srli	a9, a8, 4
400824f7:	348080        	extui	a8, a8, 0, 4
400824fa:	208980        	or	a8, a9, a8
400824fd:	0020c0        	memw
40082500:	5a89      	s32i.n	a8, a10, 20
		DEV_DATA(dev)->uart_config.baudrate = cfg->baudrate;
40082502:	0338      	l32i.n	a3, a3, 0
40082504:	3228      	l32i.n	a2, a2, 12
	}

	DEV_BASE(dev)->conf0 = conf0;
	DEV_BASE(dev)->conf1 = conf1;

	return 0;
40082506:	090c      	movi.n	a9, 0
		DEV_DATA(dev)->uart_config.baudrate = cfg->baudrate;
40082508:	0239      	s32i.n	a3, a2, 0
	DEV_BASE(dev)->conf0 = conf0;
4008250a:	0b28      	l32i.n	a2, a11, 0
4008250c:	0020c0        	memw
4008250f:	8249      	s32i.n	a4, a2, 32
	DEV_BASE(dev)->conf1 = conf1;
40082511:	0020c0        	memw
40082514:	9259      	s32i.n	a5, a2, 36
}
40082516:	092d      	mov.n	a2, a9
40082518:	f01d      	retw.n
	...

4008251c <uart_esp32_init>:

static int uart_esp32_init(const struct device *dev)
{
4008251c:	004136        	entry	a1, 32
	struct uart_esp32_data *data = DEV_DATA(dev);

	data->clock_dev = device_get_binding(DEV_CFG(dev)->clock_name);
4008251f:	012282        	l32i	a8, a2, 4
	struct uart_esp32_data *data = DEV_DATA(dev);
40082522:	032232        	l32i	a3, a2, 12
	data->clock_dev = device_get_binding(DEV_CFG(dev)->clock_name);
40082525:	0228a2        	l32i	a10, a8, 8
40082528:	000965        	call8	400825c0 <z_impl_device_get_binding>

	__ASSERT_NO_MSG(data->clock_dev);

	uart_esp32_configure(dev, &DEV_DATA(dev)->uart_config);
4008252b:	32b8      	l32i.n	a11, a2, 12
	data->clock_dev = device_get_binding(DEV_CFG(dev)->clock_name);
4008252d:	23a9      	s32i.n	a10, a3, 8
	uart_esp32_configure(dev, &DEV_DATA(dev)->uart_config);
4008252f:	02ad      	mov.n	a10, a2
40082531:	ffed65        	call8	40082408 <uart_esp32_configure>

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	DEV_CFG(dev)->dev_conf.irq_config_func(dev);
#endif
	return 0;
}
40082534:	020c      	movi.n	a2, 0
40082536:	f01d      	retw.n

40082538 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
40082538:	004136        	entry	a1, 32
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
4008253b:	f88a81        	l32r	a8, 40080764 <_iram_text_start+0x21c>
4008253e:	1132e0        	slli	a3, a2, 2
40082541:	221b      	addi.n	a2, a2, 1
40082543:	1122e0        	slli	a2, a2, 2
40082546:	383a      	add.n	a3, a8, a3
40082548:	282a      	add.n	a2, a8, a2
4008254a:	0338      	l32i.n	a3, a3, 0
4008254c:	0248      	l32i.n	a4, a2, 0

		if (dev != NULL) {
			z_object_init(dev);
		}

		if ((entry->init(dev) == 0) && (dev != NULL)) {
4008254e:	150c      	movi.n	a5, 1
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
40082550:	000d86        	j	4008258a <z_sys_init_run_level+0x52>
40082553:	132800        	lsi	f0, a8, 76
		if ((entry->init(dev) == 0) && (dev != NULL)) {
40082556:	0388      	l32i.n	a8, a3, 0
40082558:	02ad      	mov.n	a10, a2
4008255a:	0008e0        	callx8	a8
4008255d:	7aec      	bnez.n	a10, 40082588 <z_sys_init_run_level+0x50>
4008255f:	52ac      	beqz.n	a2, 40082588 <z_sys_init_run_level+0x50>
			/* Initialization was successful.
			 * Set the init status bit so device is declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
40082561:	f88181        	l32r	a8, 40080768 <_iram_text_start+0x220>
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
40082564:	f88291        	l32r	a9, 4008076c <_iram_text_start+0x224>
40082567:	c02280        	sub	a2, a2, a8
4008256a:	212420        	srai	a2, a2, 4
4008256d:	418520        	srli	a8, a2, 5
40082570:	1188e0        	slli	a8, a8, 2
40082573:	889a      	add.n	a8, a8, a9
	uint32_t temp = *(volatile uint32_t *)addr;
40082575:	0020c0        	memw
40082578:	0898      	l32i.n	a9, a8, 0
	*(volatile uint32_t *)addr = temp | (1 << bit);
4008257a:	401200        	ssl	a2
4008257d:	a12500        	sll	a2, a5
40082580:	202290        	or	a2, a2, a9
40082583:	0020c0        	memw
40082586:	0829      	s32i.n	a2, a8, 0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
40082588:	338b      	addi.n	a3, a3, 8
4008258a:	c63347        	bltu	a3, a4, 40082554 <z_sys_init_run_level+0x1c>
		}
	}
}
4008258d:	f01d      	retw.n
	...

40082590 <z_device_ready>:
	*devices = __device_start;
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
40082590:	004136        	entry	a1, 32
	return !!(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
40082593:	f87581        	l32r	a8, 40080768 <_iram_text_start+0x220>
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
40082596:	f87591        	l32r	a9, 4008076c <_iram_text_start+0x224>
40082599:	c08280        	sub	a8, a2, a8
4008259c:	218480        	srai	a8, a8, 4
4008259f:	412580        	srli	a2, a8, 5
400825a2:	1122e0        	slli	a2, a2, 2
400825a5:	229a      	add.n	a2, a2, a9
	uint32_t temp = *(volatile uint32_t *)addr;
400825a7:	0020c0        	memw
400825aa:	02a8      	l32i.n	a10, a2, 0
	return temp & (1 << bit);
400825ac:	190c      	movi.n	a9, 1
400825ae:	401800        	ssl	a8
400825b1:	a12900        	sll	a2, a9
400825b4:	1022a0        	and	a2, a2, a10
	return !!(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
400825b7:	080c      	movi.n	a8, 0
400825b9:	938920        	movnez	a8, a9, a2
400825bc:	082d      	mov.n	a2, a8
}
400825be:	f01d      	retw.n

400825c0 <z_impl_device_get_binding>:
{
400825c0:	004136        	entry	a1, 32
400825c3:	024d      	mov.n	a4, a2
	for (dev = __device_start; dev != __device_end; dev++) {
400825c5:	f86821        	l32r	a2, 40080768 <_iram_text_start+0x220>
400825c8:	f86931        	l32r	a3, 4008076c <_iram_text_start+0x224>
400825cb:	025d      	mov.n	a5, a2
400825cd:	000486        	j	400825e3 <z_impl_device_get_binding+0x23>
400825d0:	a22000        	muluh	a2, a0, a0
		if (z_device_ready(dev) && (dev->name == name)) {
400825d3:	fba520        	f64subc	a2, a5, 1, 0
400825d6:	ff          	.byte 0xff
400825d7:	005a16        	beqz	a10, 400825e0 <z_impl_device_get_binding+0x20>
400825da:	002282        	l32i	a8, a2, 0
400825dd:	2f1847        	beq	a8, a4, 40082610 <z_impl_device_get_binding+0x50>
	for (dev = __device_start; dev != __device_end; dev++) {
400825e0:	10c222        	addi	a2, a2, 16
400825e3:	ea9237        	bne	a2, a3, 400825d1 <z_impl_device_get_binding+0x11>
	for (dev = __device_start; dev != __device_end; dev++) {
400825e6:	052d      	mov.n	a2, a5
400825e8:	0007c6        	j	4008260b <z_impl_device_get_binding+0x4b>
400825eb:	000000        	ill
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
400825ee:	02ad      	mov.n	a10, a2
400825f0:	fff9e5        	call8	40082590 <z_device_ready>
400825f3:	7acc      	bnez.n	a10, 400825fe <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
400825f5:	10c222        	addi	a2, a2, 16
400825f8:	0003c6        	j	4008260b <z_impl_device_get_binding+0x4b>
400825fb:	000000        	ill
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
400825fe:	02b8      	l32i.n	a11, a2, 0
40082600:	04ad      	mov.n	a10, a4
40082602:	00d8e5        	call8	40083390 <strcmp>
40082605:	feca56        	bnez	a10, 400825f5 <z_impl_device_get_binding+0x35>
40082608:	000106        	j	40082610 <z_impl_device_get_binding+0x50>
	for (dev = __device_start; dev != __device_end; dev++) {
4008260b:	df9237        	bne	a2, a3, 400825ee <z_impl_device_get_binding+0x2e>
	return NULL;
4008260e:	020c      	movi.n	a2, 0
}
40082610:	f01d      	retw.n
	...

40082614 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
40082614:	004136        	entry	a1, 32
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
40082617:	02ad      	mov.n	a10, a2
40082619:	00fca5        	call8	400835e4 <arch_system_halt>

4008261c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
4008261c:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008261f:	006350        	rsil	a5, 3
	return z_impl_k_current_get();
40082622:	0080e5        	call8	40082e30 <z_impl_k_current_get>
40082625:	204aa0        	or	a4, a10, a10
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
40082628:	03bd      	mov.n	a11, a3
4008262a:	02ad      	mov.n	a10, a2
4008262c:	fffe65        	call8	40082614 <k_sys_fatal_error_handler>
	XTOS_RESTORE_INTLEVEL(key);
4008262f:	13e650        	wsr.ps	a5
40082632:	002010        	rsync
	z_impl_k_thread_abort(thread);
40082635:	04ad      	mov.n	a10, a4
40082637:	0094e5        	call8	40082f84 <z_impl_k_thread_abort>
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
4008263a:	f01d      	retw.n

4008263c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
4008263c:	004136        	entry	a1, 32
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
4008263f:	f84c81        	l32r	a8, 40080770 <_iram_text_start+0x228>
40082642:	190c      	movi.n	a9, 1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
40082644:	02a0a2        	movi	a10, 2
	z_sys_post_kernel = true;
40082647:	004892        	s8i	a9, a8, 0
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
4008264a:	ffeee5        	call8	40082538 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
4008264d:	f849c1        	l32r	a12, 40080774 <_iram_text_start+0x22c>
40082650:	f84ab1        	l32r	a11, 40080778 <_iram_text_start+0x230>
40082653:	f84aa1        	l32r	a10, 4008077c <_iram_text_start+0x234>
40082656:	fe7b65        	call8	40080e0c <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
40082659:	3a0c      	movi.n	a10, 3
4008265b:	ffede5        	call8	40082538 <z_sys_init_run_level>

	z_init_static_threads();
4008265e:	008ae5        	call8	40082f0c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
40082661:	fe22e5        	call8	40080890 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
40082664:	f84791        	l32r	a9, 40080780 <_iram_text_start+0x238>
40082667:	ea7c      	movi.n	a10, -2
40082669:	0c0982        	l8ui	a8, a9, 12
4008266c:	1088a0        	and	a8, a8, a10
4008266f:	0c4982        	s8i	a8, a9, 12

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
40082672:	f01d      	retw.n

40082674 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
40082674:	020136        	entry	a1, 0x100

static ALWAYS_INLINE void arch_kernel_init(void)
{
	_cpu_t *cpu0 = &_kernel.cpus[0];

	cpu0->nested = 0;
40082677:	f7bc21        	l32r	a2, 40080568 <_iram_text_start+0x20>
4008267a:	030c      	movi.n	a3, 0
4008267c:	0239      	s32i.n	a3, a2, 0
	 * access.  That saves 4 bytes of immediate value to store the
	 * address when compared to the legacy scheme.  But in SMP
	 * this record is a per-CPU thing and having it stored in a SR
	 * already is a big win.
	 */
	WSR(CONFIG_XTENSA_KERNEL_CPU_PTR_SR, cpu0);
4008267e:	13f420        	wsr.misc0	a2
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
40082681:	01a142        	movi	a4, 0x101
40082684:	0e5142        	s16i	a4, a1, 28
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
40082687:	10c142        	addi	a4, a1, 16
4008268a:	2249      	s32i.n	a4, a2, 8

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
4008268c:	03ad      	mov.n	a10, a3
4008268e:	ffeaa5        	call8	40082538 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
40082691:	1a0c      	movi.n	a10, 1
40082693:	ffea65        	call8	40082538 <z_sys_init_run_level>
	z_sched_init();
40082696:	006ba5        	call8	40082d50 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
40082699:	f83941        	l32r	a4, 40080780 <_iram_text_start+0x238>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
4008269c:	f83c51        	l32r	a5, 4008078c <_iram_text_start+0x244>
	_kernel.ready_q.cache = &z_main_thread;
4008269f:	e249      	s32i.n	a4, a2, 56
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
400826a1:	3159      	s32i.n	a5, a1, 12
400826a3:	f838d1        	l32r	a13, 40080784 <_iram_text_start+0x23c>
400826a6:	150c      	movi.n	a5, 1
400826a8:	f7ddc1        	l32r	a12, 4008061c <_iram_text_start+0xd4>
400826ab:	f837b1        	l32r	a11, 40080788 <_iram_text_start+0x240>
400826ae:	03fd      	mov.n	a15, a3
400826b0:	03ed      	mov.n	a14, a3
400826b2:	1139      	s32i.n	a3, a1, 4
400826b4:	0139      	s32i.n	a3, a1, 0
400826b6:	2159      	s32i.n	a5, a1, 8
400826b8:	04ad      	mov.n	a10, a4
400826ba:	007fa5        	call8	40082eb4 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
400826bd:	0d0462        	l8ui	a6, a4, 13
400826c0:	b77c      	movi.n	a7, -5
400826c2:	106670        	and	a6, a6, a7
400826c5:	0d4462        	s8i	a6, a4, 13
	z_ready_thread(&z_main_thread);
400826c8:	04ad      	mov.n	a10, a4
400826ca:	002ce5        	call8	40082998 <z_ready_thread>
	z_setup_new_thread(thread, stack,
400826cd:	f83241        	l32r	a4, 40080798 <_iram_text_start+0x250>
400826d0:	f90c      	movi.n	a9, 15
400826d2:	f82fd1        	l32r	a13, 40080790 <_iram_text_start+0x248>
400826d5:	f82fb1        	l32r	a11, 40080794 <_iram_text_start+0x24c>
400826d8:	3139      	s32i.n	a3, a1, 12
400826da:	1199      	s32i.n	a9, a1, 4
400826dc:	0139      	s32i.n	a3, a1, 0
400826de:	03fd      	mov.n	a15, a3
400826e0:	03ed      	mov.n	a14, a3
400826e2:	2159      	s32i.n	a5, a1, 8
400826e4:	00a4c2        	movi	a12, 0x400
400826e7:	04ad      	mov.n	a10, a4
400826e9:	346192        	s32i	a9, a1, 208
400826ec:	007c65        	call8	40082eb4 <z_setup_new_thread>
400826ef:	0d0462        	l8ui	a6, a4, 13
		_kernel.cpus[i].id = i;
400826f2:	144232        	s8i	a3, a2, 20
400826f5:	106670        	and	a6, a6, a7
400826f8:	0d4462        	s8i	a6, a4, 13
		_kernel.cpus[i].irq_stack =
400826fb:	f82861        	l32r	a6, 4008079c <_iram_text_start+0x254>
	z_setup_new_thread(thread, stack,
400826fe:	342192        	l32i	a9, a1, 208
		_kernel.cpus[i].irq_stack =
40082701:	1269      	s32i.n	a6, a2, 4
	z_setup_new_thread(thread, stack,
40082703:	f82861        	l32r	a6, 400807a4 <_iram_text_start+0x25c>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
40082706:	3249      	s32i.n	a4, a2, 12
	z_setup_new_thread(thread, stack,
40082708:	f822d1        	l32r	a13, 40080790 <_iram_text_start+0x248>
4008270b:	f825b1        	l32r	a11, 400807a0 <_iram_text_start+0x258>
4008270e:	3139      	s32i.n	a3, a1, 12
40082710:	0139      	s32i.n	a3, a1, 0
40082712:	03fd      	mov.n	a15, a3
40082714:	03ed      	mov.n	a14, a3
40082716:	2159      	s32i.n	a5, a1, 8
40082718:	1199      	s32i.n	a9, a1, 4
4008271a:	00a4c2        	movi	a12, 0x400
4008271d:	06ad      	mov.n	a10, a6
4008271f:	007965        	call8	40082eb4 <z_setup_new_thread>
40082722:	cd0432        	l8ui	a3, a4, 205
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
40082725:	9269      	s32i.n	a6, a2, 36
40082727:	103370        	and	a3, a3, a7
4008272a:	cd4432        	s8i	a3, a4, 205
		_kernel.cpus[i].irq_stack =
4008272d:	f81e31        	l32r	a3, 400807a8 <_iram_text_start+0x260>
		_kernel.cpus[i].id = i;
40082730:	2c4252        	s8i	a5, a2, 44
		_kernel.cpus[i].irq_stack =
40082733:	7239      	s32i.n	a3, a2, 28
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
40082735:	f81d31        	l32r	a3, 400807ac <_iram_text_start+0x264>
40082738:	c239      	s32i.n	a3, a2, 48
	list->tail = (sys_dnode_t *)list;
4008273a:	d239      	s32i.n	a3, a2, 52
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008273c:	006350        	rsil	a5, 3
	old_thread = _current;
4008273f:	2248      	l32i.n	a4, a2, 8
	return _kernel.ready_q.cache;
40082741:	e238      	l32i.n	a3, a2, 56
	if (new_thread != old_thread) {
40082743:	121437        	beq	a4, a3, 40082759 <z_cstart+0xe5>
		z_reset_time_slice();
40082746:	0001a5        	call8	40082760 <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
40082749:	567c      	movi.n	a6, -11

void xtensa_switch(void *switch_to, void **switched_from);

static inline void arch_switch(void *switch_to, void **switched_from)
{
	return xtensa_switch(switch_to, switched_from);
4008274b:	1423a2        	l32i	a10, a3, 80
4008274e:	136462        	s32i	a6, a4, 76
		_current_cpu->current = new_thread;
40082751:	2239      	s32i.n	a3, a2, 8
40082753:	50c4b2        	addi	a11, a4, 80
40082756:	fef0a5        	call8	40081660 <xtensa_switch>
	XTOS_RESTORE_INTLEVEL(key);
40082759:	13e650        	wsr.ps	a5
4008275c:	002010        	rsync
	...

40082760 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
40082760:	004136        	entry	a1, 32
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
40082763:	f81321        	l32r	a2, 400807b0 <_iram_text_start+0x268>
40082766:	002282        	l32i	a8, a2, 0
40082769:	013816        	beqz	a8, 40082780 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
4008276c:	fede25        	call8	40081550 <z_clock_elapsed>
4008276f:	002282        	l32i	a8, a2, 0
40082772:	f77d21        	l32r	a2, 40080568 <_iram_text_start+0x20>
40082775:	a8aa      	add.n	a10, a8, a10
40082777:	42a9      	s32i.n	a10, a2, 16
		z_set_timeout_expiry(slice_time, false);
40082779:	0b0c      	movi.n	a11, 0
4008277b:	08ad      	mov.n	a10, a8
4008277d:	00a3a5        	call8	400831b8 <z_set_timeout_expiry>
	}
}
40082780:	f01d      	retw.n
	...

40082784 <z_swap_irqlock>:
{
40082784:	004136        	entry	a1, 32
	old_thread = _current;
40082787:	f77831        	l32r	a3, 40080568 <_iram_text_start+0x20>
4008278a:	2358      	l32i.n	a5, a3, 8
4008278c:	e348      	l32i.n	a4, a3, 56
	if (new_thread != old_thread) {
4008278e:	121547        	beq	a5, a4, 400827a4 <z_swap_irqlock+0x20>
		z_reset_time_slice();
40082791:	fffce5        	call8	40082760 <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
40082794:	587c      	movi.n	a8, -11
40082796:	1424a2        	l32i	a10, a4, 80
40082799:	136582        	s32i	a8, a5, 76
		_current_cpu->current = new_thread;
4008279c:	2349      	s32i.n	a4, a3, 8
4008279e:	50c5b2        	addi	a11, a5, 80
400827a1:	feebe5        	call8	40081660 <xtensa_switch>
400827a4:	13e620        	wsr.ps	a2
400827a7:	002010        	rsync
	return _current->swap_retval;
400827aa:	2338      	l32i.n	a3, a3, 8
}
400827ac:	132322        	l32i	a2, a3, 76
400827af:	f01d      	retw.n
400827b1:	000000        	ill

400827b4 <z_swap$isra$14>:
static inline int z_swap(struct k_spinlock *lock, k_spinlock_key_t key)
400827b4:	004136        	entry	a1, 32
	old_thread = _current;
400827b7:	f76c31        	l32r	a3, 40080568 <_iram_text_start+0x20>
400827ba:	2358      	l32i.n	a5, a3, 8
400827bc:	e348      	l32i.n	a4, a3, 56
	if (new_thread != old_thread) {
400827be:	121547        	beq	a5, a4, 400827d4 <z_swap$isra$14+0x20>
		z_reset_time_slice();
400827c1:	fff9e5        	call8	40082760 <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
400827c4:	587c      	movi.n	a8, -11
400827c6:	1424a2        	l32i	a10, a4, 80
400827c9:	136582        	s32i	a8, a5, 76
		_current_cpu->current = new_thread;
400827cc:	2349      	s32i.n	a4, a3, 8
400827ce:	50c5b2        	addi	a11, a5, 80
400827d1:	fee8e5        	call8	40081660 <xtensa_switch>
400827d4:	13e620        	wsr.ps	a2
400827d7:	002010        	rsync
	return _current->swap_retval;
400827da:	2338      	l32i.n	a3, a3, 8
}
400827dc:	132322        	l32i	a2, a3, 76
400827df:	f01d      	retw.n
400827e1:	000000        	ill

400827e4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
400827e4:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400827e7:	006340        	rsil	a4, 3
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
400827ea:	f75f81        	l32r	a8, 40080568 <_iram_text_start+0x20>
400827ed:	00a092        	movi	a9, 0
400827f0:	046892        	s32i	a9, a8, 16
		} else {
			return t / (from_hz / to_hz);
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
400827f3:	1182e0        	slli	a8, a2, 2
400827f6:	808820        	add	a8, a8, a2
		slice_time = k_ms_to_ticks_ceil32(slice);
400827f9:	f7ed21        	l32r	a2, 400807b0 <_iram_text_start+0x268>
400827fc:	1188f0        	slli	a8, a8, 1
400827ff:	0289      	s32i.n	a8, a2, 0
		slice_max_prio = prio;
40082801:	f7ec21        	l32r	a2, 400807b4 <_iram_text_start+0x26c>
40082804:	0239      	s32i.n	a3, a2, 0
		z_reset_time_slice();
40082806:	fff5a5        	call8	40082760 <z_reset_time_slice>
	XTOS_RESTORE_INTLEVEL(key);
40082809:	13e640        	wsr.ps	a4
4008280c:	002010        	rsync
	}
}
4008280f:	f01d      	retw.n
40082811:	000000        	ill

40082814 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
40082814:	004136        	entry	a1, 32
}

static ALWAYS_INLINE bool arch_irq_unlocked(unsigned int key)
{
	return (key & 0xf) == 0; /* INTLEVEL field */
40082817:	348030        	extui	a8, a3, 0, 4
4008281a:	20a330        	or	a10, a3, a3
	return arch_irq_unlocked(key) && !arch_is_in_isr();
4008281d:	017856        	bnez	a8, 40082838 <z_reschedule+0x24>

static ALWAYS_INLINE _cpu_t *arch_curr_cpu(void)
{
	_cpu_t *cpu;

	cpu = (_cpu_t *)RSR(CONFIG_XTENSA_KERNEL_CPU_PTR_SR);
40082820:	03f480        	rsr.misc0	a8
40082823:	002882        	l32i	a8, a8, 0
40082826:	e8cc      	bnez.n	a8, 40082838 <z_reschedule+0x24>
40082828:	f75081        	l32r	a8, 40080568 <_iram_text_start+0x20>
	if (resched(key.key) && need_swap()) {
4008282b:	e898      	l32i.n	a9, a8, 56
4008282d:	2888      	l32i.n	a8, a8, 8
4008282f:	051987        	beq	a9, a8, 40082838 <z_reschedule+0x24>
		z_swap(lock, key);
40082832:	fff825        	call8	400827b4 <z_swap$isra$14>
40082835:	000146        	j	4008283e <z_reschedule+0x2a>
	XTOS_RESTORE_INTLEVEL(key);
40082838:	13e6a0        	wsr.ps	a10
4008283b:	002010        	rsync
	} else {
		k_spin_unlock(lock, key);
	}
}
4008283e:	f01d      	retw.n

40082840 <z_reschedule_irqlock>:

void z_reschedule_irqlock(uint32_t key)
{
40082840:	004136        	entry	a1, 32
	return (key & 0xf) == 0; /* INTLEVEL field */
40082843:	348020        	extui	a8, a2, 0, 4
40082846:	20a220        	or	a10, a2, a2
	return arch_irq_unlocked(key) && !arch_is_in_isr();
40082849:	00f856        	bnez	a8, 4008285c <z_reschedule_irqlock+0x1c>
4008284c:	03f480        	rsr.misc0	a8
4008284f:	002882        	l32i	a8, a8, 0
40082852:	006856        	bnez	a8, 4008285c <z_reschedule_irqlock+0x1c>
	if (resched(key)) {
		z_swap_irqlock(key);
40082855:	fff2e5        	call8	40082784 <z_swap_irqlock>
40082858:	000186        	j	40082862 <z_reschedule_irqlock+0x22>
4008285b:	e6a000        	lsi	f0, a0, 0x398
	XTOS_RESTORE_INTLEVEL(key);
4008285e:	201013        	lsi	f1, a0, 128
40082861:	f01d00        	subx8	a1, a13, a0

40082864 <z_reschedule_unlocked>:
{
40082864:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082867:	0063a0        	rsil	a10, 3
	(void) z_reschedule_irqlock(arch_irq_lock());
4008286a:	fffd65        	call8	40082840 <z_reschedule_irqlock>
}
4008286d:	f01d      	retw.n
	...

40082870 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
40082870:	004136        	entry	a1, 32
40082873:	0063a0        	rsil	a10, 3
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
40082876:	f73c81        	l32r	a8, 40080568 <_iram_text_start+0x20>
40082879:	2898      	l32i.n	a9, a8, 8
4008287b:	0f0982        	l8ui	a8, a9, 15
4008287e:	880b      	addi.n	a8, a8, -1
40082880:	0f4982        	s8i	a8, a9, 15
	XTOS_RESTORE_INTLEVEL(key);
40082883:	13e6a0        	wsr.ps	a10
40082886:	002010        	rsync
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
40082889:	f01d      	retw.n
	...

4008288c <z_get_next_switch_handle>:
	_current_cpu->current = new_thread;
}

#ifdef CONFIG_USE_SWITCH
void *z_get_next_switch_handle(void *interrupted)
{
4008288c:	004136        	entry	a1, 32
	_current->switch_handle = interrupted;
4008288f:	f73681        	l32r	a8, 40080568 <_iram_text_start+0x20>
40082892:	28a8      	l32i.n	a10, a8, 8
	return _kernel.ready_q.cache;
40082894:	e898      	l32i.n	a9, a8, 56
40082896:	146a22        	s32i	a2, a10, 80
#endif
		}
	}
#else
	struct k_thread *thread = z_get_next_ready_thread();
	if (_current != thread) {
40082899:	011a97        	beq	a10, a9, 4008289e <z_get_next_switch_handle+0x12>
	_current_cpu->current = new_thread;
4008289c:	2899      	s32i.n	a9, a8, 8
		set_current(thread);
	}
#endif

	wait_for_switch(_current);
	return _current->switch_handle;
4008289e:	2888      	l32i.n	a8, a8, 8
}
400828a0:	142822        	l32i	a2, a8, 80
400828a3:	f01d      	retw.n
400828a5:	000000        	ill

400828a8 <update_cache>:
{
400828a8:	004136        	entry	a1, 32
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
400828ab:	f7c3a1        	l32r	a10, 400807b8 <_iram_text_start+0x270>
400828ae:	00d565        	call8	40083604 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
400828b1:	f72d31        	l32r	a3, 40080568 <_iram_text_start+0x20>
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
400828b4:	204aa0        	or	a4, a10, a10
	if (_current->base.thread_state & _THREAD_ABORTING) {
400828b7:	022382        	l32i	a8, a3, 8
400828ba:	0d0892        	l8ui	a9, a8, 13
400828bd:	086957        	bbci	a9, 5, 400828c9 <update_cache+0x21>
		_current->base.thread_state |= _THREAD_DEAD;
400828c0:	08a0a2        	movi	a10, 8
400828c3:	2099a0        	or	a9, a9, a10
400828c6:	0d4892        	s8i	a9, a8, 13
	return thread ? thread : _current_cpu->idle_thread;
400828c9:	04cc      	bnez.n	a4, 400828cd <update_cache+0x25>
400828cb:	3348      	l32i.n	a4, a3, 12
	if (preempt_ok != 0) {
400828cd:	42dc      	bnez.n	a2, 400828e5 <update_cache+0x3d>
	if (z_is_thread_prevented_from_running(_current)) {
400828cf:	0d0892        	l8ui	a9, a8, 13
400828d2:	449090        	extui	a9, a9, 0, 5
400828d5:	c9cc      	bnez.n	a9, 400828e5 <update_cache+0x3d>
	if (is_preempt(_current) || is_metairq(thread)) {
400828d7:	071892        	l16ui	a9, a8, 14
400828da:	7fa0a2        	movi	a10, 127
400828dd:	04ba97        	bgeu	a10, a9, 400828e5 <update_cache+0x3d>
		_kernel.ready_q.cache = _current;
400828e0:	e389      	s32i.n	a8, a3, 56
400828e2:	000286        	j	400828f0 <update_cache+0x48>
		if (thread != _current) {
400828e5:	051847        	beq	a8, a4, 400828ee <update_cache+0x46>
			z_reset_time_slice();
400828e8:	201110        	or	a1, a1, a1
400828eb:	ffe765        	call8	40082760 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
400828ee:	e349      	s32i.n	a4, a3, 56
}
400828f0:	f01d      	retw.n
	...

400828f4 <k_sched_unlock>:
{
400828f4:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400828f7:	006320        	rsil	a2, 3
		++_current->base.sched_locked;
400828fa:	f71b81        	l32r	a8, 40080568 <_iram_text_start+0x20>
		update_cache(0);
400828fd:	00a0a2        	movi	a10, 0
		++_current->base.sched_locked;
40082900:	022892        	l32i	a9, a8, 8
40082903:	0f0982        	l8ui	a8, a9, 15
40082906:	01c882        	addi	a8, a8, 1
40082909:	0f4982        	s8i	a8, a9, 15
		update_cache(0);
4008290c:	fff9a5        	call8	400828a8 <update_cache>
	XTOS_RESTORE_INTLEVEL(key);
4008290f:	13e620        	wsr.ps	a2
40082912:	002010        	rsync
	z_reschedule_unlocked();
40082915:	fff4e5        	call8	40082864 <z_reschedule_unlocked>
}
40082918:	f01d      	retw.n
	...

4008291c <ready_thread>:
{
4008291c:	004136        	entry	a1, 32
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
4008291f:	0d0282        	l8ui	a8, a2, 13
40082922:	448080        	extui	a8, a8, 0, 5
40082925:	06b856        	bnez	a8, 40082994 <ready_thread+0x78>
	if (z_is_thread_ready(thread)) {
40082928:	62b8      	l32i.n	a11, a2, 24
4008292a:	066b56        	bnez	a11, 40082994 <ready_thread+0x78>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
4008292d:	f70ea1        	l32r	a10, 40080568 <_iram_text_start+0x20>
{
	struct k_thread *t;

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082930:	1f0c      	movi.n	a15, 1
40082932:	fa88      	l32i.n	a8, a10, 60
40082934:	0bcd      	mov.n	a12, a11
40082936:	93cf80        	movnez	a12, a15, a8
40082939:	74c0c0        	extui	a12, a12, 0, 8
4008293c:	102ad2        	l32i	a13, a10, 64
4008293f:	f79ee1        	l32r	a14, 400807b8 <_iram_text_start+0x270>
40082942:	fcac      	beqz.n	a12, 40082975 <ready_thread+0x59>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
40082944:	c098e0        	sub	a9, a8, a14
40082947:	93bf90        	movnez	a11, a15, a9
4008294a:	7490b0        	extui	a9, a11, 0, 8
4008294d:	49ac      	beqz.n	a9, 40082975 <ready_thread+0x59>
	if (thread_1->base.prio < thread_2->base.prio) {
4008294f:	0e0292        	l8ui	a9, a2, 14
40082952:	239900        	sext	a9, a9, 7
40082955:	0e08b2        	l8ui	a11, a8, 14
40082958:	23bb00        	sext	a11, a11, 7
4008295b:	0da9b7        	bge	a9, a11, 4008296c <ready_thread+0x50>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	node->prev = successor->prev;
4008295e:	1898      	l32i.n	a9, a8, 4
	node->next = successor;
40082960:	0289      	s32i.n	a8, a2, 0
	node->prev = successor->prev;
40082962:	1299      	s32i.n	a9, a2, 4
	successor->prev->next = node;
40082964:	0929      	s32i.n	a2, a9, 0
	successor->prev = node;
40082966:	1829      	s32i.n	a2, a8, 4
40082968:	0005c6        	j	40082983 <ready_thread+0x67>
4008296b:	1d8700        	lsi	f0, a7, 116
	return (node == list->tail) ? NULL : node->next;
4008296e:	288205        	call0	400ab190 <_iram_text_end+0x2766e>
40082971:	f85600        	lsi	f0, a6, 0x3e0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082974:	d2fd      	lsi	f15, a2, 8
	node->prev = list->tail;
40082976:	820162        	l8ui	a6, a1, 130
	list->tail->next = node;
40082979:	102a      	add.n	a1, a0, a2
	node->next = list;
4008297b:	0062e2        	s32i	a14, a2, 0
	list->tail->next = node;
4008297e:	0829      	s32i.n	a2, a8, 0
	list->tail = node;
40082980:	106a22        	s32i	a2, a10, 64
	thread->base.thread_state |= states;
40082983:	0d0282        	l8ui	a8, a2, 13
40082986:	80af92        	movi	a9, -128
40082989:	208890        	or	a8, a8, a9
4008298c:	0d4282        	s8i	a8, a2, 13
		update_cache(0);
4008298f:	0a0c      	movi.n	a10, 0
40082991:	fff165        	call8	400828a8 <update_cache>
}
40082994:	f01d      	retw.n
	...

40082998 <z_ready_thread>:
{
40082998:	004136        	entry	a1, 32
4008299b:	02ad      	mov.n	a10, a2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008299d:	006330        	rsil	a3, 3
		ready_thread(thread);
400829a0:	fff7a5        	call8	4008291c <ready_thread>
	XTOS_RESTORE_INTLEVEL(key);
400829a3:	13e630        	wsr.ps	a3
400829a6:	002010        	rsync
}
400829a9:	f01d      	retw.n
	...

400829ac <z_thread_timeout>:
{
400829ac:	004136        	entry	a1, 32
	struct k_thread *thread = CONTAINER_OF(timeout,
400829af:	e8c232        	addi	a3, a2, -24
	if (thread->base.pended_on != NULL) {
400829b2:	022342        	l32i	a4, a3, 8
400829b5:	f5c222        	addi	a2, a2, -11
400829b8:	01c416        	beqz	a4, 400829d8 <z_thread_timeout+0x2c>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400829bb:	006340        	rsil	a4, 3
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
400829be:	03ad      	mov.n	a10, a3
400829c0:	00c2e5        	call8	400835f0 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
400829c3:	000282        	l8ui	a8, a2, 0
400829c6:	d97c      	movi.n	a9, -3
400829c8:	108890        	and	a8, a8, a9
400829cb:	004282        	s8i	a8, a2, 0
		thread->base.pended_on = NULL;
400829ce:	080c      	movi.n	a8, 0
400829d0:	2389      	s32i.n	a8, a3, 8
	XTOS_RESTORE_INTLEVEL(key);
400829d2:	13e640        	wsr.ps	a4
400829d5:	002010        	rsync
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
400829d8:	000282        	l8ui	a8, a2, 0
400829db:	b96c      	movi.n	a9, -21
400829dd:	108890        	and	a8, a8, a9
400829e0:	004282        	s8i	a8, a2, 0
	z_ready_thread(thread);
400829e3:	03ad      	mov.n	a10, a3
400829e5:	fffb25        	call8	40082998 <z_ready_thread>
}
400829e8:	f01d      	retw.n
	...

400829ec <z_sched_start>:
{
400829ec:	004136        	entry	a1, 32
400829ef:	02ad      	mov.n	a10, a2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400829f1:	006320        	rsil	a2, 3
	if (z_has_thread_started(thread)) {
400829f4:	0d0a82        	l8ui	a8, a10, 13
400829f7:	0be827        	bbsi	a8, 2, 40082a06 <z_sched_start+0x1a>
	XTOS_RESTORE_INTLEVEL(key);
400829fa:	13e620        	wsr.ps	a2
400829fd:	002010        	rsync
		return;
40082a00:	0005c6        	j	40082a1b <z_sched_start+0x2f>
40082a03:	000000        	ill
	thread->base.thread_state &= ~_THREAD_PRESTART;
40082a06:	fbaf92        	movi	a9, -5
40082a09:	108890        	and	a8, a8, a9
40082a0c:	0d4a82        	s8i	a8, a10, 13
	ready_thread(thread);
40082a0f:	fff0e5        	call8	4008291c <ready_thread>
	z_reschedule(&sched_spinlock, key);
40082a12:	f76aa1        	l32r	a10, 400807bc <_iram_text_start+0x274>
40082a15:	20b220        	or	a11, a2, a2
40082a18:	ffdfa5        	call8	40082814 <z_reschedule>
}
40082a1b:	000090        	retw
	...

40082a20 <z_move_thread_to_end_of_prio_q>:
{
40082a20:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082a23:	006330        	rsil	a3, 3
		if (z_is_thread_queued(thread)) {
40082a26:	0d0282        	l8ui	a8, a2, 13
40082a29:	056877        	bbci	a8, 7, 40082a32 <z_move_thread_to_end_of_prio_q+0x12>
	sys_dlist_remove(&thread->base.qnode_dlist);
40082a2c:	20a220        	or	a10, a2, a2
40082a2f:	00bc25        	call8	400835f0 <sys_dlist_remove>
	return list->head == list;
40082a32:	f6cd91        	l32r	a9, 40080568 <_iram_text_start+0x20>
40082a35:	f760d1        	l32r	a13, 400807b8 <_iram_text_start+0x270>
40082a38:	0f2982        	l32i	a8, a9, 60
40082a3b:	1029c2        	l32i	a12, a9, 64
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082a3e:	027816        	beqz	a8, 40082a69 <z_move_thread_to_end_of_prio_q+0x49>
40082a41:	2418d7        	beq	a8, a13, 40082a69 <z_move_thread_to_end_of_prio_q+0x49>
	if (thread_1->base.prio < thread_2->base.prio) {
40082a44:	0e02a2        	l8ui	a10, a2, 14
40082a47:	23aa00        	sext	a10, a10, 7
40082a4a:	0e08b2        	l8ui	a11, a8, 14
40082a4d:	23bb00        	sext	a11, a11, 7
40082a50:	0caab7        	bge	a10, a11, 40082a60 <z_move_thread_to_end_of_prio_q+0x40>
	node->prev = successor->prev;
40082a53:	18a8      	l32i.n	a10, a8, 4
	node->next = successor;
40082a55:	0289      	s32i.n	a8, a2, 0
	node->prev = successor->prev;
40082a57:	12a9      	s32i.n	a10, a2, 4
	successor->prev->next = node;
40082a59:	0a29      	s32i.n	a2, a10, 0
	successor->prev = node;
40082a5b:	1829      	s32i.n	a2, a8, 4
40082a5d:	000586        	j	40082a77 <z_move_thread_to_end_of_prio_q+0x57>
	return (node == list->tail) ? NULL : node->next;
40082a60:	051c87        	beq	a12, a8, 40082a69 <z_move_thread_to_end_of_prio_q+0x49>
40082a63:	002882        	l32i	a8, a8, 0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082a66:	fe0856        	bnez	a8, 40082a4a <z_move_thread_to_end_of_prio_q+0x2a>
	node->prev = list->tail;
40082a69:	0162c2        	s32i	a12, a2, 4
	list->tail->next = node;
40082a6c:	102982        	l32i	a8, a9, 64
	node->next = list;
40082a6f:	0062d2        	s32i	a13, a2, 0
	list->tail->next = node;
40082a72:	0829      	s32i.n	a2, a8, 0
	list->tail = node;
40082a74:	106922        	s32i	a2, a9, 64
	thread->base.thread_state |= states;
40082a77:	0d0282        	l8ui	a8, a2, 13
40082a7a:	80afa2        	movi	a10, -128
40082a7d:	2088a0        	or	a8, a8, a10
		update_cache(thread == _current);
40082a80:	29a8      	l32i.n	a10, a9, 8
40082a82:	0d4282        	s8i	a8, a2, 13
40082a85:	c0aa20        	sub	a10, a10, a2
40082a88:	180c      	movi.n	a8, 1
40082a8a:	020c      	movi.n	a2, 0
40082a8c:	8328a0        	moveqz	a2, a8, a10
40082a8f:	02ad      	mov.n	a10, a2
40082a91:	ffe165        	call8	400828a8 <update_cache>
	XTOS_RESTORE_INTLEVEL(key);
40082a94:	13e630        	wsr.ps	a3
40082a97:	002010        	rsync
}
40082a9a:	f01d      	retw.n

40082a9c <z_time_slice>:
{
40082a9c:	004136        	entry	a1, 32
	if (slice_time && sliceable(_current)) {
40082a9f:	f74481        	l32r	a8, 400807b0 <_iram_text_start+0x268>
40082aa2:	002892        	l32i	a9, a8, 0
40082aa5:	f6b081        	l32r	a8, 40080568 <_iram_text_start+0x20>
40082aa8:	039916        	beqz	a9, 40082ae5 <z_time_slice+0x49>
40082aab:	28a8      	l32i.n	a10, a8, 8
		&& !z_is_thread_timeout_active(thread);
40082aad:	7fa0b2        	movi	a11, 127
40082ab0:	071a92        	l16ui	a9, a10, 14
40082ab3:	2e3b97        	bltu	a11, a9, 40082ae5 <z_time_slice+0x49>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
40082ab6:	f73f91        	l32r	a9, 400807b4 <_iram_text_start+0x26c>
40082ab9:	0e0ab2        	l8ui	a11, a10, 14
40082abc:	0998      	l32i.n	a9, a9, 0
40082abe:	23bb00        	sext	a11, a11, 7
40082ac1:	202b97        	blt	a11, a9, 40082ae5 <z_time_slice+0x49>
		&& !z_is_idle_thread_object(thread)
40082ac4:	f73591        	l32r	a9, 40080798 <_iram_text_start+0x250>
40082ac7:	1a1a97        	beq	a10, a9, 40082ae5 <z_time_slice+0x49>
		&& !z_is_thread_timeout_active(thread);
40082aca:	6a98      	l32i.n	a9, a10, 24
40082acc:	015956        	bnez	a9, 40082ae5 <z_time_slice+0x49>
		if (ticks >= _current_cpu->slice_ticks) {
40082acf:	4898      	l32i.n	a9, a8, 16
40082ad1:	082297        	blt	a2, a9, 40082add <z_time_slice+0x41>
			z_move_thread_to_end_of_prio_q(_current);
40082ad4:	fff4a5        	call8	40082a20 <z_move_thread_to_end_of_prio_q>
			z_reset_time_slice();
40082ad7:	ffc8a5        	call8	40082760 <z_reset_time_slice>
40082ada:	0002c6        	j	40082ae9 <z_time_slice+0x4d>
			_current_cpu->slice_ticks -= ticks;
40082add:	c09920        	sub	a9, a9, a2
40082ae0:	4899      	s32i.n	a9, a8, 16
40082ae2:	0000c6        	j	40082ae9 <z_time_slice+0x4d>
		_current_cpu->slice_ticks = 0;
40082ae5:	020c      	movi.n	a2, 0
40082ae7:	4829      	s32i.n	a2, a8, 16
}
40082ae9:	f01d      	retw.n
	...

40082aec <z_impl_k_thread_suspend>:
{
40082aec:	004136        	entry	a1, 32
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
40082aef:	18c2a2        	addi	a10, a2, 24
40082af2:	006925        	call8	40083184 <z_abort_timeout>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082af5:	006330        	rsil	a3, 3
		if (z_is_thread_queued(thread)) {
40082af8:	0d0242        	l8ui	a4, a2, 13
40082afb:	0d6477        	bbci	a4, 7, 40082b0c <z_impl_k_thread_suspend+0x20>
	sys_dlist_remove(&thread->base.qnode_dlist);
40082afe:	02ad      	mov.n	a10, a2
40082b00:	00aee5        	call8	400835f0 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
40082b03:	0d0282        	l8ui	a8, a2, 13
40082b06:	648080        	extui	a8, a8, 0, 7
40082b09:	0d4282        	s8i	a8, a2, 13
	thread->base.thread_state |= _THREAD_SUSPENDED;
40082b0c:	0d0282        	l8ui	a8, a2, 13
40082b0f:	041c      	movi.n	a4, 16
40082b11:	208840        	or	a8, a8, a4
		update_cache(thread == _current);
40082b14:	f69541        	l32r	a4, 40080568 <_iram_text_start+0x20>
40082b17:	0d4282        	s8i	a8, a2, 13
40082b1a:	24a8      	l32i.n	a10, a4, 8
40082b1c:	190c      	movi.n	a9, 1
40082b1e:	c0aa20        	sub	a10, a10, a2
40082b21:	080c      	movi.n	a8, 0
40082b23:	8389a0        	moveqz	a8, a9, a10
40082b26:	08ad      	mov.n	a10, a8
40082b28:	ffd7e5        	call8	400828a8 <update_cache>
	XTOS_RESTORE_INTLEVEL(key);
40082b2b:	13e630        	wsr.ps	a3
40082b2e:	002010        	rsync
	if (thread == _current) {
40082b31:	2438      	l32i.n	a3, a4, 8
40082b33:	029327        	bne	a3, a2, 40082b39 <z_impl_k_thread_suspend+0x4d>
		z_reschedule_unlocked();
40082b36:	ffd2e5        	call8	40082864 <z_reschedule_unlocked>
}
40082b39:	f01d      	retw.n
	...

40082b3c <z_thread_single_abort>:
{
40082b3c:	004136        	entry	a1, 32
	if (thread->fn_abort != NULL) {
40082b3f:	112232        	l32i	a3, a2, 68
40082b42:	002316        	beqz	a3, 40082b48 <z_thread_single_abort+0xc>
		thread->fn_abort();
40082b45:	0003e0        	callx8	a3
40082b48:	18c2a2        	addi	a10, a2, 24
40082b4b:	0063a5        	call8	40083184 <z_abort_timeout>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082b4e:	006340        	rsil	a4, 3
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
40082b51:	0d0232        	l8ui	a3, a2, 13
40082b54:	445030        	extui	a5, a3, 0, 5
40082b57:	032556        	bnez	a5, 40082b8d <z_thread_single_abort+0x51>
		if (z_is_thread_ready(thread)) {
40082b5a:	062252        	l32i	a5, a2, 24
40082b5d:	c5ec      	bnez.n	a5, 40082b8d <z_thread_single_abort+0x51>
			if (z_is_thread_queued(thread)) {
40082b5f:	233300        	sext	a3, a3, 7
40082b62:	00e3d6        	bgez	a3, 40082b74 <z_thread_single_abort+0x38>
	sys_dlist_remove(&thread->base.qnode_dlist);
40082b65:	20a220        	or	a10, a2, a2
40082b68:	00a865        	call8	400835f0 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
40082b6b:	0d0232        	l8ui	a3, a2, 13
40082b6e:	643030        	extui	a3, a3, 0, 7
40082b71:	0d4232        	s8i	a3, a2, 13
			update_cache(thread == _current);
40082b74:	f67d31        	l32r	a3, 40080568 <_iram_text_start+0x20>
40082b77:	150c      	movi.n	a5, 1
40082b79:	23a8      	l32i.n	a10, a3, 8
40082b7b:	030c      	movi.n	a3, 0
40082b7d:	c0aa20        	sub	a10, a10, a2
40082b80:	8335a0        	moveqz	a3, a5, a10
40082b83:	03ad      	mov.n	a10, a3
40082b85:	ffd225        	call8	400828a8 <update_cache>
40082b88:	000606        	j	40082ba4 <z_thread_single_abort+0x68>
40082b8b:	170000        	lsi	f0, a0, 92
			if (z_is_thread_pending(thread)) {
40082b8e:	ad1363        	lsi	f6, a3, 0x2b4
	sys_dlist_remove(&thread->base.qnode_dlist);
40082b91:	a5e502        	s32c1i	a0, a5, 0x294
40082b94:	023200        	andb	b3, b2, b0
	thread->base.thread_state &= ~_THREAD_PENDING;
40082b97:	7c0d      	lsi	f0, a12, 48
40082b99:	3350d5        	call4	400b60a8 <_iram_text_end+0x32586>
40082b9c:	423210        	xorb	b3, b2, b1
40082b9f:	0c0d      	mov.n	a0, a12
				thread->base.pended_on = NULL;
40082ba1:	223903        	lsi	f0, a9, 136
		thread->base.thread_state |= mask;
40082ba4:	0d0232        	l8ui	a3, a2, 13
40082ba7:	850c      	movi.n	a5, 8
40082ba9:	203350        	or	a3, a3, a5
40082bac:	0d4232        	s8i	a3, a2, 13
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
40082baf:	000886        	j	40082bd5 <z_thread_single_abort+0x99>
40082bb2:	a20000        	muluh	a0, a0, a0
40082bb5:	e518c3        	lsi	f12, a8, 0x394
40082bb8:	005c      	movi.n	a0, 80
	sys_dlist_remove(&thread->base.qnode_dlist);
40082bba:	20a330        	or	a10, a3, a3
40082bbd:	00a325        	call8	400835f0 <sys_dlist_remove>
40082bc0:	0d0382        	l8ui	a8, a3, 13
40082bc3:	d97c      	movi.n	a9, -3
40082bc5:	108890        	and	a8, a8, a9
40082bc8:	0d4382        	s8i	a8, a3, 13
			waiter->base.pended_on = NULL;
40082bcb:	2359      	s32i.n	a5, a3, 8
 * z_swap() is in use it's a simple inline provided by the kernel.
 */
static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->swap_retval = value;
40082bcd:	136352        	s32i	a5, a3, 76
			ready_thread(waiter);
40082bd0:	03ad      	mov.n	a10, a3
40082bd2:	ffd4a5        	call8	4008291c <ready_thread>
	return list->head == list;
40082bd5:	0c2232        	l32i	a3, a2, 48
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
40082bd8:	00a052        	movi	a5, 0
40082bdb:	051357        	beq	a3, a5, 40082be4 <z_thread_single_abort+0xa8>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
40082bde:	30c282        	addi	a8, a2, 48
40082be1:	cf9387        	bne	a3, a8, 40082bb4 <z_thread_single_abort+0x78>
	XTOS_RESTORE_INTLEVEL(key);
40082be4:	13e640        	wsr.ps	a4
40082be7:	002010        	rsync
}
40082bea:	f01d      	retw.n

40082bec <unready_thread>:
{
40082bec:	004136        	entry	a1, 32
	if (z_is_thread_queued(thread)) {
40082bef:	0d0282        	l8ui	a8, a2, 13
40082bf2:	0e6877        	bbci	a8, 7, 40082c04 <unready_thread+0x18>
	sys_dlist_remove(&thread->base.qnode_dlist);
40082bf5:	20a220        	or	a10, a2, a2
40082bf8:	009f65        	call8	400835f0 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
40082bfb:	0d0282        	l8ui	a8, a2, 13
40082bfe:	648080        	extui	a8, a8, 0, 7
40082c01:	0d4282        	s8i	a8, a2, 13
	update_cache(thread == _current);
40082c04:	f65981        	l32r	a8, 40080568 <_iram_text_start+0x20>
40082c07:	0228a2        	l32i	a10, a8, 8
40082c0a:	180c      	movi.n	a8, 1
40082c0c:	c0aa20        	sub	a10, a10, a2
40082c0f:	020c      	movi.n	a2, 0
40082c11:	8328a0        	moveqz	a2, a8, a10
40082c14:	02ad      	mov.n	a10, a2
40082c16:	ffc925        	call8	400828a8 <update_cache>
}
40082c19:	f01d      	retw.n
	...

40082c1c <z_remove_thread_from_ready_q>:
{
40082c1c:	004136        	entry	a1, 32
40082c1f:	02ad      	mov.n	a10, a2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082c21:	006330        	rsil	a3, 3
		unready_thread(thread);
40082c24:	fffc65        	call8	40082bec <unready_thread>
	XTOS_RESTORE_INTLEVEL(key);
40082c27:	13e630        	wsr.ps	a3
40082c2a:	002010        	rsync
}
40082c2d:	f01d      	retw.n
	...

40082c30 <z_tick_sleep$part$23>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
40082c30:	004136        	entry	a1, 32
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
40082c33:	006a25        	call8	400832d4 <z_tick_get_32>
40082c36:	8032a0        	add	a3, a2, a10
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082c39:	006350        	rsil	a5, 3
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
#endif
	z_remove_thread_from_ready_q(_current);
40082c3c:	f64b41        	l32r	a4, 40080568 <_iram_text_start+0x20>
40082c3f:	0224a2        	l32i	a10, a4, 8
40082c42:	fffda5        	call8	40082c1c <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
40082c45:	0224a2        	l32i	a10, a4, 8
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
40082c48:	f6deb1        	l32r	a11, 400807c0 <_iram_text_start+0x278>
40082c4b:	02cd      	mov.n	a12, a2
40082c4d:	31df20        	srai	a13, a2, 31
40082c50:	18caa2        	addi	a10, a10, 24
40082c53:	003ee5        	call8	40083040 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
40082c56:	2428      	l32i.n	a2, a4, 8
	thread->base.thread_state |= _THREAD_SUSPENDED;
40082c58:	041c      	movi.n	a4, 16
40082c5a:	0d0282        	l8ui	a8, a2, 13

	(void)z_swap(&local_lock, key);
40082c5d:	05ad      	mov.n	a10, a5
40082c5f:	208840        	or	a8, a8, a4
40082c62:	0d4282        	s8i	a8, a2, 13
40082c65:	ffb4e5        	call8	400827b4 <z_swap$isra$14>

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
40082c68:	0066a5        	call8	400832d4 <z_tick_get_32>
40082c6b:	c0a3a0        	sub	a10, a3, a10
		return ticks;
	}
#endif

	return 0;
}
40082c6e:	020c      	movi.n	a2, 0
40082c70:	532a20        	max	a2, a10, a2
40082c73:	f01d      	retw.n
40082c75:	000000        	ill

40082c78 <add_to_waitq_locked>:
{
40082c78:	004136        	entry	a1, 32
	unready_thread(thread);
40082c7b:	02ad      	mov.n	a10, a2
40082c7d:	fff6e5        	call8	40082bec <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
40082c80:	0d0282        	l8ui	a8, a2, 13
40082c83:	290c      	movi.n	a9, 2
40082c85:	208890        	or	a8, a8, a9
40082c88:	0d4282        	s8i	a8, a2, 13
	if (wait_q != NULL) {
40082c8b:	93bc      	beqz.n	a3, 40082cc8 <add_to_waitq_locked+0x50>
40082c8d:	0388      	l32i.n	a8, a3, 0
		thread->base.pended_on = wait_q;
40082c8f:	2239      	s32i.n	a3, a2, 8
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082c91:	78ac      	beqz.n	a8, 40082cbc <add_to_waitq_locked+0x44>
40082c93:	251387        	beq	a3, a8, 40082cbc <add_to_waitq_locked+0x44>
	if (thread_1->base.prio < thread_2->base.prio) {
40082c96:	0e0292        	l8ui	a9, a2, 14
40082c99:	239900        	sext	a9, a9, 7
40082c9c:	0e08a2        	l8ui	a10, a8, 14
40082c9f:	23aa00        	sext	a10, a10, 7
40082ca2:	0ca9a7        	bge	a9, a10, 40082cb2 <add_to_waitq_locked+0x3a>
	node->prev = successor->prev;
40082ca5:	1838      	l32i.n	a3, a8, 4
	node->next = successor;
40082ca7:	0289      	s32i.n	a8, a2, 0
	node->prev = successor->prev;
40082ca9:	1239      	s32i.n	a3, a2, 4
	successor->prev->next = node;
40082cab:	0329      	s32i.n	a2, a3, 0
	successor->prev = node;
40082cad:	1829      	s32i.n	a2, a8, 4
40082caf:	000546        	j	40082cc8 <add_to_waitq_locked+0x50>
	return (node == list->tail) ? NULL : node->next;
40082cb2:	13a8      	l32i.n	a10, a3, 4
40082cb4:	0418a7        	beq	a8, a10, 40082cbc <add_to_waitq_locked+0x44>
40082cb7:	0888      	l32i.n	a8, a8, 0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082cb9:	fdf856        	bnez	a8, 40082c9c <add_to_waitq_locked+0x24>
	node->prev = list->tail;
40082cbc:	1388      	l32i.n	a8, a3, 4
	node->next = list;
40082cbe:	0239      	s32i.n	a3, a2, 0
	node->prev = list->tail;
40082cc0:	1289      	s32i.n	a8, a2, 4
	list->tail->next = node;
40082cc2:	1388      	l32i.n	a8, a3, 4
40082cc4:	0829      	s32i.n	a2, a8, 0
	list->tail = node;
40082cc6:	1329      	s32i.n	a2, a3, 4
}
40082cc8:	f01d      	retw.n
	...

40082ccc <pend>:
{
40082ccc:	004136        	entry	a1, 32
40082ccf:	20b330        	or	a11, a3, a3
40082cd2:	006360        	rsil	a6, 3
		add_to_waitq_locked(thread, wait_q);
40082cd5:	20a220        	or	a10, a2, a2
40082cd8:	fff9e5        	call8	40082c78 <add_to_waitq_locked>
	XTOS_RESTORE_INTLEVEL(key);
40082cdb:	13e660        	wsr.ps	a6
40082cde:	002010        	rsync
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
40082ce1:	020466        	bnei	a4, -1, 40082ce7 <pend+0x1b>
40082ce4:	0c0526        	beqi	a5, -1, 40082cf4 <pend+0x28>
40082ce7:	f6b6b1        	l32r	a11, 400807c0 <_iram_text_start+0x278>
40082cea:	04cd      	mov.n	a12, a4
40082cec:	05dd      	mov.n	a13, a5
40082cee:	18c2a2        	addi	a10, a2, 24
40082cf1:	0034e5        	call8	40083040 <z_add_timeout>
}
40082cf4:	f01d      	retw.n
	...

40082cf8 <z_pend_curr>:
{
40082cf8:	004136        	entry	a1, 32
	pend(_current, wait_q, timeout);
40082cfb:	f61b81        	l32r	a8, 40080568 <_iram_text_start+0x20>
{
40082cfe:	20d770        	or	a13, a7, a7
	pend(_current, wait_q, timeout);
40082d01:	0228a2        	l32i	a10, a8, 8
40082d04:	06cd      	mov.n	a12, a6
40082d06:	04bd      	mov.n	a11, a4
40082d08:	fffc25        	call8	40082ccc <pend>
	return z_swap(lock, key);
40082d0b:	03ad      	mov.n	a10, a3
40082d0d:	ffaa65        	call8	400827b4 <z_swap$isra$14>
}
40082d10:	0a2d      	mov.n	a2, a10
40082d12:	f01d      	retw.n

40082d14 <z_unpend_first_thread>:
{
40082d14:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082d17:	006330        	rsil	a3, 3
		ret = _priq_wait_best(&wait_q->waitq);
40082d1a:	20a220        	or	a10, a2, a2
40082d1d:	008e65        	call8	40083604 <z_priq_dumb_best>
40082d20:	0a2d      	mov.n	a2, a10
	XTOS_RESTORE_INTLEVEL(key);
40082d22:	13e630        	wsr.ps	a3
40082d25:	002010        	rsync

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
40082d28:	0aac      	beqz.n	a10, 40082d4c <z_unpend_first_thread+0x38>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082d2a:	006330        	rsil	a3, 3
	sys_dlist_remove(&thread->base.qnode_dlist);
40082d2d:	008c25        	call8	400835f0 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
40082d30:	0d0282        	l8ui	a8, a2, 13
40082d33:	d97c      	movi.n	a9, -3
40082d35:	108890        	and	a8, a8, a9
40082d38:	0d4282        	s8i	a8, a2, 13
		thread->base.pended_on = NULL;
40082d3b:	080c      	movi.n	a8, 0
40082d3d:	026282        	s32i	a8, a2, 8
	XTOS_RESTORE_INTLEVEL(key);
40082d40:	13e630        	wsr.ps	a3
40082d43:	002010        	rsync
	return z_abort_timeout(&thread->base.timeout);
40082d46:	18c2a2        	addi	a10, a2, 24
40082d49:	0043a5        	call8	40083184 <z_abort_timeout>
}
40082d4c:	f01d      	retw.n
	...

40082d50 <z_sched_init>:
{
40082d50:	004136        	entry	a1, 32
	list->head = (sys_dnode_t *)list;
40082d53:	f60581        	l32r	a8, 40080568 <_iram_text_start+0x20>
40082d56:	f69891        	l32r	a9, 400807b8 <_iram_text_start+0x270>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
40082d59:	00a0b2        	movi	a11, 0
40082d5c:	0f6892        	s32i	a9, a8, 60
	list->tail = (sys_dnode_t *)list;
40082d5f:	106892        	s32i	a9, a8, 64
40082d62:	20abb0        	or	a10, a11, a11
40082d65:	ffa7e5        	call8	400827e4 <k_sched_time_slice_set>
}
40082d68:	f01d      	retw.n
	...

40082d6c <z_impl_k_yield>:
{
40082d6c:	004136        	entry	a1, 32
	if (!z_is_idle_thread_object(_current)) {
40082d6f:	f5fe21        	l32r	a2, 40080568 <_iram_text_start+0x20>
40082d72:	f68931        	l32r	a3, 40080798 <_iram_text_start+0x250>
40082d75:	2288      	l32i.n	a8, a2, 8
40082d77:	671837        	beq	a8, a3, 40082de2 <z_impl_k_yield+0x76>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082d7a:	006330        	rsil	a3, 3
	sys_dlist_remove(&thread->base.qnode_dlist);
40082d7d:	22a8      	l32i.n	a10, a2, 8
40082d7f:	008725        	call8	400835f0 <sys_dlist_remove>
	return list->head == list;
40082d82:	f298      	l32i.n	a9, a2, 60
			_priq_run_add(&_kernel.ready_q.runq, _current);
40082d84:	022282        	l32i	a8, a2, 8
40082d87:	f68cc1        	l32r	a12, 400807b8 <_iram_text_start+0x270>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082d8a:	c9ac      	beqz.n	a9, 40082dba <z_impl_k_yield+0x4e>
40082d8c:	2a19c7        	beq	a9, a12, 40082dba <z_impl_k_yield+0x4e>
	if (thread_1->base.prio < thread_2->base.prio) {
40082d8f:	0e08a2        	l8ui	a10, a8, 14
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
40082d92:	1022d2        	l32i	a13, a2, 64
40082d95:	23aa00        	sext	a10, a10, 7
40082d98:	0e09b2        	l8ui	a11, a9, 14
40082d9b:	23bb00        	sext	a11, a11, 7
40082d9e:	0faab7        	bge	a10, a11, 40082db1 <z_impl_k_yield+0x45>
	node->prev = successor->prev;
40082da1:	1928      	l32i.n	a2, a9, 4
	node->next = successor;
40082da3:	0899      	s32i.n	a9, a8, 0
	node->prev = successor->prev;
40082da5:	1829      	s32i.n	a2, a8, 4
	successor->prev->next = node;
40082da7:	0289      	s32i.n	a8, a2, 0
	successor->prev = node;
40082da9:	1989      	s32i.n	a8, a9, 4
40082dab:	0006c6        	j	40082dca <z_impl_k_yield+0x5e>
40082dae:	000000        	ill
	return (node == list->tail) ? NULL : node->next;
40082db1:	0519d7        	beq	a9, a13, 40082dba <z_impl_k_yield+0x4e>
40082db4:	002992        	l32i	a9, a9, 0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082db7:	fdd956        	bnez	a9, 40082d98 <z_impl_k_yield+0x2c>
	node->prev = list->tail;
40082dba:	102292        	l32i	a9, a2, 64
	node->next = list;
40082dbd:	0068c2        	s32i	a12, a8, 0
	node->prev = list->tail;
40082dc0:	1899      	s32i.n	a9, a8, 4
	list->tail->next = node;
40082dc2:	102292        	l32i	a9, a2, 64
40082dc5:	0989      	s32i.n	a8, a9, 0
	list->tail = node;
40082dc7:	106282        	s32i	a8, a2, 64
	thread->base.thread_state |= states;
40082dca:	0d0822        	l8ui	a2, a8, 13
40082dcd:	80af92        	movi	a9, -128
40082dd0:	202290        	or	a2, a2, a9
40082dd3:	0d4822        	s8i	a2, a8, 13
			update_cache(1);
40082dd6:	01a0a2        	movi	a10, 1
40082dd9:	fface5        	call8	400828a8 <update_cache>
	XTOS_RESTORE_INTLEVEL(key);
40082ddc:	13e630        	wsr.ps	a3
40082ddf:	002010        	rsync
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082de2:	0063a0        	rsil	a10, 3
	(void) z_swap(&lock, key);
40082de5:	ff9ce5        	call8	400827b4 <z_swap$isra$14>
}
40082de8:	f01d      	retw.n
	...

40082dec <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
40082dec:	004136        	entry	a1, 32
40082def:	20a220        	or	a10, a2, a2
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
40082df2:	140266        	bnei	a2, -1, 40082e0a <z_impl_k_sleep+0x1e>
40082df5:	110366        	bnei	a3, -1, 40082e0a <z_impl_k_sleep+0x1e>
		k_thread_suspend(_current);
40082df8:	f5dc81        	l32r	a8, 40080568 <_iram_text_start+0x20>
40082dfb:	0228a2        	l32i	a10, a8, 8
	z_impl_k_thread_suspend(thread);
40082dfe:	ffcee5        	call8	40082aec <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
40082e01:	20a330        	or	a10, a3, a3
40082e04:	000846        	j	40082e29 <z_impl_k_sleep+0x3d>
40082e07:	000000        	ill
	ticks = k_ms_to_ticks_ceil32(timeout);
#else
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
40082e0a:	0a3d      	mov.n	a3, a10
	if (ticks == 0) {
40082e0c:	4acc      	bnez.n	a10, 40082e14 <z_impl_k_sleep+0x28>
	z_impl_k_yield();
40082e0e:	fff5e5        	call8	40082d6c <z_impl_k_yield>
40082e11:	000146        	j	40082e1a <z_impl_k_sleep+0x2e>
40082e14:	ffe1a5        	call8	40082c30 <z_tick_sleep$part$23>
40082e17:	203aa0        	or	a3, a10, a10
			return t / (from_hz / to_hz);
40082e1a:	f66ac1        	l32r	a12, 400807c4 <_iram_text_start+0x27c>
40082e1d:	f5e6d1        	l32r	a13, 400805b8 <_iram_text_start+0x70>
40082e20:	20a330        	or	a10, a3, a3
40082e23:	31bf30        	srai	a11, a3, 31
40082e26:	0081a5        	call8	40083640 <__udivdi3>
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
40082e29:	0a2d      	mov.n	a2, a10
40082e2b:	f01d      	retw.n
40082e2d:	000000        	ill

40082e30 <z_impl_k_current_get>:
}
#include <syscalls/k_wakeup_mrsh.c>
#endif

k_tid_t z_impl_k_current_get(void)
{
40082e30:	004136        	entry	a1, 32

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
40082e33:	f5cd81        	l32r	a8, 40080568 <_iram_text_start+0x20>
40082e36:	2828      	l32i.n	a2, a8, 8
40082e38:	f01d      	retw.n
	...

40082e3c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
40082e3c:	004136        	entry	a1, 32
40082e3f:	006330        	rsil	a3, 3
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
40082e42:	20a220        	or	a10, a2, a2
40082e45:	ffece5        	call8	40082d14 <z_unpend_first_thread>

	if (thread != NULL) {
40082e48:	00da16        	beqz	a10, 40082e59 <z_impl_k_sem_give+0x1d>
40082e4b:	00a022        	movi	a2, 0
40082e4e:	136a22        	s32i	a2, a10, 76
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
40082e51:	ffb465        	call8	40082998 <z_ready_thread>
40082e54:	000506        	j	40082e6c <z_impl_k_sem_give+0x30>
40082e57:	920000        	lsi	f0, a0, 0x248
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
40082e5a:	820222        	l8ui	a2, a2, 130
40082e5d:	b20322        	l8ui	a2, a3, 178
40082e60:	9001a0        	addx2	a0, a1, a10
40082e63:	c088      	l32i.n	a8, a0, 48
40082e65:	93ab80        	movnez	a10, a11, a8
40082e68:	8a9a      	add.n	a8, a10, a9
40082e6a:	2289      	s32i.n	a8, a2, 8
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
40082e6c:	f657a1        	l32r	a10, 400807c8 <_iram_text_start+0x280>
40082e6f:	03bd      	mov.n	a11, a3
40082e71:	ff9a25        	call8	40082814 <z_reschedule>
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
40082e74:	f01d      	retw.n
	...

40082e78 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
40082e78:	004136        	entry	a1, 32
40082e7b:	02cd      	mov.n	a12, a2
40082e7d:	04ed      	mov.n	a14, a4
40082e7f:	05fd      	mov.n	a15, a5
40082e81:	0063b0        	rsil	a11, 3
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
40082e84:	2288      	l32i.n	a8, a2, 8
40082e86:	e88c      	beqz.n	a8, 40082e98 <z_impl_k_sem_take+0x20>
		sem->count--;
40082e88:	880b      	addi.n	a8, a8, -1
40082e8a:	2289      	s32i.n	a8, a2, 8
	XTOS_RESTORE_INTLEVEL(key);
40082e8c:	13e6b0        	wsr.ps	a11
40082e8f:	002010        	rsync
		k_spin_unlock(&lock, key);
		ret = 0;
40082e92:	0a0c      	movi.n	a10, 0
		goto out;
40082e94:	000586        	j	40082eae <z_impl_k_sem_take+0x36>
40082e97:	845000        	extui	a5, a0, 0, 9
	}

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
40082e9a:	98cc20        	lsi	f2, a12, 0x260
40082e9d:	13e6b0        	wsr.ps	a11
40082ea0:	002010        	rsync
		k_spin_unlock(&lock, key);
		ret = -EBUSY;
40082ea3:	0a7c      	movi.n	a10, -16
		goto out;
40082ea5:	000146        	j	40082eae <z_impl_k_sem_take+0x36>
	}

	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
40082ea8:	f648a1        	l32r	a10, 400807c8 <_iram_text_start+0x280>
40082eab:	ffe4e5        	call8	40082cf8 <z_pend_curr>

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
40082eae:	0a2d      	mov.n	a2, a10
40082eb0:	f01d      	retw.n
	...

40082eb4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
40082eb4:	006136        	entry	a1, 48
40082eb7:	07fd      	mov.n	a15, a7
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
40082eb9:	e178      	l32i.n	a7, a1, 56
	sys_dlist_init(&w->waitq);
40082ebb:	30c282        	addi	a8, a2, 48
40082ebe:	0c4272        	s8i	a7, a2, 12
	thread_base->thread_state = (uint8_t)initial_state;
40082ec1:	470c      	movi.n	a7, 4
40082ec3:	0d4272        	s8i	a7, a2, 13

	thread_base->prio = priority;
40082ec6:	d178      	l32i.n	a7, a1, 52
	list->head = (sys_dnode_t *)list;
40082ec8:	c289      	s32i.n	a8, a2, 48
	list->tail = (sys_dnode_t *)list;
40082eca:	d289      	s32i.n	a8, a2, 52
40082ecc:	0e4272        	s8i	a7, a2, 14
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
40082ecf:	087c      	movi.n	a8, -16

	thread_base->sched_locked = 0U;
40082ed1:	070c      	movi.n	a7, 0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
40082ed3:	44fb      	addi.n	a4, a4, 15
	thread_base->sched_locked = 0U;
40082ed5:	0f4272        	s8i	a7, a2, 15
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
40082ed8:	104480        	and	a4, a4, a8
	node->next = NULL;
40082edb:	070c      	movi.n	a7, 0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
40082edd:	c188      	l32i.n	a8, a1, 48
40082edf:	6279      	s32i.n	a7, a2, 24
	node->prev = NULL;
40082ee1:	7279      	s32i.n	a7, a2, 28
	stack_ptr = (char *)stack + stack_obj_size;
40082ee3:	434a      	add.n	a4, a3, a4
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
40082ee5:	02ad      	mov.n	a10, a2
{
40082ee7:	03bd      	mov.n	a11, a3
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
40082ee9:	0189      	s32i.n	a8, a1, 0
40082eeb:	06ed      	mov.n	a14, a6
40082eed:	05dd      	mov.n	a13, a5
40082eef:	04cd      	mov.n	a12, a4
40082ef1:	fe8de5        	call8	400817d0 <arch_new_thread>
	new_thread->init_data = NULL;
40082ef4:	106272        	s32i	a7, a2, 64
	new_thread->fn_abort = NULL;
40082ef7:	116272        	s32i	a7, a2, 68
	new_thread->resource_pool = _current->resource_pool;
40082efa:	f59b71        	l32r	a7, 40080568 <_iram_text_start+0x20>
40082efd:	2778      	l32i.n	a7, a7, 8
40082eff:	152772        	l32i	a7, a7, 84
40082f02:	156272        	s32i	a7, a2, 84
}
40082f05:	042d      	mov.n	a2, a4
40082f07:	f01d      	retw.n
40082f09:	000000        	ill

40082f0c <z_init_static_threads>:
{
40082f0c:	006136        	entry	a1, 48
	_FOREACH_STATIC_THREAD(thread_data) {
40082f0f:	f62f21        	l32r	a2, 400807cc <_iram_text_start+0x284>
40082f12:	f62e31        	l32r	a3, 400807cc <_iram_text_start+0x284>
40082f15:	024d      	mov.n	a4, a2
40082f17:	000a46        	j	40082f44 <z_init_static_threads+0x38>
		z_setup_new_thread(
40082f1a:	0b2282        	l32i	a8, a2, 44
40082f1d:	036182        	s32i	a8, a1, 12
40082f20:	8288      	l32i.n	a8, a2, 32
40082f22:	2189      	s32i.n	a8, a1, 8
40082f24:	7288      	l32i.n	a8, a2, 28
40082f26:	1189      	s32i.n	a8, a1, 4
40082f28:	6288      	l32i.n	a8, a2, 24
40082f2a:	0189      	s32i.n	a8, a1, 0
40082f2c:	52f8      	l32i.n	a15, a2, 20
40082f2e:	42e8      	l32i.n	a14, a2, 16
40082f30:	32d8      	l32i.n	a13, a2, 12
40082f32:	22c8      	l32i.n	a12, a2, 8
40082f34:	12b8      	l32i.n	a11, a2, 4
40082f36:	0022a2        	l32i	a10, a2, 0
40082f39:	fff7a5        	call8	40082eb4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
40082f3c:	0288      	l32i.n	a8, a2, 0
40082f3e:	106822        	s32i	a2, a8, 64
	_FOREACH_STATIC_THREAD(thread_data) {
40082f41:	30c222        	addi	a2, a2, 48
40082f44:	d23237        	bltu	a2, a3, 40082f1a <z_init_static_threads+0xe>
	_FOREACH_STATIC_THREAD(thread_data) {
40082f47:	042d      	mov.n	a2, a4
	k_sched_lock();
40082f49:	ff9265        	call8	40082870 <k_sched_lock>
					    K_MSEC(thread_data->init_delay));
40082f4c:	040c      	movi.n	a4, 0
	_FOREACH_STATIC_THREAD(thread_data) {
40082f4e:	000a86        	j	40082f7c <z_init_static_threads+0x70>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
40082f51:	92d8      	l32i.n	a13, a2, 36
40082f53:	220d26        	beqi	a13, -1, 40082f79 <z_init_static_threads+0x6d>
		} else {
			return t * (to_hz / from_hz);
40082f56:	a80c      	movi.n	a8, 10
					    K_MSEC(thread_data->init_delay));
40082f58:	53dd40        	max	a13, a13, a4
40082f5b:	82cd80        	mull	a12, a13, a8
40082f5e:	b2dd80        	mulsh	a13, a13, a8
			schedule_new_thread(thread_data->init_thread,
40082f61:	02a8      	l32i.n	a10, a2, 0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
40082f63:	208cd0        	or	a8, a12, a13
40082f66:	006856        	bnez	a8, 40082f70 <z_init_static_threads+0x64>
	z_sched_start(thread);
40082f69:	ffa825        	call8	400829ec <z_sched_start>
40082f6c:	000246        	j	40082f79 <z_init_static_threads+0x6d>
40082f6f:	14b100        	extui	a11, a0, 1, 2
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
40082f72:	caa2f6        	bgeui	a2, 12, 40082f40 <z_init_static_threads+0x34>
40082f75:	a518      	l32i.n	a1, a5, 40
40082f77:	000c      	movi.n	a0, 0
	_FOREACH_STATIC_THREAD(thread_data) {
40082f79:	30c222        	addi	a2, a2, 48
40082f7c:	d13237        	bltu	a2, a3, 40082f51 <z_init_static_threads+0x45>
	k_sched_unlock();
40082f7f:	ff9765        	call8	400828f4 <k_sched_unlock>
}
40082f82:	f01d      	retw.n

40082f84 <z_impl_k_thread_abort>:
#include <sys/__assert.h>
#include <syscall_handler.h>

#if !defined(CONFIG_ARCH_HAS_THREAD_ABORT)
void z_impl_k_thread_abort(k_tid_t thread)
{
40082f84:	004136        	entry	a1, 32
	z_thread_single_abort(thread);
40082f87:	02ad      	mov.n	a10, a2
40082f89:	ffbb25        	call8	40082b3c <z_thread_single_abort>
40082f8c:	03f430        	rsr.misc0	a3

	/* If we're in an interrupt handler, we reschedule on the way out
	 * anyway, nothing needs to be done here.
	 */
	if (!arch_is_in_isr()) {
40082f8f:	0338      	l32i.n	a3, a3, 0
40082f91:	23fc      	bnez.n	a3, 40082fc7 <z_impl_k_thread_abort+0x43>
		if (thread == _current) {
40082f93:	f57531        	l32r	a3, 40080568 <_iram_text_start+0x20>
40082f96:	2348      	l32i.n	a4, a3, 8
40082f98:	259427        	bne	a4, a2, 40082fc1 <z_impl_k_thread_abort+0x3d>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082f9b:	006350        	rsil	a5, 3
	old_thread = _current;
40082f9e:	2348      	l32i.n	a4, a3, 8
	return _kernel.ready_q.cache;
40082fa0:	e328      	l32i.n	a2, a3, 56
	if (new_thread != old_thread) {
40082fa2:	121427        	beq	a4, a2, 40082fb8 <z_impl_k_thread_abort+0x34>
		z_reset_time_slice();
40082fa5:	ff7ba5        	call8	40082760 <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
40082fa8:	587c      	movi.n	a8, -11
40082faa:	1422a2        	l32i	a10, a2, 80
40082fad:	136482        	s32i	a8, a4, 76
		_current_cpu->current = new_thread;
40082fb0:	2329      	s32i.n	a2, a3, 8
40082fb2:	50c4b2        	addi	a11, a4, 80
40082fb5:	fe6aa5        	call8	40081660 <xtensa_switch>
	XTOS_RESTORE_INTLEVEL(key);
40082fb8:	13e650        	wsr.ps	a5
40082fbb:	002010        	rsync
	return _current->swap_retval;
40082fbe:	000146        	j	40082fc7 <z_impl_k_thread_abort+0x43>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082fc1:	0063a0        	rsil	a10, 3
	(void) z_reschedule_irqlock(arch_irq_lock());
40082fc4:	ff87a5        	call8	40082840 <z_reschedule_irqlock>
			z_swap_unlocked();
		} else {
			z_reschedule_unlocked();
		}
	}
}
40082fc7:	f01d      	retw.n
40082fc9:	000000        	ill

40082fcc <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
40082fcc:	004136        	entry	a1, 32
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
40082fcf:	f60081        	l32r	a8, 400807d0 <_iram_text_start+0x288>
40082fd2:	0a0c      	movi.n	a10, 0
40082fd4:	0888      	l32i.n	a8, a8, 0
40082fd6:	0298a7        	bne	a8, a10, 40082fdc <elapsed+0x10>
40082fd9:	fe5765        	call8	40081550 <z_clock_elapsed>
}
40082fdc:	0a2d      	mov.n	a2, a10
40082fde:	f01d      	retw.n

40082fe0 <remove_timeout>:
{
40082fe0:	004136        	entry	a1, 32
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
40082fe3:	0288      	l32i.n	a8, a2, 0
40082fe5:	12ac      	beqz.n	a2, 4008300a <remove_timeout+0x2a>
40082fe7:	f5fb91        	l32r	a9, 400807d4 <_iram_text_start+0x28c>
	return (node == list->tail) ? NULL : node->next;
40082fea:	1998      	l32i.n	a9, a9, 4
40082fec:	1a1297        	beq	a2, a9, 4008300a <remove_timeout+0x2a>
	if (next(t) != NULL) {
40082fef:	789c      	beqz.n	a8, 4008300a <remove_timeout+0x2a>
		next(t)->dticks += t->dticks;
40082ff1:	48c8      	l32i.n	a12, a8, 16
40082ff3:	42a8      	l32i.n	a10, a2, 16
40082ff5:	58b8      	l32i.n	a11, a8, 20
40082ff7:	acaa      	add.n	a10, a12, a10
40082ff9:	52d8      	l32i.n	a13, a2, 20
40082ffb:	190c      	movi.n	a9, 1
40082ffd:	013ac7        	bltu	a10, a12, 40083002 <remove_timeout+0x22>
40083000:	090c      	movi.n	a9, 0
40083002:	bbda      	add.n	a11, a11, a13
40083004:	99ba      	add.n	a9, a9, a11
40083006:	48a9      	s32i.n	a10, a8, 16
40083008:	5899      	s32i.n	a9, a8, 20
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
4008300a:	1298      	l32i.n	a9, a2, 4
4008300c:	0989      	s32i.n	a8, a9, 0
	node->next->prev = node->prev;
4008300e:	1899      	s32i.n	a9, a8, 4
	node->next = NULL;
40083010:	080c      	movi.n	a8, 0
40083012:	0289      	s32i.n	a8, a2, 0
	node->prev = NULL;
40083014:	1289      	s32i.n	a8, a2, 4
}
40083016:	f01d      	retw.n

40083018 <next_timeout>:

static int32_t next_timeout(void)
{
40083018:	004136        	entry	a1, 32
	return list->head == list;
4008301b:	f5ee81        	l32r	a8, 400807d4 <_iram_text_start+0x28c>
4008301e:	0828      	l32i.n	a2, a8, 0
	return sys_dlist_is_empty(list) ? NULL : list->head;
40083020:	019287        	bne	a2, a8, 40083025 <next_timeout+0xd>
40083023:	020c      	movi.n	a2, 0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
40083025:	fffa65        	call8	40082fcc <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
40083028:	f5ec81        	l32r	a8, 400807d8 <_iram_text_start+0x290>
4008302b:	328c      	beqz.n	a2, 40083032 <next_timeout+0x1a>
4008302d:	4288      	l32i.n	a8, a2, 16
4008302f:	c088a0        	sub	a8, a8, a10

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
40083032:	f54d21        	l32r	a2, 40080568 <_iram_text_start+0x20>
40083035:	4228      	l32i.n	a2, a2, 16
40083037:	128c      	beqz.n	a2, 4008303c <next_timeout+0x24>
40083039:	012287        	blt	a2, a8, 4008303e <next_timeout+0x26>
4008303c:	082d      	mov.n	a2, a8
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
4008303e:	f01d      	retw.n

40083040 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
40083040:	006136        	entry	a1, 48
40083043:	046d      	mov.n	a6, a4
40083045:	207550        	or	a7, a5, a5
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
40083048:	050466        	bnei	a4, -1, 40083051 <z_add_timeout+0x11>
4008304b:	020566        	bnei	a5, -1, 40083051 <z_add_timeout+0x11>
4008304e:	004b86        	j	40083180 <z_add_timeout+0x140>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
40083051:	441b      	addi.n	a4, a4, 1
40083053:	180c      	movi.n	a8, 1
40083055:	013467        	bltu	a4, a6, 4008305a <z_add_timeout+0x1a>
40083058:	080c      	movi.n	a8, 0
4008305a:	885a      	add.n	a8, a8, a5

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
4008305c:	e57c      	movi.n	a5, -2
4008305e:	c0a540        	sub	a10, a5, a4
	k_ticks_t ticks = timeout.ticks + 1;
40083061:	047d      	mov.n	a7, a4
40083063:	086d      	mov.n	a6, a8
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
40083065:	190c      	movi.n	a9, 1
40083067:	0235a7        	bltu	a5, a10, 4008306d <z_add_timeout+0x2d>
4008306a:	00a092        	movi	a9, 0
4008306d:	f57c      	movi.n	a5, -1
4008306f:	c05580        	sub	a5, a5, a8
40083072:	c05590        	sub	a5, a5, a9
40083075:	045596        	bltz	a5, 400830be <z_add_timeout+0x7e>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
40083078:	0189      	s32i.n	a8, a1, 0
4008307a:	fff525        	call8	40082fcc <elapsed>
4008307d:	f5d751        	l32r	a5, 400807dc <_iram_text_start+0x294>
40083080:	e97c      	movi.n	a9, -2
40083082:	0568      	l32i.n	a6, a5, 0
40083084:	15b8      	l32i.n	a11, a5, 4
40083086:	c06960        	sub	a6, a9, a6
40083089:	170c      	movi.n	a7, 1
4008308b:	0188      	l32i.n	a8, a1, 0
4008308d:	013967        	bltu	a9, a6, 40083092 <z_add_timeout+0x52>
40083090:	070c      	movi.n	a7, 0
40083092:	f57c      	movi.n	a5, -1
40083094:	c055b0        	sub	a5, a5, a11
40083097:	c04640        	sub	a4, a6, a4
4008309a:	c05570        	sub	a5, a5, a7
4008309d:	170c      	movi.n	a7, 1
4008309f:	023647        	bltu	a6, a4, 400830a5 <z_add_timeout+0x65>
400830a2:	00a072        	movi	a7, 0
400830a5:	c05580        	sub	a5, a5, a8
400830a8:	c05570        	sub	a5, a5, a7
400830ab:	c074a0        	sub	a7, a4, a10
400830ae:	318fa0        	srai	a8, a10, 31
400830b1:	160c      	movi.n	a6, 1
400830b3:	013477        	bltu	a4, a7, 400830b8 <z_add_timeout+0x78>
400830b6:	060c      	movi.n	a6, 0
400830b8:	c05580        	sub	a5, a5, a8
400830bb:	c06560        	sub	a6, a5, a6
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
400830be:	026232        	s32i	a3, a2, 8
400830c1:	006330        	rsil	a3, 3
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
400830c4:	fff065        	call8	40082fcc <elapsed>
	ticks = MAX(1, ticks);
400830c7:	205770        	or	a5, a7, a7
400830ca:	204660        	or	a4, a6, a6
400830cd:	0716e6        	bgei	a6, 1, 400830d8 <z_add_timeout+0x98>
400830d0:	06cc      	bnez.n	a6, 400830d4 <z_add_timeout+0x94>
400830d2:	27cc      	bnez.n	a7, 400830d8 <z_add_timeout+0x98>
400830d4:	150c      	movi.n	a5, 1
400830d6:	040c      	movi.n	a4, 0
		to->dticks = ticks + elapsed();
400830d8:	317fa0        	srai	a7, a10, 31
400830db:	a5aa      	add.n	a10, a5, a10
400830dd:	160c      	movi.n	a6, 1
400830df:	013a57        	bltu	a10, a5, 400830e4 <z_add_timeout+0xa4>
400830e2:	060c      	movi.n	a6, 0
400830e4:	447a      	add.n	a4, a4, a7
400830e6:	464a      	add.n	a4, a6, a4
400830e8:	5249      	s32i.n	a4, a2, 20
	return list->head == list;
400830ea:	f5ba41        	l32r	a4, 400807d4 <_iram_text_start+0x28c>
400830ed:	42a9      	s32i.n	a10, a2, 16
400830ef:	0458      	l32i.n	a5, a4, 0
	return sys_dlist_is_empty(list) ? NULL : list->head;
400830f1:	029547        	bne	a5, a4, 400830f7 <z_add_timeout+0xb7>
400830f4:	001e46        	j	40083171 <z_add_timeout+0x131>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
400830f7:	14a8      	l32i.n	a10, a4, 4
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
400830f9:	1b0c      	movi.n	a11, 1
400830fb:	0c0c      	movi.n	a12, 0
400830fd:	001386        	j	4008314f <z_add_timeout+0x10f>
			if (t->dticks > to->dticks) {
40083100:	5588      	l32i.n	a8, a5, 20
40083102:	5268      	l32i.n	a6, a2, 20
40083104:	4578      	l32i.n	a7, a5, 16
40083106:	4298      	l32i.n	a9, a2, 16
40083108:	053687        	bltu	a6, a8, 40083111 <z_add_timeout+0xd1>
4008310b:	259867        	bne	a8, a6, 40083134 <z_add_timeout+0xf4>
4008310e:	22b977        	bgeu	a9, a7, 40083134 <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
40083111:	c09790        	sub	a9, a7, a9
40083114:	1a0c      	movi.n	a10, 1
40083116:	023797        	bltu	a7, a9, 4008311c <z_add_timeout+0xdc>
40083119:	00a0a2        	movi	a10, 0
4008311c:	c06860        	sub	a6, a8, a6
4008311f:	c066a0        	sub	a6, a6, a10
40083122:	5569      	s32i.n	a6, a5, 20
	node->prev = successor->prev;
40083124:	1568      	l32i.n	a6, a5, 4
40083126:	4599      	s32i.n	a9, a5, 16
40083128:	1269      	s32i.n	a6, a2, 4
	node->next = successor;
4008312a:	0259      	s32i.n	a5, a2, 0
	successor->prev->next = node;
4008312c:	0629      	s32i.n	a2, a6, 0
	successor->prev = node;
4008312e:	1529      	s32i.n	a2, a5, 4
		}

		if (t == NULL) {
40083130:	000886        	j	40083156 <z_add_timeout+0x116>
40083133:	797000        	lsi	f0, a0, 0x1e4
			to->dticks -= t->dticks;
40083136:	dbb0c0        	movt.s	f11, f0, b12
40083139:	397720        	lsi	f2, a7, 228
4008313c:	dcc002        	addi	a0, a0, -36
4008313f:	668020        	lsi	f2, a0, 0x198
40083142:	66d0c0        	lsi	f12, a0, 0x198
40083145:	4279c0        	xorb	b7, b9, b12
40083148:	5269      	s32i.n	a6, a2, 20
	return (node == list->tail) ? NULL : node->next;
4008314a:	2315a7        	beq	a5, a10, 40083171 <z_add_timeout+0x131>
4008314d:	0558      	l32i.n	a5, a5, 0
		for (t = first(); t != NULL; t = next(t)) {
4008314f:	fad556        	bnez	a5, 40083100 <z_add_timeout+0xc0>
40083152:	0006c6        	j	40083171 <z_add_timeout+0x131>
40083155:	245200        	extui	a5, a0, 2, 3
	return list->head == list;
40083158:	925700        	lsi	f0, a7, 0x248
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
4008315b:	470b      	addi.n	a4, a7, -1
4008315d:	a50815        	call4	400281e0 <esp32_rom_gpio_matrix_out+0x1e2d4>
			z_clock_set_timeout(next_timeout(), false);
40083160:	ffeb      	addi.n	a15, a15, 14
40083162:	00a0b2        	movi	a11, 0
40083165:	fe38a5        	call8	400814f0 <z_clock_set_timeout>
	XTOS_RESTORE_INTLEVEL(key);
40083168:	13e630        	wsr.ps	a3
4008316b:	002010        	rsync
	LOCKED(&timeout_lock) {
4008316e:	000386        	j	40083180 <z_add_timeout+0x140>
	node->prev = list->tail;
40083171:	1458      	l32i.n	a5, a4, 4
	node->next = list;
40083173:	0249      	s32i.n	a4, a2, 0
	node->prev = list->tail;
40083175:	1259      	s32i.n	a5, a2, 4
	list->tail->next = node;
40083177:	1458      	l32i.n	a5, a4, 4
40083179:	0529      	s32i.n	a2, a5, 0
	list->tail = node;
4008317b:	1429      	s32i.n	a2, a4, 4
4008317d:	fff546        	j	40083156 <z_add_timeout+0x116>
		}
	}
}
40083180:	f01d      	retw.n
	...

40083184 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
40083184:	004136        	entry	a1, 32
40083187:	02ad      	mov.n	a10, a2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083189:	006320        	rsil	a2, 3
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
4008318c:	0a98      	l32i.n	a9, a10, 0
	int ret = -EINVAL;
4008318e:	a86c      	movi.n	a8, -22
		if (sys_dnode_is_linked(&to->node)) {
40083190:	004916        	beqz	a9, 40083198 <z_abort_timeout+0x14>
			remove_timeout(to);
40083193:	ffe4e5        	call8	40082fe0 <remove_timeout>
			ret = 0;
40083196:	080c      	movi.n	a8, 0
	XTOS_RESTORE_INTLEVEL(key);
40083198:	13e620        	wsr.ps	a2
4008319b:	002010        	rsync
		}
	}

	return ret;
}
4008319e:	082d      	mov.n	a2, a8
400831a0:	f01d      	retw.n
	...

400831a4 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
400831a4:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400831a7:	006320        	rsil	a2, 3
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
400831aa:	ffe6e5        	call8	40083018 <next_timeout>
	XTOS_RESTORE_INTLEVEL(key);
400831ad:	13e620        	wsr.ps	a2
400831b0:	002010        	rsync
	}
	return ret;
}
400831b3:	0a2d      	mov.n	a2, a10
400831b5:	f01d      	retw.n
	...

400831b8 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
400831b8:	004136        	entry	a1, 32
400831bb:	743030        	extui	a3, a3, 0, 8
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400831be:	006340        	rsil	a4, 3
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
400831c1:	ffe565        	call8	40083018 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
400831c4:	00a0c2        	movi	a12, 0
400831c7:	01ca92        	addi	a9, a10, 1
400831ca:	01a082        	movi	a8, 1
400831cd:	0c5d      	mov.n	a5, a12
400831cf:	835890        	moveqz	a5, a8, a9
400831d2:	059d      	mov.n	a9, a5
			      || (ticks < next_to);
400831d4:	0122a7        	blt	a2, a10, 400831d9 <z_set_timeout_expiry+0x21>
400831d7:	0c8d      	mov.n	a8, a12
400831d9:	208980        	or	a8, a9, a8
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
400831dc:	0b6807        	bbci	a8, 0, 400831eb <z_set_timeout_expiry+0x33>
400831df:	082aa6        	blti	a10, 2, 400831eb <z_set_timeout_expiry+0x33>
			z_clock_set_timeout(ticks, is_idle);
400831e2:	20b330        	or	a11, a3, a3
400831e5:	20a220        	or	a10, a2, a2
400831e8:	fe3065        	call8	400814f0 <z_clock_set_timeout>
	XTOS_RESTORE_INTLEVEL(key);
400831eb:	13e640        	wsr.ps	a4
400831ee:	002010        	rsync
		}
	}
}
400831f1:	000090        	retw

400831f4 <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
400831f4:	004136        	entry	a1, 32
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
400831f7:	02ad      	mov.n	a10, a2
400831f9:	ff8a25        	call8	40082a9c <z_time_slice>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400831fc:	006330        	rsil	a3, 3
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
400831ff:	f57461        	l32r	a6, 400807d0 <_iram_text_start+0x288>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
		announce_remaining -= dt;
		t->dticks = 0;
40083202:	f4ed41        	l32r	a4, 400805b8 <_iram_text_start+0x70>
	announce_remaining = ticks;
40083205:	0629      	s32i.n	a2, a6, 0
		t->dticks = 0;
40083207:	f4ec51        	l32r	a5, 400805b8 <_iram_text_start+0x70>
	while (first() != NULL && first()->dticks <= announce_remaining) {
4008320a:	000c86        	j	40083240 <z_clock_announce+0x4c>
		curr_tick += dt;
4008320d:	989a      	add.n	a9, a8, a9
4008320f:	31bf80        	srai	a11, a8, 31
40083212:	1a0c      	movi.n	a10, 1
40083214:	013987        	bltu	a9, a8, 40083219 <z_clock_announce+0x25>
40083217:	0a0c      	movi.n	a10, 0
40083219:	ebea      	add.n	a14, a11, a14
4008321b:	aaea      	add.n	a10, a10, a14
4008321d:	1da9      	s32i.n	a10, a13, 4
		announce_remaining -= dt;
4008321f:	c08c80        	sub	a8, a12, a8
		t->dticks = 0;
40083222:	4249      	s32i.n	a4, a2, 16
40083224:	5259      	s32i.n	a5, a2, 20
		remove_timeout(t);
40083226:	02ad      	mov.n	a10, a2
		curr_tick += dt;
40083228:	0d99      	s32i.n	a9, a13, 0
		announce_remaining -= dt;
4008322a:	006682        	s32i	a8, a6, 0
		remove_timeout(t);
4008322d:	ffdb25        	call8	40082fe0 <remove_timeout>
	XTOS_RESTORE_INTLEVEL(key);
40083230:	13e630        	wsr.ps	a3
40083233:	002010        	rsync

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
40083236:	2238      	l32i.n	a3, a2, 8
40083238:	02ad      	mov.n	a10, a2
4008323a:	0003e0        	callx8	a3
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008323d:	006330        	rsil	a3, 3
	return list->head == list;
40083240:	f56581        	l32r	a8, 400807d4 <_iram_text_start+0x28c>
40083243:	f566d1        	l32r	a13, 400807dc <_iram_text_start+0x294>
40083246:	06c8      	l32i.n	a12, a6, 0
40083248:	0828      	l32i.n	a2, a8, 0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
4008324a:	31bfc0        	srai	a11, a12, 31
4008324d:	0d98      	l32i.n	a9, a13, 0
4008324f:	1de8      	l32i.n	a14, a13, 4
	while (first() != NULL && first()->dticks <= announce_remaining) {
40083251:	129c      	beqz.n	a2, 40083266 <z_clock_announce+0x72>
40083253:	0f1287        	beq	a2, a8, 40083266 <z_clock_announce+0x72>
40083256:	52a8      	l32i.n	a10, a2, 20
40083258:	4288      	l32i.n	a8, a2, 16
4008325a:	323ba7        	bltu	a11, a10, 40083290 <z_clock_announce+0x9c>
4008325d:	ac9ab7        	bne	a10, a11, 4008320d <z_clock_announce+0x19>
40083260:	a9bc87        	bgeu	a12, a8, 4008320d <z_clock_announce+0x19>
40083263:	000a46        	j	40083290 <z_clock_announce+0x9c>

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
	}

	curr_tick += announce_remaining;
40083266:	9c9a      	add.n	a9, a12, a9
40083268:	01a022        	movi	a2, 1
4008326b:	0139c7        	bltu	a9, a12, 40083270 <z_clock_announce+0x7c>
4008326e:	020c      	movi.n	a2, 0
40083270:	80bbe0        	add	a11, a11, a14
40083273:	8022b0        	add	a2, a2, a11
40083276:	1d29      	s32i.n	a2, a13, 4
	announce_remaining = 0;
40083278:	020c      	movi.n	a2, 0
	curr_tick += announce_remaining;
4008327a:	0d99      	s32i.n	a9, a13, 0
	announce_remaining = 0;
4008327c:	0629      	s32i.n	a2, a6, 0

	z_clock_set_timeout(next_timeout(), false);
4008327e:	ffd9a5        	call8	40083018 <next_timeout>
40083281:	02bd      	mov.n	a11, a2
40083283:	fe26e5        	call8	400814f0 <z_clock_set_timeout>
	XTOS_RESTORE_INTLEVEL(key);
40083286:	13e630        	wsr.ps	a3
40083289:	002010        	rsync

	k_spin_unlock(&timeout_lock, key);
}
4008328c:	f01d      	retw.n
4008328e:	c00000        	sub	a0, a0, a0
		first()->dticks -= announce_remaining;
40083291:	c048      	l32i.n	a4, a0, 48
40083293:	01a052        	movi	a5, 1
40083296:	023847        	bltu	a8, a4, 4008329c <z_clock_announce+0xa8>
40083299:	00a052        	movi	a5, 0
4008329c:	c0aab0        	sub	a10, a10, a11
4008329f:	c0aa50        	sub	a10, a10, a5
400832a2:	4249      	s32i.n	a4, a2, 16
400832a4:	52a9      	s32i.n	a10, a2, 20
400832a6:	ffef06        	j	40083266 <z_clock_announce+0x72>
400832a9:	000000        	ill

400832ac <z_tick_get>:

int64_t z_tick_get(void)
{
400832ac:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400832af:	006340        	rsil	a4, 3
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
400832b2:	fe29e5        	call8	40081550 <z_clock_elapsed>
400832b5:	f54931        	l32r	a3, 400807dc <_iram_text_start+0x294>
400832b8:	002322        	l32i	a2, a3, 0
400832bb:	012382        	l32i	a8, a3, 4
400832be:	802a20        	add	a2, a10, a2
400832c1:	130c      	movi.n	a3, 1
400832c3:	0132a7        	bltu	a2, a10, 400832c8 <z_tick_get+0x1c>
400832c6:	030c      	movi.n	a3, 0
400832c8:	338a      	add.n	a3, a3, a8
	XTOS_RESTORE_INTLEVEL(key);
400832ca:	13e640        	wsr.ps	a4
400832cd:	002010        	rsync
	}
	return t;
}
400832d0:	f01d      	retw.n
	...

400832d4 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
400832d4:	004136        	entry	a1, 32
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
400832d7:	fffd65        	call8	400832ac <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
400832da:	0a2d      	mov.n	a2, a10
400832dc:	f01d      	retw.n
	...

400832e0 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
400832e0:	004136        	entry	a1, 32
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
400832e3:	120c      	movi.n	a2, 1
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400832e5:	006380        	rsil	a8, 3
	int32_t ticks = z_get_next_timeout_expiry();
400832e8:	ffeba5        	call8	400831a4 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
400832eb:	013ae6        	bgei	a10, 3, 400832f0 <idle+0x10>
400832ee:	02ad      	mov.n	a10, a2
400832f0:	02bd      	mov.n	a11, a2
400832f2:	ffec65        	call8	400831b8 <z_set_timeout_expiry>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
400832f5:	0008a5        	call8	40083380 <arch_cpu_idle>
400832f8:	fffa46        	j	400832e5 <idle+0x5>
	...

400832fc <k_heap_init>:
#include <ksched.h>
#include <wait_q.h>
#include <init.h>

void k_heap_init(struct k_heap *h, void *mem, size_t bytes)
{
400832fc:	004136        	entry	a1, 32
400832ff:	0cc282        	addi	a8, a2, 12
40083302:	20a220        	or	a10, a2, a2
	list->head = (sys_dnode_t *)list;
40083305:	036282        	s32i	a8, a2, 12
	list->tail = (sys_dnode_t *)list;
40083308:	4289      	s32i.n	a8, a2, 16
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
4008330a:	04cd      	mov.n	a12, a4
4008330c:	03bd      	mov.n	a11, a3
4008330e:	fdc9e5        	call8	40080fac <sys_heap_init>
}
40083311:	f01d      	retw.n
	...

40083314 <statics_init>:

static int statics_init(const struct device *unused)
{
40083314:	004136        	entry	a1, 32
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
40083317:	f53221        	l32r	a2, 400807e0 <_iram_text_start+0x298>
4008331a:	000386        	j	4008332c <statics_init+0x18>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
4008331d:	0222c2        	l32i	a12, a2, 8
40083320:	0122b2        	l32i	a11, a2, 4
40083323:	20a220        	or	a10, a2, a2
40083326:	fffd65        	call8	400832fc <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
40083329:	14c222        	addi	a2, a2, 20
4008332c:	f52d31        	l32r	a3, 400807e0 <_iram_text_start+0x298>
4008332f:	ea3237        	bltu	a2, a3, 4008331d <statics_init+0x9>
	}
	return 0;
}
40083332:	020c      	movi.n	a2, 0
40083334:	f01d      	retw.n
	...

40083338 <i2c_write$constprop$1>:
 * @param addr Address to the target I2C device for writing.
 *
 * @retval 0 If successful.
 * @retval -EIO General input / output error.
 */
static inline int i2c_write(const struct device *dev, const uint8_t *buf,
40083338:	006136        	entry	a1, 48
{
	struct i2c_msg msg;

	msg.buf = (uint8_t *)buf;
	msg.len = num_bytes;
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
4008333b:	280c      	movi.n	a8, 2
static inline int i2c_write(const struct device *dev, const uint8_t *buf,
4008333d:	02ad      	mov.n	a10, a2
	msg.buf = (uint8_t *)buf;
4008333f:	0139      	s32i.n	a3, a1, 0
	msg.len = num_bytes;
40083341:	1149      	s32i.n	a4, a1, 4
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
40083343:	084182        	s8i	a8, a1, 8
	return api->transfer(dev, msgs, num_msgs, addr);
40083346:	2288      	l32i.n	a8, a2, 8
40083348:	8d4c      	movi.n	a13, 72
4008334a:	1888      	l32i.n	a8, a8, 4
4008334c:	1c0c      	movi.n	a12, 1
4008334e:	20b110        	or	a11, a1, a1
40083351:	0008e0        	callx8	a8

	return i2c_transfer(dev, &msg, 1, addr);
}
40083354:	0a2d      	mov.n	a2, a10
40083356:	f01d      	retw.n

40083358 <i2c_read$constprop$0>:
 * @param addr Address of the I2C device being read.
 *
 * @retval 0 If successful.
 * @retval -EIO General input / output error.
 */
static inline int i2c_read(const struct device *dev, uint8_t *buf,
40083358:	006136        	entry	a1, 48
{
	struct i2c_msg msg;

	msg.buf = buf;
	msg.len = num_bytes;
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
4008335b:	380c      	movi.n	a8, 3
static inline int i2c_read(const struct device *dev, uint8_t *buf,
4008335d:	02ad      	mov.n	a10, a2
	msg.buf = buf;
4008335f:	0139      	s32i.n	a3, a1, 0
	msg.len = num_bytes;
40083361:	1149      	s32i.n	a4, a1, 4
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
40083363:	084182        	s8i	a8, a1, 8
	return api->transfer(dev, msgs, num_msgs, addr);
40083366:	2288      	l32i.n	a8, a2, 8
40083368:	8d4c      	movi.n	a13, 72
4008336a:	1888      	l32i.n	a8, a8, 4
4008336c:	1c0c      	movi.n	a12, 1
4008336e:	20b110        	or	a11, a1, a1
40083371:	0008e0        	callx8	a8

	return i2c_transfer(dev, &msg, 1, addr);
}
40083374:	0a2d      	mov.n	a2, a10
40083376:	f01d      	retw.n

40083378 <_ConfigAbsSyms>:

/* file is auto-generated, do not modify ! */

#include <toolchain.h>

GEN_ABS_SYM_BEGIN (_ConfigAbsSyms)
40083378:	004136        	entry	a1, 32
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_BOOTLOADER_SRAM_SIZE, 16);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
4008337b:	f01d      	retw.n
4008337d:	000000        	ill

40083380 <arch_cpu_idle>:
 */

#include <tracing/tracing.h>

void arch_cpu_idle(void)
{
40083380:	004136        	entry	a1, 32
	sys_trace_idle();
	__asm__ volatile ("waiti 0");
40083383:	007000        	waiti	0
}
40083386:	f01d      	retw.n

40083388 <z_xtensa_dump_stack>:
{
40083388:	004136        	entry	a1, 32
}
4008338b:	f01d      	retw.n
4008338d:	000000        	ill

40083390 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
40083390:	004136        	entry	a1, 32
	while ((*s1 == *s2) && (*s1 != '\0')) {
40083393:	0000c6        	j	4008339a <strcmp+0xa>
		s1++;
40083396:	221b      	addi.n	a2, a2, 1
		s2++;
40083398:	331b      	addi.n	a3, a3, 1
	while ((*s1 == *s2) && (*s1 != '\0')) {
4008339a:	000282        	l8ui	a8, a2, 0
4008339d:	000392        	l8ui	a9, a3, 0
400833a0:	029897        	bne	a8, a9, 400833a6 <strcmp+0x16>
400833a3:	fef856        	bnez	a8, 40083396 <strcmp+0x6>
	}

	return *s1 - *s2;
}
400833a6:	c02890        	sub	a2, a8, a9
400833a9:	f01d      	retw.n
	...

400833ac <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
400833ac:	004136        	entry	a1, 32
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
400833af:	74b030        	extui	a11, a3, 0, 8

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
400833b2:	028d      	mov.n	a8, a2
400833b4:	000286        	j	400833c2 <memset+0x16>
400833b7:	441600        	extui	a1, a0, 6, 5
		if (n == 0) {
400833ba:	48b204        	lsi	f0, a2, 0x120
			return buf;
		}
		*(d_byte++) = c_byte;
400833bd:	440b00        	extui	a0, a0, 11, 5
		n--;
400833c0:	881b      	addi.n	a8, a8, 1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
400833c2:	149080        	extui	a9, a8, 0, 2
400833c5:	08cd      	mov.n	a12, a8
400833c7:	fed956        	bnez	a9, 400833b8 <memset+0xc>
	};

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
400833ca:	743030        	extui	a3, a3, 0, 8

	c_word |= c_word << 8;
400833cd:	11a380        	slli	a10, a3, 8
400833d0:	203a30        	or	a3, a10, a3
	c_word |= c_word << 16;
400833d3:	11a300        	slli	a10, a3, 16
400833d6:	203a30        	or	a3, a10, a3
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
400833d9:	41a240        	srli	a10, a4, 2
400833dc:	11dae0        	slli	a13, a10, 2
400833df:	ed8a      	add.n	a14, a13, a8
400833e1:	0000c6        	j	400833e8 <memset+0x3c>
		*(d_word++) = c_word;
400833e4:	0839      	s32i.n	a3, a8, 0
		n -= sizeof(mem_word_t);
400833e6:	884b      	addi.n	a8, a8, 4
	while (n >= sizeof(mem_word_t)) {
400833e8:	f898e7        	bne	a8, a14, 400833e4 <memset+0x38>
400833eb:	11aae0        	slli	a10, a10, 2
400833ee:	c044a0        	sub	a4, a4, a10
400833f1:	000206        	j	400833fd <memset+0x51>
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
		*(d_byte++) = c_byte;
400833f4:	39da      	add.n	a3, a9, a13
400833f6:	3c3a      	add.n	a3, a12, a3
400833f8:	0043b2        	s8i	a11, a3, 0
		n--;
400833fb:	991b      	addi.n	a9, a9, 1
	while (n > 0) {
400833fd:	f39497        	bne	a4, a9, 400833f4 <memset+0x48>
	}

	return buf;
}
40083400:	f01d      	retw.n
	...

40083404 <_stdout_hook_default>:
{
40083404:	004136        	entry	a1, 32
}
40083407:	f27c      	movi.n	a2, -1
40083409:	f01d      	retw.n
	...

4008340c <gpio_esp32_port_get_raw>:
{
4008340c:	004136        	entry	a1, 32
	*value = *data->port.input_reg;
4008340f:	3288      	l32i.n	a8, a2, 12
}
40083411:	020c      	movi.n	a2, 0
	*value = *data->port.input_reg;
40083413:	4888      	l32i.n	a8, a8, 16
40083415:	0020c0        	memw
40083418:	0888      	l32i.n	a8, a8, 0
4008341a:	0389      	s32i.n	a8, a3, 0
}
4008341c:	f01d      	retw.n
	...

40083420 <gpio_esp32_port_set_masked_raw>:
{
40083420:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = port->data;
40083423:	3288      	l32i.n	a8, a2, 12
40083425:	0063a0        	rsil	a10, 3
	*data->port.output_reg = (*data->port.output_reg & ~mask)
40083428:	5888      	l32i.n	a8, a8, 20
4008342a:	0020c0        	memw
4008342d:	0898      	l32i.n	a9, a8, 0
				 | (mask & value);
4008342f:	304940        	xor	a4, a9, a4
40083432:	104430        	and	a4, a4, a3
40083435:	304490        	xor	a4, a4, a9
	*data->port.output_reg = (*data->port.output_reg & ~mask)
40083438:	0020c0        	memw
4008343b:	0849      	s32i.n	a4, a8, 0
	XTOS_RESTORE_INTLEVEL(key);
4008343d:	13e6a0        	wsr.ps	a10
40083440:	002010        	rsync
}
40083443:	020c      	movi.n	a2, 0
40083445:	f01d      	retw.n
	...

40083448 <gpio_esp32_port_set_bits_raw>:
{
40083448:	004136        	entry	a1, 32
	*data->port.set_reg = pins;
4008344b:	3288      	l32i.n	a8, a2, 12
}
4008344d:	020c      	movi.n	a2, 0
	*data->port.set_reg = pins;
4008344f:	2888      	l32i.n	a8, a8, 8
40083451:	0020c0        	memw
40083454:	0839      	s32i.n	a3, a8, 0
}
40083456:	f01d      	retw.n

40083458 <gpio_esp32_port_clear_bits_raw>:
{
40083458:	004136        	entry	a1, 32
	*data->port.clear_reg = pins;
4008345b:	3288      	l32i.n	a8, a2, 12
}
4008345d:	020c      	movi.n	a2, 0
	*data->port.clear_reg = pins;
4008345f:	3888      	l32i.n	a8, a8, 12
40083461:	0020c0        	memw
40083464:	0839      	s32i.n	a3, a8, 0
}
40083466:	f01d      	retw.n

40083468 <gpio_esp32_port_toggle_bits>:
{
40083468:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = port->data;
4008346b:	3288      	l32i.n	a8, a2, 12
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008346d:	0063a0        	rsil	a10, 3
	*data->port.output_reg = (*data->port.output_reg ^ pins);
40083470:	5898      	l32i.n	a9, a8, 20
40083472:	0020c0        	memw
40083475:	0988      	l32i.n	a8, a9, 0
40083477:	308830        	xor	a8, a8, a3
4008347a:	0020c0        	memw
4008347d:	0989      	s32i.n	a8, a9, 0
	XTOS_RESTORE_INTLEVEL(key);
4008347f:	13e6a0        	wsr.ps	a10
40083482:	002010        	rsync
}
40083485:	020c      	movi.n	a2, 0
40083487:	f01d      	retw.n
40083489:	000000        	ill

4008348c <gpio_esp32_manage_callback>:
{
4008348c:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = dev->data;
4008348f:	3288      	l32i.n	a8, a2, 12
{
40083491:	744040        	extui	a4, a4, 0, 8
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
40083494:	9828      	l32i.n	a2, a8, 36
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
40083496:	090c      	movi.n	a9, 0
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
40083498:	42cc      	bnez.n	a2, 400834a0 <gpio_esp32_manage_callback+0x14>
4008349a:	000fc6        	j	400834dd <gpio_esp32_manage_callback+0x51>
4008349d:	0a2d00        	add.s	f2, f13, f0
400834a0:	209327        	bne	a3, a2, 400834c4 <gpio_esp32_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
400834a3:	0328      	l32i.n	a2, a3, 0
400834a5:	b9cc      	bnez.n	a9, 400834b4 <gpio_esp32_manage_callback+0x28>
400834a7:	a898      	l32i.n	a9, a8, 40
	list->head = node;
400834a9:	9829      	s32i.n	a2, a8, 36
Z_GENLIST_REMOVE(slist, snode)
400834ab:	0e9397        	bne	a3, a9, 400834bd <gpio_esp32_manage_callback+0x31>
	list->tail = node;
400834ae:	a829      	s32i.n	a2, a8, 40
400834b0:	000246        	j	400834bd <gpio_esp32_manage_callback+0x31>
400834b3:	092900        	l32e	a0, a9, -56
Z_GENLIST_REMOVE(slist, snode)
400834b6:	a828      	l32i.n	a2, a8, 40
400834b8:	019327        	bne	a3, a2, 400834bd <gpio_esp32_manage_callback+0x31>
	list->tail = node;
400834bb:	a899      	s32i.n	a9, a8, 40
	parent->next = child;
400834bd:	020c      	movi.n	a2, 0
400834bf:	0329      	s32i.n	a2, a3, 0
400834c1:	000606        	j	400834dd <gpio_esp32_manage_callback+0x51>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
400834c4:	02a8      	l32i.n	a10, a2, 0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
400834c6:	029d      	mov.n	a9, a2
400834c8:	fd2a56        	bnez	a10, 4008349e <gpio_esp32_manage_callback+0x12>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
			if (!set) {
				return -EINVAL;
400834cb:	a26c      	movi.n	a2, -22
			if (!set) {
400834cd:	017416        	beqz	a4, 400834e8 <gpio_esp32_manage_callback+0x5c>
Z_GENLIST_PREPEND(slist, snode)
400834d0:	9828      	l32i.n	a2, a8, 36
	parent->next = child;
400834d2:	0329      	s32i.n	a2, a3, 0
Z_GENLIST_PREPEND(slist, snode)
400834d4:	a828      	l32i.n	a2, a8, 40
	list->head = node;
400834d6:	9839      	s32i.n	a3, a8, 36
Z_GENLIST_PREPEND(slist, snode)
400834d8:	42cc      	bnez.n	a2, 400834e0 <gpio_esp32_manage_callback+0x54>
400834da:	000206        	j	400834e6 <gpio_esp32_manage_callback+0x5a>
			}
		}
	}

	if (set) {
400834dd:	fef456        	bnez	a4, 400834d0 <gpio_esp32_manage_callback+0x44>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
400834e0:	020c      	movi.n	a2, 0
400834e2:	000086        	j	400834e8 <gpio_esp32_manage_callback+0x5c>
400834e5:	a83900        	lsi	f0, a9, 0x2a0
}
400834e8:	f01d      	retw.n
	...

400834ec <gpio_esp32_fire_callbacks>:
{
400834ec:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = device->data;
400834ef:	3238      	l32i.n	a3, a2, 12
	uint32_t irq_status = *data->port.irq_status_reg;
400834f1:	6348      	l32i.n	a4, a3, 24
	*data->port.irq_ack_reg = irq_status;
400834f3:	7388      	l32i.n	a8, a3, 28
	uint32_t irq_status = *data->port.irq_status_reg;
400834f5:	0020c0        	memw
400834f8:	0448      	l32i.n	a4, a4, 0
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
400834fa:	93b8      	l32i.n	a11, a3, 36
	*data->port.irq_ack_reg = irq_status;
400834fc:	0020c0        	memw
400834ff:	0849      	s32i.n	a4, a8, 0
40083501:	8b9c      	beqz.n	a11, 4008351d <gpio_esp32_fire_callbacks+0x31>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
40083503:	0b38      	l32i.n	a3, a11, 0
		if (cb->pin_mask & pins) {
40083505:	2bc8      	l32i.n	a12, a11, 8
40083507:	10c4c0        	and	a12, a4, a12
4008350a:	6c8c      	beqz.n	a12, 40083514 <gpio_esp32_fire_callbacks+0x28>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
4008350c:	1b88      	l32i.n	a8, a11, 4
4008350e:	20a220        	or	a10, a2, a2
40083511:	0008e0        	callx8	a8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
40083514:	538c      	beqz.n	a3, 4008351d <gpio_esp32_fire_callbacks+0x31>
40083516:	03bd      	mov.n	a11, a3
40083518:	0338      	l32i.n	a3, a3, 0
4008351a:	fff9c6        	j	40083505 <gpio_esp32_fire_callbacks+0x19>
}
4008351d:	f01d      	retw.n
	...

40083520 <i2c_esp32_connect_irq_0>:
{
40083520:	004136        	entry	a1, 32
}
40083523:	f01d      	retw.n
40083525:	000000        	ill

40083528 <uart_esp32_poll_in>:
{
40083528:	004136        	entry	a1, 32
	if (UART_RXFIFO_COUNT(DEV_BASE(dev)->status) == 0) {
4008352b:	1228      	l32i.n	a2, a2, 4
4008352d:	0298      	l32i.n	a9, a2, 0
		return -1;
4008352f:	f27c      	movi.n	a2, -1
	if (UART_RXFIFO_COUNT(DEV_BASE(dev)->status) == 0) {
40083531:	0020c0        	memw
40083534:	7988      	l32i.n	a8, a9, 28
40083536:	748080        	extui	a8, a8, 0, 8
40083539:	888c      	beqz.n	a8, 40083545 <uart_esp32_poll_in+0x1d>
	*p_char = DEV_BASE(dev)->fifo;
4008353b:	0020c0        	memw
4008353e:	0928      	l32i.n	a2, a9, 0
40083540:	004322        	s8i	a2, a3, 0
	return 0;
40083543:	020c      	movi.n	a2, 0
}
40083545:	f01d      	retw.n
	...

40083548 <uart_esp32_poll_out>:
{
40083548:	004136        	entry	a1, 32
	while (UART_TXFIFO_COUNT(DEV_BASE(dev)->status) >= UART_FIFO_LIMIT) {
4008354b:	1288      	l32i.n	a8, a2, 4
{
4008354d:	743030        	extui	a3, a3, 0, 8
	while (UART_TXFIFO_COUNT(DEV_BASE(dev)->status) >= UART_FIFO_LIMIT) {
40083550:	0898      	l32i.n	a9, a8, 0
40083552:	7ea0a2        	movi	a10, 126
40083555:	0020c0        	memw
40083558:	7988      	l32i.n	a8, a9, 28
4008355a:	758080        	extui	a8, a8, 16, 8
4008355d:	f43a87        	bltu	a10, a8, 40083555 <uart_esp32_poll_out+0xd>
	DEV_BASE(dev)->fifo = (uint32_t)c;
40083560:	0020c0        	memw
40083563:	0939      	s32i.n	a3, a9, 0
}
40083565:	f01d      	retw.n
	...

40083568 <uart_esp32_err_check>:
{
40083568:	004136        	entry	a1, 32
	uint32_t err = UART_GET_PARITY_ERR(DEV_BASE(dev)->int_st)
4008356b:	1228      	l32i.n	a2, a2, 4
4008356d:	0288      	l32i.n	a8, a2, 0
4008356f:	0020c0        	memw
40083572:	2828      	l32i.n	a2, a8, 8
		    | UART_GET_FRAME_ERR(DEV_BASE(dev)->int_st);
40083574:	0020c0        	memw
40083577:	2888      	l32i.n	a8, a8, 8
	uint32_t err = UART_GET_PARITY_ERR(DEV_BASE(dev)->int_st)
40083579:	412220        	srli	a2, a2, 2
		    | UART_GET_FRAME_ERR(DEV_BASE(dev)->int_st);
4008357c:	418380        	srli	a8, a8, 3
4008357f:	202280        	or	a2, a2, a8
}
40083582:	042020        	extui	a2, a2, 0, 1
40083585:	f01d      	retw.n
	...

40083588 <uart_esp32_config_get>:
{
40083588:	004136        	entry	a1, 32
	cfg->baudrate = data->uart_config.baudrate;
4008358b:	3288      	l32i.n	a8, a2, 12
	if (UART_GET_PARITY_EN(DEV_BASE(dev)->conf0)) {
4008358d:	1228      	l32i.n	a2, a2, 4
	cfg->baudrate = data->uart_config.baudrate;
4008358f:	0888      	l32i.n	a8, a8, 0
		cfg->parity = UART_CFG_PARITY_NONE;
40083591:	090c      	movi.n	a9, 0
	cfg->baudrate = data->uart_config.baudrate;
40083593:	0389      	s32i.n	a8, a3, 0
	if (UART_GET_PARITY_EN(DEV_BASE(dev)->conf0)) {
40083595:	0288      	l32i.n	a8, a2, 0
40083597:	0020c0        	memw
4008359a:	082822        	l32i	a2, a8, 32
4008359d:	076217        	bbci	a2, 1, 400835a8 <uart_esp32_config_get+0x20>
		cfg->parity = UART_GET_PARITY(DEV_BASE(dev)->conf0);
400835a0:	0020c0        	memw
400835a3:	8898      	l32i.n	a9, a8, 32
400835a5:	049090        	extui	a9, a9, 0, 1
400835a8:	044392        	s8i	a9, a3, 4
	cfg->stop_bits = UART_GET_STOP_BITS(DEV_BASE(dev)->conf0);
400835ab:	0020c0        	memw
400835ae:	8898      	l32i.n	a9, a8, 32
400835b0:	149490        	extui	a9, a9, 4, 2
400835b3:	054392        	s8i	a9, a3, 5
	cfg->data_bits = UART_GET_DATA_BITS(DEV_BASE(dev)->conf0);
400835b6:	0020c0        	memw
400835b9:	082892        	l32i	a9, a8, 32
400835bc:	149290        	extui	a9, a9, 2, 2
400835bf:	064392        	s8i	a9, a3, 6
	if (UART_GET_TX_FLOW(DEV_BASE(dev)->conf0)) {
400835c2:	0020c0        	memw
400835c5:	8828      	l32i.n	a2, a8, 32
400835c7:	0562f7        	bbci	a2, 15, 400835d0 <uart_esp32_config_get+0x48>
		cfg->flow_ctrl = UART_CFG_FLOW_CTRL_RTS_CTS;
400835ca:	01a022        	movi	a2, 1
400835cd:	074322        	s8i	a2, a3, 7
	if (UART_GET_RX_FLOW(DEV_BASE(dev)->conf1)) {
400835d0:	0020c0        	memw
400835d3:	9828      	l32i.n	a2, a8, 36
400835d5:	047277        	bbci	a2, 23, 400835dd <uart_esp32_config_get+0x55>
		cfg->flow_ctrl = UART_CFG_FLOW_CTRL_DTR_DSR;
400835d8:	220c      	movi.n	a2, 2
400835da:	074322        	s8i	a2, a3, 7
}
400835dd:	020c      	movi.n	a2, 0
400835df:	f01d      	retw.n
400835e1:	000000        	ill

400835e4 <arch_system_halt>:
{
400835e4:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400835e7:	006380        	rsil	a8, 3
	for (;;) {
400835ea:	ffff06        	j	400835ea <arch_system_halt+0x6>
400835ed:	000000        	ill

400835f0 <sys_dlist_remove>:
{
400835f0:	004136        	entry	a1, 32
	node->prev->next = node->next;
400835f3:	0288      	l32i.n	a8, a2, 0
400835f5:	1298      	l32i.n	a9, a2, 4
400835f7:	0989      	s32i.n	a8, a9, 0
	node->next->prev = node->prev;
400835f9:	1899      	s32i.n	a9, a8, 4
	node->next = NULL;
400835fb:	080c      	movi.n	a8, 0
400835fd:	0289      	s32i.n	a8, a2, 0
	node->prev = NULL;
400835ff:	1289      	s32i.n	a8, a2, 4
	sys_dnode_init(node);
}
40083601:	f01d      	retw.n
	...

40083604 <z_priq_dumb_best>:
{
40083604:	004136        	entry	a1, 32
	return list->head == list;
40083607:	0288      	l32i.n	a8, a2, 0
	if (n != NULL) {
40083609:	188c      	beqz.n	a8, 4008360e <z_priq_dumb_best+0xa>
4008360b:	019287        	bne	a2, a8, 40083610 <z_priq_dumb_best+0xc>
	struct k_thread *thread = NULL;
4008360e:	080c      	movi.n	a8, 0
}
40083610:	082d      	mov.n	a2, a8
40083612:	f01d      	retw.n

40083614 <z_impl_k_sem_init>:
{
40083614:	004136        	entry	a1, 32
	CHECKIF(limit == 0U || initial_count > limit) {
40083617:	180c      	movi.n	a8, 1
40083619:	090c      	movi.n	a9, 0
4008361b:	938940        	movnez	a8, a9, a4
4008361e:	748080        	extui	a8, a8, 0, 8
40083621:	0f9897        	bne	a8, a9, 40083634 <z_impl_k_sem_init+0x20>
40083624:	0c3437        	bltu	a4, a3, 40083634 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
40083627:	2239      	s32i.n	a3, a2, 8
	sem->limit = limit;
40083629:	3249      	s32i.n	a4, a2, 12
	list->head = (sys_dnode_t *)list;
4008362b:	0229      	s32i.n	a2, a2, 0
	list->tail = (sys_dnode_t *)list;
4008362d:	1229      	s32i.n	a2, a2, 4
	return 0;
4008362f:	082d      	mov.n	a2, a8
40083631:	000046        	j	40083636 <z_impl_k_sem_init+0x22>
		return -EINVAL;
40083634:	a26c      	movi.n	a2, -22
}
40083636:	f01d      	retw.n

40083638 <_OffsetAbsSyms>:
/*
 * The final link step uses the symbol _OffsetAbsSyms to force the linkage of
 * offsets.o into the ELF image.
 */

GEN_ABS_SYM_BEGIN(_OffsetAbsSyms)
40083638:	004136        	entry	a1, 32
/* size of the struct k_thread structure without save area for coproc regs */
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF,
		 sizeof(struct k_thread) - sizeof(tCoopCoprocReg) -
			 sizeof(tPreempCoprocReg) + XT_CP_DESCR_SIZE);

GEN_ABS_SYM_END
4008363b:	f01d      	retw.n
4008363d:	000000        	ill

40083640 <__udivdi3>:
40083640:	004136        	entry	a1, 32
40083643:	03dd      	mov.n	a13, a3
40083645:	04ad      	mov.n	a10, a4
40083647:	053d      	mov.n	a3, a5
40083649:	02cd      	mov.n	a12, a2
4008364b:	0d9d      	mov.n	a9, a13
4008364d:	184556        	bnez	a5, 400837d5 <__udivdi3+0x195>
40083650:	023d47        	bltu	a13, a4, 40083656 <__udivdi3+0x16>
40083653:	002086        	j	400836d9 <__udivdi3+0x99>
40083656:	40f420        	nsau	a2, a4
40083659:	c29c      	beqz.n	a2, 40083679 <__udivdi3+0x39>
4008365b:	608020        	neg	a8, a2
4008365e:	400800        	ssr	a8
40083661:	9180c0        	srl	a8, a12
40083664:	401200        	ssl	a2
40083667:	a19d00        	sll	a9, a13
4008366a:	401200        	ssl	a2
4008366d:	a1a400        	sll	a10, a4
40083670:	209890        	or	a9, a8, a9
40083673:	401200        	ssl	a2
40083676:	a1cc00        	sll	a12, a12
40083679:	f580a0        	extui	a8, a10, 16, 16
4008367c:	e2d980        	remu	a13, a9, a8
4008367f:	f440a0        	extui	a4, a10, 0, 16
40083682:	c29980        	quou	a9, a9, a8
40083685:	11dd00        	slli	a13, a13, 16
40083688:	f5b0c0        	extui	a11, a12, 16, 16
4008368b:	822490        	mull	a2, a4, a9
4008368e:	20bdb0        	or	a11, a13, a11
40083691:	13bb27        	bgeu	a11, a2, 400836a8 <__udivdi3+0x68>
40083694:	bbaa      	add.n	a11, a11, a10
40083696:	590b      	addi.n	a5, a9, -1
40083698:	0a3ba7        	bltu	a11, a10, 400836a6 <__udivdi3+0x66>
4008369b:	07bb27        	bgeu	a11, a2, 400836a6 <__udivdi3+0x66>
4008369e:	fec992        	addi	a9, a9, -2
400836a1:	bbaa      	add.n	a11, a11, a10
400836a3:	000046        	j	400836a8 <__udivdi3+0x68>
400836a6:	059d      	mov.n	a9, a5
400836a8:	c0bb20        	sub	a11, a11, a2
400836ab:	e22b80        	remu	a2, a11, a8
400836ae:	c2bb80        	quou	a11, a11, a8
400836b1:	112200        	slli	a2, a2, 16
400836b4:	f4c0c0        	extui	a12, a12, 0, 16
400836b7:	8244b0        	mull	a4, a4, a11
400836ba:	20c2c0        	or	a12, a2, a12
400836bd:	0fbc47        	bgeu	a12, a4, 400836d0 <__udivdi3+0x90>
400836c0:	caca      	add.n	a12, a10, a12
400836c2:	ffcb22        	addi	a2, a11, -1
400836c5:	05bc47        	bgeu	a12, a4, 400836ce <__udivdi3+0x8e>
400836c8:	fecbb2        	addi	a11, a11, -2
400836cb:	01bca7        	bgeu	a12, a10, 400836d0 <__udivdi3+0x90>
400836ce:	02bd      	mov.n	a11, a2
400836d0:	118900        	slli	a8, a9, 16
400836d3:	2088b0        	or	a8, a8, a11
400836d6:	007406        	j	400838aa <__udivdi3+0x26a>
400836d9:	34cc      	bnez.n	a4, 400836e0 <__udivdi3+0xa0>
400836db:	130c      	movi.n	a3, 1
400836dd:	c2a340        	quou	a10, a3, a4
400836e0:	40fa50        	nsau	a5, a10
400836e3:	c08da0        	sub	a8, a13, a10
400836e6:	130c      	movi.n	a3, 1
400836e8:	089516        	beqz	a5, 40083775 <__udivdi3+0x135>
400836eb:	042c      	movi.n	a4, 32
400836ed:	c04450        	sub	a4, a4, a5
400836f0:	401500        	ssl	a5
400836f3:	a1aa00        	sll	a10, a10
400836f6:	400400        	ssr	a4
400836f9:	9130d0        	srl	a3, a13
400836fc:	401500        	ssl	a5
400836ff:	a18d00        	sll	a8, a13
40083702:	400400        	ssr	a4
40083705:	914020        	srl	a4, a2
40083708:	401500        	ssl	a5
4008370b:	a1c200        	sll	a12, a2
4008370e:	f520a0        	extui	a2, a10, 16, 16
40083711:	204480        	or	a4, a4, a8
40083714:	e2b320        	remu	a11, a3, a2
40083717:	f480a0        	extui	a8, a10, 0, 16
4008371a:	c23320        	quou	a3, a3, a2
4008371d:	11bb00        	slli	a11, a11, 16
40083720:	f59040        	extui	a9, a4, 16, 16
40083723:	825830        	mull	a5, a8, a3
40083726:	209b90        	or	a9, a11, a9
40083729:	13b957        	bgeu	a9, a5, 40083740 <__udivdi3+0x100>
4008372c:	99aa      	add.n	a9, a9, a10
4008372e:	b30b      	addi.n	a11, a3, -1
40083730:	0a39a7        	bltu	a9, a10, 4008373e <__udivdi3+0xfe>
40083733:	07b957        	bgeu	a9, a5, 4008373e <__udivdi3+0xfe>
40083736:	fec332        	addi	a3, a3, -2
40083739:	99aa      	add.n	a9, a9, a10
4008373b:	000046        	j	40083740 <__udivdi3+0x100>
4008373e:	0b3d      	mov.n	a3, a11
40083740:	c09950        	sub	a9, a9, a5
40083743:	e2b920        	remu	a11, a9, a2
40083746:	c29920        	quou	a9, a9, a2
40083749:	822890        	mull	a2, a8, a9
4008374c:	11bb00        	slli	a11, a11, 16
4008374f:	f48040        	extui	a8, a4, 0, 16
40083752:	208b80        	or	a8, a11, a8
40083755:	13b827        	bgeu	a8, a2, 4008376c <__udivdi3+0x12c>
40083758:	88aa      	add.n	a8, a8, a10
4008375a:	490b      	addi.n	a4, a9, -1
4008375c:	0a38a7        	bltu	a8, a10, 4008376a <__udivdi3+0x12a>
4008375f:	07b827        	bgeu	a8, a2, 4008376a <__udivdi3+0x12a>
40083762:	fec992        	addi	a9, a9, -2
40083765:	88aa      	add.n	a8, a8, a10
40083767:	000046        	j	4008376c <__udivdi3+0x12c>
4008376a:	049d      	mov.n	a9, a4
4008376c:	113300        	slli	a3, a3, 16
4008376f:	c08820        	sub	a8, a8, a2
40083772:	203390        	or	a3, a3, a9
40083775:	f550a0        	extui	a5, a10, 16, 16
40083778:	e2b850        	remu	a11, a8, a5
4008377b:	f440a0        	extui	a4, a10, 0, 16
4008377e:	c28850        	quou	a8, a8, a5
40083781:	11bb00        	slli	a11, a11, 16
40083784:	f590c0        	extui	a9, a12, 16, 16
40083787:	822480        	mull	a2, a4, a8
4008378a:	209b90        	or	a9, a11, a9
4008378d:	13b927        	bgeu	a9, a2, 400837a4 <__udivdi3+0x164>
40083790:	99aa      	add.n	a9, a9, a10
40083792:	b80b      	addi.n	a11, a8, -1
40083794:	0a39a7        	bltu	a9, a10, 400837a2 <__udivdi3+0x162>
40083797:	07b927        	bgeu	a9, a2, 400837a2 <__udivdi3+0x162>
4008379a:	fec882        	addi	a8, a8, -2
4008379d:	99aa      	add.n	a9, a9, a10
4008379f:	000046        	j	400837a4 <__udivdi3+0x164>
400837a2:	0b8d      	mov.n	a8, a11
400837a4:	c09920        	sub	a9, a9, a2
400837a7:	e22950        	remu	a2, a9, a5
400837aa:	c29950        	quou	a9, a9, a5
400837ad:	112200        	slli	a2, a2, 16
400837b0:	f4c0c0        	extui	a12, a12, 0, 16
400837b3:	824490        	mull	a4, a4, a9
400837b6:	20c2c0        	or	a12, a2, a12
400837b9:	0fbc47        	bgeu	a12, a4, 400837cc <__udivdi3+0x18c>
400837bc:	caca      	add.n	a12, a10, a12
400837be:	ffc922        	addi	a2, a9, -1
400837c1:	053ca7        	bltu	a12, a10, 400837ca <__udivdi3+0x18a>
400837c4:	fec992        	addi	a9, a9, -2
400837c7:	013c47        	bltu	a12, a4, 400837cc <__udivdi3+0x18c>
400837ca:	029d      	mov.n	a9, a2
400837cc:	118800        	slli	a8, a8, 16
400837cf:	208890        	or	a8, a8, a9
400837d2:	003506        	j	400838aa <__udivdi3+0x26a>
400837d5:	030c      	movi.n	a3, 0
400837d7:	038d      	mov.n	a8, a3
400837d9:	02bd57        	bgeu	a13, a5, 400837df <__udivdi3+0x19f>
400837dc:	003286        	j	400838aa <__udivdi3+0x26a>
400837df:	40f5b0        	nsau	a11, a5
400837e2:	179b37        	bne	a11, a3, 400837fd <__udivdi3+0x1bd>
400837e5:	180c      	movi.n	a8, 1
400837e7:	0235d7        	bltu	a5, a13, 400837ed <__udivdi3+0x1ad>
400837ea:	208bb0        	or	a8, a11, a11
400837ed:	130c      	movi.n	a3, 1
400837ef:	01b247        	bgeu	a2, a4, 400837f4 <__udivdi3+0x1b4>
400837f2:	030c      	movi.n	a3, 0
400837f4:	208830        	or	a8, a8, a3
400837f7:	748080        	extui	a8, a8, 0, 8
400837fa:	002a86        	j	400838a8 <__udivdi3+0x268>
400837fd:	092c      	movi.n	a9, 32
400837ff:	c099b0        	sub	a9, a9, a11
40083802:	400900        	ssr	a9
40083805:	913040        	srl	a3, a4
40083808:	401b00        	ssl	a11
4008380b:	a15500        	sll	a5, a5
4008380e:	205350        	or	a5, a3, a5
40083811:	400900        	ssr	a9
40083814:	9180d0        	srl	a8, a13
40083817:	401b00        	ssl	a11
4008381a:	a13d00        	sll	a3, a13
4008381d:	400900        	ssr	a9
40083820:	919020        	srl	a9, a2
40083823:	f5d050        	extui	a13, a5, 16, 16
40083826:	203930        	or	a3, a9, a3
40083829:	f4c050        	extui	a12, a5, 0, 16
4008382c:	e298d0        	remu	a9, a8, a13
4008382f:	c288d0        	quou	a8, a8, a13
40083832:	119900        	slli	a9, a9, 16
40083835:	f5e030        	extui	a14, a3, 16, 16
40083838:	82ac80        	mull	a10, a12, a8
4008383b:	2099e0        	or	a9, a9, a14
4008383e:	401b00        	ssl	a11
40083841:	a14400        	sll	a4, a4
40083844:	14b9a7        	bgeu	a9, a10, 4008385c <__udivdi3+0x21c>
40083847:	995a      	add.n	a9, a9, a5
40083849:	e80b      	addi.n	a14, a8, -1
4008384b:	0bb9a7        	bgeu	a9, a10, 4008385a <__udivdi3+0x21a>
4008384e:	083957        	bltu	a9, a5, 4008385a <__udivdi3+0x21a>
40083851:	fec882        	addi	a8, a8, -2
40083854:	995a      	add.n	a9, a9, a5
40083856:	000086        	j	4008385c <__udivdi3+0x21c>
40083859:	0e8d00        	lsi	f0, a13, 56
4008385c:	c0a9a0        	sub	a10, a9, a10
4008385f:	e29ad0        	remu	a9, a10, a13
40083862:	c2aad0        	quou	a10, a10, a13
40083865:	119900        	slli	a9, a9, 16
40083868:	f43030        	extui	a3, a3, 0, 16
4008386b:	82cca0        	mull	a12, a12, a10
4008386e:	203930        	or	a3, a9, a3
40083871:	13b3c7        	bgeu	a3, a12, 40083888 <__udivdi3+0x248>
40083874:	335a      	add.n	a3, a3, a5
40083876:	9a0b      	addi.n	a9, a10, -1
40083878:	0a3357        	bltu	a3, a5, 40083886 <__udivdi3+0x246>
4008387b:	07b3c7        	bgeu	a3, a12, 40083886 <__udivdi3+0x246>
4008387e:	fecaa2        	addi	a10, a10, -2
40083881:	335a      	add.n	a3, a3, a5
40083883:	000046        	j	40083888 <__udivdi3+0x248>
40083886:	09ad      	mov.n	a10, a9
40083888:	118800        	slli	a8, a8, 16
4008388b:	2088a0        	or	a8, a8, a10
4008388e:	825840        	mull	a5, a8, a4
40083891:	a24840        	muluh	a4, a8, a4
40083894:	c033c0        	sub	a3, a3, a12
40083897:	0b3347        	bltu	a3, a4, 400838a6 <__udivdi3+0x266>
4008389a:	401b00        	ssl	a11
4008389d:	a12200        	sll	a2, a2
400838a0:	04b257        	bgeu	a2, a5, 400838a8 <__udivdi3+0x268>
400838a3:	019347        	bne	a3, a4, 400838a8 <__udivdi3+0x268>
400838a6:	880b      	addi.n	a8, a8, -1
400838a8:	030c      	movi.n	a3, 0
400838aa:	082d      	mov.n	a2, a8
400838ac:	f01d      	retw.n
	...

400838b0 <__umoddi3>:
400838b0:	004136        	entry	a1, 32
400838b3:	04bd      	mov.n	a11, a4
400838b5:	208220        	or	a8, a2, a2
400838b8:	039d      	mov.n	a9, a3
400838ba:	152556        	bnez	a5, 40083a10 <__umoddi3+0x160>
400838bd:	71b347        	bgeu	a3, a4, 40083932 <__umoddi3+0x82>
400838c0:	40f4a0        	nsau	a10, a4
400838c3:	01da16        	beqz	a10, 400838e4 <__umoddi3+0x34>
400838c6:	401a00        	ssl	a10
400838c9:	a19300        	sll	a9, a3
400838cc:	6030a0        	neg	a3, a10
400838cf:	400300        	ssr	a3
400838d2:	913020        	srl	a3, a2
400838d5:	401a00        	ssl	a10
400838d8:	a1b400        	sll	a11, a4
400838db:	209390        	or	a9, a3, a9
400838de:	401a00        	ssl	a10
400838e1:	a18200        	sll	a8, a2
400838e4:	f540b0        	extui	a4, a11, 16, 16
400838e7:	e23940        	remu	a3, a9, a4
400838ea:	f420b0        	extui	a2, a11, 0, 16
400838ed:	c29940        	quou	a9, a9, a4
400838f0:	113300        	slli	a3, a3, 16
400838f3:	f55080        	extui	a5, a8, 16, 16
400838f6:	829290        	mull	a9, a2, a9
400838f9:	203350        	or	a3, a3, a5
400838fc:	09b397        	bgeu	a3, a9, 40083909 <__umoddi3+0x59>
400838ff:	33ba      	add.n	a3, a3, a11
40083901:	0433b7        	bltu	a3, a11, 40083909 <__umoddi3+0x59>
40083904:	01b397        	bgeu	a3, a9, 40083909 <__umoddi3+0x59>
40083907:	33ba      	add.n	a3, a3, a11
40083909:	c09390        	sub	a9, a3, a9
4008390c:	e23940        	remu	a3, a9, a4
4008390f:	c29940        	quou	a9, a9, a4
40083912:	829290        	mull	a9, a2, a9
40083915:	f48080        	extui	a8, a8, 0, 16
40083918:	112300        	slli	a2, a3, 16
4008391b:	208280        	or	a8, a2, a8
4008391e:	0ab897        	bgeu	a8, a9, 4008392c <__umoddi3+0x7c>
40083921:	88ba      	add.n	a8, a8, a11
40083923:	05b897        	bgeu	a8, a9, 4008392c <__umoddi3+0x7c>
40083926:	0238b7        	bltu	a8, a11, 4008392c <__umoddi3+0x7c>
40083929:	8088b0        	add	a8, a8, a11
4008392c:	c08890        	sub	a8, a8, a9
4008392f:	003406        	j	40083a03 <__umoddi3+0x153>
40083932:	34cc      	bnez.n	a4, 40083939 <__umoddi3+0x89>
40083934:	140c      	movi.n	a4, 1
40083936:	c2b4b0        	quou	a11, a4, a11
40083939:	40fba0        	nsau	a10, a11
4008393c:	5acc      	bnez.n	a10, 40083945 <__umoddi3+0x95>
4008393e:	c033b0        	sub	a3, a3, a11
40083941:	001c86        	j	400839b7 <__umoddi3+0x107>
40083944:	042c00        	extui	a2, a0, 12, 1
40083947:	c044a0        	sub	a4, a4, a10
4008394a:	401a00        	ssl	a10
4008394d:	a1bb00        	sll	a11, a11
40083950:	400400        	ssr	a4
40083953:	915030        	srl	a5, a3
40083956:	f5c0b0        	extui	a12, a11, 16, 16
40083959:	401a00        	ssl	a10
4008395c:	a13300        	sll	a3, a3
4008395f:	400400        	ssr	a4
40083962:	914020        	srl	a4, a2
40083965:	204430        	or	a4, a4, a3
40083968:	401a00        	ssl	a10
4008396b:	a18200        	sll	a8, a2
4008396e:	f430b0        	extui	a3, a11, 0, 16
40083971:	e225c0        	remu	a2, a5, a12
40083974:	c255c0        	quou	a5, a5, a12
40083977:	112200        	slli	a2, a2, 16
4008397a:	f59040        	extui	a9, a4, 16, 16
4008397d:	825350        	mull	a5, a3, a5
40083980:	202290        	or	a2, a2, a9
40083983:	09b257        	bgeu	a2, a5, 40083990 <__umoddi3+0xe0>
40083986:	22ba      	add.n	a2, a2, a11
40083988:	0432b7        	bltu	a2, a11, 40083990 <__umoddi3+0xe0>
4008398b:	01b257        	bgeu	a2, a5, 40083990 <__umoddi3+0xe0>
4008398e:	22ba      	add.n	a2, a2, a11
40083990:	c09250        	sub	a9, a2, a5
40083993:	e229c0        	remu	a2, a9, a12
40083996:	c299c0        	quou	a9, a9, a12
40083999:	829390        	mull	a9, a3, a9
4008399c:	112200        	slli	a2, a2, 16
4008399f:	f43040        	extui	a3, a4, 0, 16
400839a2:	203230        	or	a3, a2, a3
400839a5:	0bb397        	bgeu	a3, a9, 400839b4 <__umoddi3+0x104>
400839a8:	8033b0        	add	a3, a3, a11
400839ab:	05b397        	bgeu	a3, a9, 400839b4 <__umoddi3+0x104>
400839ae:	0233b7        	bltu	a3, a11, 400839b4 <__umoddi3+0x104>
400839b1:	8033b0        	add	a3, a3, a11
400839b4:	c03390        	sub	a3, a3, a9
400839b7:	f540b0        	extui	a4, a11, 16, 16
400839ba:	e29340        	remu	a9, a3, a4
400839bd:	f420b0        	extui	a2, a11, 0, 16
400839c0:	c23340        	quou	a3, a3, a4
400839c3:	119900        	slli	a9, a9, 16
400839c6:	f55080        	extui	a5, a8, 16, 16
400839c9:	823230        	mull	a3, a2, a3
400839cc:	209950        	or	a9, a9, a5
400839cf:	09b937        	bgeu	a9, a3, 400839dc <__umoddi3+0x12c>
400839d2:	99ba      	add.n	a9, a9, a11
400839d4:	0439b7        	bltu	a9, a11, 400839dc <__umoddi3+0x12c>
400839d7:	01b937        	bgeu	a9, a3, 400839dc <__umoddi3+0x12c>
400839da:	99ba      	add.n	a9, a9, a11
400839dc:	c03930        	sub	a3, a9, a3
400839df:	e25340        	remu	a5, a3, a4
400839e2:	c23340        	quou	a3, a3, a4
400839e5:	823230        	mull	a3, a2, a3
400839e8:	f48080        	extui	a8, a8, 0, 16
400839eb:	112500        	slli	a2, a5, 16
400839ee:	208280        	or	a8, a2, a8
400839f1:	0bb837        	bgeu	a8, a3, 40083a00 <__umoddi3+0x150>
400839f4:	8088b0        	add	a8, a8, a11
400839f7:	05b837        	bgeu	a8, a3, 40083a00 <__umoddi3+0x150>
400839fa:	0238b7        	bltu	a8, a11, 40083a00 <__umoddi3+0x150>
400839fd:	8088b0        	add	a8, a8, a11
40083a00:	c08830        	sub	a8, a8, a3
40083a03:	400a00        	ssr	a10
40083a06:	912080        	srl	a2, a8
40083a09:	030c      	movi.n	a3, 0
40083a0b:	004446        	j	40083b20 <__umoddi3+0x270>
40083a0e:	570000        	lsi	f0, a0, 0x15c
40083a11:	4602b3        	lsi	f11, a2, 0x118
40083a14:	c00042        	l8ui	a4, a0, 192
40083a17:	dc40f5        	call12	4005fe24 <esp32_rom_gpio_matrix_out+0x55f18>
40083a1a:	37dc      	bnez.n	a7, 40083a31 <__umoddi3+0x181>
40083a1c:	470235        	call12	400caa40 <_iram_text_end+0x46f1e>
40083a1f:	401132        	l16ui	a3, a1, 128
40083a22:	50c082        	addi	a8, a0, 80
40083a25:	92c033        	ssip	f3, a0, 0x248
40083a28:	8701a0        	lsi	f10, a1, 0x21c
40083a2b:	920232        	l8ui	a3, a2, 146
40083a2e:	9000a0        	addx2	a0, a0, a10
40083a31:	2dc093        	ssip	f9, a0, 180
40083a34:	3d08      	l32i.n	a0, a13, 12
40083a36:	4609      	s32i.n	a0, a6, 16
40083a38:	0039      	s32i.n	a3, a0, 0
40083a3a:	092c      	movi.n	a9, 32
40083a3c:	c099c0        	sub	a9, a9, a12
40083a3f:	400900        	ssr	a9
40083a42:	91a040        	srl	a10, a4
40083a45:	401c00        	ssl	a12
40083a48:	a15500        	sll	a5, a5
40083a4b:	205a50        	or	a5, a10, a5
40083a4e:	400900        	ssr	a9
40083a51:	91d020        	srl	a13, a2
40083a54:	400900        	ssr	a9
40083a57:	91a030        	srl	a10, a3
40083a5a:	f5e050        	extui	a14, a5, 16, 16
40083a5d:	401c00        	ssl	a12
40083a60:	a13300        	sll	a3, a3
40083a63:	20dd30        	or	a13, a13, a3
40083a66:	e2bae0        	remu	a11, a10, a14
40083a69:	f43050        	extui	a3, a5, 0, 16
40083a6c:	c2aae0        	quou	a10, a10, a14
40083a6f:	11bb00        	slli	a11, a11, 16
40083a72:	f5f0d0        	extui	a15, a13, 16, 16
40083a75:	8283a0        	mull	a8, a3, a10
40083a78:	20bbf0        	or	a11, a11, a15
40083a7b:	401c00        	ssl	a12
40083a7e:	a14400        	sll	a4, a4
40083a81:	401c00        	ssl	a12
40083a84:	a12200        	sll	a2, a2
40083a87:	15bb87        	bgeu	a11, a8, 40083aa0 <__umoddi3+0x1f0>
40083a8a:	bb5a      	add.n	a11, a11, a5
40083a8c:	fa0b      	addi.n	a15, a10, -1
40083a8e:	0c3b57        	bltu	a11, a5, 40083a9e <__umoddi3+0x1ee>
40083a91:	09bb87        	bgeu	a11, a8, 40083a9e <__umoddi3+0x1ee>
40083a94:	fecaa2        	addi	a10, a10, -2
40083a97:	bb5a      	add.n	a11, a11, a5
40083a99:	0000c6        	j	40083aa0 <__umoddi3+0x1f0>
40083a9c:	ad0000        	lsi	f0, a0, 0x2b4
40083a9f:	0f          	.byte 0xf
40083aa0:	c0bb80        	sub	a11, a11, a8
40083aa3:	e28be0        	remu	a8, a11, a14
40083aa6:	c2bbe0        	quou	a11, a11, a14
40083aa9:	82e3b0        	mull	a14, a3, a11
40083aac:	118800        	slli	a8, a8, 16
40083aaf:	f430d0        	extui	a3, a13, 0, 16
40083ab2:	203830        	or	a3, a8, a3
40083ab5:	13b3e7        	bgeu	a3, a14, 40083acc <__umoddi3+0x21c>
40083ab8:	335a      	add.n	a3, a3, a5
40083aba:	8b0b      	addi.n	a8, a11, -1
40083abc:	0ab3e7        	bgeu	a3, a14, 40083aca <__umoddi3+0x21a>
40083abf:	073357        	bltu	a3, a5, 40083aca <__umoddi3+0x21a>
40083ac2:	fecbb2        	addi	a11, a11, -2
40083ac5:	335a      	add.n	a3, a3, a5
40083ac7:	000046        	j	40083acc <__umoddi3+0x21c>
40083aca:	08bd      	mov.n	a11, a8
40083acc:	11aa00        	slli	a10, a10, 16
40083acf:	20aab0        	or	a10, a10, a11
40083ad2:	82da40        	mull	a13, a10, a4
40083ad5:	a2aa40        	muluh	a10, a10, a4
40083ad8:	c033e0        	sub	a3, a3, a14
40083adb:	0abd      	mov.n	a11, a10
40083add:	0d8d      	mov.n	a8, a13
40083adf:	0533a7        	bltu	a3, a10, 40083ae8 <__umoddi3+0x238>
40083ae2:	1493a7        	bne	a3, a10, 40083afa <__umoddi3+0x24a>
40083ae5:	11b2d7        	bgeu	a2, a13, 40083afa <__umoddi3+0x24a>
40083ae8:	c04d40        	sub	a4, a13, a4
40083aeb:	c0aa50        	sub	a10, a10, a5
40083aee:	1b0c      	movi.n	a11, 1
40083af0:	013d47        	bltu	a13, a4, 40083af5 <__umoddi3+0x245>
40083af3:	0b0c      	movi.n	a11, 0
40083af5:	c0bab0        	sub	a11, a10, a11
40083af8:	048d      	mov.n	a8, a4
40083afa:	c04280        	sub	a4, a2, a8
40083afd:	c033b0        	sub	a3, a3, a11
40083b00:	150c      	movi.n	a5, 1
40083b02:	023247        	bltu	a2, a4, 40083b08 <__umoddi3+0x258>
40083b05:	00a052        	movi	a5, 0
40083b08:	c03350        	sub	a3, a3, a5
40083b0b:	401900        	ssl	a9
40083b0e:	a18300        	sll	a8, a3
40083b11:	400c00        	ssr	a12
40083b14:	912040        	srl	a2, a4
40083b17:	202820        	or	a2, a8, a2
40083b1a:	400c00        	ssr	a12
40083b1d:	913030        	srl	a3, a3
40083b20:	f01d      	retw.n
