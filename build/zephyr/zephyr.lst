
zephyr.elf:     file format elf32-xtensa-le


Disassembly of section .iram0.vectors:

40080000 <_WindowOverflow4>:

    .org    0x0
    .global _WindowOverflow4
_WindowOverflow4:

    s32e    a0, a5, -16     /* save a0 to call[j+1]'s stack frame */
40080000:	49c500        	s32e	a0, a5, -16
    s32e    a1, a5, -12     /* save a1 to call[j+1]'s stack frame */
40080003:	49d510        	s32e	a1, a5, -12
    s32e    a2, a5,  -8     /* save a2 to call[j+1]'s stack frame */
40080006:	49e520        	s32e	a2, a5, -8
    s32e    a3, a5,  -4     /* save a3 to call[j+1]'s stack frame */
40080009:	49f530        	s32e	a3, a5, -4
    rfwo                    /* rotates back to call[i] position */
4008000c:	003400        	rfwo
	...

40080040 <_WindowUnderflow4>:

    .org    0x40
    .global _WindowUnderflow4
_WindowUnderflow4:

    l32e    a0, a5, -16     /* restore a0 from call[i+1]'s stack frame */
40080040:	09c500        	l32e	a0, a5, -16
    l32e    a1, a5, -12     /* restore a1 from call[i+1]'s stack frame */
40080043:	09d510        	l32e	a1, a5, -12
    l32e    a2, a5,  -8     /* restore a2 from call[i+1]'s stack frame */
40080046:	09e520        	l32e	a2, a5, -8
    l32e    a3, a5,  -4     /* restore a3 from call[i+1]'s stack frame */
40080049:	09f530        	l32e	a3, a5, -4
    rfwu
4008004c:	003500        	rfwu
	...

40080050 <_xt_alloca_exc>:

    .align  4
    .global _xt_alloca_exc
_xt_alloca_exc:

    rsr     a0, WINDOWBASE  /* grab WINDOWBASE before rotw changes it */
40080050:	034800        	rsr.windowbase	a0
    rotw    -1      /* WINDOWBASE goes to a4, new a0-a3 are scratch */
40080053:	4080f0        	rotw	-1
    rsr     a2, PS
40080056:	03e620        	rsr.ps	a2
    extui   a3, a2, XCHAL_PS_OWB_SHIFT, XCHAL_PS_OWB_BITS
40080059:	343820        	extui	a3, a2, 8, 4
    xor     a3, a3, a4    /* bits changed from old to current windowbase */
4008005c:	303340        	xor	a3, a3, a4
    rsr     a4, EXCSAVE_1   /* restore original a0 (now in a4) */
4008005f:	03d140        	rsr.excsave1	a4
    slli    a3, a3, XCHAL_PS_OWB_SHIFT
40080062:	113380        	slli	a3, a3, 8
    xor     a2, a2, a3      /* flip changed bits in old window base */
40080065:	302230        	xor	a2, a2, a3
    wsr     a2, PS          /* update PS.OWB to new window base */
40080068:	13e620        	wsr.ps	a2
    rsync
4008006b:	002010        	rsync

    _bbci.l a4, 31, _WindowUnderflow4
4008006e:	ce74f7        	bbci	a4, 31, 40080040 <_WindowUnderflow4>
    rotw    -1              /* original a0 goes to a8 */
40080071:	4080f0        	rotw	-1
    _bbci.l a8, 30, _WindowUnderflow8
40080074:	4878e7        	bbci	a8, 30, 400800c0 <_WindowUnderflow8>
    rotw    -1
40080077:	4080f0        	rotw	-1
    j               _WindowUnderflow12
4008007a:	003086        	j	40080140 <_WindowUnderflow12>
4008007d:	000000        	ill

40080080 <_WindowOverflow8>:

    .org    0x80
    .global _WindowOverflow8
_WindowOverflow8:

    s32e    a0, a9, -16     /* save a0 to call[j+1]'s stack frame */
40080080:	49c900        	s32e	a0, a9, -16
    l32e    a0, a1, -12     /* a0 <- call[j-1]'s sp
40080083:	09d100        	l32e	a0, a1, -12
                               (used to find end of call[j]'s frame) */
    s32e    a1, a9, -12     /* save a1 to call[j+1]'s stack frame */
40080086:	49d910        	s32e	a1, a9, -12
    s32e    a2, a9,  -8     /* save a2 to call[j+1]'s stack frame */
40080089:	49e920        	s32e	a2, a9, -8
    s32e    a3, a9,  -4     /* save a3 to call[j+1]'s stack frame */
4008008c:	49f930        	s32e	a3, a9, -4
    s32e    a4, a0, -32     /* save a4 to call[j]'s stack frame */
4008008f:	498040        	s32e	a4, a0, -32
    s32e    a5, a0, -28     /* save a5 to call[j]'s stack frame */
40080092:	499050        	s32e	a5, a0, -28
    s32e    a6, a0, -24     /* save a6 to call[j]'s stack frame */
40080095:	49a060        	s32e	a6, a0, -24
    s32e    a7, a0, -20     /* save a7 to call[j]'s stack frame */
40080098:	49b070        	s32e	a7, a0, -20
    rfwo                    /* rotates back to call[i] position */
4008009b:	003400        	rfwo
	...

400800c0 <_WindowUnderflow8>:

    .org    0xC0
    .global _WindowUnderflow8
_WindowUnderflow8:

    l32e    a0, a9, -16     /* restore a0 from call[i+1]'s stack frame */
400800c0:	09c900        	l32e	a0, a9, -16
    l32e    a1, a9, -12     /* restore a1 from call[i+1]'s stack frame */
400800c3:	09d910        	l32e	a1, a9, -12
    l32e    a2, a9,  -8     /* restore a2 from call[i+1]'s stack frame */
400800c6:	09e920        	l32e	a2, a9, -8
    l32e    a7, a1, -12     /* a7 <- call[i-1]'s sp
400800c9:	09d170        	l32e	a7, a1, -12
                               (used to find end of call[i]'s frame) */
    l32e    a3, a9,  -4     /* restore a3 from call[i+1]'s stack frame */
400800cc:	09f930        	l32e	a3, a9, -4
    l32e    a4, a7, -32     /* restore a4 from call[i]'s stack frame */
400800cf:	098740        	l32e	a4, a7, -32
    l32e    a5, a7, -28     /* restore a5 from call[i]'s stack frame */
400800d2:	099750        	l32e	a5, a7, -28
    l32e    a6, a7, -24     /* restore a6 from call[i]'s stack frame */
400800d5:	09a760        	l32e	a6, a7, -24
    l32e    a7, a7, -20     /* restore a7 from call[i]'s stack frame */
400800d8:	09b770        	l32e	a7, a7, -20
    rfwu
400800db:	003500        	rfwu
	...

40080100 <_WindowOverflow12>:

    .org    0x100
    .global _WindowOverflow12
_WindowOverflow12:

    s32e    a0,  a13, -16   /* save a0 to call[j+1]'s stack frame */
40080100:	49cd00        	s32e	a0, a13, -16
    l32e    a0,  a1,  -12   /* a0 <- call[j-1]'s sp
40080103:	09d100        	l32e	a0, a1, -12
                               (used to find end of call[j]'s frame) */
    s32e    a1,  a13, -12   /* save a1 to call[j+1]'s stack frame */
40080106:	49dd10        	s32e	a1, a13, -12
    s32e    a2,  a13,  -8   /* save a2 to call[j+1]'s stack frame */
40080109:	49ed20        	s32e	a2, a13, -8
    s32e    a3,  a13,  -4   /* save a3 to call[j+1]'s stack frame */
4008010c:	49fd30        	s32e	a3, a13, -4
    s32e    a4,  a0,  -48   /* save a4 to end of call[j]'s stack frame */
4008010f:	494040        	s32e	a4, a0, -48
    s32e    a5,  a0,  -44   /* save a5 to end of call[j]'s stack frame */
40080112:	495050        	s32e	a5, a0, -44
    s32e    a6,  a0,  -40   /* save a6 to end of call[j]'s stack frame */
40080115:	496060        	s32e	a6, a0, -40
    s32e    a7,  a0,  -36   /* save a7 to end of call[j]'s stack frame */
40080118:	497070        	s32e	a7, a0, -36
    s32e    a8,  a0,  -32   /* save a8 to end of call[j]'s stack frame */
4008011b:	498080        	s32e	a8, a0, -32
    s32e    a9,  a0,  -28   /* save a9 to end of call[j]'s stack frame */
4008011e:	499090        	s32e	a9, a0, -28
    s32e    a10, a0,  -24   /* save a10 to end of call[j]'s stack frame */
40080121:	49a0a0        	s32e	a10, a0, -24
    s32e    a11, a0,  -20   /* save a11 to end of call[j]'s stack frame */
40080124:	49b0b0        	s32e	a11, a0, -20
    rfwo                    /* rotates back to call[i] position */
40080127:	003400        	rfwo
	...

40080140 <_WindowUnderflow12>:

    .org 0x140
    .global _WindowUnderflow12
_WindowUnderflow12:

    l32e    a0,  a13, -16 /* restore a0 from call[i+1]'s stack frame */
40080140:	09cd00        	l32e	a0, a13, -16
    l32e    a1,  a13, -12 /* restore a1 from call[i+1]'s stack frame */
40080143:	09dd10        	l32e	a1, a13, -12
    l32e    a2,  a13,  -8 /* restore a2 from call[i+1]'s stack frame */
40080146:	09ed20        	l32e	a2, a13, -8
    l32e    a11, a1,  -12 /* a11 <- call[i-1]'s sp
40080149:	09d1b0        	l32e	a11, a1, -12
                           * (used to find end of call[i]'s frame) */
    l32e    a3,  a13,  -4 /* restore a3 from call[i+1]'s stack frame */
4008014c:	09fd30        	l32e	a3, a13, -4
    l32e    a4,  a11, -48 /* restore a4 from end of call[i]'s stack frame */
4008014f:	094b40        	l32e	a4, a11, -48
    l32e    a5,  a11, -44 /* restore a5 from end of call[i]'s stack frame */
40080152:	095b50        	l32e	a5, a11, -44
    l32e    a6,  a11, -40 /* restore a6 from end of call[i]'s stack frame */
40080155:	096b60        	l32e	a6, a11, -40
    l32e    a7,  a11, -36 /* restore a7 from end of call[i]'s stack frame */
40080158:	097b70        	l32e	a7, a11, -36
    l32e    a8,  a11, -32 /* restore a8 from end of call[i]'s stack frame */
4008015b:	098b80        	l32e	a8, a11, -32
    l32e    a9,  a11, -28 /* restore a9 from end of call[i]'s stack frame */
4008015e:	099b90        	l32e	a9, a11, -28
    l32e    a10, a11, -24 /* restore a10 from end of call[i]'s stack
40080161:	09aba0        	l32e	a10, a11, -24
    		       * frame */
    l32e    a11, a11, -20   /* restore a11 from end of call[i]'s stack
40080164:	09bbb0        	l32e	a11, a11, -20
    			 * frame */
    rfwu
40080167:	003500        	rfwu
	...

40080180 <_Level2Vector>:
 */

DEF_EXCINT 1, _handle_excint, xtensa_excint1_c

#if XCHAL_NMILEVEL >= 2
DEF_EXCINT 2, _handle_excint, xtensa_int2_c
40080180:	c4c112        	addi	a1, a1, -60
40080183:	7109      	s32i.n	a0, a1, 28
40080185:	9129      	s32i.n	a2, a1, 36
40080187:	a139      	s32i.n	a3, a1, 40
40080189:	03c200        	rsr.eps2	a0
4008018c:	5109      	s32i.n	a0, a1, 20
4008018e:	03b200        	rsr.epc2	a0
40080191:	6109      	s32i.n	a0, a1, 24
40080193:	000246        	j	400801a0 <_after_imms2>
	...

40080198 <_handle_excint_imm2>:
40080198:	1738      	l32i.n	a3, a7, 4
4008019a:	4008      	l32i.n	a0, a0, 16

4008019c <_c_handler_imm2>:
4008019c:	081874        	lsi	f7, a8, 32
4008019f:	40          	.byte 0x40

400801a0 <_after_imms2>:
400801a0:	ffff21        	l32r	a2, 4008019c <_c_handler_imm2>
400801a3:	fffd01        	l32r	a0, 40080198 <_handle_excint_imm2>
400801a6:	0000a0        	jx	a0
	...

400801c0 <_Level3Vector>:
#endif

#if XCHAL_NMILEVEL >= 3
DEF_EXCINT 3, _handle_excint, xtensa_int3_c
400801c0:	c4c112        	addi	a1, a1, -60
400801c3:	7109      	s32i.n	a0, a1, 28
400801c5:	9129      	s32i.n	a2, a1, 36
400801c7:	a139      	s32i.n	a3, a1, 40
400801c9:	03c300        	rsr.eps3	a0
400801cc:	5109      	s32i.n	a0, a1, 20
400801ce:	03b300        	rsr.epc3	a0
400801d1:	6109      	s32i.n	a0, a1, 24
400801d3:	000146        	j	400801dc <_after_imms3>
	...

400801d8 <_c_handler_imm3>:
400801d8:	18c8      	l32i.n	a12, a8, 4
400801da:	4008      	l32i.n	a0, a0, 16

400801dc <_after_imms3>:
400801dc:	ffff21        	l32r	a2, 400801d8 <_c_handler_imm3>
400801df:	ffee01        	l32r	a0, 40080198 <_handle_excint_imm2>
400801e2:	0000a0        	jx	a0
	...

40080200 <_Level4Vector>:
#endif

#if XCHAL_NMILEVEL >= 4
DEF_EXCINT 4, _handle_excint, xtensa_int4_c
40080200:	c4c112        	addi	a1, a1, -60
40080203:	7109      	s32i.n	a0, a1, 28
40080205:	9129      	s32i.n	a2, a1, 36
40080207:	a139      	s32i.n	a3, a1, 40
40080209:	03c400        	rsr.eps4	a0
4008020c:	5109      	s32i.n	a0, a1, 20
4008020e:	03b400        	rsr.epc4	a0
40080211:	6109      	s32i.n	a0, a1, 24
40080213:	000146        	j	4008021c <_after_imms4>
	...

40080218 <_c_handler_imm4>:
40080218:	081944        	mula.dd.ll.ldinc	m1, a9, m0, m3
4008021b:	40          	.byte 0x40

4008021c <_after_imms4>:
4008021c:	ffff21        	l32r	a2, 40080218 <_c_handler_imm4>
4008021f:	ffde01        	l32r	a0, 40080198 <_handle_excint_imm2>
40080222:	0000a0        	jx	a0
	...

40080240 <_Level5Vector>:
#endif

#if XCHAL_NMILEVEL >= 5
DEF_EXCINT 5, _handle_excint, xtensa_int5_c
40080240:	c4c112        	addi	a1, a1, -60
40080243:	7109      	s32i.n	a0, a1, 28
40080245:	9129      	s32i.n	a2, a1, 36
40080247:	a139      	s32i.n	a3, a1, 40
40080249:	03c500        	rsr.eps5	a0
4008024c:	5109      	s32i.n	a0, a1, 20
4008024e:	03b500        	rsr.epc5	a0
40080251:	6109      	s32i.n	a0, a1, 24
40080253:	000146        	j	4008025c <_after_imms5>
	...

40080258 <_c_handler_imm5>:
40080258:	19a8      	l32i.n	a10, a9, 4
4008025a:	4008      	l32i.n	a0, a0, 16

4008025c <_after_imms5>:
4008025c:	ffff21        	l32r	a2, 40080258 <_c_handler_imm5>
4008025f:	ffce01        	l32r	a0, 40080198 <_handle_excint_imm2>
40080262:	0000a0        	jx	a0
	...

40080280 <_Level6Vector>:
#endif

#if XCHAL_NMILEVEL >= 6
DEF_EXCINT 6, _handle_excint, xtensa_int6_c
40080280:	c4c112        	addi	a1, a1, -60
40080283:	7109      	s32i.n	a0, a1, 28
40080285:	9129      	s32i.n	a2, a1, 36
40080287:	a139      	s32i.n	a3, a1, 40
40080289:	03c600        	rsr.eps6	a0
4008028c:	5109      	s32i.n	a0, a1, 20
4008028e:	03b600        	rsr.epc6	a0
40080291:	6109      	s32i.n	a0, a1, 24
40080293:	000146        	j	4008029c <_after_imms6>
	...

40080298 <_c_handler_imm6>:
40080298:	081a00        	lsx	f1, a10, a0
4008029b:	40          	.byte 0x40

4008029c <_after_imms6>:
4008029c:	ffff21        	l32r	a2, 40080298 <_c_handler_imm6>
4008029f:	ffbe01        	l32r	a0, 40080198 <_handle_excint_imm2>
400802a2:	0000a0        	jx	a0
	...

400802c0 <_Level7Vector>:
#endif

#if XCHAL_NMILEVEL >= 7
DEF_EXCINT 7, _handle_excint, xtensa_int7_c
400802c0:	c4c112        	addi	a1, a1, -60
400802c3:	7109      	s32i.n	a0, a1, 28
400802c5:	9129      	s32i.n	a2, a1, 36
400802c7:	a139      	s32i.n	a3, a1, 40
400802c9:	03c700        	rsr.eps7	a0
400802cc:	5109      	s32i.n	a0, a1, 20
400802ce:	03b700        	rsr.epc7	a0
400802d1:	6109      	s32i.n	a0, a1, 24
400802d3:	000146        	j	400802dc <_after_imms7>
	...

400802d8 <_c_handler_imm7>:
400802d8:	1a18      	l32i.n	a1, a10, 4
400802da:	4008      	l32i.n	a0, a0, 16

400802dc <_after_imms7>:
400802dc:	ffff21        	l32r	a2, 400802d8 <_c_handler_imm7>
400802df:	ffae01        	l32r	a0, 40080198 <_handle_excint_imm2>
400802e2:	0000a0        	jx	a0
	...

40080300 <_KernelExceptionVector>:
 * out of simple caution in case app code clears the UM bit by mistake.
 */
.pushsection .KernelExceptionVector.text, "ax"
.global _KernelExceptionVector
_KernelExceptionVector:
	j _Level1Vector
40080300:	015706        	j	40080860 <_Level1Vector>
	...

40080340 <_Level1RealVector>:
	wsr.excsave1 a0
40080340:	13d100        	wsr.excsave1	a0
	rsr.exccause a0
40080343:	03e800        	rsr.exccause	a0
	bnei a0, EXCCAUSE_ALLOCA, _not_alloca
40080346:	025066        	bnei	a0, 5, 4008034c <_not_alloca>
	j _xt_alloca_exc
40080349:	ff40c6        	j	40080050 <_xt_alloca_exc>

4008034c <_not_alloca>:
	rsr.excsave1 a0
4008034c:	03d100        	rsr.excsave1	a0
	j _Level1Vector
4008034f:	014346        	j	40080860 <_Level1Vector>
	...

400803c0 <_DoubleExceptionVector>:
.pushsection .DoubleExceptionVector.text, "ax"
.global _DoubleExceptionVector
_DoubleExceptionVector:
#if XCHAL_HAVE_DEBUG
/* Signals an unhandled double exception */
1:	break	1, 4
400803c0:	004140        	break	1, 4
#else
1:
#endif
	j	1b
400803c3:	fffe46        	j	400803c0 <_DoubleExceptionVector>
	...

Disassembly of section text:

40080550 <__start-0x2ac>:
40080550:	080000        	lsx	f0, a0, a0
40080553:	08f040        	lsx	f15, a0, a4
40080556:	3ffb      	addi.n	a3, a15, 15
40080558:	fb05f0        	f64addc	a15, a5, 0, 0
4008055b:	3f          	.byte 0x3f
4008055c:	808c      	beqz.n	a0, 40080568 <_iram_text_start+0x18>
4008055e:	483ff4        	mula.da.ll.ldinc	m3, a15, m0, a15
40080561:	3ff5f0        	f64cmph	a15, a5, a15, 3
40080564:	ff          	.byte 0xff
40080565:	bf          	.byte 0xbf
40080566:	ff          	.byte 0xff
40080567:	ff          	.byte 0xff
40080568:	040023        	lsi	f2, a0, 16
4008056b:	003000        	rfe
4008056e:	a03ff0        	addx4	a3, a15, a15
40080571:	fb08      	l32i.n	a0, a11, 60
40080573:	3f          	.byte 0x3f
40080574:	fb0290        	f64addc	a9, a2, 0, 0
40080577:	3f          	.byte 0x3f
40080578:	fb0296        	bltz	a2, 4008052c <__init_APPLICATION_start+0xdc>
4008057b:	3f          	.byte 0x3f
4008057c:	029c      	beqz.n	a2, 40080590 <_iram_text_start+0x40>
4008057e:	3ffb      	addi.n	a3, a15, 15
40080580:	02bb      	addi.n	a0, a2, 11
40080582:	3ffb      	addi.n	a3, a15, 15
40080584:	fb02d1        	l32r	a13, 4007f18c <esp32_rom_gpio_matrix_out+0x75280>
40080587:	3f          	.byte 0x3f
40080588:	02fa      	add.n	a0, a2, a15
4008058a:	3ffb      	addi.n	a3, a15, 15
4008058c:	fb0327        	bnone	a3, a2, 4008058b <_iram_text_start+0x3b>
4008058f:	3f          	.byte 0x3f
40080590:	fb0351        	l32r	a5, 4007f19c <esp32_rom_gpio_matrix_out+0x75290>
40080593:	3f          	.byte 0x3f
40080594:	0378      	l32i.n	a7, a3, 0
40080596:	3ffb      	addi.n	a3, a15, 15
40080598:	03bb      	addi.n	a0, a3, 11
4008059a:	3ffb      	addi.n	a3, a15, 15
4008059c:	fb03e3        	lsi	f14, a3, 0x3ec
4008059f:	3f          	.byte 0x3f
400805a0:	040c      	movi.n	a4, 0
400805a2:	3ffb      	addi.n	a3, a15, 15
400805a4:	0429      	s32i.n	a2, a4, 0
400805a6:	3ffb      	addi.n	a3, a15, 15
400805a8:	0439      	s32i.n	a3, a4, 0
400805aa:	3ffb      	addi.n	a3, a15, 15
400805ac:	fb0445        	call0	4007b5f4 <esp32_rom_gpio_matrix_out+0x716e8>
400805af:	3f          	.byte 0x3f
400805b0:	000000        	ill
400805b3:	3e          	.byte 0x3e
400805b4:	5e          	.byte 0x5e
400805b5:	3ffb04        	lsi	f0, a11, 252
400805b8:	0009c4        	lsi	f12, a9, 0
400805bb:	047a00        	extui	a7, a0, 10, 1
400805be:	3ffb      	addi.n	a3, a15, 15
400805c0:	0098      	l32i.n	a9, a0, 0
400805c2:	3ffb      	addi.n	a3, a15, 15
400805c4:	080b34        	lsi	f3, a11, 32
400805c7:	7fff40        	f64cmph	a15, a15, a4, 7
400805ca:	ff0000        	f64cmph	a0, a0, a0, 15
400805cd:	ff          	.byte 0xff
400805ce:	000003        	lsi	f0, a0, 0
400805d1:	000000        	ill
400805d4:	009200        	all4	b0, b0:b1:b2:b3
400805d7:	048b40        	extui	a8, a4, 11, 1
400805da:	3ffb      	addi.n	a3, a15, 15
400805dc:	0838      	l32i.n	a3, a8, 0
400805de:	3ffb      	addi.n	a3, a15, 15
400805e0:	1108      	l32i.n	a0, a1, 4
400805e2:	4008      	l32i.n	a0, a0, 16
400805e4:	fb0150        	f64addc	a5, a1, 0, 0
400805e7:	3f          	.byte 0x3f
400805e8:	f48070        	extui	a8, a7, 0, 16
400805eb:	3f          	.byte 0x3f
400805ec:	0148      	l32i.n	a4, a1, 0
400805ee:	3ffb      	addi.n	a3, a15, 15
400805f0:	c4b400        	extui	a11, a0, 4, 13
400805f3:	600004        	lsi	f0, a0, 0x180
400805f6:	043ff6        	bgeui	a15, 3, 400805fe <_iram_text_start+0xae>
400805f9:	3ff660        	f64cmph	a15, a6, a6, 3
400805fc:	ff          	.byte 0xff
400805fd:	ff          	.byte 0xff
400805fe:	ff          	.byte 0xff
400805ff:	8000e7        	bnone	a0, a14, 40080583 <_iram_text_start+0x33>
40080602:	bf3ff4        	lsi	f15, a15, 0x2fc
40080605:	fbfa      	add.n	a15, a11, a15
40080607:	ff          	.byte 0xff
40080608:	807c      	movi.n	a0, -8
4008060a:	ff3ff4        	lsi	f15, a15, 0x3fc
4008060d:	ffffc7        	bbsi	a15, 28, 40080610 <_iram_text_start+0xc0>
40080610:	002000        	isync
40080613:	049600        	extui	a9, a0, 6, 1
40080616:	3ffb      	addi.n	a3, a15, 15
40080618:	003c      	movi.n	a0, 48
4008061a:	003ff0        	lsi	f15, a15, 0
4008061d:	080000        	lsx	f0, a0, a0
40080620:	6008      	l32i.n	a0, a0, 24
40080622:	783ff6        	bgeui	a15, 3, 4008069e <_iram_text_start+0x14e>
40080625:	400092        	l8ui	a9, a0, 64
40080628:	0041a4        	lsi	f10, a1, 0
4008062b:	04c140        	extui	a12, a4, 1, 1
4008062e:	3ffb      	addi.n	a3, a15, 15
40080630:	f49000        	extui	a9, a0, 0, 16
40080633:	3f          	.byte 0x3f
40080634:	000800        	lsi	f0, a8, 0
40080637:	700000        	lsi	f0, a0, 0x1c0
4008063a:	b40000        	extui	a0, a0, 0, 12
4008063d:	3ffb04        	lsi	f0, a11, 252
40080640:	f44000        	extui	a4, a0, 0, 16
40080643:	3f          	.byte 0x3f
40080644:	083c      	movi.n	a8, 48
40080646:	3ffb      	addi.n	a3, a15, 15
40080648:	7619f1        	l32r	a15, 4005deac <esp32_rom_gpio_matrix_out+0x53fa0>
4008064b:	5dc005        	call0	400de24c <_iram_text_end+0x5a6ae>
4008064e:	000000        	ill
40080651:	000080        	ret
40080654:	bb0b      	addi.n	a11, a11, -1
40080656:	bf0002        	l8ui	a0, a0, 191
40080659:	005d      	mov.n	a5, a0
4008065b:	173300        	lsi	f0, a3, 92
4008065e:	4008      	l32i.n	a0, a0, 16
40080660:	0ea8      	l32i.n	a10, a14, 0
40080662:	4008      	l32i.n	a0, a0, 16
40080664:	050020        	extui	a0, a2, 16, 1
40080667:	000000        	ill
4008066a:	0008      	l32i.n	a0, a0, 0
4008066c:	100000        	and	a0, a0, a0
4008066f:	000000        	ill
40080672:	500020        	lsi	f2, a0, 0x140
40080675:	400804        	lsi	f0, a8, 0x100
40080678:	400000        	ssr	a0
4008067b:	000000        	ill
4008067e:	000080        	ret
40080681:	200000        	or	a0, a0, a0
40080684:	408800        	lsi	f0, a8, 0x100
40080687:	000000        	ill
4008068a:	000100        	lsi	f0, a1, 0
4008068d:	020000        	andb	b0, b0, b0
40080690:	000000        	ill
40080693:	000010        	lsi	f1, a0, 0
40080696:	004000        	break	0, 0
40080699:	030000        	rsr.lbeg	a0
4008069c:	010000        	slli	a0, a0, 32
4008069f:	000000        	ill
400806a2:	000400        	lsi	f0, a4, 0
400806a5:	800000        	add	a0, a0, a0
400806a8:	004000        	break	0, 0
400806ab:	100000        	and	a0, a0, a0
400806ae:	000000        	ill
400806b1:	000200        	lsi	f0, a2, 0
400806b4:	040000        	extui	a0, a0, 0, 1
400806b7:	300000        	xor	a0, a0, a0
400806ba:	ac0000        	lsi	f0, a0, 0x2b0
400806bd:	3ffb00        	f64cmph	a15, a11, a0, 3
400806c0:	060000        	lsi	f0, a0, 24
400806c3:	102200        	and	a2, a2, a0
400806c6:	0ffd      	mov.n	a15, a15
400806c8:	7f          	.byte 0x7f
400806c9:	fc1c      	movi.n	a12, 31
400806cb:	ff          	.byte 0xff
400806cc:	fb0050        	f64addc	a5, a0, 0, 0
400806cf:	3f          	.byte 0x3f
400806d0:	fb0040        	f64addc	a4, a0, 0, 0
400806d3:	3f          	.byte 0x3f
400806d4:	04ba      	add.n	a0, a4, a11
400806d6:	3ffb      	addi.n	a3, a15, 15
400806d8:	08e8      	l32i.n	a14, a8, 0
400806da:	3ffb      	addi.n	a3, a15, 15
400806dc:	681c      	movi.n	a8, 22
400806de:	2c4000        	lsi	f0, a0, 176
400806e1:	3ff530        	f64cmph	a15, a5, a3, 3
400806e4:	f53024        	lsi	f2, a0, 0x3d4
400806e7:	3f          	.byte 0x3f
400806e8:	3018      	l32i.n	a1, a0, 12
400806ea:	ff3ff5        	call12	4007fae8 <esp32_rom_gpio_matrix_out+0x75bdc>
400806ed:	cf          	.byte 0xcf
400806ee:	ff          	.byte 0xff
400806ef:	ff          	.byte 0xff
400806f0:	301c      	movi.n	a0, 19
400806f2:	f36001        	l32r	a0, 4007d474 <esp32_rom_gpio_matrix_out+0x73568>
400806f5:	3ffb04        	lsi	f0, a11, 252
400806f8:	04fa      	add.n	a0, a4, a15
400806fa:	3ffb      	addi.n	a3, a15, 15
400806fc:	000a16        	beqz	a10, 40080700 <_iram_text_start+0x1b0>
400806ff:	9f0c00        	f64cmph	a0, a12, a0, 9
40080702:	dc4000        	lsi	f0, a0, 0x370
40080705:	9e          	.byte 0x9e
40080706:	104000        	and	a4, a0, a0
40080709:	3ff530        	f64cmph	a15, a5, a3, 3
4008070c:	f53004        	lsi	f0, a0, 0x3d4
4008070f:	3f          	.byte 0x3f
40080710:	ff          	.byte 0xff
40080711:	fffff7        	bbsi	a15, 31, 40080714 <_iram_text_start+0x1c4>
40080714:	018c      	beqz.n	a1, 40080718 <_iram_text_start+0x1c8>
40080716:	3ffb      	addi.n	a3, a15, 15
40080718:	f53000        	extui	a3, a0, 16, 16
4008071b:	3f          	.byte 0x3f
4008071c:	3038      	l32i.n	a3, a0, 12
4008071e:	403ff5        	call12	400c0b1c <_iram_text_end+0x3cf7e>
40080721:	3ff530        	f64cmph	a15, a5, a3, 3
40080724:	f53044        	lsi	f4, a0, 0x3d4
40080727:	3f          	.byte 0x3f
40080728:	3048      	l32i.n	a4, a0, 12
4008072a:	4c3ff5        	call12	400ccb28 <_iram_text_end+0x48f8a>
4008072d:	3ff530        	f64cmph	a15, a5, a3, 3
40080730:	f53030        	extui	a3, a3, 16, 16
40080733:	3f          	.byte 0x3f
40080734:	f53034        	lsi	f3, a0, 0x3d4
40080737:	3f          	.byte 0x3f
40080738:	300c      	movi.n	a0, 3
4008073a:	403ff5        	call12	400c0b38 <_iram_text_end+0x3cf9a>
4008073d:	030d      	mov.n	a0, a3
4008073f:	302800        	xor	a2, a8, a0
40080742:	e83ff5        	call12	40068b40 <esp32_rom_gpio_matrix_out+0x5ec34>
40080745:	000003        	lsi	f0, a0, 0
40080748:	f53020        	extui	a3, a2, 16, 16
4008074b:	3f          	.byte 0x3f
4008074c:	0f4240        	f64cmph	a4, a2, a4, 0
4008074f:	86a000        	lsi	f0, a0, 0x218
40080752:	800001        	l32r	a0, 40060754 <esp32_rom_gpio_matrix_out+0x56848>
40080755:	061a      	add.n	a0, a6, a1
40080757:	e14000        	lsi	f0, a0, 0x384
4008075a:	400033        	lsi	f3, a0, 0x100
4008075d:	4c4b      	addi.n	a4, a12, 4
4008075f:	300800        	xor	a0, a8, a0
40080762:	ff3ff5        	call12	4007fb60 <esp32_rom_gpio_matrix_out+0x75c54>
40080765:	ff          	.byte 0xff
40080766:	ff          	.byte 0xff
40080767:	ff          	.byte 0xff
40080768:	3058      	l32i.n	a5, a0, 12
4008076a:	003ff5        	call12	40080b68 <z_vprintk+0x10>
4008076d:	0018      	l32i.n	a1, a0, 0
4008076f:	140100        	extui	a0, a0, 1, 2
40080772:	010000        	slli	a0, a0, 32
40080775:	080000        	lsx	f0, a0, a0
40080778:	800101        	l32r	a0, 4006077c <esp32_rom_gpio_matrix_out+0x56870>
4008077b:	027c00        	andb	b7, b12, b0
4008077e:	3ffb      	addi.n	a3, a15, 15
40080780:	fb0000        	f64addc	a0, a0, 0, 0
40080783:	3f          	.byte 0x3f
40080784:	fb0080        	f64addc	a8, a0, 0, 0
40080787:	3f          	.byte 0x3f
40080788:	08e9      	s32i.n	a14, a8, 0
4008078a:	3ffb      	addi.n	a3, a15, 15
4008078c:	040b      	addi.n	a0, a4, -1
4008078e:	3ffb      	addi.n	a3, a15, 15
40080790:	fb0501        	l32r	a0, 4007f3a4 <esp32_rom_gpio_matrix_out+0x75498>
40080793:	3f          	.byte 0x3f
40080794:	051d      	mov.n	a1, a5
40080796:	3ffb      	addi.n	a3, a15, 15
40080798:	fb0770        	f64addc	a7, a7, 0, 0
4008079b:	3f          	.byte 0x3f
4008079c:	0826b0        	lsx	f2, a6, a11
4008079f:	10f040        	and	a15, a0, a4
400807a2:	3ffb      	addi.n	a3, a15, 15
400807a4:	fb0544        	lsi	f4, a5, 0x3ec
400807a7:	3f          	.byte 0x3f
400807a8:	083354        	lsi	f5, a3, 32
400807ab:	08f040        	lsx	f15, a0, a4
400807ae:	3ffb      	addi.n	a3, a15, 15
400807b0:	fb05f0        	f64addc	a15, a5, 0, 0
400807b3:	3f          	.byte 0x3f
400807b4:	fb20f0        	f64addc	a15, a0, 1, 0
400807b7:	3f          	.byte 0x3f
400807b8:	fb0cf0        	f64addc	a15, a12, 0, 0
400807bb:	3f          	.byte 0x3f
400807bc:	fb06b0        	f64addc	a11, a6, 0, 0
400807bf:	3f          	.byte 0x3f
400807c0:	fb28f0        	f64addc	a15, a8, 1, 0
400807c3:	3f          	.byte 0x3f
400807c4:	fb08d0        	f64addc	a13, a8, 0, 0
400807c7:	3f          	.byte 0x3f
400807c8:	089c      	beqz.n	a8, 400807dc <_iram_text_start+0x28c>
400807ca:	3ffb      	addi.n	a3, a15, 15
400807cc:	0898      	l32i.n	a9, a8, 0
400807ce:	3ffb      	addi.n	a3, a15, 15
400807d0:	08dc      	bnez.n	a8, 400807e4 <_iram_text_start+0x294>
400807d2:	3ffb      	addi.n	a3, a15, 15
400807d4:	08ea      	add.n	a0, a8, a14
400807d6:	3ffb      	addi.n	a3, a15, 15
400807d8:	082a20        	lsx	f2, a10, a2
400807db:	000a40        	lsi	f4, a10, 0
400807de:	ea0000        	utrunc.s	a0, f0, 0
400807e1:	fb08      	l32i.n	a0, a11, 60
400807e3:	3f          	.byte 0x3f
400807e4:	fb0084        	lsi	f8, a0, 0x3ec
400807e7:	3f          	.byte 0x3f
400807e8:	fb08e4        	lsi	f14, a8, 0x3ec
400807eb:	3f          	.byte 0x3f
400807ec:	011c      	movi.n	a1, 16
400807ee:	3ffb      	addi.n	a3, a15, 15
400807f0:	ff          	.byte 0xff
400807f1:	ff          	.byte 0xff
400807f2:	ff          	.byte 0xff
400807f3:	7f          	.byte 0x7f
400807f4:	fb0830        	f64addc	a3, a8, 0, 0
400807f7:	3f          	.byte 0x3f
400807f8:	fb0084        	lsi	f8, a0, 0x3ec
400807fb:	3f          	.byte 0x3f

400807fc <__start>:
 * This is written in C rather than assembly since, during the port bring up,
 * Zephyr is being booted by the Espressif bootloader.  With it, the C stack
 * is already set up.
 */
void __attribute__((section(".iram1"))) __start(void)
{
400807fc:	004136        	entry	a1, 32
	extern uint32_t _init_start;
	extern uint32_t _bss_start;
	extern uint32_t _bss_end;

	/* Move the exception vector table to IRAM. */
	__asm__ __volatile__ (
400807ff:	ff5481        	l32r	a8, 40080550 <_iram_text_start>
40080802:	13e780        	wsr.vecbase	a8
		:
		: "r"(&_init_start));

	/* Zero out BSS.  Clobber _bss_start to avoid memset() elision. */
	(void)memset(&_bss_start, 0,
		     (&_bss_end - &_bss_start) * sizeof(_bss_start));
40080805:	ff54a1        	l32r	a10, 40080558 <_iram_text_start+0x8>
	(void)memset(&_bss_start, 0,
40080808:	ff53c1        	l32r	a12, 40080554 <_iram_text_start+0x4>
4008080b:	00a0b2        	movi	a11, 0
4008080e:	c0cca0        	sub	a12, a12, a10
40080811:	02c0e5        	call8	40083420 <memset>
		: "memory");

	/* The watchdog timer is enabled in the bootloader.  We're done booting,
	 * so disable it.
	 */
	*wdt_rtc_reg &= ~RTC_CNTL_WDT_FLASHBOOT_MOD_EN;
40080814:	ff5291        	l32r	a9, 4008055c <_iram_text_start+0xc>
40080817:	ffaba2        	movi	a10, 0xfffffbff
4008081a:	0020c0        	memw
4008081d:	002982        	l32i	a8, a9, 0
40080820:	1088a0        	and	a8, a8, a10
40080823:	0020c0        	memw
40080826:	0989      	s32i.n	a8, a9, 0
	*wdt_timg_reg &= ~TIMG_WDT_FLASHBOOT_MOD_EN;
40080828:	ff4e91        	l32r	a9, 40080560 <_iram_text_start+0x10>
4008082b:	ff4ea1        	l32r	a10, 40080564 <_iram_text_start+0x14>
4008082e:	0020c0        	memw
40080831:	0988      	l32i.n	a8, a9, 0
40080833:	1088a0        	and	a8, a8, a10
40080836:	0020c0        	memw
40080839:	0989      	s32i.n	a8, a9, 0

	/* Disable normal interrupts. */
	__asm__ __volatile__ (
4008083b:	ff4b81        	l32r	a8, 40080568 <_iram_text_start+0x18>
4008083e:	13e680        	wsr.ps	a8
		"wsr %0, PS"
		:
		: "r"(PS_INTLEVEL(XCHAL_EXCM_LEVEL) | PS_UM | PS_WOE));

	/* Disable CPU1 while we figure out how to have SMP in Zephyr. */
	*app_cpu_config_reg &= ~DPORT_APPCPU_CLKGATE_EN;
40080841:	ff4a91        	l32r	a9, 4008056c <_iram_text_start+0x1c>
40080844:	ea7c      	movi.n	a10, -2
40080846:	0020c0        	memw
40080849:	0988      	l32i.n	a8, a9, 0
4008084b:	1088a0        	and	a8, a8, a10
4008084e:	0020c0        	memw
40080851:	006982        	s32i	a8, a9, 0

	/* Initialize the architecture CPU pointer.  Some of the
	 * initialization code wants a valid _current before
	 * arch_kernel_init() is invoked.
	 */
	__asm__ volatile("wsr.MISC0 %0; rsync" : : "r"(&_kernel.cpus[0]));
40080854:	ff4781        	l32r	a8, 40080570 <_iram_text_start+0x20>
40080857:	13f480        	wsr.misc0	a8
4008085a:	002010        	rsync


	/* Start Zephyr */
	z_cstart();
4008085d:	01e8a5        	call8	400826e8 <z_cstart>

40080860 <_Level1Vector>:
DEF_EXCINT 1, _handle_excint, xtensa_excint1_c
40080860:	c4c112        	addi	a1, a1, -60
40080863:	7109      	s32i.n	a0, a1, 28
40080865:	9129      	s32i.n	a2, a1, 36
40080867:	a139      	s32i.n	a3, a1, 40
40080869:	03e600        	rsr.ps	a0
4008086c:	026c      	movi.n	a2, -32
4008086e:	100020        	and	a0, a0, a2
40080871:	5109      	s32i.n	a0, a1, 20
40080873:	03b100        	rsr.epc1	a0
40080876:	6109      	s32i.n	a0, a1, 24
40080878:	000206        	j	40080884 <_after_imms1>
	...

4008087c <_handle_excint_imm1>:
4008087c:	1738      	l32i.n	a3, a7, 4
4008087e:	4008      	l32i.n	a0, a0, 16

40080880 <_c_handler_imm1>:
40080880:	1a4c      	movi.n	a10, 65
40080882:	4008      	l32i.n	a0, a0, 16

40080884 <_after_imms1>:
40080884:	ffff21        	l32r	a2, 40080880 <_c_handler_imm1>
40080887:	fffd01        	l32r	a0, 4008087c <_handle_excint_imm1>
4008088a:	0000a0        	jx	a0
4008088d:	000000        	ill

40080890 <k_msleep>:
 *
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
40080890:	004136        	entry	a1, 32
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * (to_hz / from_hz);
40080893:	0aa0b2        	movi	a11, 10
40080896:	82a2b0        	mull	a10, a2, a11
40080899:	b2b2b0        	mulsh	a11, a2, a11
		parm0.val = timeout;
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
4008089c:	025c25        	call8	40082e60 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
}
4008089f:	202aa0        	or	a2, a10, a10
400808a2:	000090        	retw
400808a5:	000000        	ill

400808a8 <main>:

const float LM75A_DEGREES_RESOLUTION = 0.125;
const int LM75A_REG_ADDR_TEMP = 0;

void main(void)
{   
400808a8:	008136        	entry	a1, 64
	
	uint8_t cmp_data[16];
	uint8_t data[16];
	int i, ret;
	uint16_t temp = 0x00;
    uint8_t pointer = 0x00;
400808ab:	00a032        	movi	a3, 0
400808ae:	104132        	s8i	a3, a1, 16
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
400808b1:	ff30a1        	l32r	a10, 40080574 <_iram_text_start+0x24>
400808b4:	01d7e5        	call8	40082634 <z_impl_device_get_binding>
400808b7:	0a2d      	mov.n	a2, a10
400808b9:	ff2fa1        	l32r	a10, 40080578 <_iram_text_start+0x28>
400808bc:	01d765        	call8	40082634 <z_impl_device_get_binding>
400808bf:	0a5d      	mov.n	a5, a10

	i2c_dev = device_get_binding(I2C_DEV);
	i2c_dev1 = device_get_binding(I2C_DEV1);
	if (!i2c_dev1) {
400808c1:	8acc      	bnez.n	a10, 400808cd <main+0x25>
		printk("I2C: Device driver not found.\n");
400808c3:	ff2ea1        	l32r	a10, 4008057c <_iram_text_start+0x2c>
400808c6:	005be5        	call8	40080e84 <printk>
		printk("Read 0x%X from address 0x01.\n", data[0]);
	}
    */
	
	
}
400808c9:	f01d      	retw.n
400808cb:	a10000        	sll	a0, a0
	printk("I2C LM75A - Pruebas.\n");
400808ce:	ff2c      	movi.n	a15, 47
	pointer = 0x03; //Tos register pointer - 5000h por defecto
400808d0:	340c      	movi.n	a4, 3
	printk("I2C LM75A - Pruebas.\n");
400808d2:	005b25        	call8	40080e84 <printk>
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400808d5:	8d4c      	movi.n	a13, 72
400808d7:	1c0c      	movi.n	a12, 1
400808d9:	10c1b2        	addi	a11, a1, 16
400808dc:	02ad      	mov.n	a10, a2
	pointer = 0x03; //Tos register pointer - 5000h por defecto
400808de:	104142        	s8i	a4, a1, 16
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400808e1:	02aea5        	call8	400833cc <i2c_write>
	k_msleep(5);
400808e4:	5a0c      	movi.n	a10, 5
400808e6:	fffaa5        	call8	40080890 <k_msleep>
	ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
400808e9:	8d4c      	movi.n	a13, 72
400808eb:	2c0c      	movi.n	a12, 2
400808ed:	01bd      	mov.n	a11, a1
400808ef:	02ad      	mov.n	a10, a2
400808f1:	02aba5        	call8	400833ac <i2c_read>
	k_msleep(5);
400808f4:	5a0c      	movi.n	a10, 5
400808f6:	fff9a5        	call8	40080890 <k_msleep>
	printk("----->> SetPoint - Tos Register: %x|%x\n\n", data[0], data[1]);
400808f9:	ff2261        	l32r	a6, 40080584 <_iram_text_start+0x34>
400808fc:	0101c2        	l8ui	a12, a1, 1
400808ff:	0001b2        	l8ui	a11, a1, 0
40080902:	06ad      	mov.n	a10, a6
40080904:	0057e5        	call8	40080e84 <printk>
	pointer = 0x02; //Thyst register pointer - 4B00h por defecto
40080907:	280c      	movi.n	a8, 2
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
40080909:	8d4c      	movi.n	a13, 72
4008090b:	1c0c      	movi.n	a12, 1
4008090d:	10c1b2        	addi	a11, a1, 16
40080910:	02ad      	mov.n	a10, a2
	pointer = 0x02; //Thyst register pointer - 4B00h por defecto
40080912:	104182        	s8i	a8, a1, 16
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
40080915:	02ab65        	call8	400833cc <i2c_write>
	k_msleep(5);
40080918:	5a0c      	movi.n	a10, 5
4008091a:	fff765        	call8	40080890 <k_msleep>
	ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
4008091d:	8d4c      	movi.n	a13, 72
4008091f:	2c0c      	movi.n	a12, 2
40080921:	01bd      	mov.n	a11, a1
40080923:	02ad      	mov.n	a10, a2
40080925:	02a865        	call8	400833ac <i2c_read>
	k_msleep(5);
40080928:	5a0c      	movi.n	a10, 5
4008092a:	fff665        	call8	40080890 <k_msleep>
	printk("----->> Hysteresis - Thyst Register: %x|%x\n\n", data[0], data[1]);
4008092d:	0101c2        	l8ui	a12, a1, 1
40080930:	0001b2        	l8ui	a11, a1, 0
40080933:	ff15a1        	l32r	a10, 40080588 <_iram_text_start+0x38>
40080936:	0054e5        	call8	40080e84 <printk>
	pointer = 0x01; //Configuration register pointer - 00h por defecto
40080939:	180c      	movi.n	a8, 1
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
4008093b:	8d4c      	movi.n	a13, 72
4008093d:	1c0c      	movi.n	a12, 1
4008093f:	10c1b2        	addi	a11, a1, 16
40080942:	02ad      	mov.n	a10, a2
	pointer = 0x01; //Configuration register pointer - 00h por defecto
40080944:	104182        	s8i	a8, a1, 16
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
40080947:	02a865        	call8	400833cc <i2c_write>
	k_msleep(5);
4008094a:	5a0c      	movi.n	a10, 5
4008094c:	fff425        	call8	40080890 <k_msleep>
	ret = i2c_read(i2c_dev, &data[0], 1, LM75A_DEFAULT_ADDRESS);
4008094f:	8d4c      	movi.n	a13, 72
40080951:	1c0c      	movi.n	a12, 1
40080953:	01bd      	mov.n	a11, a1
40080955:	02ad      	mov.n	a10, a2
40080957:	02a565        	call8	400833ac <i2c_read>
	k_msleep(5);
4008095a:	5a0c      	movi.n	a10, 5
4008095c:	fff325        	call8	40080890 <k_msleep>
	printk("----->>  Configuration - Register %x|%x\n\n", data[0], data[1]);
4008095f:	0101c2        	l8ui	a12, a1, 1
40080962:	0001b2        	l8ui	a11, a1, 0
40080965:	ff09a1        	l32r	a10, 4008058c <_iram_text_start+0x3c>
40080968:	0051a5        	call8	40080e84 <printk>
	printk("----->>  Writing - Tos Register %x|%x\n", data[0], data[1]);
4008096b:	0101c2        	l8ui	a12, a1, 1
4008096e:	0001b2        	l8ui	a11, a1, 0
40080971:	ff07a1        	l32r	a10, 40080590 <_iram_text_start+0x40>
40080974:	0050e5        	call8	40080e84 <printk>
	i2c_write(i2c_dev, &data[0], 3, LM75A_DEFAULT_ADDRESS);
40080977:	8d4c      	movi.n	a13, 72
40080979:	3c0c      	movi.n	a12, 3
4008097b:	01bd      	mov.n	a11, a1
4008097d:	02ad      	mov.n	a10, a2
	data[1] = temp >> 8;//MSByte
4008097f:	014132        	s8i	a3, a1, 1
	data[2] = (uint16_t)temp & 0x0F;//LSByte
40080982:	024132        	s8i	a3, a1, 2
	pointer = 0x03;
40080985:	104142        	s8i	a4, a1, 16
	data[0] = pointer;
40080988:	004142        	s8i	a4, a1, 0
	i2c_write(i2c_dev, &data[0], 3, LM75A_DEFAULT_ADDRESS);
4008098b:	02a425        	call8	400833cc <i2c_write>
	printk("----->>  Tos Register wrote temp: <%x>, MSByte <%x>, LSByte <%x>\n\n", temp, data[1], data[2]);
4008098e:	0201d2        	l8ui	a13, a1, 2
40080991:	0101c2        	l8ui	a12, a1, 1
40080994:	ff00a1        	l32r	a10, 40080594 <_iram_text_start+0x44>
40080997:	0b3c      	movi.n	a11, 48
40080999:	004ea5        	call8	40080e84 <printk>
	k_msleep(5);
4008099c:	5a0c      	movi.n	a10, 5
4008099e:	ffef25        	call8	40080890 <k_msleep>
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400809a1:	8d4c      	movi.n	a13, 72
400809a3:	1c0c      	movi.n	a12, 1
400809a5:	10c1b2        	addi	a11, a1, 16
400809a8:	02ad      	mov.n	a10, a2
	pointer = 0x03; //Tos register pointer - 5000h por defecto
400809aa:	104142        	s8i	a4, a1, 16
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400809ad:	02a1e5        	call8	400833cc <i2c_write>
	k_msleep(5);
400809b0:	5a0c      	movi.n	a10, 5
400809b2:	ffede5        	call8	40080890 <k_msleep>
	ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
400809b5:	8d4c      	movi.n	a13, 72
400809b7:	2c0c      	movi.n	a12, 2
400809b9:	01bd      	mov.n	a11, a1
400809bb:	02ad      	mov.n	a10, a2
400809bd:	029ee5        	call8	400833ac <i2c_read>
	k_msleep(5);
400809c0:	5a0c      	movi.n	a10, 5
400809c2:	ffece5        	call8	40080890 <k_msleep>
	printk("----->> SetPoint - Tos Register: %x|%x\n\n", data[0], data[1]);
400809c5:	0101c2        	l8ui	a12, a1, 1
400809c8:	0001b2        	l8ui	a11, a1, 0
400809cb:	06ad      	mov.n	a10, a6
400809cd:	004b65        	call8	40080e84 <printk>
    i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400809d0:	8d4c      	movi.n	a13, 72
400809d2:	1c0c      	movi.n	a12, 1
400809d4:	10c1b2        	addi	a11, a1, 16
400809d7:	02ad      	mov.n	a10, a2
	pointer = 0x00; // Temp register pointer
400809d9:	104132        	s8i	a3, a1, 16
    i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400809dc:	029ee5        	call8	400833cc <i2c_write>
    printk("----->> ---------------- <<-----------\n");
400809df:	feeea1        	l32r	a10, 40080598 <_iram_text_start+0x48>
	pointer = 0xF7; //Tos register pointer - 5000h por defecto
400809e2:	737c      	movi.n	a3, -9
    printk("----->> ---------------- <<-----------\n");
400809e4:	0049e5        	call8	40080e84 <printk>
    printk("----->>   *** BMP280 *** <<-----------\n\n");
400809e7:	feeda1        	l32r	a10, 4008059c <_iram_text_start+0x4c>
400809ea:	0049a5        	call8	40080e84 <printk>
	i2c_write(i2c_dev1, &pointer, 1, BMP280_DEFAULT_ADDRESS);
400809ed:	76a0d2        	movi	a13, 118
400809f0:	1c0c      	movi.n	a12, 1
400809f2:	10c1b2        	addi	a11, a1, 16
400809f5:	05ad      	mov.n	a10, a5
	pointer = 0xF7; //Tos register pointer - 5000h por defecto
400809f7:	104132        	s8i	a3, a1, 16
	i2c_write(i2c_dev1, &pointer, 1, BMP280_DEFAULT_ADDRESS);
400809fa:	029d25        	call8	400833cc <i2c_write>
	k_msleep(5);
400809fd:	5a0c      	movi.n	a10, 5
400809ff:	ffe925        	call8	40080890 <k_msleep>
	ret = i2c_read(i2c_dev1, &data[0], 4, BMP280_DEFAULT_ADDRESS);
40080a02:	4c0c      	movi.n	a12, 4
40080a04:	01bd      	mov.n	a11, a1
40080a06:	76a0d2        	movi	a13, 118
40080a09:	05ad      	mov.n	a10, a5
40080a0b:	029a25        	call8	400833ac <i2c_read>
	k_msleep(5);
40080a0e:	5a0c      	movi.n	a10, 5
40080a10:	ffe7e5        	call8	40080890 <k_msleep>
	printk("----->> presion %x temp %x\n\n", data[0], data[3]); // data[0] = 0xF7 reg info -  data[3] = 0xFA red info.
40080a13:	0301c2        	l8ui	a12, a1, 3
40080a16:	0001b2        	l8ui	a11, a1, 0
40080a19:	fee1a1        	l32r	a10, 400805a0 <_iram_text_start+0x50>
40080a1c:	004665        	call8	40080e84 <printk>
        ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
40080a1f:	8d4c      	movi.n	a13, 72
40080a21:	2c0c      	movi.n	a12, 2
40080a23:	20b110        	or	a11, a1, a1
40080a26:	20a220        	or	a10, a2, a2
40080a29:	029825        	call8	400833ac <i2c_read>
        if(~ret) {
40080a2c:	050a26        	beqi	a10, -1, 40080a35 <main+0x18d>
            printk("Succesful read\n");
40080a2f:	fedda1        	l32r	a10, 400805a4 <_iram_text_start+0x54>
40080a32:	000086        	j	40080a38 <main+0x190>
            printk("Error read\n");
40080a35:	fedca1        	l32r	a10, 400805a8 <_iram_text_start+0x58>
40080a38:	0044a5        	call8	40080e84 <printk>
        printk("data[0]: %X data[1] %X \n", data[0], data[1]);
40080a3b:	0101c2        	l8ui	a12, a1, 1
40080a3e:	0001b2        	l8ui	a11, a1, 0
40080a41:	fedaa1        	l32r	a10, 400805ac <_iram_text_start+0x5c>
        temp = data[0] << 8 | (data[1] & 0x80 );
40080a44:	80a042        	movi	a4, 128
        printk("data[0]: %X data[1] %X \n", data[0], data[1]);
40080a47:	0043e5        	call8	40080e84 <printk>
        temp = data[0] << 8 | (data[1] & 0x80 );
40080a4a:	000182        	l8ui	a8, a1, 0
        printk("Temperatura en Celsius: %d\n", temp); //float not supported by printk
40080a4d:	fed9a1        	l32r	a10, 400805b4 <_iram_text_start+0x64>
        temp = data[0] << 8 | (data[1] & 0x80 );
40080a50:	113880        	slli	a3, a8, 8
40080a53:	010182        	l8ui	a8, a1, 1
40080a56:	108840        	and	a8, a8, a4
40080a59:	208830        	or	a8, a8, a3
        temp = temp * LM75A_DEGREES_RESOLUTION;
40080a5c:	418580        	srli	a8, a8, 5
40080a5f:	fed431        	l32r	a3, 400805b0 <_iram_text_start+0x60>
40080a62:	ca0800        	float.s	f0, a8, 0
40080a65:	fa1350        	wfr	f1, a3
40080a68:	2a0010        	mul.s	f0, f0, f1
40080a6b:	eab000        	utrunc.s	a11, f0, 0
        printk("Temperatura en Celsius: %d\n", temp); //float not supported by printk
40080a6e:	f4b0b0        	extui	a11, a11, 0, 16
40080a71:	004125        	call8	40080e84 <printk>
        k_msleep(2500);
40080a74:	fed1a1        	l32r	a10, 400805b8 <_iram_text_start+0x68>
40080a77:	ffe1a5        	call8	40080890 <k_msleep>
        ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
40080a7a:	ffe846        	j	40080a1f <main+0x177>
40080a7d:	000000        	ill

40080a80 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
40080a80:	00a136        	entry	a1, 80
40080a83:	049d      	mov.n	a9, a4
40080a85:	744070        	extui	a4, a7, 0, 8
40080a88:	058d      	mov.n	a8, a5
40080a8a:	8149      	s32i.n	a4, a1, 32
40080a8c:	500142        	l8ui	a4, a1, 80
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
40080a8f:	471c      	movi.n	a7, 20
		buf[i] = "0123456789abcdef"[num % base];
40080a91:	315f60        	srai	a5, a6, 31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
40080a94:	000e86        	j	40080ad2 <print_digits+0x52>
40080a97:	000000        	ill
		buf[i] = "0123456789abcdef"[num % base];
40080a9a:	80f170        	add	a15, a1, a7
40080a9d:	20c660        	or	a12, a6, a6
40080aa0:	05dd      	mov.n	a13, a5
40080aa2:	09ad      	mov.n	a10, a9
40080aa4:	08bd      	mov.n	a11, a8
40080aa6:	b189      	s32i.n	a8, a1, 44
40080aa8:	a199      	s32i.n	a9, a1, 40
40080aaa:	0961f2        	s32i	a15, a1, 36
40080aad:	02e7e5        	call8	4008392c <__umoddi3>
40080ab0:	fec3b1        	l32r	a11, 400805bc <_iram_text_start+0x6c>
40080ab3:	91f8      	l32i.n	a15, a1, 36
40080ab5:	abaa      	add.n	a10, a11, a10
40080ab7:	000aa2        	l8ui	a10, a10, 0
		num /= base;
40080aba:	06cd      	mov.n	a12, a6
		buf[i] = "0123456789abcdef"[num % base];
40080abc:	004fa2        	s8i	a10, a15, 0
		num /= base;
40080abf:	a198      	l32i.n	a9, a1, 40
40080ac1:	b188      	l32i.n	a8, a1, 44
40080ac3:	09ad      	mov.n	a10, a9
40080ac5:	08bd      	mov.n	a11, a8
40080ac7:	05dd      	mov.n	a13, a5
40080ac9:	02bf25        	call8	400836bc <__udivdi3>
40080acc:	0a9d      	mov.n	a9, a10
40080ace:	0b8d      	mov.n	a8, a11
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
40080ad0:	770b      	addi.n	a7, a7, -1
40080ad2:	20a980        	or	a10, a9, a8
40080ad5:	fc1a56        	bnez	a10, 40080a9a <print_digits+0x1a>
	}

	if (i == DIGITS_BUFLEN - 1) {
40080ad8:	451c      	movi.n	a5, 20
40080ada:	079757        	bne	a7, a5, 40080ae5 <print_digits+0x65>
		buf[i] = '0';
40080add:	053c      	movi.n	a5, 48
40080adf:	144152        	s8i	a5, a1, 20
40080ae2:	000046        	j	40080ae7 <print_digits+0x67>
	} else {
		i++;
40080ae5:	771b      	addi.n	a7, a7, 1
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
40080ae7:	152182        	l32i	a8, a1, 84
40080aea:	591c      	movi.n	a9, 21
40080aec:	878a      	add.n	a8, a7, a8
40080aee:	050c      	movi.n	a5, 0
40080af0:	1c1897        	beq	a8, a9, 40080b10 <print_digits+0x90>
40080af3:	ebc852        	addi	a5, a8, -21
40080af6:	000206        	j	40080b02 <print_digits+0x82>

	for (/**/; pad > 0 && pad_before; pad--) {
		out(pad_char, ctx);
40080af9:	03bd      	mov.n	a11, a3
40080afb:	04ad      	mov.n	a10, a4
40080afd:	0002e0        	callx8	a2
	for (/**/; pad > 0 && pad_before; pad--) {
40080b00:	550b      	addi.n	a5, a5, -1
40080b02:	318f50        	srai	a8, a5, 31
40080b05:	c08850        	sub	a8, a8, a5
40080b08:	0048d6        	bgez	a8, 40080b10 <print_digits+0x90>
40080b0b:	8168      	l32i.n	a6, a1, 32
40080b0d:	fe8656        	bnez	a6, 40080af9 <print_digits+0x79>
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
40080b10:	561c      	movi.n	a6, 21
		out(buf[i], ctx);
40080b12:	817a      	add.n	a8, a1, a7
40080b14:	0008a2        	l8ui	a10, a8, 0
40080b17:	20b330        	or	a11, a3, a3
	for (/**/; i < DIGITS_BUFLEN; i++) {
40080b1a:	01c772        	addi	a7, a7, 1
		out(buf[i], ctx);
40080b1d:	0002e0        	callx8	a2
	for (/**/; i < DIGITS_BUFLEN; i++) {
40080b20:	ee9767        	bne	a7, a6, 40080b12 <print_digits+0x92>
40080b23:	000206        	j	40080b2f <print_digits+0xaf>
	}
	for (/**/; pad > 0; pad--) {
		out(pad_char, ctx);
40080b26:	03bd      	mov.n	a11, a3
40080b28:	04ad      	mov.n	a10, a4
40080b2a:	0002e0        	callx8	a2
	for (/**/; pad > 0; pad--) {
40080b2d:	550b      	addi.n	a5, a5, -1
40080b2f:	f315e6        	bgei	a5, 1, 40080b26 <print_digits+0xa6>
	}
}
40080b32:	f01d      	retw.n

40080b34 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
40080b34:	004136        	entry	a1, 32
	struct out_context *ctx = ctx_p;

	ctx->count++;
40080b37:	0388      	l32i.n	a8, a3, 0
	return _char_out(c);
40080b39:	02ad      	mov.n	a10, a2
	ctx->count++;
40080b3b:	881b      	addi.n	a8, a8, 1
40080b3d:	0389      	s32i.n	a8, a3, 0
	return _char_out(c);
40080b3f:	fea031        	l32r	a3, 400805c0 <_iram_text_start+0x70>
40080b42:	002332        	l32i	a3, a3, 0
40080b45:	0003e0        	callx8	a3
}
40080b48:	0a2d      	mov.n	a2, a10
40080b4a:	f01d      	retw.n

40080b4c <__printk_hook_install>:
{
40080b4c:	004136        	entry	a1, 32
	_char_out = fn;
40080b4f:	fe9c81        	l32r	a8, 400805c0 <_iram_text_start+0x70>
40080b52:	0829      	s32i.n	a2, a8, 0
}
40080b54:	f01d      	retw.n
	...

40080b58 <z_vprintk>:
{
40080b58:	00a136        	entry	a1, 80
40080b5b:	9149      	s32i.n	a4, a1, 36
	char length_mod = 0;
40080b5d:	040c      	movi.n	a4, 0
{
40080b5f:	4159      	s32i.n	a5, a1, 16
40080b61:	5169      	s32i.n	a6, a1, 20
40080b63:	6179      	s32i.n	a7, a1, 24
40080b65:	7159      	s32i.n	a5, a1, 28
40080b67:	8169      	s32i.n	a6, a1, 32
40080b69:	076d      	mov.n	a6, a7
	int min_width = -1;
40080b6b:	f57c      	movi.n	a5, -1
	enum pad_type padding = PAD_NONE;
40080b6d:	047d      	mov.n	a7, a4
	int might_format = 0; /* 1 if encountered a '%' */
40080b6f:	048d      	mov.n	a8, a4
	while (*fmt) {
40080b71:	00ba46        	j	40080e5e <z_vprintk+0x306>
		if (!might_format) {
40080b74:	08dc      	bnez.n	a8, 40080b88 <z_vprintk+0x30>
			if (*fmt != '%') {
40080b76:	592c      	movi.n	a9, 37
40080b78:	029a97        	bne	a10, a9, 40080b7e <z_vprintk+0x26>
40080b7b:	00ad86        	j	40080e35 <z_vprintk+0x2dd>
				out((int)*fmt, ctx);
40080b7e:	03bd      	mov.n	a11, a3
40080b80:	a189      	s32i.n	a8, a1, 40
40080b82:	0002e0        	callx8	a2
40080b85:	008046        	j	40080d8a <z_vprintk+0x232>
			switch (*fmt) {
40080b88:	64a092        	movi	a9, 100
40080b8b:	029a97        	bne	a10, a9, 40080b91 <z_vprintk+0x39>
40080b8e:	003186        	j	40080c58 <z_vprintk+0x100>
40080b91:	3739a7        	bltu	a9, a10, 40080bcc <z_vprintk+0x74>
40080b94:	993c      	movi.n	a9, 57
40080b96:	1c39a7        	bltu	a9, a10, 40080bb6 <z_vprintk+0x5e>
40080b99:	193c      	movi.n	a9, 49
40080b9b:	7bba97        	bgeu	a10, a9, 40080c1a <z_vprintk+0xc2>
40080b9e:	d92c      	movi.n	a9, 45
40080ba0:	029a97        	bne	a10, a9, 40080ba6 <z_vprintk+0x4e>
40080ba3:	00a646        	j	40080e40 <z_vprintk+0x2e8>
40080ba6:	093c      	movi.n	a9, 48
40080ba8:	681a97        	beq	a10, a9, 40080c14 <z_vprintk+0xbc>
40080bab:	582c      	movi.n	a8, 37
40080bad:	021a87        	beq	a10, a8, 40080bb3 <z_vprintk+0x5b>
40080bb0:	009a86        	j	40080e1e <z_vprintk+0x2c6>
40080bb3:	009886        	j	40080e19 <z_vprintk+0x2c1>
40080bb6:	885c      	movi.n	a8, 88
40080bb8:	029a87        	bne	a10, a8, 40080bbe <z_vprintk+0x66>
40080bbb:	005286        	j	40080d09 <z_vprintk+0x1b1>
40080bbe:	63a082        	movi	a8, 99
40080bc1:	029a87        	bne	a10, a8, 40080bc7 <z_vprintk+0x6f>
40080bc4:	008b06        	j	40080df4 <z_vprintk+0x29c>
40080bc7:	0094c6        	j	40080e1e <z_vprintk+0x2c6>
40080bca:	920000        	lsi	f0, a0, 0x248
40080bcd:	9770a0        	lsi	f10, a0, 0x25c
40080bd0:	029a      	add.n	a0, a2, a9
40080bd2:	004806        	j	40080cf6 <z_vprintk+0x19e>
40080bd5:	1339a7        	bltu	a9, a10, 40080bec <z_vprintk+0x94>
40080bd8:	69a092        	movi	a9, 105
40080bdb:	791a97        	beq	a10, a9, 40080c58 <z_vprintk+0x100>
40080bde:	6ca092        	movi	a9, 108
40080be1:	541a97        	beq	a10, a9, 40080c39 <z_vprintk+0xe1>
40080be4:	68a092        	movi	a9, 104
40080be7:	000886        	j	40080c0d <z_vprintk+0xb5>
40080bea:	920000        	lsi	f0, a0, 0x248
40080bed:	9775a0        	lsi	f10, a5, 0x25c
40080bf0:	651a      	add.n	a6, a5, a1
40080bf2:	0b39a7        	bltu	a9, a10, 40080c01 <z_vprintk+0xa9>
40080bf5:	73a082        	movi	a8, 115
40080bf8:	029a87        	bne	a10, a8, 40080bfe <z_vprintk+0xa6>
40080bfb:	006446        	j	40080d90 <z_vprintk+0x238>
40080bfe:	008706        	j	40080e1e <z_vprintk+0x2c6>
40080c01:	78a092        	movi	a9, 120
40080c04:	029a97        	bne	a10, a9, 40080c0a <z_vprintk+0xb2>
40080c07:	003f86        	j	40080d09 <z_vprintk+0x1b1>
40080c0a:	7aa092        	movi	a9, 122
40080c0d:	281a97        	beq	a10, a9, 40080c39 <z_vprintk+0xe1>
40080c10:	008286        	j	40080e1e <z_vprintk+0x2c6>
40080c13:	25d600        	extui	a13, a0, 22, 3
				if (min_width < 0 && padding == PAD_NONE) {
40080c16:	a71600        	lsi	f0, a6, 0x29c
40080c19:	65d622        	addmi	a2, a6, 0x6500
				if (min_width < 0) {
40080c1c:	ca5200        	float.s	f5, a2, 0
					min_width = *fmt - '0';
40080c1f:	0346d0        	lsi	f13, a6, 12
40080c22:	e00000        	subx4	a0, a0, a0
					min_width = 10 * min_width + *fmt - '0';
40080c25:	5a1195        	call4	400dad40 <_iram_text_end+0x571a2>
40080c28:	f059      	s32i.n	a5, a0, 60
40080c2a:	521155        	call4	400d2d40 <_iram_text_end+0x4f1a2>
40080c2d:	5ad0c5        	call0	400db93c <_iram_text_end+0x57d9e>
40080c30:	565a      	add.n	a5, a6, a5
				if (padding == PAD_NONE) {
40080c32:	0c2237        	blt	a2, a3, 40080c42 <z_vprintk+0xea>
					padding = PAD_SPACE_BEFORE;
40080c35:	878627        	bany	a6, a2, 40080bc0 <z_vprintk+0x68>
40080c38:	a09200        	addx4	a9, a2, a0
				if (*fmt == 'h' && length_mod == 'h') {
40080c3b:	9768      	l32i.n	a6, a7, 36
40080c3d:	059a      	add.n	a0, a5, a9
40080c3f:	0d94a7        	bne	a4, a10, 40080c50 <z_vprintk+0xf8>
40080c42:	008146        	j	40080e4b <z_vprintk+0x2f3>
				} else if (*fmt == 'l' && length_mod == 'l') {
40080c45:	94c492        	addi	a9, a4, -108
40080c48:	49cc      	bnez.n	a9, 40080c50 <z_vprintk+0xf8>
40080c4a:	94ca92        	addi	a9, a10, -108
40080c4d:	1ff916        	beqz	a9, 40080e50 <z_vprintk+0x2f8>
				} else if (length_mod == 0) {
40080c50:	202416        	beqz	a4, 40080e56 <z_vprintk+0x2fe>
					out((int)'%', ctx);
40080c53:	0071c6        	j	40080e1e <z_vprintk+0x2c6>
40080c56:	920000        	lsi	f0, a0, 0x248
				if (length_mod == 'z') {
40080c59:	1c7aa0        	lsi	f10, a10, 112
40080c5c:	9788      	l32i.n	a8, a7, 36
40080c5e:	060394        	lsi	f9, a3, 24
					d = va_arg(ap, ssize_t);
40080c61:	000c      	movi.n	a0, 0
40080c63:	a09200        	addx4	a9, a2, a0
				} else if (length_mod == 'l') {
40080c66:	976c      	movi.n	a7, -23
40080c68:	860294        	lsi	f9, a2, 0x218
					d = va_arg(ap, long);
40080c6b:	0009      	s32i.n	a0, a0, 0
				} else if (length_mod == 'L') {
40080c6d:	c94c      	movi.n	a9, 76
40080c6f:	219497        	bne	a4, a9, 40080c94 <z_vprintk+0x13c>
					long long lld = va_arg(ap, long long);
40080c72:	897c      	movi.n	a9, -8
40080c74:	c67b      	addi.n	a12, a6, 7
40080c76:	10cc90        	and	a12, a12, a9
40080c79:	9c8b      	addi.n	a9, a12, 8
40080c7b:	81b8      	l32i.n	a11, a1, 32
40080c7d:	07a897        	bge	a8, a9, 40080c88 <z_vprintk+0x130>
40080c80:	0228c7        	blt	a8, a12, 40080c86 <z_vprintk+0x12e>
40080c83:	28a092        	movi	a9, 40
40080c86:	71b8      	l32i.n	a11, a1, 28
40080c88:	8b9a      	add.n	a8, a11, a9
40080c8a:	f8c882        	addi	a8, a8, -8
					d = (printk_val_t) lld;
40080c8d:	08c8      	l32i.n	a12, a8, 0
40080c8f:	1868      	l32i.n	a6, a8, 4
40080c91:	0005c6        	j	40080cac <z_vprintk+0x154>
					d = va_arg(ap, int);
40080c94:	964b      	addi.n	a9, a6, 4
40080c96:	81b8      	l32i.n	a11, a1, 32
40080c98:	06a897        	bge	a8, a9, 40080ca2 <z_vprintk+0x14a>
40080c9b:	012867        	blt	a8, a6, 40080ca0 <z_vprintk+0x148>
40080c9e:	492c      	movi.n	a9, 36
40080ca0:	71b8      	l32i.n	a11, a1, 28
40080ca2:	bb9a      	add.n	a11, a11, a9
40080ca4:	fccbb2        	addi	a11, a11, -4
40080ca7:	0bc8      	l32i.n	a12, a11, 0
40080ca9:	316fc0        	srai	a6, a12, 31
				if (*fmt != 'u' && negative(d)) {
40080cac:	75a082        	movi	a8, 117
40080caf:	251a87        	beq	a10, a8, 40080cd8 <z_vprintk+0x180>
40080cb2:	0226d6        	bgez	a6, 40080cd8 <z_vprintk+0x180>
					out((int)'-', ctx);
40080cb5:	03bd      	mov.n	a11, a3
40080cb7:	da2c      	movi.n	a10, 45
40080cb9:	0b6192        	s32i	a9, a1, 44
40080cbc:	0a61c2        	s32i	a12, a1, 40
40080cbf:	0002e0        	callx8	a2
					d = -d;
40080cc2:	a1c8      	l32i.n	a12, a1, 40
40080cc4:	180c      	movi.n	a8, 1
40080cc6:	60c0c0        	neg	a12, a12
40080cc9:	0a0c      	movi.n	a10, 0
40080ccb:	838ac0        	moveqz	a8, a10, a12
40080cce:	60d060        	neg	a13, a6
					min_width--;
40080cd1:	b198      	l32i.n	a9, a1, 44
					d = -d;
40080cd3:	c06d80        	sub	a6, a13, a8
					min_width--;
40080cd6:	550b      	addi.n	a5, a5, -1
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
40080cd8:	fdc7a2        	addi	a10, a7, -3
40080cdb:	080c      	movi.n	a8, 0
40080cdd:	1f0c      	movi.n	a15, 1
40080cdf:	0e3c      	movi.n	a14, 48
40080ce1:	83f8a0        	moveqz	a15, a8, a10
40080ce4:	0b2c      	movi.n	a11, 32
40080ce6:	a70b      	addi.n	a10, a7, -1
40080ce8:	83bea0        	moveqz	a11, a14, a10
40080ceb:	1159      	s32i.n	a5, a1, 4
40080ced:	01b9      	s32i.n	a11, a1, 0
40080cef:	ae0c      	movi.n	a14, 10
40080cf1:	06dd      	mov.n	a13, a6
40080cf3:	002106        	j	40080d7b <z_vprintk+0x223>
				out('0', ctx);
40080cf6:	03bd      	mov.n	a11, a3
40080cf8:	0a3c      	movi.n	a10, 48
40080cfa:	0002e0        	callx8	a2
				out('x', ctx);
40080cfd:	03bd      	mov.n	a11, a3
40080cff:	78a0a2        	movi	a10, 120
40080d02:	0002e0        	callx8	a2
				min_width = sizeof(void *) * 2;
40080d05:	850c      	movi.n	a5, 8
				padding = PAD_ZERO_BEFORE;
40080d07:	170c      	movi.n	a7, 1
				if (*fmt == 'p') {
40080d09:	9198      	l32i.n	a9, a1, 36
40080d0b:	881c      	movi.n	a8, 24
40080d0d:	0009a2        	l8ui	a10, a9, 0
40080d10:	70a092        	movi	a9, 112
40080d13:	029a97        	bne	a10, a9, 40080d19 <z_vprintk+0x1c1>
					x = (uintptr_t)va_arg(ap, void *);
40080d16:	000b86        	j	40080d48 <z_vprintk+0x1f0>
				} else if (length_mod == 'l') {
40080d19:	6ca092        	movi	a9, 108
40080d1c:	029497        	bne	a4, a9, 40080d22 <z_vprintk+0x1ca>
					x = va_arg(ap, unsigned long);
40080d1f:	000946        	j	40080d48 <z_vprintk+0x1f0>
				} else if (length_mod == 'L') {
40080d22:	c94c      	movi.n	a9, 76
40080d24:	209497        	bne	a4, a9, 40080d48 <z_vprintk+0x1f0>
					x = va_arg(ap, unsigned long long);
40080d27:	897c      	movi.n	a9, -8
40080d29:	c67b      	addi.n	a12, a6, 7
40080d2b:	10cc90        	and	a12, a12, a9
40080d2e:	9c8b      	addi.n	a9, a12, 8
40080d30:	81a8      	l32i.n	a10, a1, 32
40080d32:	06a897        	bge	a8, a9, 40080d3c <z_vprintk+0x1e4>
40080d35:	0128c7        	blt	a8, a12, 40080d3a <z_vprintk+0x1e2>
40080d38:	892c      	movi.n	a9, 40
40080d3a:	71a8      	l32i.n	a10, a1, 28
40080d3c:	8a9a      	add.n	a8, a10, a9
40080d3e:	f8c882        	addi	a8, a8, -8
40080d41:	08c8      	l32i.n	a12, a8, 0
40080d43:	18d8      	l32i.n	a13, a8, 4
40080d45:	000646        	j	40080d62 <z_vprintk+0x20a>
					x = va_arg(ap, unsigned int);
40080d48:	964b      	addi.n	a9, a6, 4
40080d4a:	81a8      	l32i.n	a10, a1, 32
40080d4c:	06a897        	bge	a8, a9, 40080d56 <z_vprintk+0x1fe>
40080d4f:	012867        	blt	a8, a6, 40080d54 <z_vprintk+0x1fc>
40080d52:	492c      	movi.n	a9, 36
40080d54:	71a8      	l32i.n	a10, a1, 28
40080d56:	80aa90        	add	a10, a10, a9
40080d59:	fccaa2        	addi	a10, a10, -4
40080d5c:	002ac2        	l32i	a12, a10, 0
40080d5f:	00a0d2        	movi	a13, 0
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
40080d62:	fdc7a2        	addi	a10, a7, -3
40080d65:	080c      	movi.n	a8, 0
40080d67:	1f0c      	movi.n	a15, 1
40080d69:	0e3c      	movi.n	a14, 48
40080d6b:	83f8a0        	moveqz	a15, a8, a10
40080d6e:	0b2c      	movi.n	a11, 32
40080d70:	a70b      	addi.n	a10, a7, -1
40080d72:	83bea0        	moveqz	a11, a14, a10
40080d75:	1159      	s32i.n	a5, a1, 4
40080d77:	01b9      	s32i.n	a11, a1, 0
40080d79:	0e1c      	movi.n	a14, 16
40080d7b:	03bd      	mov.n	a11, a3
40080d7d:	02ad      	mov.n	a10, a2
40080d7f:	b199      	s32i.n	a9, a1, 44
40080d81:	a189      	s32i.n	a8, a1, 40
40080d83:	ffcfe5        	call8	40080a80 <print_digits>
40080d86:	b198      	l32i.n	a9, a1, 44
40080d88:	096d      	mov.n	a6, a9
			might_format = 0;
40080d8a:	a188      	l32i.n	a8, a1, 40
40080d8c:	003206        	j	40080e58 <z_vprintk+0x300>
40080d8f:	964b00        	lsi	f0, a11, 0x258
				char *s = va_arg(ap, char *);
40080d92:	881c      	movi.n	a8, 24
40080d94:	0ca897        	bge	a8, a9, 40080da4 <z_vprintk+0x24c>
40080d97:	012867        	blt	a8, a6, 40080d9c <z_vprintk+0x244>
40080d9a:	492c      	movi.n	a9, 36
40080d9c:	096d      	mov.n	a6, a9
40080d9e:	7188      	l32i.n	a8, a1, 28
40080da0:	000106        	j	40080da8 <z_vprintk+0x250>
40080da3:	818800        	src	a8, a8, a0
40080da6:	096d      	mov.n	a6, a9
40080da8:	889a      	add.n	a8, a8, a9
40080daa:	fcc882        	addi	a8, a8, -4
40080dad:	08d8      	l32i.n	a13, a8, 0
40080daf:	0d9d      	mov.n	a9, a13
				while (*s) {
40080db1:	0003c6        	j	40080dc4 <z_vprintk+0x26c>
					out((int)(*s++), ctx);
40080db4:	991b      	addi.n	a9, a9, 1
40080db6:	03bd      	mov.n	a11, a3
40080db8:	b199      	s32i.n	a9, a1, 44
40080dba:	0a61d2        	s32i	a13, a1, 40
40080dbd:	0002e0        	callx8	a2
40080dc0:	a1d8      	l32i.n	a13, a1, 40
40080dc2:	b198      	l32i.n	a9, a1, 44
				while (*s) {
40080dc4:	0009a2        	l8ui	a10, a9, 0
40080dc7:	fe9a56        	bnez	a10, 40080db4 <z_vprintk+0x25c>
			might_format = 0;
40080dca:	0a8d      	mov.n	a8, a10
				if (padding == PAD_SPACE_AFTER) {
40080dcc:	023726        	beqi	a7, 3, 40080dd2 <z_vprintk+0x27a>
40080dcf:	002146        	j	40080e58 <z_vprintk+0x300>
					int remaining = min_width - (s - start);
40080dd2:	c099d0        	sub	a9, a9, a13
40080dd5:	c09590        	sub	a9, a5, a9
						out(' ', ctx);
40080dd8:	082c      	movi.n	a8, 32
					while (remaining-- > 0) {
40080dda:	000406        	j	40080dee <z_vprintk+0x296>
						out(' ', ctx);
40080ddd:	08ad      	mov.n	a10, a8
40080ddf:	03bd      	mov.n	a11, a3
40080de1:	a189      	s32i.n	a8, a1, 40
40080de3:	b199      	s32i.n	a9, a1, 44
40080de5:	0002e0        	callx8	a2
40080de8:	b198      	l32i.n	a9, a1, 44
40080dea:	a188      	l32i.n	a8, a1, 40
40080dec:	990b      	addi.n	a9, a9, -1
					while (remaining-- > 0) {
40080dee:	eb19e6        	bgei	a9, 1, 40080ddd <z_vprintk+0x285>
40080df1:	000ec6        	j	40080e30 <z_vprintk+0x2d8>
				int c = va_arg(ap, int);
40080df4:	964b      	addi.n	a9, a6, 4
40080df6:	8a1c      	movi.n	a10, 24
40080df8:	8188      	l32i.n	a8, a1, 32
40080dfa:	06aa97        	bge	a10, a9, 40080e04 <z_vprintk+0x2ac>
40080dfd:	012a67        	blt	a10, a6, 40080e02 <z_vprintk+0x2aa>
40080e00:	492c      	movi.n	a9, 36
40080e02:	7188      	l32i.n	a8, a1, 28
40080e04:	889a      	add.n	a8, a8, a9
40080e06:	fcc882        	addi	a8, a8, -4
				out(c, ctx);
40080e09:	08a8      	l32i.n	a10, a8, 0
40080e0b:	03bd      	mov.n	a11, a3
40080e0d:	b199      	s32i.n	a9, a1, 44
40080e0f:	0002e0        	callx8	a2
				break;
40080e12:	b198      	l32i.n	a9, a1, 44
40080e14:	096d      	mov.n	a6, a9
40080e16:	000586        	j	40080e30 <z_vprintk+0x2d8>
				out((int)'%', ctx);
40080e19:	03bd      	mov.n	a11, a3
40080e1b:	000386        	j	40080e2d <z_vprintk+0x2d5>
				out((int)'%', ctx);
40080e1e:	03bd      	mov.n	a11, a3
40080e20:	25a0a2        	movi	a10, 37
40080e23:	0002e0        	callx8	a2
				out((int)*fmt, ctx);
40080e26:	9188      	l32i.n	a8, a1, 36
40080e28:	03bd      	mov.n	a11, a3
40080e2a:	0008a2        	l8ui	a10, a8, 0
40080e2d:	0002e0        	callx8	a2
			might_format = 0;
40080e30:	080c      	movi.n	a8, 0
				break;
40080e32:	000886        	j	40080e58 <z_vprintk+0x300>
				length_mod = 0;
40080e35:	084d      	mov.n	a4, a8
				padding = PAD_NONE;
40080e37:	087d      	mov.n	a7, a8
				min_width = -1;
40080e39:	f57c      	movi.n	a5, -1
				might_format = 1;
40080e3b:	180c      	movi.n	a8, 1
40080e3d:	0005c6        	j	40080e58 <z_vprintk+0x300>
				padding = PAD_SPACE_AFTER;
40080e40:	370c      	movi.n	a7, 3
40080e42:	000486        	j	40080e58 <z_vprintk+0x300>
					padding = PAD_ZERO_BEFORE;
40080e45:	170c      	movi.n	a7, 1
40080e47:	000346        	j	40080e58 <z_vprintk+0x300>
40080e4a:	844c00        	extui	a4, a0, 12, 9
					length_mod = 'H';
40080e4d:	0001c6        	j	40080e58 <z_vprintk+0x300>
					length_mod = 'L';
40080e50:	c44c      	movi.n	a4, 76
40080e52:	000086        	j	40080e58 <z_vprintk+0x300>
40080e55:	0a4d00        	add.s	f4, f13, f0
		++fmt;
40080e58:	9198      	l32i.n	a9, a1, 36
40080e5a:	991b      	addi.n	a9, a9, 1
40080e5c:	9199      	s32i.n	a9, a1, 36
	while (*fmt) {
40080e5e:	9198      	l32i.n	a9, a1, 36
40080e60:	0009a2        	l8ui	a10, a9, 0
40080e63:	d0da56        	bnez	a10, 40080b74 <z_vprintk+0x1c>
}
40080e66:	f01d      	retw.n

40080e68 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
40080e68:	008136        	entry	a1, 64
	struct out_context ctx = { 0 };
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
40080e6b:	fdd6a1        	l32r	a10, 400805c4 <_iram_text_start+0x74>
	struct out_context ctx = { 0 };
40080e6e:	00a082        	movi	a8, 0
	z_vprintk(char_out, &ctx, fmt, ap);
40080e71:	20d330        	or	a13, a3, a3
40080e74:	20e440        	or	a14, a4, a4
40080e77:	05fd      	mov.n	a15, a5
40080e79:	02cd      	mov.n	a12, a2
40080e7b:	01bd      	mov.n	a11, a1
	struct out_context ctx = { 0 };
40080e7d:	0189      	s32i.n	a8, a1, 0
	z_vprintk(char_out, &ctx, fmt, ap);
40080e7f:	ffcda5        	call8	40080b58 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
40080e82:	f01d      	retw.n

40080e84 <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
40080e84:	00a136        	entry	a1, 80
	va_list ap;

	va_start(ap, fmt);
40080e87:	10c1c2        	addi	a12, a1, 16
40080e8a:	30c1b2        	addi	a11, a1, 48
40080e8d:	4d0c      	movi.n	a13, 4

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
40080e8f:	02ad      	mov.n	a10, a2
	va_start(ap, fmt);
40080e91:	5139      	s32i.n	a3, a1, 20
40080e93:	6149      	s32i.n	a4, a1, 24
40080e95:	7159      	s32i.n	a5, a1, 28
40080e97:	8169      	s32i.n	a6, a1, 32
40080e99:	9179      	s32i.n	a7, a1, 36
40080e9b:	11c9      	s32i.n	a12, a1, 4
40080e9d:	01b9      	s32i.n	a11, a1, 0
40080e9f:	21d9      	s32i.n	a13, a1, 8
		vprintk(fmt, ap);
40080ea1:	fffc65        	call8	40080e68 <vprintk>
	}
	va_end(ap);
}
40080ea4:	f01d      	retw.n
	...

40080ea8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
40080ea8:	004136        	entry	a1, 32
	entry(p1, p2, p3);
40080eab:	20c550        	or	a12, a5, a5
40080eae:	20b440        	or	a11, a4, a4
40080eb1:	03ad      	mov.n	a10, a3
40080eb3:	0002e0        	callx8	a2
	if (z_syscall_trap()) {
		return (k_tid_t) arch_syscall_invoke0(K_SYSCALL_K_CURRENT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_current_get();
40080eb6:	01fee5        	call8	40082ea4 <z_impl_k_current_get>
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
40080eb9:	0213e5        	call8	40082ff8 <z_impl_k_thread_abort>

40080ebc <chunk_field>:
	return (chunk_unit_t *)h;
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
40080ebc:	004136        	entry	a1, 32
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
40080ebf:	1133d0        	slli	a3, a3, 3
40080ec2:	323a      	add.n	a3, a2, a3

	if (big_heap(h)) {
40080ec4:	fdc181        	l32r	a8, 400805c8 <_iram_text_start+0x78>
40080ec7:	2228      	l32i.n	a2, a2, 8
40080ec9:	0bb827        	bgeu	a8, a2, 40080ed8 <chunk_field+0x1c>
		return ((uint32_t *)cmem)[f];
40080ecc:	1144e0        	slli	a4, a4, 2
40080ecf:	334a      	add.n	a3, a3, a4
40080ed1:	0328      	l32i.n	a2, a3, 0
40080ed3:	000246        	j	40080ee0 <chunk_field+0x24>
40080ed6:	f00000        	subx8	a0, a0, a0
	} else {
		return ((uint16_t *)cmem)[f];
40080ed9:	4a1144        	mula.da.lh.ldinc	m1, a1, m0, a4
40080edc:	132233        	lsi	f3, a2, 76
40080edf:	f01d00        	subx8	a1, a13, a0
	...

40080ee4 <chunk_set>:
	}
}

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
40080ee4:	004136        	entry	a1, 32
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
40080ee7:	1133d0        	slli	a3, a3, 3
40080eea:	323a      	add.n	a3, a2, a3

	if (big_heap(h)) {
40080eec:	fdb781        	l32r	a8, 400805c8 <_iram_text_start+0x78>
40080eef:	2228      	l32i.n	a2, a2, 8
40080ef1:	0bb827        	bgeu	a8, a2, 40080f00 <chunk_set+0x1c>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
40080ef4:	1144e0        	slli	a4, a4, 2
40080ef7:	334a      	add.n	a3, a3, a4
40080ef9:	0359      	s32i.n	a5, a3, 0
40080efb:	000246        	j	40080f08 <chunk_set+0x24>
40080efe:	f00000        	subx8	a0, a0, a0
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
40080f01:	4a1144        	mula.da.lh.ldinc	m1, a1, m0, a4
40080f04:	535233        	lsi	f3, a2, 0x14c
40080f07:	f01d00        	subx8	a1, a13, a0
	...

40080f0c <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
40080f0c:	004136        	entry	a1, 32
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
40080f0f:	1c0c      	movi.n	a12, 1
40080f11:	03bd      	mov.n	a11, a3
40080f13:	02ad      	mov.n	a10, a2
40080f15:	fffa65        	call8	40080ebc <chunk_field>
}
40080f18:	4121a0        	srli	a2, a10, 1
40080f1b:	f01d      	retw.n
40080f1d:	000000        	ill

40080f20 <set_chunk_used>:

static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
40080f20:	004136        	entry	a1, 32
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
40080f23:	1133d0        	slli	a3, a3, 3
40080f26:	323a      	add.n	a3, a2, a3

	if (big_heap(h)) {
40080f28:	fda881        	l32r	a8, 400805c8 <_iram_text_start+0x78>
40080f2b:	2228      	l32i.n	a2, a2, 8
40080f2d:	17b827        	bgeu	a8, a2, 40080f48 <set_chunk_used+0x28>
		if (used) {
40080f30:	1388      	l32i.n	a8, a3, 4
40080f32:	648c      	beqz.n	a4, 40080f3c <set_chunk_used+0x1c>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
40080f34:	120c      	movi.n	a2, 1
40080f36:	208820        	or	a8, a8, a2
40080f39:	000106        	j	40080f41 <set_chunk_used+0x21>
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
40080f3c:	e27c      	movi.n	a2, -2
40080f3e:	108820        	and	a8, a8, a2
40080f41:	1389      	s32i.n	a8, a3, 4
40080f43:	000586        	j	40080f5d <set_chunk_used+0x3d>
40080f46:	820000        	mull	a0, a0, a0
		}
	} else {
		if (used) {
40080f49:	8c0113        	lsi	f1, a1, 0x230
40080f4c:	120c64        	lsi	f6, a12, 72
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
40080f4f:	208820        	or	a8, a8, a2
40080f52:	000106        	j	40080f5a <set_chunk_used+0x3a>
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
40080f55:	e27c      	movi.n	a2, -2
40080f57:	108820        	and	a8, a8, a2
40080f5a:	015382        	s16i	a8, a3, 2
		}
	}
}
40080f5d:	f01d      	retw.n
	...

40080f60 <set_chunk_size>:
 * Note: no need to preserve the used bit here as the chunk is never in use
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
40080f60:	004136        	entry	a1, 32
	chunk_set(h, c, SIZE_AND_USED, size << 1);
40080f63:	11d4f0        	slli	a13, a4, 1
40080f66:	01a0c2        	movi	a12, 1
40080f69:	20b330        	or	a11, a3, a3
40080f6c:	20a220        	or	a10, a2, a2
40080f6f:	fff765        	call8	40080ee4 <chunk_set>
}
40080f72:	f01d      	retw.n

40080f74 <bucket_idx>:
{
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
40080f74:	004136        	entry	a1, 32
	return big_heap(h) ? 8 : 4;
40080f77:	fd9491        	l32r	a9, 400805c8 <_iram_text_start+0x78>
40080f7a:	2228      	l32i.n	a2, a2, 8
40080f7c:	880c      	movi.n	a8, 8
40080f7e:	023927        	bltu	a9, a2, 40080f84 <bucket_idx+0x10>
40080f81:	04a082        	movi	a8, 4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
40080f84:	888b      	addi.n	a8, a8, 8
40080f86:	412380        	srli	a2, a8, 3
	size_t usable_sz = sz - min_chunk_size(h) + 1;
40080f89:	331b      	addi.n	a3, a3, 1
40080f8b:	c03320        	sub	a3, a3, a2
	return 31 - __builtin_clz(usable_sz);
40080f8e:	40f330        	nsau	a3, a3
}
40080f91:	f21c      	movi.n	a2, 31
40080f93:	c02230        	sub	a2, a2, a3
40080f96:	f01d      	retw.n

40080f98 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
40080f98:	004136        	entry	a1, 32
	return sizeof(void *) > 4 || chunks > 0x7fff;
40080f9b:	03bd      	mov.n	a11, a3
40080f9d:	02ad      	mov.n	a10, a2
40080f9f:	fff6e5        	call8	40080f0c <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
40080fa2:	fd8951        	l32r	a5, 400805c8 <_iram_text_start+0x78>
40080fa5:	2248      	l32i.n	a4, a2, 8
40080fa7:	05b547        	bgeu	a5, a4, 40080fb0 <free_list_add+0x18>
	if (!solo_free_header(h, c)) {
40080faa:	021a66        	bnei	a10, 1, 40080fb0 <free_list_add+0x18>
40080fad:	001bc6        	j	40081020 <free_list_add+0x88>
		int bidx = bucket_idx(h, chunk_size(h, c));
40080fb0:	0abd      	mov.n	a11, a10
40080fb2:	02ad      	mov.n	a10, a2
40080fb4:	fffbe5        	call8	40080f74 <bucket_idx>
	if (b->next == 0) {
40080fb7:	118ae0        	slli	a8, a10, 2
40080fba:	828a      	add.n	a8, a2, a8
40080fbc:	4848      	l32i.n	a4, a8, 16
40080fbe:	44ec      	bnez.n	a4, 40080fe6 <free_list_add+0x4e>
		h->avail_buckets |= (1 << bidx);
40080fc0:	140c      	movi.n	a4, 1
40080fc2:	401a00        	ssl	a10
40080fc5:	a14400        	sll	a4, a4
40080fc8:	32a8      	l32i.n	a10, a2, 12
	chunk_set(h, c, FREE_PREV, prev);
40080fca:	03dd      	mov.n	a13, a3
40080fcc:	20aa40        	or	a10, a10, a4
40080fcf:	32a9      	s32i.n	a10, a2, 12
40080fd1:	2c0c      	movi.n	a12, 2
40080fd3:	03bd      	mov.n	a11, a3
		b->next = c;
40080fd5:	4839      	s32i.n	a3, a8, 16
40080fd7:	02ad      	mov.n	a10, a2
40080fd9:	fff0a5        	call8	40080ee4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
40080fdc:	03dd      	mov.n	a13, a3
40080fde:	3c0c      	movi.n	a12, 3
40080fe0:	03bd      	mov.n	a11, a3
40080fe2:	000d46        	j	4008101b <free_list_add+0x83>
40080fe5:	a0c200        	addx4	a12, a2, a0
	return chunk_field(h, c, FREE_PREV);
40080fe8:	b44002        	s8i	a0, a0, 180
40080feb:	a22020        	muluh	a2, a0, a2
40080fee:	ece520        	lsi	f2, a5, 0x3b0
40080ff1:	ff          	.byte 0xff
	chunk_set(h, c, FREE_PREV, prev);
40080ff2:	0add      	mov.n	a13, a10
	return chunk_field(h, c, FREE_PREV);
40080ff4:	0a5d      	mov.n	a5, a10
	chunk_set(h, c, FREE_PREV, prev);
40080ff6:	2c0c      	movi.n	a12, 2
40080ff8:	03bd      	mov.n	a11, a3
40080ffa:	02ad      	mov.n	a10, a2
40080ffc:	ffee65        	call8	40080ee4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
40080fff:	04dd      	mov.n	a13, a4
40081001:	3c0c      	movi.n	a12, 3
40081003:	03bd      	mov.n	a11, a3
40081005:	02ad      	mov.n	a10, a2
40081007:	ffede5        	call8	40080ee4 <chunk_set>
4008100a:	03dd      	mov.n	a13, a3
4008100c:	3c0c      	movi.n	a12, 3
4008100e:	05bd      	mov.n	a11, a5
40081010:	02ad      	mov.n	a10, a2
40081012:	ffed25        	call8	40080ee4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
40081015:	03dd      	mov.n	a13, a3
40081017:	2c0c      	movi.n	a12, 2
40081019:	04bd      	mov.n	a11, a4
4008101b:	02ad      	mov.n	a10, a2
4008101d:	ffec65        	call8	40080ee4 <chunk_set>
		free_list_add_bidx(h, c, bidx);
	}
}
40081020:	f01d      	retw.n
	...

40081024 <sys_heap_init>:
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
40081024:	004136        	entry	a1, 32
	return big_heap_bytes(size) ? 8 : 4;
40081027:	fd6951        	l32r	a5, 400805cc <_iram_text_start+0x7c>
4008102a:	890c      	movi.n	a9, 8
4008102c:	013547        	bltu	a5, a4, 40081031 <sys_heap_init+0xd>
4008102f:	490c      	movi.n	a9, 4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
40081031:	c04490        	sub	a4, a4, a9

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
40081034:	887c      	movi.n	a8, -8
40081036:	537b      	addi.n	a5, a3, 7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
40081038:	334a      	add.n	a3, a3, a4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
4008103a:	105580        	and	a5, a5, a8
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
4008103d:	103380        	and	a3, a3, a8
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
40081040:	fd6491        	l32r	a9, 400805d0 <_iram_text_start+0x80>
40081043:	fd6381        	l32r	a8, 400805d0 <_iram_text_start+0x80>
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
40081046:	c03350        	sub	a3, a3, a5
	heap->heap = h;
40081049:	0259      	s32i.n	a5, a2, 0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
4008104b:	413330        	srli	a3, a3, 3
	h->len = buf_sz;
	h->avail_buckets = 0;
4008104e:	040c      	movi.n	a4, 0
	h->chunk0_hdr_area = 0;
40081050:	0589      	s32i.n	a8, a5, 0
40081052:	1599      	s32i.n	a9, a5, 4

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
40081054:	03bd      	mov.n	a11, a3
	h->len = buf_sz;
40081056:	2539      	s32i.n	a3, a5, 8
	h->avail_buckets = 0;
40081058:	3549      	s32i.n	a4, a5, 12
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
4008105a:	20a550        	or	a10, a5, a5
4008105d:	fff165        	call8	40080f74 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
40081060:	112ae0        	slli	a2, a10, 2
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
40081063:	1bc222        	addi	a2, a2, 27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
40081066:	ba1b      	addi.n	a11, a10, 1
40081068:	412320        	srli	a2, a2, 3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
4008106b:	10c592        	addi	a9, a5, 16
4008106e:	048d      	mov.n	a8, a4
40081070:	000186        	j	4008107a <sys_heap_init+0x56>
40081073:	094900        	l32e	a0, a9, -48
40081076:	881b      	addi.n	a8, a8, 1
40081078:	994b      	addi.n	a9, a9, 4
4008107a:	f628b7        	blt	a8, a11, 40081074 <sys_heap_init+0x50>
		h->buckets[i].next = 0;
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
4008107d:	02cd      	mov.n	a12, a2
4008107f:	05ad      	mov.n	a10, a5
40081081:	0b0c      	movi.n	a11, 0
40081083:	ffede5        	call8	40080f60 <set_chunk_size>
	set_chunk_used(h, 0, true);
40081086:	05ad      	mov.n	a10, a5
40081088:	1c0c      	movi.n	a12, 1
4008108a:	0b0c      	movi.n	a11, 0
4008108c:	ffe925        	call8	40080f20 <set_chunk_used>

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
4008108f:	c04320        	sub	a4, a3, a2
40081092:	04cd      	mov.n	a12, a4
40081094:	02bd      	mov.n	a11, a2
40081096:	05ad      	mov.n	a10, a5
40081098:	ffec65        	call8	40080f60 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
4008109b:	02dd      	mov.n	a13, a2
4008109d:	02bd      	mov.n	a11, a2
4008109f:	05ad      	mov.n	a10, a5
400810a1:	0c0c      	movi.n	a12, 0
400810a3:	ffe425        	call8	40080ee4 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
400810a6:	03bd      	mov.n	a11, a3
400810a8:	05ad      	mov.n	a10, a5
400810aa:	0c0c      	movi.n	a12, 0
400810ac:	ffeb25        	call8	40080f60 <set_chunk_size>
400810af:	04dd      	mov.n	a13, a4
400810b1:	03bd      	mov.n	a11, a3
400810b3:	05ad      	mov.n	a10, a5
400810b5:	0c0c      	movi.n	a12, 0
400810b7:	ffe2e5        	call8	40080ee4 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
400810ba:	03bd      	mov.n	a11, a3
400810bc:	05ad      	mov.n	a10, a5
400810be:	1c0c      	movi.n	a12, 1
400810c0:	ffe5e5        	call8	40080f20 <set_chunk_used>

	free_list_add(h, chunk0_size);
400810c3:	02bd      	mov.n	a11, a2
400810c5:	05ad      	mov.n	a10, a5
400810c7:	ffed25        	call8	40080f98 <free_list_add>
}
400810ca:	f01d      	retw.n

400810cc <arch_printk_char_out>:
	CODE_UNREACHABLE;
}

/* Boot-time static default printk handler, possibly to be overridden later. */
int arch_printk_char_out(int c)
{
400810cc:	004136        	entry	a1, 32
	if (c == '\n') {
400810cf:	079266        	bnei	a2, 10, 400810da <arch_printk_char_out+0xe>
		esp32_rom_uart_tx_one_char('\r');
400810d2:	da0c      	movi.n	a10, 13
400810d4:	fd4081        	l32r	a8, 400805d4 <_iram_text_start+0x84>
400810d7:	0008e0        	callx8	a8
	}
	esp32_rom_uart_tx_one_char(c);
400810da:	74a020        	extui	a10, a2, 0, 8
400810dd:	fd3d81        	l32r	a8, 400805d4 <_iram_text_start+0x84>
400810e0:	0008e0        	callx8	a8
	return 0;
}
400810e3:	020c      	movi.n	a2, 0
400810e5:	f01d      	retw.n
	...

400810e8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
400810e8:	004136        	entry	a1, 32
400810eb:	fd3ba1        	l32r	a10, 400805d8 <_iram_text_start+0x88>
400810ee:	015465        	call8	40082634 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
400810f1:	fd3a21        	l32r	a2, 400805dc <_iram_text_start+0x8c>
400810f4:	0062a2        	s32i	a10, a2, 0
	__stdout_hook_install(console_out);
400810f7:	fd3a21        	l32r	a2, 400805e0 <_iram_text_start+0x90>
400810fa:	02ad      	mov.n	a10, a2
400810fc:	00a9a5        	call8	40081b98 <__stdout_hook_install>
	__printk_hook_install(console_out);
400810ff:	02ad      	mov.n	a10, a2
40081101:	ffa4a5        	call8	40080b4c <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
40081104:	020c      	movi.n	a2, 0
40081106:	f01d      	retw.n

40081108 <console_out>:
{
40081108:	004136        	entry	a1, 32
	if ('\n' == c) {
4008110b:	fd3431        	l32r	a3, 400805dc <_iram_text_start+0x8c>
4008110e:	0a9266        	bnei	a2, 10, 4008111c <console_out+0x14>
40081111:	03a8      	l32i.n	a10, a3, 0
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
40081113:	2a88      	l32i.n	a8, a10, 8
40081115:	db0c      	movi.n	a11, 13
40081117:	1888      	l32i.n	a8, a8, 4
40081119:	0008e0        	callx8	a8
	uart_poll_out(uart_console_dev, c);
4008111c:	03a8      	l32i.n	a10, a3, 0
4008111e:	2a38      	l32i.n	a3, a10, 8
40081120:	74b020        	extui	a11, a2, 0, 8
40081123:	1338      	l32i.n	a3, a3, 4
40081125:	0003e0        	callx8	a3
}
40081128:	f01d      	retw.n
	...

4008112c <clock_control_esp32_on>:
	REG_WRITE(APB_CTRL_PLL_TICK_CONF_REG, PLL_APB_CLK_FREQ - 1);
}

static int clock_control_esp32_on(const struct device *dev,
				  clock_control_subsys_t sys)
{
4008112c:	004136        	entry	a1, 32
	uint32_t bank = GET_REG_BANK(sys);
	uint32_t offset =  GET_REG_OFFSET(sys);

	__ASSERT_NO_MSG(bank >= CLOCK_REGS_BANK_COUNT);

	esp32_set_mask32(BIT(offset), clock_control_regs[bank].clk);
4008112f:	180c      	movi.n	a8, 1
	uint32_t bank = GET_REG_BANK(sys);
40081131:	419530        	srli	a9, a3, 5
	esp32_set_mask32(BIT(offset), clock_control_regs[bank].clk);
40081134:	401300        	ssl	a3
40081137:	a13800        	sll	a3, a8
4008113a:	fd2a81        	l32r	a8, 400805e4 <_iram_text_start+0x94>
4008113d:	1199d0        	slli	a9, a9, 3
40081140:	889a      	add.n	a8, a8, a9
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
40081142:	08a8      	l32i.n	a10, a8, 0
	esp32_clear_mask32(BIT(offset), clock_control_regs[bank].rst);
	return 0;
}
40081144:	020c      	movi.n	a2, 0
40081146:	0020c0        	memw
40081149:	0a98      	l32i.n	a9, a10, 0
#include <stdbool.h>
#include <arch/xtensa/arch.h>

static inline void esp32_set_mask32(uint32_t v, uint32_t mem_addr)
{
	sys_write32(sys_read32(mem_addr) | v, mem_addr);
4008114b:	209390        	or	a9, a3, a9
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
4008114e:	0020c0        	memw
40081151:	0a99      	s32i.n	a9, a10, 0
	return *(volatile uint32_t *)addr;
40081153:	1898      	l32i.n	a9, a8, 4
}

static inline void esp32_clear_mask32(uint32_t v, uint32_t mem_addr)
{
	sys_write32(sys_read32(mem_addr) & ~v, mem_addr);
40081155:	f87c      	movi.n	a8, -1
40081157:	0020c0        	memw
4008115a:	09a8      	l32i.n	a10, a9, 0
4008115c:	308830        	xor	a8, a8, a3
4008115f:	1088a0        	and	a8, a8, a10
	*(volatile uint32_t *)addr = data;
40081162:	0020c0        	memw
40081165:	0989      	s32i.n	a8, a9, 0
40081167:	f01d      	retw.n
40081169:	000000        	ill

4008116c <clock_control_esp32_get_status>:
	return 0;
}

static enum clock_control_status clock_control_esp32_get_status(const struct device *dev,
								clock_control_subsys_t sys)
{
4008116c:	004136        	entry	a1, 32
	ARG_UNUSED(dev);
	uint32_t bank = GET_REG_BANK(sys);
4008116f:	418530        	srli	a8, a3, 5
	uint32_t offset =  GET_REG_OFFSET(sys);

	if (DPORT_GET_PERI_REG_MASK(clock_control_regs[bank].clk, BIT(offset))) {
40081172:	1198d0        	slli	a9, a8, 3
40081175:	fd1b81        	l32r	a8, 400805e4 <_iram_text_start+0x94>
40081178:	889a      	add.n	a8, a8, a9
 * @return Value
 */
static inline uint32_t IRAM_ATTR DPORT_READ_PERI_REG(uint32_t reg)
{
#if defined(BOOTLOADER_BUILD) || defined(CONFIG_FREERTOS_UNICORE) || !defined(ESP_PLATFORM)
    return _DPORT_REG_READ(reg);
4008117a:	0828      	l32i.n	a2, a8, 0
		return CLOCK_CONTROL_STATUS_ON;
	}
	return CLOCK_CONTROL_STATUS_OFF;
}
4008117c:	180c      	movi.n	a8, 1
4008117e:	0020c0        	memw
40081181:	0228      	l32i.n	a2, a2, 0
	if (DPORT_GET_PERI_REG_MASK(clock_control_regs[bank].clk, BIT(offset))) {
40081183:	400300        	ssr	a3
40081186:	912020        	srl	a2, a2
40081189:	043020        	extui	a3, a2, 0, 1
}
4008118c:	220c      	movi.n	a2, 2
4008118e:	832830        	moveqz	a2, a8, a3
40081191:	f01d      	retw.n
	...

40081194 <clock_control_esp32_get_rate>:

static int clock_control_esp32_get_rate(const struct device *dev,
					clock_control_subsys_t sub_system,
					uint32_t *rate)
{
40081194:	004136        	entry	a1, 32
	ARG_UNUSED(sub_system);

	uint32_t xtal_freq_sel = DEV_CFG(dev)->xtal_freq_sel;
	uint32_t soc_clk_sel = REG_GET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL);
40081197:	fd1481        	l32r	a8, 400805e8 <_iram_text_start+0x98>
4008119a:	0020c0        	memw
4008119d:	0888      	l32i.n	a8, a8, 0
4008119f:	158b80        	extui	a8, a8, 27, 2

	switch (soc_clk_sel) {
400811a2:	688c      	beqz.n	a8, 400811ac <clock_control_esp32_get_rate+0x18>
400811a4:	020c      	movi.n	a2, 0
400811a6:	171826        	beqi	a8, 1, 400811c1 <clock_control_esp32_get_rate+0x2d>
400811a9:	000706        	j	400811c9 <clock_control_esp32_get_rate+0x35>
	uint32_t xtal_freq_sel = DEV_CFG(dev)->xtal_freq_sel;
400811ac:	1228      	l32i.n	a2, a2, 4
	case RTC_CNTL_SOC_CLK_SEL_XTL:
		*rate = xtal_freq[xtal_freq_sel];
400811ae:	2228      	l32i.n	a2, a2, 8
400811b0:	1192e0        	slli	a9, a2, 2
400811b3:	fd0e21        	l32r	a2, 400805ec <_iram_text_start+0x9c>
400811b6:	229a      	add.n	a2, a2, a9
400811b8:	0228      	l32i.n	a2, a2, 0
400811ba:	0429      	s32i.n	a2, a4, 0
		return 0;
400811bc:	082d      	mov.n	a2, a8
400811be:	000306        	j	400811ce <clock_control_esp32_get_rate+0x3a>
	case RTC_CNTL_SOC_CLK_SEL_PLL:
		*rate = MHZ(80);
400811c1:	fd0b81        	l32r	a8, 400805f0 <_iram_text_start+0xa0>
400811c4:	0489      	s32i.n	a8, a4, 0
		return 0;
400811c6:	000106        	j	400811ce <clock_control_esp32_get_rate+0x3a>
	default:
		*rate = 0;
400811c9:	0429      	s32i.n	a2, a4, 0
		return -ENOTSUP;
400811cb:	ddaf22        	movi	a2, -35
	}
}
400811ce:	f01d      	retw.n

400811d0 <clock_control_esp32_init>:

static int clock_control_esp32_init(const struct device *dev)
{
400811d0:	004136        	entry	a1, 32
	struct esp32_clock_config *cfg = DEV_CFG(dev);
400811d3:	1238      	l32i.n	a3, a2, 4

	/* Wait for UART first before changing freq to avoid garbage on console */
	esp32_rom_uart_tx_wait_idle(0);
400811d5:	0a0c      	movi.n	a10, 0
400811d7:	fd1381        	l32r	a8, 40080624 <_iram_text_start+0xd4>
400811da:	0008e0        	callx8	a8

	switch (cfg->clk_src_sel) {
400811dd:	0368      	l32i.n	a6, a3, 0
400811df:	968c      	beqz.n	a6, 400811ec <clock_control_esp32_init+0x1c>
		break;
	case ESP32_CLK_SRC_PLL:
		cpuclk_pll_configure(cfg->xtal_freq_sel, cfg->cpu_freq);
		break;
	default:
		return -EINVAL;
400811e1:	a26c      	movi.n	a2, -22
	switch (cfg->clk_src_sel) {
400811e3:	021626        	beqi	a6, 1, 400811e9 <clock_control_esp32_init+0x19>
400811e6:	006ec6        	j	400813a5 <clock_control_esp32_init+0x1d5>
400811e9:	001186        	j	40081233 <clock_control_esp32_init+0x63>
		REG_SET_FIELD(APB_CTRL_SYSCLK_CONF_REG, APB_CTRL_PRE_DIV_CNT, cfg->xtal_div);
400811ec:	fd0251        	l32r	a5, 400805f4 <_iram_text_start+0xa4>
400811ef:	3328      	l32i.n	a2, a3, 12
400811f1:	0020c0        	memw
400811f4:	0548      	l32i.n	a4, a5, 0
400811f6:	00ac62        	movi	a6, 0xfffffc00
400811f9:	104460        	and	a4, a4, a6
400811fc:	942020        	extui	a2, a2, 0, 10
400811ff:	202240        	or	a2, a2, a4
40081202:	0020c0        	memw
40081205:	0529      	s32i.n	a2, a5, 0
		REG_WRITE(APB_CTRL_XTAL_TICK_CONF_REG, xtal_freq[cfg->xtal_freq_sel] - 1);
40081207:	2328      	l32i.n	a2, a3, 8
		REG_SET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL, RTC_CNTL_SOC_CLK_SEL_XTL);
40081209:	fcfc51        	l32r	a5, 400805fc <_iram_text_start+0xac>
		REG_WRITE(APB_CTRL_XTAL_TICK_CONF_REG, xtal_freq[cfg->xtal_freq_sel] - 1);
4008120c:	1142e0        	slli	a4, a2, 2
4008120f:	fcf721        	l32r	a2, 400805ec <_iram_text_start+0x9c>
40081212:	224a      	add.n	a2, a2, a4
40081214:	0228      	l32i.n	a2, a2, 0
40081216:	fcf841        	l32r	a4, 400805f8 <_iram_text_start+0xa8>
40081219:	220b      	addi.n	a2, a2, -1
4008121b:	0020c0        	memw
4008121e:	0429      	s32i.n	a2, a4, 0
		REG_SET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL, RTC_CNTL_SOC_CLK_SEL_XTL);
40081220:	fcf241        	l32r	a4, 400805e8 <_iram_text_start+0x98>
40081223:	0020c0        	memw
40081226:	0428      	l32i.n	a2, a4, 0
40081228:	102250        	and	a2, a2, a5
4008122b:	0020c0        	memw
4008122e:	0429      	s32i.n	a2, a4, 0
		break;
40081230:	0051c6        	j	4008137b <clock_control_esp32_init+0x1ab>
		cpuclk_pll_configure(cfg->xtal_freq_sel, cfg->cpu_freq);
40081233:	1328      	l32i.n	a2, a3, 4
	switch (cpu_freq) {
40081235:	a0a042        	movi	a4, 160
		cpuclk_pll_configure(cfg->xtal_freq_sel, cfg->cpu_freq);
40081238:	2378      	l32i.n	a7, a3, 8
	switch (cpu_freq) {
4008123a:	0c1247        	beq	a2, a4, 4008124a <clock_control_esp32_init+0x7a>
4008123d:	f0a052        	movi	a5, 240
		cpu_period_sel = DPORT_CPUPERIOD_SEL_240;
40081240:	240c      	movi.n	a4, 2
	switch (cpu_freq) {
40081242:	081257        	beq	a2, a5, 4008124e <clock_control_esp32_init+0x7e>
	uint32_t cpu_period_sel = DPORT_CPUPERIOD_SEL_80;
40081245:	040c      	movi.n	a4, 0
40081247:	000046        	j	4008124c <clock_control_esp32_init+0x7c>
		cpu_period_sel = DPORT_CPUPERIOD_SEL_160;
4008124a:	064d      	mov.n	a4, a6
		pll_freq = RTC_PLL_FREQ_320M;
4008124c:	060c      	movi.n	a6, 0
	CLEAR_PERI_REG_MASK(RTC_CNTL_OPTIONS0_REG,
4008124e:	fcec51        	l32r	a5, 40080600 <_iram_text_start+0xb0>
40081251:	fcec81        	l32r	a8, 40080604 <_iram_text_start+0xb4>
40081254:	0020c0        	memw
40081257:	0528      	l32i.n	a2, a5, 0
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_IR_CAL_DELAY, BBPLL_IR_CAL_DELAY_VAL);
40081259:	8d1c      	movi.n	a13, 24
	CLEAR_PERI_REG_MASK(RTC_CNTL_OPTIONS0_REG,
4008125b:	102280        	and	a2, a2, a8
4008125e:	0020c0        	memw
40081261:	0529      	s32i.n	a2, a5, 0
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_IR_CAL_DELAY, BBPLL_IR_CAL_DELAY_VAL);
40081263:	0c0c      	movi.n	a12, 0
40081265:	04a0b2        	movi	a11, 4
40081268:	66a0a2        	movi	a10, 102
4008126b:	fcef81        	l32r	a8, 40080628 <_iram_text_start+0xd8>
4008126e:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_IR_CAL_EXT_CAP, BBPLL_IR_CAL_EXT_CAP_VAL);
40081271:	0d2c      	movi.n	a13, 32
40081273:	1c0c      	movi.n	a12, 1
40081275:	04a0b2        	movi	a11, 4
40081278:	66a0a2        	movi	a10, 102
4008127b:	fceb81        	l32r	a8, 40080628 <_iram_text_start+0xd8>
4008127e:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_ENB_FCAL, BBPLL_OC_ENB_FCAL_VAL);
40081281:	4c0c      	movi.n	a12, 4
40081283:	0cbd      	mov.n	a11, a12
40081285:	9aa0d2        	movi	a13, 154
40081288:	66a0a2        	movi	a10, 102
4008128b:	fce781        	l32r	a8, 40080628 <_iram_text_start+0xd8>
4008128e:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_ENB_VCON, BBPLL_OC_ENB_VCON_VAL);
40081291:	0d0c      	movi.n	a13, 0
40081293:	ac0c      	movi.n	a12, 10
40081295:	4b0c      	movi.n	a11, 4
40081297:	66a0a2        	movi	a10, 102
4008129a:	fce381        	l32r	a8, 40080628 <_iram_text_start+0xd8>
4008129d:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_BBADC_CAL_7_0, BBPLL_BBADC_CAL_7_0_VAL);
400812a0:	0d0c      	movi.n	a13, 0
400812a2:	cc0c      	movi.n	a12, 12
400812a4:	4b0c      	movi.n	a11, 4
400812a6:	66a0a2        	movi	a10, 102
400812a9:	fcdf81        	l32r	a8, 40080628 <_iram_text_start+0xd8>
400812ac:	0008e0        	callx8	a8
	REG_SET_FIELD(RTC_CNTL_REG, RTC_CNTL_DIG_DBIAS_WAK, dbias_wak);
400812af:	fcd621        	l32r	a2, 40080608 <_iram_text_start+0xb8>
400812b2:	fcd681        	l32r	a8, 4008060c <_iram_text_start+0xbc>
400812b5:	0020c0        	memw
400812b8:	0258      	l32i.n	a5, a2, 0
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_ENDIV5, cfg->endiv5);
400812ba:	bc0c      	movi.n	a12, 11
	REG_SET_FIELD(RTC_CNTL_REG, RTC_CNTL_DIG_DBIAS_WAK, dbias_wak);
400812bc:	105580        	and	a5, a5, a8
400812bf:	fcd481        	l32r	a8, 40080610 <_iram_text_start+0xc0>
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_ENDIV5, cfg->endiv5);
400812c2:	4b0c      	movi.n	a11, 4
	REG_SET_FIELD(RTC_CNTL_REG, RTC_CNTL_DIG_DBIAS_WAK, dbias_wak);
400812c4:	205580        	or	a5, a5, a8
400812c7:	0020c0        	memw
400812ca:	0259      	s32i.n	a5, a2, 0
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_ENDIV5, cfg->endiv5);
400812cc:	fcd251        	l32r	a5, 40080614 <_iram_text_start+0xc4>
400812cf:	1126c0        	slli	a2, a6, 4
400812d2:	c06260        	sub	a6, a2, a6
400812d5:	256a      	add.n	a2, a5, a6
400812d7:	0102d2        	l8ui	a13, a2, 1
400812da:	66a0a2        	movi	a10, 102
400812dd:	fcd281        	l32r	a8, 40080628 <_iram_text_start+0xd8>
400812e0:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_BBADC_DSMP, cfg->bbadc_dsmp);
400812e3:	0202d2        	l8ui	a13, a2, 2
	uint8_t i2c_bbpll_lref = (bb_cfg->lref << 7) | (bb_cfg->div10_8 << 4) | (bb_cfg->div_ref);
400812e6:	1127f0        	slli	a2, a7, 1
400812e9:	227a      	add.n	a2, a2, a7
400812eb:	1122f0        	slli	a2, a2, 1
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_BBADC_DSMP, cfg->bbadc_dsmp);
400812ee:	9c0c      	movi.n	a12, 9
400812f0:	4b0c      	movi.n	a11, 4
400812f2:	66a0a2        	movi	a10, 102
	uint8_t i2c_bbpll_lref = (bb_cfg->lref << 7) | (bb_cfg->div10_8 << 4) | (bb_cfg->div_ref);
400812f5:	226a      	add.n	a2, a2, a6
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_BBADC_DSMP, cfg->bbadc_dsmp);
400812f7:	fccc81        	l32r	a8, 40080628 <_iram_text_start+0xd8>
400812fa:	0008e0        	callx8	a8
	uint8_t i2c_bbpll_lref = (bb_cfg->lref << 7) | (bb_cfg->div10_8 << 4) | (bb_cfg->div_ref);
400812fd:	252a      	add.n	a2, a5, a2
400812ff:	0602d2        	l8ui	a13, a2, 6
40081302:	050252        	l8ui	a5, a2, 5
40081305:	11dd90        	slli	a13, a13, 7
40081308:	1155c0        	slli	a5, a5, 4
4008130b:	20dd50        	or	a13, a13, a5
4008130e:	030252        	l8ui	a5, a2, 3
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_LREF, i2c_bbpll_lref);
40081311:	2c0c      	movi.n	a12, 2
	uint8_t i2c_bbpll_lref = (bb_cfg->lref << 7) | (bb_cfg->div10_8 << 4) | (bb_cfg->div_ref);
40081313:	20dd50        	or	a13, a13, a5
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_LREF, i2c_bbpll_lref);
40081316:	74d0d0        	extui	a13, a13, 0, 8
40081319:	4b0c      	movi.n	a11, 4
4008131b:	66a0a2        	movi	a10, 102
4008131e:	fcc281        	l32r	a8, 40080628 <_iram_text_start+0xd8>
40081321:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_DIV_7_0, bb_cfg->div7_0);
40081324:	0402d2        	l8ui	a13, a2, 4
40081327:	3c0c      	movi.n	a12, 3
40081329:	4b0c      	movi.n	a11, 4
4008132b:	66a0a2        	movi	a10, 102
4008132e:	fcbe81        	l32r	a8, 40080628 <_iram_text_start+0xd8>
40081331:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_DCUR, ((bb_cfg->bw << 6) | bb_cfg->dcur));
40081334:	0802d2        	l8ui	a13, a2, 8
40081337:	070222        	l8ui	a2, a2, 7
4008133a:	11dda0        	slli	a13, a13, 6
4008133d:	20dd20        	or	a13, a13, a2
40081340:	74d0d0        	extui	a13, a13, 0, 8
40081343:	5c0c      	movi.n	a12, 5
40081345:	4b0c      	movi.n	a11, 4
40081347:	66a0a2        	movi	a10, 102
4008134a:	fcb781        	l32r	a8, 40080628 <_iram_text_start+0xd8>
4008134d:	0008e0        	callx8	a8
	DPORT_REG_WRITE(DPORT_CPU_PER_CONF_REG, cpu_period_sel);
40081350:	fcb221        	l32r	a2, 40080618 <_iram_text_start+0xc8>
	REG_SET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL, RTC_CNTL_SOC_CLK_SEL_PLL);
40081353:	fcaa51        	l32r	a5, 400805fc <_iram_text_start+0xac>
	DPORT_REG_WRITE(DPORT_CPU_PER_CONF_REG, cpu_period_sel);
40081356:	0020c0        	memw
40081359:	0249      	s32i.n	a4, a2, 0
	REG_SET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL, RTC_CNTL_SOC_CLK_SEL_PLL);
4008135b:	fca341        	l32r	a4, 400805e8 <_iram_text_start+0x98>
4008135e:	0020c0        	memw
40081361:	0428      	l32i.n	a2, a4, 0
40081363:	102250        	and	a2, a2, a5
40081366:	fcad51        	l32r	a5, 4008061c <_iram_text_start+0xcc>
40081369:	202250        	or	a2, a2, a5
4008136c:	0020c0        	memw
4008136f:	0429      	s32i.n	a2, a4, 0
	REG_WRITE(APB_CTRL_PLL_TICK_CONF_REG, PLL_APB_CLK_FREQ - 1);
40081371:	fcab21        	l32r	a2, 40080620 <_iram_text_start+0xd0>
40081374:	f44c      	movi.n	a4, 79
40081376:	0020c0        	memw
40081379:	0249      	s32i.n	a4, a2, 0

	/* Re-calculate the CCOUNT register value to make time calculation correct.
	 * This should be updated on each frequency change
	 * New CCOUNT = Current CCOUNT * (new freq / old freq)
	 */
	XTHAL_SET_CCOUNT((uint64_t)XTHAL_GET_CCOUNT() * cfg->cpu_freq / xtal_freq[cfg->xtal_freq_sel]);
4008137b:	03ea40        	rsr.ccount	a4
4008137e:	13a8      	l32i.n	a10, a3, 4
40081380:	2338      	l32i.n	a3, a3, 8
40081382:	312f40        	srai	a2, a4, 31
40081385:	1153e0        	slli	a5, a3, 2
40081388:	fc9931        	l32r	a3, 400805ec <_iram_text_start+0x9c>
4008138b:	8222a0        	mull	a2, a2, a10
4008138e:	a2ba40        	muluh	a11, a10, a4
40081391:	335a      	add.n	a3, a3, a5
40081393:	03c8      	l32i.n	a12, a3, 0
40081395:	82aa40        	mull	a10, a10, a4
40081398:	0d0c      	movi.n	a13, 0
4008139a:	80b2b0        	add	a11, a2, a11
4008139d:	0231e5        	call8	400836bc <__udivdi3>
400813a0:	13eaa0        	wsr.ccount	a10
	return 0;
400813a3:	020c      	movi.n	a2, 0
}
400813a5:	f01d      	retw.n
	...

400813a8 <clock_control_esp32_off>:
{
400813a8:	004136        	entry	a1, 32
	uint32_t bank = GET_REG_BANK(sys);
400813ab:	419530        	srli	a9, a3, 5
	esp32_clear_mask32(BIT(offset), clock_control_regs[bank].clk);
400813ae:	180c      	movi.n	a8, 1
400813b0:	401300        	ssl	a3
400813b3:	a13800        	sll	a3, a8
400813b6:	1189d0        	slli	a8, a9, 3
400813b9:	fc8a91        	l32r	a9, 400805e4 <_iram_text_start+0x94>
}
400813bc:	020c      	movi.n	a2, 0
	esp32_clear_mask32(BIT(offset), clock_control_regs[bank].clk);
400813be:	998a      	add.n	a9, a9, a8
	return *(volatile uint32_t *)addr;
400813c0:	09a8      	l32i.n	a10, a9, 0
400813c2:	f87c      	movi.n	a8, -1
400813c4:	0020c0        	memw
400813c7:	0ab8      	l32i.n	a11, a10, 0
400813c9:	308830        	xor	a8, a8, a3
400813cc:	1088b0        	and	a8, a8, a11
	*(volatile uint32_t *)addr = data;
400813cf:	0020c0        	memw
400813d2:	0a89      	s32i.n	a8, a10, 0
	return *(volatile uint32_t *)addr;
400813d4:	1988      	l32i.n	a8, a9, 4
400813d6:	0020c0        	memw
400813d9:	0898      	l32i.n	a9, a8, 0
	sys_write32(sys_read32(mem_addr) | v, mem_addr);
400813db:	203390        	or	a3, a3, a9
	*(volatile uint32_t *)addr = data;
400813de:	0020c0        	memw
400813e1:	0839      	s32i.n	a3, a8, 0
}
400813e3:	f01d      	retw.n
400813e5:	000000        	ill

400813e8 <set_reg>:

	return (uint32_t *)(DT_INST_REG_ADDR(0) + off);
}

static int set_reg(uint32_t pin, uint32_t clr_mask, uint32_t set_mask)
{
400813e8:	004136        	entry	a1, 32
	if (pin >= ARRAY_SIZE(pin_mux_off)) {
400813eb:	782c      	movi.n	a8, 39
	volatile uint32_t *reg = reg_for_pin(pin);
	uint32_t v;

	if (!reg) {
		return -EINVAL;
400813ed:	aa6c      	movi.n	a10, -22
	if (pin >= ARRAY_SIZE(pin_mux_off)) {
400813ef:	253827        	bltu	a8, a2, 40081418 <set_reg+0x30>
	off = pin_mux_off[pin];
400813f2:	fc8e91        	l32r	a9, 4008062c <_iram_text_start+0xdc>
400813f5:	992a      	add.n	a9, a9, a2
400813f7:	000992        	l8ui	a9, a9, 0
	if (!off) {
400813fa:	a99c      	beqz.n	a9, 40081418 <set_reg+0x30>
	return (uint32_t *)(DT_INST_REG_ADDR(0) + off);
400813fc:	fc8d21        	l32r	a2, 40080630 <_iram_text_start+0xe0>
	}

	v = *reg;
	v &= ~clr_mask;
400813ff:	f87c      	movi.n	a8, -1
	return (uint32_t *)(DT_INST_REG_ADDR(0) + off);
40081401:	992a      	add.n	a9, a9, a2
	v = *reg;
40081403:	0020c0        	memw
40081406:	0928      	l32i.n	a2, a9, 0
	v &= ~clr_mask;
40081408:	308830        	xor	a8, a8, a3
4008140b:	108820        	and	a8, a8, a2
	v |= set_mask;
4008140e:	208840        	or	a8, a8, a4
	*reg = v;
40081411:	0020c0        	memw
40081414:	0989      	s32i.n	a8, a9, 0

	return 0;
40081416:	0a0c      	movi.n	a10, 0
}
40081418:	0a2d      	mov.n	a2, a10
4008141a:	f01d      	retw.n

4008141c <pinmux_set>:

static int pinmux_set(const struct device *dev, uint32_t pin, uint32_t func)
{
4008141c:	004136        	entry	a1, 32
4008141f:	20a330        	or	a10, a3, a3
	 * value due to a deficiency in the pinmux API.  This setting is
	 * part of the GPIO API.
	 */

	if (func > 6) {
		return -EINVAL;
40081422:	eaaf22        	movi	a2, -22
	if (func > 6) {
40081425:	1174f6        	bgeui	a4, 7, 4008143a <pinmux_set+0x1e>
	}

	return set_reg(pin, MCU_SEL_M, func<<MCU_SEL_S | 2<<FUN_DRV_S);
40081428:	fc83c1        	l32r	a12, 40080634 <_iram_text_start+0xe4>
4008142b:	114440        	slli	a4, a4, 12
4008142e:	fc82b1        	l32r	a11, 40080638 <_iram_text_start+0xe8>
40081431:	20c4c0        	or	a12, a4, a12
40081434:	fffb25        	call8	400813e8 <set_reg>
40081437:	202aa0        	or	a2, a10, a10
}
4008143a:	f01d      	retw.n

4008143c <pinmux_input>:
	return -EINVAL;
}

#define CFG(id)   ((GPIO_ ## id ## _REG) & 0xff)
static int pinmux_input(const struct device *dev, uint32_t pin, uint8_t func)
{
4008143c:	004136        	entry	a1, 32
	static const uint8_t offs[2][3] = {
		{ CFG(ENABLE1_W1TC), CFG(ENABLE1_W1TS), 32 },
		{ CFG(ENABLE_W1TC), CFG(ENABLE_W1TS), 0 },
	};
	const uint8_t *line = offs[pin < 32];
4008143f:	f81c      	movi.n	a8, 31
{
40081441:	744040        	extui	a4, a4, 0, 8
	const uint8_t *line = offs[pin < 32];
40081444:	00a052        	movi	a5, 0
40081447:	013837        	bltu	a8, a3, 4008144c <pinmux_input+0x10>
4008144a:	350c      	movi.n	a5, 3
4008144c:	fc7c81        	l32r	a8, 4008063c <_iram_text_start+0xec>
	/* Since PINMUX_INPUT_ENABLED == 1 and PINMUX_OUTPUT_ENABLED == 0,
	 * we can not set a gpio port as input and output at the same time,
	 * So we always set the gpio as input. Thus, the gpio can be used on
	 * I2C drivers for example.
	 */
	r = set_reg(pin, 0, FUN_IE);
4008144f:	00a2c2        	movi	a12, 0x200
40081452:	0b0c      	movi.n	a11, 0
40081454:	03ad      	mov.n	a10, a3
	const uint8_t *line = offs[pin < 32];
40081456:	805580        	add	a5, a5, a8
	r = set_reg(pin, 0, FUN_IE);
40081459:	fff8e5        	call8	400813e8 <set_reg>
	if (func == PINMUX_INPUT_ENABLED) {
4008145c:	051466        	bnei	a4, 1, 40081465 <pinmux_input+0x29>
		reg = (uint32_t *)(DR_REG_GPIO_BASE + line[0]);
4008145f:	000582        	l8ui	a8, a5, 0
40081462:	000286        	j	40081470 <pinmux_input+0x34>
	} else if (func == PINMUX_OUTPUT_ENABLED) {
40081465:	74ec      	bnez.n	a4, 40081490 <pinmux_input+0x54>
		if (pin >= 34U && pin <= 39U) {
40081467:	dec342        	addi	a4, a3, -34
4008146a:	2264b6        	bltui	a4, 6, 40081490 <pinmux_input+0x54>
			/* These pins are input only */
			return -EINVAL;
		}
		reg = (uint32_t *)(DR_REG_GPIO_BASE + line[1]);
4008146d:	010582        	l8ui	a8, a5, 1
40081470:	fc7441        	l32r	a4, 40080640 <_iram_text_start+0xf0>
40081473:	884a      	add.n	a8, a8, a4
	} else {
		return -EINVAL;
	}

	if (r < 0) {
40081475:	019a96        	bltz	a10, 40081492 <pinmux_input+0x56>
		return r;
	}

	*reg = BIT(pin - line[2]);
40081478:	020542        	l8ui	a4, a5, 2
4008147b:	150c      	movi.n	a5, 1
4008147d:	c03340        	sub	a3, a3, a4
40081480:	401300        	ssl	a3
40081483:	a13500        	sll	a3, a5
40081486:	0020c0        	memw
40081489:	0839      	s32i.n	a3, a8, 0

	ARG_UNUSED(dev);
	return 0;
4008148b:	0a0c      	movi.n	a10, 0
4008148d:	000046        	j	40081492 <pinmux_input+0x56>
		return -EINVAL;
40081490:	aa6c      	movi.n	a10, -22
}
40081492:	0a2d      	mov.n	a2, a10
40081494:	f01d      	retw.n
	...

40081498 <pinmux_initialize>:
	.pullup = pinmux_pullup,
	.input = pinmux_input
};

static int pinmux_initialize(const struct device *device)
{
40081498:	004136        	entry	a1, 32
	uint32_t pin;

	for (pin = 0U; pin < ARRAY_SIZE(pin_mux_off); pin++) {
4008149b:	020c      	movi.n	a2, 0
		pinmux_set(NULL, pin, 0);
4008149d:	203220        	or	a3, a2, a2
400814a0:	20b220        	or	a11, a2, a2
400814a3:	20c330        	or	a12, a3, a3
400814a6:	20a330        	or	a10, a3, a3
400814a9:	fff725        	call8	4008141c <pinmux_set>
	for (pin = 0U; pin < ARRAY_SIZE(pin_mux_off); pin++) {
400814ac:	221b      	addi.n	a2, a2, 1
400814ae:	882c      	movi.n	a8, 40
400814b0:	ec9287        	bne	a2, a8, 400814a0 <pinmux_initialize+0x8>
	}

	ARG_UNUSED(device);
	return 0;
}
400814b3:	020c      	movi.n	a2, 0
400814b5:	f01d      	retw.n
	...

400814b8 <pinmux_pullup>:
{
400814b8:	004136        	entry	a1, 32
400814bb:	744040        	extui	a4, a4, 0, 8
400814be:	03ad      	mov.n	a10, a3
	switch (func) {
400814c0:	848c      	beqz.n	a4, 400814cc <pinmux_pullup+0x14>
400814c2:	0f1426        	beqi	a4, 1, 400814d5 <pinmux_pullup+0x1d>
	return -EINVAL;
400814c5:	aa6c      	movi.n	a10, -22
400814c7:	0004c6        	j	400814de <pinmux_pullup+0x26>
400814ca:	c20000        	quou	a0, a0, a0
		return set_reg(pin, FUN_PU, FUN_PD);
400814cd:	b280a0        	mulsh	a8, a0, a10
400814d0:	4600a1        	l32r	a10, 40052cd0 <esp32_rom_gpio_matrix_out+0x48dc4>
400814d3:	c20001        	l32r	a0, 40071cd4 <esp32_rom_gpio_matrix_out+0x67dc8>
		return set_reg(pin, FUN_PD, FUN_PU);
400814d6:	b200a1        	l32r	a10, 4006dcd8 <esp32_rom_gpio_matrix_out+0x63dcc>
400814d9:	e580a0        	extui	a8, a10, 16, 15
400814dc:	2dfff0        	lsi	f15, a15, 180
}
400814df:	1d0a      	add.n	a1, a13, a0
400814e1:	0000f0        	callx12	a0

400814e4 <pinmux_get>:
{
400814e4:	004136        	entry	a1, 32
	if (pin >= ARRAY_SIZE(pin_mux_off)) {
400814e7:	782c      	movi.n	a8, 39
		return -EINVAL;
400814e9:	a26c      	movi.n	a2, -22
	if (pin >= ARRAY_SIZE(pin_mux_off)) {
400814eb:	1d3837        	bltu	a8, a3, 4008150c <pinmux_get+0x28>
	off = pin_mux_off[pin];
400814ee:	fc4f21        	l32r	a2, 4008062c <_iram_text_start+0xdc>
400814f1:	223a      	add.n	a2, a2, a3
400814f3:	000282        	l8ui	a8, a2, 0
		return -EINVAL;
400814f6:	a26c      	movi.n	a2, -22
	if (!off) {
400814f8:	089c      	beqz.n	a8, 4008150c <pinmux_get+0x28>
	return (uint32_t *)(DT_INST_REG_ADDR(0) + off);
400814fa:	fc4d21        	l32r	a2, 40080630 <_iram_text_start+0xe0>
400814fd:	882a      	add.n	a8, a8, a2
	*func = (*reg & MCU_SEL_M) >> MCU_SEL_S;
400814ff:	0020c0        	memw
40081502:	0828      	l32i.n	a2, a8, 0
40081504:	242c20        	extui	a2, a2, 12, 3
40081507:	0429      	s32i.n	a2, a4, 0
	return 0;
40081509:	00a022        	movi	a2, 0
}
4008150c:	f01d      	retw.n
	...

40081510 <ccompare_isr>:
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
	return val;
}

static void ccompare_isr(const void *arg)
{
40081510:	004136        	entry	a1, 32
	z_xt_ints_off(1 << irq);
}

static ALWAYS_INLINE unsigned int arch_irq_lock(void)
{
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40081513:	0063c0        	rsil	a12, 3
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
40081516:	03eaa0        	rsr.ccount	a10
	ARG_UNUSED(arg);

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t curr = ccount();
	uint32_t dticks = (curr - last_count) / CYC_PER_TICK;
40081519:	fc4a91        	l32r	a9, 40080644 <_iram_text_start+0xf4>
4008151c:	fc4b81        	l32r	a8, 40080648 <_iram_text_start+0xf8>
4008151f:	0029b2        	l32i	a11, a9, 0
40081522:	c0aab0        	sub	a10, a10, a11
40081525:	a2aa80        	muluh	a10, a10, a8

	last_count += dticks * CYC_PER_TICK;
40081528:	fc4981        	l32r	a8, 4008064c <_iram_text_start+0xfc>
	uint32_t dticks = (curr - last_count) / CYC_PER_TICK;
4008152b:	41a9a0        	srli	a10, a10, 9
	last_count += dticks * CYC_PER_TICK;
4008152e:	828a80        	mull	a8, a10, a8
40081531:	8088b0        	add	a8, a8, a11
40081534:	006982        	s32i	a8, a9, 0
	return key;
}

static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
	XTOS_RESTORE_INTLEVEL(key);
40081537:	13e6c0        	wsr.ps	a12
4008153a:	002010        	rsync
		}
		set_ccompare(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
4008153d:	01d2a5        	call8	40083268 <z_clock_announce>
}
40081540:	f01d      	retw.n
	...

40081544 <z_clock_driver_init>:

int z_clock_driver_init(const struct device *device)
{
40081544:	004136        	entry	a1, 32
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
40081547:	03ea80        	rsr.ccount	a8
	ARG_UNUSED(device);

	IRQ_CONNECT(TIMER_IRQ, 0, ccompare_isr, 0, 0);
	set_ccompare(ccount() + CYC_PER_TICK);
4008154a:	fc4091        	l32r	a9, 4008064c <_iram_text_start+0xfc>
4008154d:	889a      	add.n	a8, a8, a9
	__asm__ volatile ("wsr.CCOMPARE" STRINGIFY(CONFIG_XTENSA_TIMER_ID) " %0"
4008154f:	13f180        	wsr.ccompare1	a8
 */
static inline void z_xt_ints_on(unsigned int mask)
{
	int val;

	__asm__ volatile("rsr.intenable %0" : "=r"(val));
40081552:	03e480        	rsr.intenable	a8
	val |= mask;
40081555:	fc3e91        	l32r	a9, 40080650 <_iram_text_start+0x100>
40081558:	208890        	or	a8, a8, a9
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
4008155b:	13e480        	wsr.intenable	a8
4008155e:	002010        	rsync
	irq_enable(TIMER_IRQ);
	return 0;
}
40081561:	020c      	movi.n	a2, 0
40081563:	f01d      	retw.n
40081565:	000000        	ill

40081568 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
40081568:	004136        	entry	a1, 32
	ARG_UNUSED(idle);

#if defined(CONFIG_TICKLESS_KERNEL)
	ticks = ticks == K_TICKS_FOREVER ? MAX_TICKS : ticks;
4008156b:	020266        	bnei	a2, -1, 40081571 <z_clock_set_timeout+0x9>
4008156e:	fc3921        	l32r	a2, 40080654 <_iram_text_start+0x104>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40081571:	0063c0        	rsil	a12, 3
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
40081574:	03eab0        	rsr.ccount	a11

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t curr = ccount(), cyc, adj;

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK;
40081577:	080c      	movi.n	a8, 0
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
40081579:	220b      	addi.n	a2, a2, -1
	cyc = ticks * CYC_PER_TICK;
4008157b:	532280        	max	a2, a2, a8
4008157e:	fc3581        	l32r	a8, 40080654 <_iram_text_start+0x104>
	adj = (curr - last_count) + (CYC_PER_TICK - 1);
40081581:	fc35a1        	l32r	a10, 40080658 <_iram_text_start+0x108>
	cyc = ticks * CYC_PER_TICK;
40081584:	432280        	min	a2, a2, a8
	adj = (curr - last_count) + (CYC_PER_TICK - 1);
40081587:	fc2f81        	l32r	a8, 40080644 <_iram_text_start+0xf4>
	cyc = ticks * CYC_PER_TICK;
4008158a:	fc30d1        	l32r	a13, 4008064c <_iram_text_start+0xfc>
	adj = (curr - last_count) + (CYC_PER_TICK - 1);
4008158d:	0898      	l32i.n	a9, a8, 0
	cyc = ticks * CYC_PER_TICK;
4008158f:	8222d0        	mull	a2, a2, a13
	adj = (curr - last_count) + (CYC_PER_TICK - 1);
40081592:	c0aa90        	sub	a10, a10, a9
40081595:	aaba      	add.n	a10, a10, a11
	if (cyc <= MAX_CYC - adj) {
40081597:	f87c      	movi.n	a8, -1
40081599:	30e8a0        	xor	a14, a8, a10
4008159c:	013e27        	bltu	a14, a2, 400815a1 <z_clock_set_timeout+0x39>
		cyc += adj;
4008159f:	82aa      	add.n	a8, a2, a10
	} else {
		cyc = MAX_CYC;
	}
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
400815a1:	fc2921        	l32r	a2, 40080648 <_iram_text_start+0xf8>
400815a4:	a28820        	muluh	a8, a8, a2
	cyc += last_count;

	if ((cyc - curr) < MIN_DELAY) {
400815a7:	e7a322        	movi	a2, 0x3e7
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
400815aa:	418980        	srli	a8, a8, 9
400815ad:	8288d0        	mull	a8, a8, a13
	cyc += last_count;
400815b0:	808980        	add	a8, a9, a8
	if ((cyc - curr) < MIN_DELAY) {
400815b3:	c0b8b0        	sub	a11, a8, a11
400815b6:	0232b7        	bltu	a2, a11, 400815bc <z_clock_set_timeout+0x54>
		cyc += CYC_PER_TICK;
400815b9:	8088d0        	add	a8, a8, a13
	__asm__ volatile ("wsr.CCOMPARE" STRINGIFY(CONFIG_XTENSA_TIMER_ID) " %0"
400815bc:	13f180        	wsr.ccompare1	a8
	XTOS_RESTORE_INTLEVEL(key);
400815bf:	13e6c0        	wsr.ps	a12
400815c2:	002010        	rsync
	}

	set_ccompare(cyc);
	k_spin_unlock(&lock, key);
#endif
}
400815c5:	f01d      	retw.n
	...

400815c8 <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
400815c8:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400815cb:	006380        	rsil	a8, 3
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
400815ce:	03ea20        	rsr.ccount	a2
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = (ccount() - last_count) / CYC_PER_TICK;
400815d1:	fc1c91        	l32r	a9, 40080644 <_iram_text_start+0xf4>
400815d4:	0998      	l32i.n	a9, a9, 0
400815d6:	c02290        	sub	a2, a2, a9
400815d9:	fc1b91        	l32r	a9, 40080648 <_iram_text_start+0xf8>
400815dc:	a22290        	muluh	a2, a2, a9
400815df:	412920        	srli	a2, a2, 9
	XTOS_RESTORE_INTLEVEL(key);
400815e2:	13e680        	wsr.ps	a8
400815e5:	002010        	rsync

	k_spin_unlock(&lock, key);
	return ret;
}
400815e8:	f01d      	retw.n
	...

400815ec <z_xtensa_fatal_error>:
	return "na";
#endif
}

void z_xtensa_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
400815ec:	004136        	entry	a1, 32
	if (esf) {
400815ef:	338c      	beqz.n	a3, 400815f6 <z_xtensa_fatal_error+0xa>
		z_xtensa_dump_stack(esf);
400815f1:	03ad      	mov.n	a10, a3
400815f3:	01e0a5        	call8	400833fc <z_xtensa_dump_stack>
	}

	z_fatal_error(reason, esf);
400815f6:	20b330        	or	a11, a3, a3
400815f9:	20a220        	or	a10, a2, a2
400815fc:	010925        	call8	40082690 <z_fatal_error>
}
400815ff:	000090        	retw
	...

40081604 <xtensa_spill_reg_windows>:
        SPILL_ALL_WINDOWS
40081604:	10ccc0        	and	a12, a12, a12
40081607:	408030        	rotw	3
4008160a:	10ccc0        	and	a12, a12, a12
4008160d:	408030        	rotw	3
40081610:	10ccc0        	and	a12, a12, a12
40081613:	408030        	rotw	3
40081616:	10ccc0        	and	a12, a12, a12
40081619:	408030        	rotw	3
4008161c:	10ccc0        	and	a12, a12, a12
4008161f:	408040        	rotw	4
        ret
40081622:	f00d      	ret.n

40081624 <xtensa_save_high_regs>:
	rsr.WINDOWSTART a2
40081624:	034920        	rsr.windowstart	a2
	slli a3, a2, (XCHAL_NUM_AREGS / 4)
40081627:	113200        	slli	a3, a2, 16
	or a2, a2, a3
4008162a:	202230        	or	a2, a2, a3
	rsr.WINDOWBASE a3
4008162d:	034830        	rsr.windowbase	a3
	ssr a3
40081630:	400300        	ssr	a3
	srl a2, a2
40081633:	912020        	srl	a2, a2
	mov a3, a1 /* Stash our original stack pointer */
40081636:	013d      	mov.n	a3, a1
	bbsi a2, 1, _high_gpr_spill_done
40081638:	28e217        	bbsi	a2, 1, 40081664 <_high_gpr_spill_done>
	addi a1, a1, -16
4008163b:	f0c112        	addi	a1, a1, -16
	s32i a4, a1, 0
4008163e:	0149      	s32i.n	a4, a1, 0
	s32i a5, a1, 4
40081640:	1159      	s32i.n	a5, a1, 4
	s32i a6, a1, 8
40081642:	2169      	s32i.n	a6, a1, 8
	s32i a7, a1, 12
40081644:	3179      	s32i.n	a7, a1, 12
	bbsi a2, 2, _high_gpr_spill_done
40081646:	1ae227        	bbsi	a2, 2, 40081664 <_high_gpr_spill_done>
	addi a1, a1, -16
40081649:	f0c112        	addi	a1, a1, -16
	s32i a8, a1, 0
4008164c:	0189      	s32i.n	a8, a1, 0
	s32i a9, a1, 4
4008164e:	1199      	s32i.n	a9, a1, 4
	s32i a10, a1, 8
40081650:	21a9      	s32i.n	a10, a1, 8
	s32i a11, a1, 12
40081652:	31b9      	s32i.n	a11, a1, 12
	bbsi a2, 3, _high_gpr_spill_done
40081654:	0ce237        	bbsi	a2, 3, 40081664 <_high_gpr_spill_done>
	addi a1, a1, -16
40081657:	f0c112        	addi	a1, a1, -16
	s32i a12, a1, 0
4008165a:	01c9      	s32i.n	a12, a1, 0
	s32i a13, a1, 4
4008165c:	11d9      	s32i.n	a13, a1, 4
	s32i a14, a1, 8
4008165e:	0261e2        	s32i	a14, a1, 8
	s32i a15, a1, 12
40081661:	0361f2        	s32i	a15, a1, 12

40081664 <_high_gpr_spill_done>:
	addi a1, a1, -4
40081664:	fcc112        	addi	a1, a1, -4
	s32i a3, a1, 0
40081667:	0139      	s32i.n	a3, a1, 0
	ret
40081669:	f00d      	ret.n
	...

4008166c <xtensa_restore_high_regs>:
	l32i a2, a1, 0
4008166c:	0128      	l32i.n	a2, a1, 0
	addi a1, a1, 4
4008166e:	114b      	addi.n	a1, a1, 4
	mov a3, a2
40081670:	023d      	mov.n	a3, a2
	beq a1, a2, _high_restore_done
40081672:	261127        	beq	a1, a2, 4008169c <_high_restore_done>
	addi a2, a2, -16
40081675:	f0c222        	addi	a2, a2, -16
	l32i a4, a2, 0
40081678:	0248      	l32i.n	a4, a2, 0
	l32i a5, a2, 4
4008167a:	1258      	l32i.n	a5, a2, 4
	l32i a6, a2, 8
4008167c:	2268      	l32i.n	a6, a2, 8
	l32i a7, a2, 12
4008167e:	3278      	l32i.n	a7, a2, 12
	beq a1, a2, _high_restore_done
40081680:	181127        	beq	a1, a2, 4008169c <_high_restore_done>
	addi a2, a2, -16
40081683:	f0c222        	addi	a2, a2, -16
	l32i a8, a2, 0
40081686:	0288      	l32i.n	a8, a2, 0
	l32i a9, a2, 4
40081688:	1298      	l32i.n	a9, a2, 4
	l32i a10, a2, 8
4008168a:	22a8      	l32i.n	a10, a2, 8
	l32i a11, a2, 12
4008168c:	32b8      	l32i.n	a11, a2, 12
	beq a1, a2, _high_restore_done
4008168e:	0a1127        	beq	a1, a2, 4008169c <_high_restore_done>
	addi a2, a2, -16
40081691:	f0c222        	addi	a2, a2, -16
	l32i a12, a2, 0
40081694:	02c8      	l32i.n	a12, a2, 0
	l32i a13, a2, 4
40081696:	12d8      	l32i.n	a13, a2, 4
	l32i a14, a2, 8
40081698:	22e8      	l32i.n	a14, a2, 8
	l32i a15, a2, 12
4008169a:	32f8      	l32i.n	a15, a2, 12

4008169c <_high_restore_done>:
	mov a1, a3 /* Original stack */
4008169c:	031d      	mov.n	a1, a3
	ret
4008169e:	f00d      	ret.n
	...

400816a1 <_restore_context>:
	call0 xtensa_restore_high_regs
400816a1:	fffc85        	call0	4008166c <xtensa_restore_high_regs>
	l32i a0, a1, BSA_PC_OFF
400816a4:	6108      	l32i.n	a0, a1, 24
	wsr.EPC6 a0
400816a6:	13b600        	wsr.epc6	a0
	l32i a0, a1, BSA_PS_OFF
400816a9:	5108      	l32i.n	a0, a1, 20
	wsr.EPS6 a0
400816ab:	13c600        	wsr.eps6	a0
	l32i a0, a1, BSA_SAR_OFF
400816ae:	4108      	l32i.n	a0, a1, 16
	wsr.SAR a0
400816b0:	130300        	wsr.sar	a0
	l32i a0, a1, BSA_LBEG_OFF
400816b3:	3108      	l32i.n	a0, a1, 12
	wsr.LBEG a0
400816b5:	130000        	wsr.lbeg	a0
	l32i a0, a1, BSA_LEND_OFF
400816b8:	2108      	l32i.n	a0, a1, 8
	wsr.LEND a0
400816ba:	130100        	wsr.lend	a0
	l32i a0, a1, BSA_LCOUNT_OFF
400816bd:	1108      	l32i.n	a0, a1, 4
	wsr.LCOUNT a0
400816bf:	130200        	wsr.lcount	a0
	l32i a0, a1, BSA_SCOMPARE1_OFF
400816c2:	0108      	l32i.n	a0, a1, 0
	wsr.SCOMPARE1 a0
400816c4:	130c00        	wsr.scompare1	a0
	rsync
400816c7:	002010        	rsync
	l32i a0, a1, BSA_A0_OFF
400816ca:	7108      	l32i.n	a0, a1, 28
	l32i a2, a1, BSA_A2_OFF
400816cc:	9128      	l32i.n	a2, a1, 36
	l32i a3, a1, BSA_A3_OFF
400816ce:	a138      	l32i.n	a3, a1, 40
	addi a1, a1, BASE_SAVE_AREA_SIZE
400816d0:	3cc112        	addi	a1, a1, 60
	rfi 6
400816d3:	003610        	rfi	6
	...

400816d8 <xtensa_switch>:
	entry a1, 16
400816d8:	002136        	entry	a1, 16
	SPILL_ALL_WINDOWS
400816db:	10ccc0        	and	a12, a12, a12
400816de:	408030        	rotw	3
400816e1:	10ccc0        	and	a12, a12, a12
400816e4:	408030        	rotw	3
400816e7:	10ccc0        	and	a12, a12, a12
400816ea:	408030        	rotw	3
400816ed:	10ccc0        	and	a12, a12, a12
400816f0:	408030        	rotw	3
400816f3:	10ccc0        	and	a12, a12, a12
400816f6:	408040        	rotw	4
	addi a1, a1, -BASE_SAVE_AREA_SIZE
400816f9:	c4c112        	addi	a1, a1, -60
	s32i a0, a1, BSA_A0_OFF
400816fc:	7109      	s32i.n	a0, a1, 28
	s32i a2, a1, BSA_A2_OFF
400816fe:	9129      	s32i.n	a2, a1, 36
	s32i a3, a1, BSA_A3_OFF
40081700:	a139      	s32i.n	a3, a1, 40
	ODD_REG_SAVE
40081702:	030300        	rsr.sar	a0
40081705:	4109      	s32i.n	a0, a1, 16
40081707:	030000        	rsr.lbeg	a0
4008170a:	3109      	s32i.n	a0, a1, 12
4008170c:	030100        	rsr.lend	a0
4008170f:	2109      	s32i.n	a0, a1, 8
40081711:	030200        	rsr.lcount	a0
40081714:	1109      	s32i.n	a0, a1, 4
40081716:	030c00        	rsr.scompare1	a0
40081719:	0109      	s32i.n	a0, a1, 0
	rsr.PS a0
4008171b:	03e600        	rsr.ps	a0
	s32i a0, a1, BSA_PS_OFF
4008171e:	5109      	s32i.n	a0, a1, 20
	movi a0, _switch_restore_pc
40081720:	fbcf01        	l32r	a0, 4008065c <_iram_text_start+0x10c>
	s32i a0, a1, BSA_PC_OFF
40081723:	6109      	s32i.n	a0, a1, 24
	call0 xtensa_save_high_regs
40081725:	ffefc5        	call0	40081624 <xtensa_save_high_regs>
	l32i a2, a1, 0
40081728:	0128      	l32i.n	a2, a1, 0
	l32i a3, a2, BSA_A3_OFF
4008172a:	a238      	l32i.n	a3, a2, 40
	s32i a1, a3, 0
4008172c:	0319      	s32i.n	a1, a3, 0
	l32i a1, a2, BSA_A2_OFF
4008172e:	9218      	l32i.n	a1, a2, 36
	j _restore_context
40081730:	ffdb46        	j	400816a1 <_restore_context>

40081733 <_switch_restore_pc>:
	retw
40081733:	f01d      	retw.n
40081735:	000000        	ill

40081738 <_handle_excint>:
	EXCINT_HANDLER CONFIG_XTENSA_KERNEL_CPU_PTR_SR, ___cpu_t_nested_OFFSET, ___cpu_t_irq_stack_OFFSET
40081738:	8129      	s32i.n	a2, a1, 32
4008173a:	030300        	rsr.sar	a0
4008173d:	4109      	s32i.n	a0, a1, 16
4008173f:	030000        	rsr.lbeg	a0
40081742:	3109      	s32i.n	a0, a1, 12
40081744:	030100        	rsr.lend	a0
40081747:	2109      	s32i.n	a0, a1, 8
40081749:	030200        	rsr.lcount	a0
4008174c:	1109      	s32i.n	a0, a1, 4
4008174e:	030c00        	rsr.scompare1	a0
40081751:	0109      	s32i.n	a0, a1, 0
40081753:	ffed05        	call0	40081624 <xtensa_save_high_regs>
40081756:	0128      	l32i.n	a2, a1, 0
40081758:	8228      	l32i.n	a2, a2, 32
4008175a:	03e600        	rsr.ps	a0
4008175d:	f30c      	movi.n	a3, 15
4008175f:	100030        	and	a0, a0, a3
40081762:	a0cc      	bnez.n	a0, 40081770 <_not_l1>
40081764:	03e600        	rsr.ps	a0
40081767:	01a032        	movi	a3, 1
4008176a:	200030        	or	a0, a0, a3
4008176d:	13e600        	wsr.ps	a0

40081770 <_not_l1>:
40081770:	03e600        	rsr.ps	a0
40081773:	f36c      	movi.n	a3, -17
40081775:	100030        	and	a0, a0, a3
40081778:	13e600        	wsr.ps	a0
4008177b:	002010        	rsync
4008177e:	03f430        	rsr.misc0	a3
40081781:	0308      	l32i.n	a0, a3, 0
40081783:	708c      	beqz.n	a0, 4008178e <_switch_stacks_3>
40081785:	001b      	addi.n	a0, a0, 1
40081787:	0309      	s32i.n	a0, a3, 0
40081789:	013d      	mov.n	a3, a1
4008178b:	000146        	j	40081794 <_do_call_3>

4008178e <_switch_stacks_3>:
4008178e:	001b      	addi.n	a0, a0, 1
40081790:	0309      	s32i.n	a0, a3, 0
40081792:	1338      	l32i.n	a3, a3, 4

40081794 <_do_call_3>:
40081794:	036d      	mov.n	a6, a3
40081796:	01ad      	mov.n	a10, a1
40081798:	013d      	mov.n	a3, a1
4008179a:	02bd      	mov.n	a11, a2
4008179c:	0118      	l32i.n	a1, a1, 0
4008179e:	3cc112        	addi	a1, a1, 60
400817a1:	000095        	call4	400817ac <_xstack_call0_5>
400817a4:	031d      	mov.n	a1, a3
400817a6:	062d      	mov.n	a2, a6
400817a8:	0003c6        	j	400817bb <_xstack_returned_5>
	...

400817ac <_xstack_call0_5>:
400817ac:	002136        	entry	a1, 16
400817af:	021d      	mov.n	a1, a2
400817b1:	000055        	call4	400817b8 <_xstack_call1_5>
400817b4:	062d      	mov.n	a2, a6
400817b6:	f01d      	retw.n

400817b8 <_xstack_call1_5>:
400817b8:	0007a0        	jx	a7

400817bb <_xstack_returned_5>:
400817bb:	006700        	rsil	a0, 7
400817be:	03f430        	rsr.misc0	a3
400817c1:	0308      	l32i.n	a0, a3, 0
400817c3:	000b      	addi.n	a0, a0, -1
400817c5:	0309      	s32i.n	a0, a3, 0
400817c7:	251617        	beq	a6, a1, 400817f0 <_restore_3>
400817ca:	0118      	l32i.n	a1, a1, 0
400817cc:	3cc112        	addi	a1, a1, 60
400817cf:	10ccc0        	and	a12, a12, a12
400817d2:	408030        	rotw	3
400817d5:	10ccc0        	and	a12, a12, a12
400817d8:	408030        	rotw	3
400817db:	10ccc0        	and	a12, a12, a12
400817de:	408030        	rotw	3
400817e1:	10ccc0        	and	a12, a12, a12
400817e4:	408030        	rotw	3
400817e7:	10ccc0        	and	a12, a12, a12
400817ea:	408040        	rotw	4
400817ed:	201660        	or	a1, a6, a6

400817f0 <_restore_3>:
400817f0:	ffab46        	j	400816a1 <_restore_context>
	...

400817f4 <xtensa_init_stack>:
LOG_MODULE_DECLARE(os);

void *xtensa_init_stack(int *stack_top,
			void (*entry)(void *, void *, void *),
			void *arg1, void *arg2, void *arg3)
{
400817f4:	004136        	entry	a1, 32
	 * arrange to enter the function with a CALLINC of 1 and a
	 * stack pointer 16 bytes above the top, so its ENTRY at the
	 * start will decrement the stack pointer by 16.
	 */
	const int bsasz = BASE_SAVE_AREA_SIZE - 16;
	void **bsa = (void **) (((char *) stack_top) - bsasz);
400817f7:	d4c272        	addi	a7, a2, -44

	(void)memset(bsa, 0, bsasz);
400817fa:	cc2c      	movi.n	a12, 44
400817fc:	0b0c      	movi.n	a11, 0
400817fe:	20a770        	or	a10, a7, a7
40081801:	01c1e5        	call8	40083420 <memset>

	bsa[BSA_PC_OFF/4] = z_thread_entry;
40081804:	fb9791        	l32r	a9, 40080660 <_iram_text_start+0x110>
40081807:	ecc282        	addi	a8, a2, -20
4008180a:	0899      	s32i.n	a9, a8, 0
	bsa[BSA_PS_OFF/4] = (void *)(PS_WOE | PS_UM | PS_CALLINC(1));
4008180c:	fb9691        	l32r	a9, 40080664 <_iram_text_start+0x114>
4008180f:	e8c282        	addi	a8, a2, -24
40081812:	0899      	s32i.n	a9, a8, 0
	/* Arguments to z_thread_entry().  Remember these start at A6,
	 * which will be rotated into A2 by the ENTRY instruction that
	 * begins the C function.  And A4-A7 and A8-A11 are optional
	 * quads that live below the BSA!
	 */
	bsa[-1] = arg1;  /* a7 */
40081814:	d0c282        	addi	a8, a2, -48
40081817:	0849      	s32i.n	a4, a8, 0
	bsa[-2] = entry; /* a6 */
40081819:	ccc282        	addi	a8, a2, -52
4008181c:	0839      	s32i.n	a3, a8, 0
	bsa[-3] = 0;     /* a5 */
4008181e:	c8c292        	addi	a9, a2, -56
40081821:	080c      	movi.n	a8, 0
40081823:	0989      	s32i.n	a8, a9, 0
	bsa[-4] = 0;     /* a4 */
40081825:	c4c292        	addi	a9, a2, -60
40081828:	0989      	s32i.n	a8, a9, 0

	bsa[-5] = 0;     /* a11 */
4008182a:	c0c292        	addi	a9, a2, -64
4008182d:	0989      	s32i.n	a8, a9, 0
	bsa[-6] = 0;     /* a10 */
4008182f:	bcc292        	addi	a9, a2, -68
40081832:	0989      	s32i.n	a8, a9, 0
	bsa[-7] = arg3;  /* a9 */
40081834:	b8c282        	addi	a8, a2, -72
40081837:	0869      	s32i.n	a6, a8, 0
	bsa[-8] = arg2;  /* a8 */
40081839:	b4c282        	addi	a8, a2, -76
4008183c:	0859      	s32i.n	a5, a8, 0

	/* Finally push the BSA pointer and return the stack pointer
	 * as the handle
	 */
	bsa[-9] = bsa;
4008183e:	b0c222        	addi	a2, a2, -80
40081841:	0279      	s32i.n	a7, a2, 0
	return &bsa[-9];
}
40081843:	f01d      	retw.n
40081845:	000000        	ill

40081848 <arch_new_thread>:

void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
40081848:	004136        	entry	a1, 32
	thread->switch_handle = xtensa_init_stack((int *)stack_ptr, entry,
4008184b:	81e8      	l32i.n	a14, a1, 32
{
4008184d:	07dd      	mov.n	a13, a7
	thread->switch_handle = xtensa_init_stack((int *)stack_ptr, entry,
4008184f:	06cd      	mov.n	a12, a6
40081851:	05bd      	mov.n	a11, a5
40081853:	04ad      	mov.n	a10, a4
40081855:	fff9e5        	call8	400817f4 <xtensa_init_stack>
40081858:	1462a2        	s32i	a10, a2, 80
						  p1, p2, p3);
}
4008185b:	f01d      	retw.n
4008185d:	000000        	ill

40081860 <z_irq_spurious>:

void z_irq_spurious(const void *arg)
{
40081860:	004136        	entry	a1, 32
	int irqs, ie;

	ARG_UNUSED(arg);

	__asm__ volatile("rsr.interrupt %0" : "=r"(irqs));
40081863:	03e280        	rsr.interrupt	a8
	__asm__ volatile("rsr.intenable %0" : "=r"(ie));
40081866:	03e480        	rsr.intenable	a8
	LOG_ERR(" ** Spurious INTERRUPT(s) %p, INTENABLE = %p",
		(void *)irqs, (void *)ie);
	z_xtensa_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
40081869:	0b0c      	movi.n	a11, 0
4008186b:	1a0c      	movi.n	a10, 1
4008186d:	ffd7e5        	call8	400815ec <z_xtensa_fatal_error>
}
40081870:	f01d      	retw.n
	...

40081874 <xtensa_int2_c>:
		__asm__ volatile("wsr.intclear %0" : : "r"(m)); \
	}							\
	return z_get_next_switch_handle(interrupted_stack);		\
}

DEF_INT_C_HANDLER(2)
40081874:	004136        	entry	a1, 32
40081877:	03e240        	rsr.interrupt	a4
4008187a:	03e430        	rsr.intenable	a3

static inline int _xtensa_handle_one_int2(unsigned int mask)
{
	int irq;

	if (mask & BIT(19)) {
4008187d:	fb7a51        	l32r	a5, 40080668 <_iram_text_start+0x118>
40081880:	104430        	and	a4, a4, a3
40081883:	0e8457        	bany	a4, a5, 40081895 <xtensa_int2_c+0x21>
		mask = BIT(19);
		irq = 19;
		goto handle_irq;
	}
	if (mask & BIT(20)) {
40081886:	fb7931        	l32r	a3, 4008066c <_iram_text_start+0x11c>
40081889:	0f8437        	bany	a4, a3, 4008189c <xtensa_int2_c+0x28>
		mask = BIT(20);
		irq = 20;
		goto handle_irq;
	}
	if (mask & BIT(21)) {
4008188c:	fb7931        	l32r	a3, 40080670 <_iram_text_start+0x120>
4008188f:	0e8437        	bany	a4, a3, 400818a1 <xtensa_int2_c+0x2d>
40081892:	000986        	j	400818bc <xtensa_int2_c+0x48>
		irq = 19;
40081895:	381c      	movi.n	a8, 19
		mask = BIT(19);
40081897:	053d      	mov.n	a3, a5
40081899:	000186        	j	400818a3 <xtensa_int2_c+0x2f>
		irq = 20;
4008189c:	481c      	movi.n	a8, 20
4008189e:	000046        	j	400818a3 <xtensa_int2_c+0x2f>
		mask = BIT(21);
		irq = 21;
400818a1:	581c      	movi.n	a8, 21
		goto handle_irq;
	}
	return 0;
handle_irq:
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
400818a3:	fb7491        	l32r	a9, 40080674 <_iram_text_start+0x124>
400818a6:	1188d0        	slli	a8, a8, 3
400818a9:	898a      	add.n	a8, a9, a8
400818ab:	1898      	l32i.n	a9, a8, 4
400818ad:	08a8      	l32i.n	a10, a8, 0
400818af:	304430        	xor	a4, a4, a3
400818b2:	0009e0        	callx8	a9
400818b5:	13e330        	wsr.intclear	a3
400818b8:	fff1c6        	j	40081883 <xtensa_int2_c+0xf>
400818bb:	a22000        	muluh	a2, a0, a0
400818be:	042520        	extui	a2, a2, 5, 1
400818c1:	2aa001        	l32r	a0, 4004c344 <esp32_rom_gpio_matrix_out+0x42438>
400818c4:	009020        	all4	b2, b0:b1:b2:b3
	...

400818c8 <xtensa_int3_c>:
DEF_INT_C_HANDLER(3)
400818c8:	004136        	entry	a1, 32
400818cb:	03e240        	rsr.interrupt	a4
400818ce:	03e430        	rsr.intenable	a3
400818d1:	104430        	and	a4, a4, a3
	if (mask & 0x408800) {
400818d4:	fb6c31        	l32r	a3, 40080684 <_iram_text_start+0x134>
400818d7:	150437        	bnone	a4, a3, 400818f0 <xtensa_int3_c+0x28>
		if (mask & BIT(11)) {
400818da:	fb5631        	l32r	a3, 40080634 <_iram_text_start+0xe4>
400818dd:	268437        	bany	a4, a3, 40081907 <xtensa_int3_c+0x3f>
		if (mask & BIT(15)) {
400818e0:	fb5c31        	l32r	a3, 40080650 <_iram_text_start+0x100>
400818e3:	258437        	bany	a4, a3, 4008190c <xtensa_int3_c+0x44>
		if (mask & BIT(22)) {
400818e6:	fb6431        	l32r	a3, 40080678 <_iram_text_start+0x128>
400818e9:	490437        	bnone	a4, a3, 40081936 <xtensa_int3_c+0x6e>
400818ec:	000846        	j	40081911 <xtensa_int3_c+0x49>
400818ef:	633100        	minu	a3, a1, a0
		if (mask & BIT(23)) {
400818f2:	37fb      	addi.n	a3, a7, 15
400818f4:	311f84        	lsi	f8, a15, 196
		if (mask & BIT(27)) {
400818f7:	fb49      	s32i.n	a4, a11, 60
400818f9:	1f8437        	bany	a4, a3, 4008191c <xtensa_int3_c+0x54>
		if (mask & BIT(29)) {
400818fc:	fb6131        	l32r	a3, 40080680 <_iram_text_start+0x130>
400818ff:	330437        	bnone	a4, a3, 40081936 <xtensa_int3_c+0x6e>
			irq = 29;
40081902:	d81c      	movi.n	a8, 29
40081904:	000586        	j	4008191e <xtensa_int3_c+0x56>
			irq = 11;
40081907:	b80c      	movi.n	a8, 11
40081909:	000446        	j	4008191e <xtensa_int3_c+0x56>
			irq = 15;
4008190c:	f80c      	movi.n	a8, 15
4008190e:	000306        	j	4008191e <xtensa_int3_c+0x56>
			irq = 22;
40081911:	681c      	movi.n	a8, 22
40081913:	0001c6        	j	4008191e <xtensa_int3_c+0x56>
			irq = 23;
40081916:	781c      	movi.n	a8, 23
40081918:	000086        	j	4008191e <xtensa_int3_c+0x56>
4008191b:	b81c00        	lsi	f0, a12, 0x2e0
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
4008191e:	fb5591        	l32r	a9, 40080674 <_iram_text_start+0x124>
40081921:	1188d0        	slli	a8, a8, 3
40081924:	898a      	add.n	a8, a9, a8
40081926:	1898      	l32i.n	a9, a8, 4
40081928:	08a8      	l32i.n	a10, a8, 0
4008192a:	304430        	xor	a4, a4, a3
4008192d:	0009e0        	callx8	a9
40081930:	13e330        	wsr.intclear	a3
40081933:	ffe746        	j	400818d4 <xtensa_int3_c+0xc>
40081936:	20a220        	or	a10, a2, a2
40081939:	00fc65        	call8	40082900 <z_get_next_switch_handle>
4008193c:	202aa0        	or	a2, a10, a10
4008193f:	000090        	retw
	...

40081944 <xtensa_int4_c>:
DEF_INT_C_HANDLER(4)
40081944:	004136        	entry	a1, 32
40081947:	03e240        	rsr.interrupt	a4
4008194a:	03e430        	rsr.intenable	a3
4008194d:	104430        	and	a4, a4, a3

static inline int _xtensa_handle_one_int4(unsigned int mask)
{
	int irq;

	if (mask & 0x3000000) {
40081950:	fb5231        	l32r	a3, 40080698 <_iram_text_start+0x148>
40081953:	0e0437        	bnone	a4, a3, 40081965 <xtensa_int4_c+0x21>
		if (mask & BIT(24)) {
40081956:	fb4c31        	l32r	a3, 40080688 <_iram_text_start+0x138>
40081959:	198437        	bany	a4, a3, 40081976 <xtensa_int4_c+0x32>
			mask = BIT(24);
			irq = 24;
			goto handle_irq;
		}
		if (mask & BIT(25)) {
4008195c:	fb4c31        	l32r	a3, 4008068c <_iram_text_start+0x13c>
4008195f:	370437        	bnone	a4, a3, 4008199a <xtensa_int4_c+0x56>
40081962:	000546        	j	4008197b <xtensa_int4_c+0x37>
			mask = BIT(25);
			irq = 25;
			goto handle_irq;
		}
	} else {
		if (mask & BIT(28)) {
40081965:	fb4a31        	l32r	a3, 40080690 <_iram_text_start+0x140>
40081968:	148437        	bany	a4, a3, 40081980 <xtensa_int4_c+0x3c>
			mask = BIT(28);
			irq = 28;
			goto handle_irq;
		}
		if (mask & BIT(30)) {
4008196b:	fb4a31        	l32r	a3, 40080694 <_iram_text_start+0x144>
4008196e:	280437        	bnone	a4, a3, 4008199a <xtensa_int4_c+0x56>
			mask = BIT(30);
			irq = 30;
40081971:	e81c      	movi.n	a8, 30
40081973:	0002c6        	j	40081982 <xtensa_int4_c+0x3e>
			irq = 24;
40081976:	881c      	movi.n	a8, 24
40081978:	000186        	j	40081982 <xtensa_int4_c+0x3e>
			irq = 25;
4008197b:	981c      	movi.n	a8, 25
4008197d:	000046        	j	40081982 <xtensa_int4_c+0x3e>
			irq = 28;
40081980:	c81c      	movi.n	a8, 28
			goto handle_irq;
		}
	}
	return 0;
handle_irq:
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
40081982:	fb3c91        	l32r	a9, 40080674 <_iram_text_start+0x124>
40081985:	1188d0        	slli	a8, a8, 3
40081988:	898a      	add.n	a8, a9, a8
4008198a:	1898      	l32i.n	a9, a8, 4
4008198c:	08a8      	l32i.n	a10, a8, 0
4008198e:	304430        	xor	a4, a4, a3
40081991:	0009e0        	callx8	a9
40081994:	13e330        	wsr.intclear	a3
40081997:	ffed46        	j	40081950 <xtensa_int4_c+0xc>
4008199a:	20a220        	or	a10, a2, a2
4008199d:	00f625        	call8	40082900 <z_get_next_switch_handle>
400819a0:	202aa0        	or	a2, a10, a10
400819a3:	000090        	retw
	...

400819a8 <xtensa_int5_c>:
DEF_INT_C_HANDLER(5)
400819a8:	004136        	entry	a1, 32
400819ab:	03e240        	rsr.interrupt	a4
400819ae:	03e430        	rsr.intenable	a3
	if (mask & BIT(16)) {
400819b1:	fb3a51        	l32r	a5, 4008069c <_iram_text_start+0x14c>
400819b4:	104430        	and	a4, a4, a3
400819b7:	0001c6        	j	400819c2 <xtensa_int5_c+0x1a>
400819ba:	300000        	xor	a0, a0, a0
400819bd:	303044        	lsi	f4, a0, 192
400819c0:	5713e3        	lsi	f14, a3, 0x15c
400819c3:	311084        	lsi	f8, a0, 196
	if (mask & BIT(26)) {
400819c6:	37fb36        	entry	a11, 0x1bf8
400819c9:	d61184        	lsi	f8, a1, 0x358
	if (mask & BIT(31)) {
400819cc:	1c0254        	lsi	f5, a2, 112
		irq = 31;
400819cf:	31f8      	l32i.n	a15, a1, 12
		mask = BIT(31);
400819d1:	06fb35        	call12	40088984 <_iram_text_end+0x4de6>
400819d4:	1c0002        	l8ui	a0, a0, 28
		irq = 16;
400819d7:	3d08      	l32i.n	a0, a13, 12
		mask = BIT(16);
400819d9:	004605        	call0	40081e3c <i2c_esp32_configure_pins+0x38>
400819dc:	a81c00        	lsi	f0, a12, 0x2a0
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
400819df:	fb2591        	l32r	a9, 40080674 <_iram_text_start+0x124>
400819e2:	1188d0        	slli	a8, a8, 3
400819e5:	808980        	add	a8, a9, a8
400819e8:	012892        	l32i	a9, a8, 4
400819eb:	0028a2        	l32i	a10, a8, 0
400819ee:	0009e0        	callx8	a9
400819f1:	fc7356        	bnez	a3, 400819bc <xtensa_int5_c+0x14>
400819f4:	20a220        	or	a10, a2, a2
400819f7:	00f0a5        	call8	40082900 <z_get_next_switch_handle>
400819fa:	202aa0        	or	a2, a10, a10
400819fd:	000090        	retw

40081a00 <xtensa_int6_c>:
DEF_INT_C_HANDLER(6)
40081a00:	004136        	entry	a1, 32
40081a03:	20a220        	or	a10, a2, a2
40081a06:	03e280        	rsr.interrupt	a8
40081a09:	03e480        	rsr.intenable	a8
40081a0c:	00ef25        	call8	40082900 <z_get_next_switch_handle>
40081a0f:	202aa0        	or	a2, a10, a10
40081a12:	000090        	retw
40081a15:	000000        	ill

40081a18 <xtensa_int7_c>:
DEF_INT_C_HANDLER(7)
40081a18:	004136        	entry	a1, 32
40081a1b:	03e230        	rsr.interrupt	a3
40081a1e:	03e440        	rsr.intenable	a4
40081a21:	103340        	and	a3, a3, a4
	if (mask & BIT(14)) {
40081a24:	fb2141        	l32r	a4, 400806a8 <_iram_text_start+0x158>
40081a27:	150347        	bnone	a3, a4, 40081a40 <xtensa_int7_c+0x28>
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
40081a2a:	fb1281        	l32r	a8, 40080674 <_iram_text_start+0x124>
40081a2d:	303340        	xor	a3, a3, a4
40081a30:	1d2892        	l32i	a9, a8, 116
40081a33:	1c28a2        	l32i	a10, a8, 112
40081a36:	0009e0        	callx8	a9
40081a39:	13e340        	wsr.intclear	a4
40081a3c:	fff9c6        	j	40081a27 <xtensa_int7_c+0xf>
40081a3f:	a22000        	muluh	a2, a0, a0
40081a42:	ebe520        	f64cmpl	a14, a5, a2
40081a45:	2aa000        	mul.s	f10, f0, f0
40081a48:	009020        	all4	b2, b0:b1:b2:b3
	...

40081a4c <xtensa_excint1_c>:
 * DEF_EXCINT 1 vector declaration in assembly code.  This one looks
 * different because exceptions and interrupts land at the same
 * vector; other interrupt levels have their own vectors.
 */
void *xtensa_excint1_c(int *interrupted_stack)
{
40081a4c:	004136        	entry	a1, 32
	int cause, vaddr, *bsa = *(int **)interrupted_stack;

	__asm__ volatile("rsr.exccause %0" : "=r"(cause));
40081a4f:	03e850        	rsr.exccause	a5

	if (cause == EXCCAUSE_LEVEL1_INTERRUPT) {
40081a52:	024526        	beqi	a5, 4, 40081a58 <xtensa_excint1_c+0xc>
40081a55:	0045c6        	j	40081b70 <xtensa_excint1_c+0x124>
static inline DEF_INT_C_HANDLER(1)
40081a58:	03e240        	rsr.interrupt	a4
40081a5b:	03e430        	rsr.intenable	a3
		if (mask & 0x780) {
40081a5e:	80a762        	movi	a6, 0x780
40081a61:	104430        	and	a4, a4, a3
	if (mask & 0x7f) {
40081a64:	643040        	extui	a3, a4, 0, 7
40081a67:	048316        	beqz	a3, 40081ab3 <xtensa_excint1_c+0x67>
		if (mask & 0x7) {
40081a6a:	243040        	extui	a3, a4, 0, 3
40081a6d:	739c      	beqz.n	a3, 40081a88 <xtensa_excint1_c+0x3c>
			if (mask & BIT(0)) {
40081a6f:	043040        	extui	a3, a4, 0, 1
40081a72:	09a356        	bnez	a3, 40081b10 <xtensa_excint1_c+0xc4>
			if (mask & BIT(1)) {
40081a75:	290c      	movi.n	a9, 2
40081a77:	020497        	bnone	a4, a9, 40081a7d <xtensa_excint1_c+0x31>
40081a7a:	0025c6        	j	40081b15 <xtensa_excint1_c+0xc9>
			if (mask & BIT(2)) {
40081a7d:	430c      	movi.n	a3, 4
40081a7f:	028437        	bany	a4, a3, 40081a85 <xtensa_excint1_c+0x39>
40081a82:	004186        	j	40081b8c <xtensa_excint1_c+0x140>
40081a85:	0024c6        	j	40081b1c <xtensa_excint1_c+0xd0>
			if (mask & 0x18) {
40081a88:	831c      	movi.n	a3, 24
40081a8a:	120437        	bnone	a4, a3, 40081aa0 <xtensa_excint1_c+0x54>
				if (mask & BIT(3)) {
40081a8d:	830c      	movi.n	a3, 8
40081a8f:	020437        	bnone	a4, a3, 40081a95 <xtensa_excint1_c+0x49>
40081a92:	0022c6        	j	40081b21 <xtensa_excint1_c+0xd5>
				if (mask & BIT(4)) {
40081a95:	031c      	movi.n	a3, 16
40081a97:	028437        	bany	a4, a3, 40081a9d <xtensa_excint1_c+0x51>
40081a9a:	003b86        	j	40081b8c <xtensa_excint1_c+0x140>
40081a9d:	002186        	j	40081b27 <xtensa_excint1_c+0xdb>
				if (mask & BIT(5)) {
40081aa0:	032c      	movi.n	a3, 32
40081aa2:	020437        	bnone	a4, a3, 40081aa8 <xtensa_excint1_c+0x5c>
40081aa5:	0020c6        	j	40081b2c <xtensa_excint1_c+0xe0>
				if (mask & BIT(6)) {
40081aa8:	034c      	movi.n	a3, 64
40081aaa:	028437        	bany	a4, a3, 40081ab0 <xtensa_excint1_c+0x64>
40081aad:	0036c6        	j	40081b8c <xtensa_excint1_c+0x140>
40081ab0:	001f46        	j	40081b31 <xtensa_excint1_c+0xe5>
		if (mask & 0x780) {
40081ab3:	2d0467        	bnone	a4, a6, 40081ae4 <xtensa_excint1_c+0x98>
			if (mask & 0x180) {
40081ab6:	80a132        	movi	a3, 0x180
40081ab9:	130437        	bnone	a4, a3, 40081ad0 <xtensa_excint1_c+0x84>
				if (mask & BIT(7)) {
40081abc:	80a032        	movi	a3, 128
40081abf:	738437        	bany	a4, a3, 40081b36 <xtensa_excint1_c+0xea>
				if (mask & BIT(8)) {
40081ac2:	00a132        	movi	a3, 0x100
40081ac5:	028437        	bany	a4, a3, 40081acb <xtensa_excint1_c+0x7f>
40081ac8:	003006        	j	40081b8c <xtensa_excint1_c+0x140>
40081acb:	001b06        	j	40081b3b <xtensa_excint1_c+0xef>
40081ace:	320000        	orbc	b0, b0, b0
				if (mask & BIT(9)) {
40081ad1:	3700a2        	l8ui	a10, a0, 55
40081ad4:	326984        	lsi	f8, a9, 200
				if (mask & BIT(10)) {
40081ad7:	3700a4        	lsi	f10, a0, 220
40081ada:	060284        	lsi	f8, a2, 24
40081add:	002b      	addi.n	a0, a0, 2
40081adf:	001886        	j	40081b45 <xtensa_excint1_c+0xf9>
40081ae2:	310000        	srai	a0, a0, 16
			if (mask & 0x3000) {
40081ae5:	37faf5        	call12	400b9a94 <_iram_text_end+0x35ef6>
40081ae8:	311104        	lsi	f0, a1, 196
				if (mask & BIT(12)) {
40081aeb:	37faf0        	lsi	f15, a10, 220
40081aee:	315984        	lsi	f8, a9, 196
				if (mask & BIT(13)) {
40081af1:	fac8      	l32i.n	a12, a10, 60
40081af3:	028437        	bany	a4, a3, 40081af9 <xtensa_excint1_c+0xad>
40081af6:	002486        	j	40081b8c <xtensa_excint1_c+0x140>
40081af9:	001486        	j	40081b4f <xtensa_excint1_c+0x103>
				if (mask & BIT(17)) {
40081afc:	faed31        	l32r	a3, 400806b0 <_iram_text_start+0x160>
40081aff:	518437        	bany	a4, a3, 40081b54 <xtensa_excint1_c+0x108>
				if (mask & BIT(18)) {
40081b02:	faec31        	l32r	a3, 400806b4 <_iram_text_start+0x164>
40081b05:	028437        	bany	a4, a3, 40081b0b <xtensa_excint1_c+0xbf>
40081b08:	002006        	j	40081b8c <xtensa_excint1_c+0x140>
					irq = 18;
40081b0b:	281c      	movi.n	a8, 18
40081b0d:	001146        	j	40081b56 <xtensa_excint1_c+0x10a>
				irq = 0;
40081b10:	080c      	movi.n	a8, 0
40081b12:	001006        	j	40081b56 <xtensa_excint1_c+0x10a>
				irq = 1;
40081b15:	180c      	movi.n	a8, 1
				mask = BIT(1);
40081b17:	093d      	mov.n	a3, a9
40081b19:	000e46        	j	40081b56 <xtensa_excint1_c+0x10a>
				irq = 2;
40081b1c:	098d      	mov.n	a8, a9
40081b1e:	000d06        	j	40081b56 <xtensa_excint1_c+0x10a>
					irq = 3;
40081b21:	380c      	movi.n	a8, 3
40081b23:	000bc6        	j	40081b56 <xtensa_excint1_c+0x10a>
40081b26:	058d00        	extui	a8, a0, 29, 1
					irq = 4;
40081b29:	000a46        	j	40081b56 <xtensa_excint1_c+0x10a>
					irq = 5;
40081b2c:	580c      	movi.n	a8, 5
40081b2e:	000906        	j	40081b56 <xtensa_excint1_c+0x10a>
					irq = 6;
40081b31:	680c      	movi.n	a8, 6
40081b33:	0007c6        	j	40081b56 <xtensa_excint1_c+0x10a>
					irq = 7;
40081b36:	780c      	movi.n	a8, 7
40081b38:	000686        	j	40081b56 <xtensa_excint1_c+0x10a>
					irq = 8;
40081b3b:	880c      	movi.n	a8, 8
40081b3d:	000546        	j	40081b56 <xtensa_excint1_c+0x10a>
					irq = 9;
40081b40:	980c      	movi.n	a8, 9
40081b42:	000406        	j	40081b56 <xtensa_excint1_c+0x10a>
					irq = 10;
40081b45:	a80c      	movi.n	a8, 10
40081b47:	0002c6        	j	40081b56 <xtensa_excint1_c+0x10a>
					irq = 12;
40081b4a:	c80c      	movi.n	a8, 12
40081b4c:	000186        	j	40081b56 <xtensa_excint1_c+0x10a>
					irq = 13;
40081b4f:	d80c      	movi.n	a8, 13
40081b51:	000046        	j	40081b56 <xtensa_excint1_c+0x10a>
					irq = 17;
40081b54:	181c      	movi.n	a8, 17
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
40081b56:	fac791        	l32r	a9, 40080674 <_iram_text_start+0x124>
40081b59:	1188d0        	slli	a8, a8, 3
40081b5c:	898a      	add.n	a8, a9, a8
40081b5e:	1898      	l32i.n	a9, a8, 4
40081b60:	08a8      	l32i.n	a10, a8, 0
40081b62:	304430        	xor	a4, a4, a3
40081b65:	0009e0        	callx8	a9
40081b68:	13e330        	wsr.intclear	a3
40081b6b:	ffbd46        	j	40081a64 <xtensa_excint1_c+0x18>
40081b6e:	660000        	lsi	f0, a0, 0x198

		return xtensa_int1_c(interrupted_stack);

	} else if (cause == EXCCAUSE_SYSCALL) {
40081b71:	480c15        	call4	400c9c34 <_iram_text_end+0x46096>
	int cause, vaddr, *bsa = *(int **)interrupted_stack;
40081b74:	643802        	lsi	f0, a8, 0x190

		/* Xtensa exceptions don't automatically advance PC,
		 * have to skip the SYSCALL instruction manually or
		 * else it will just loop forever
		 */
		bsa[BSA_PC_OFF/4] += 3;
40081b77:	333b      	addi.n	a3, a3, 3
40081b79:	6439      	s32i.n	a3, a4, 24
40081b7b:	000346        	j	40081b8c <xtensa_excint1_c+0x140>
40081b7e:	300000        	xor	a0, a0, a0

	} else {
		uint32_t ps = bsa[BSA_PS_OFF/4];

		__asm__ volatile("rsr.excvaddr %0" : "=r"(vaddr));
40081b81:	ee          	.byte 0xee
40081b82:	a0a203        	lsi	f0, a2, 0x280
		/* FIXME: legacy xtensa port reported "HW" exception
		 * for all unhandled exceptions, which seems incorrect
		 * as these are software errors.  Should clean this
		 * up.
		 */
		z_xtensa_fatal_error(K_ERR_CPU_EXCEPTION,
40081b85:	b22000        	mulsh	a2, a0, a0
40081b88:	a62520        	lsi	f2, a5, 0x298
40081b8b:	ff          	.byte 0xff
				     (void *)interrupted_stack);
	}

	return z_get_next_switch_handle(interrupted_stack);
40081b8c:	02ad      	mov.n	a10, a2
40081b8e:	00d725        	call8	40082900 <z_get_next_switch_handle>
}
40081b91:	0a2d      	mov.n	a2, a10
40081b93:	f01d      	retw.n
40081b95:	000000        	ill

40081b98 <__stdout_hook_install>:
}

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
40081b98:	004136        	entry	a1, 32
	_stdout_hook = hook;
40081b9b:	fac881        	l32r	a8, 400806bc <_iram_text_start+0x16c>
40081b9e:	0829      	s32i.n	a2, a8, 0
}
40081ba0:	f01d      	retw.n
	...

40081ba4 <gpio_esp32_pin_interrupt_configure>:

static int gpio_esp32_pin_interrupt_configure(const struct device *port,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
40081ba4:	004136        	entry	a1, 32
	if (mode == GPIO_INT_MODE_DISABLED) {
40081ba7:	fa9a81        	l32r	a8, 40080610 <_iram_text_start+0xc0>
{
40081baa:	743030        	extui	a3, a3, 0, 8
	if (mode == GPIO_INT_MODE_DISABLED) {
40081bad:	211487        	beq	a4, a8, 40081bd2 <gpio_esp32_pin_interrupt_configure+0x2e>
	if (mode == GPIO_INT_MODE_LEVEL) {
40081bb0:	fabe91        	l32r	a9, 400806a8 <_iram_text_start+0x158>
			return -ENOTSUP;
40081bb3:	ddaf82        	movi	a8, -35
	if (mode == GPIO_INT_MODE_LEVEL) {
40081bb6:	4f1497        	beq	a4, a9, 40081c09 <gpio_esp32_pin_interrupt_configure+0x65>
		switch (trig) {
40081bb9:	fabe41        	l32r	a4, 400806b4 <_iram_text_start+0x164>
40081bbc:	181547        	beq	a5, a4, 40081bd8 <gpio_esp32_pin_interrupt_configure+0x34>
40081bbf:	fac041        	l32r	a4, 400806c0 <_iram_text_start+0x170>
40081bc2:	431547        	beq	a5, a4, 40081c09 <gpio_esp32_pin_interrupt_configure+0x65>
40081bc5:	faba41        	l32r	a4, 400806b0 <_iram_text_start+0x160>
			return -EINVAL;
40081bc8:	a86c      	movi.n	a8, -22
		switch (trig) {
40081bca:	3b9547        	bne	a5, a4, 40081c09 <gpio_esp32_pin_interrupt_configure+0x65>
			return 2;
40081bcd:	280c      	movi.n	a8, 2
40081bcf:	0001c6        	j	40081bda <gpio_esp32_pin_interrupt_configure+0x36>
		return 0;       /* Disables interrupt for a pin. */
40081bd2:	080c      	movi.n	a8, 0
40081bd4:	000086        	j	40081bda <gpio_esp32_pin_interrupt_configure+0x36>
40081bd7:	180c00        	lsxp	f0, a12, a0
	struct gpio_esp32_data *data = port->data;
	uint32_t io_pin = pin + data->port.pin_offset; /* Range from 0 - 39 */
40081bda:	3248      	l32i.n	a4, a2, 12
40081bdc:	8498      	l32i.n	a9, a4, 32
40081bde:	939a      	add.n	a9, a3, a9
	uint32_t *reg = GET_GPIO_PIN_REG(io_pin);
40081be0:	fab931        	l32r	a3, 400806c4 <_iram_text_start+0x174>
40081be3:	993a      	add.n	a9, a9, a3
40081be5:	1199e0        	slli	a9, a9, 2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40081be8:	006340        	rsil	a4, 3
	}

	key = irq_lock();

	reg_val = *reg;
	reg_val &= ~(GPIO_PIN_INT_ENA_M | GPIO_PIN_INT_TYPE_M);
40081beb:	fab751        	l32r	a5, 400806c8 <_iram_text_start+0x178>
	reg_val = *reg;
40081bee:	0938      	l32i.n	a3, a9, 0
	/* Enable Interrupt on CPU0 (PRO_CPU) */
	reg_val |= GPIO_CPU0_INT_ENABLE;
	/* Interrupt triggering mode */
	reg_val |= intr_trig_mode << GPIO_PIN_INT_TYPE_S;
40081bf0:	118890        	slli	a8, a8, 7
	reg_val &= ~(GPIO_PIN_INT_ENA_M | GPIO_PIN_INT_TYPE_M);
40081bf3:	103350        	and	a3, a3, a5
40081bf6:	208830        	or	a8, a8, a3
	reg_val |= intr_trig_mode << GPIO_PIN_INT_TYPE_S;
40081bf9:	fa9531        	l32r	a3, 40080650 <_iram_text_start+0x100>
40081bfc:	208830        	or	a8, a8, a3
	*reg = reg_val;
40081bff:	0989      	s32i.n	a8, a9, 0
	XTOS_RESTORE_INTLEVEL(key);
40081c01:	13e640        	wsr.ps	a4
40081c04:	002010        	rsync

	irq_unlock(key);

	return 0;
40081c07:	080c      	movi.n	a8, 0
}
40081c09:	082d      	mov.n	a2, a8
40081c0b:	f01d      	retw.n
40081c0d:	000000        	ill

40081c10 <gpio_esp32_isr>:
#if defined(CONFIG_GPIO_ESP32_1)
GPIO_DEVICE_INIT(1);
#endif

static void gpio_esp32_isr(const void *param)
{
40081c10:	004136        	entry	a1, 32

#if defined(CONFIG_GPIO_ESP32_0)
	gpio_esp32_fire_callbacks(DEVICE_GET(gpio_esp32_0));
40081c13:	faaea1        	l32r	a10, 400806cc <_iram_text_start+0x17c>
40081c16:	0194a5        	call8	40083560 <gpio_esp32_fire_callbacks>
#endif
#if defined(CONFIG_GPIO_ESP32_1)
	gpio_esp32_fire_callbacks(DEVICE_GET(gpio_esp32_1));
40081c19:	faada1        	l32r	a10, 400806d0 <_iram_text_start+0x180>
40081c1c:	019425        	call8	40083560 <gpio_esp32_fire_callbacks>
#endif

	ARG_UNUSED(param);
}
40081c1f:	f01d      	retw.n
40081c21:	000000        	ill

40081c24 <gpio_esp32_init>:
{
40081c24:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = device->data;
40081c27:	3228      	l32i.n	a2, a2, 12
40081c29:	faaaa1        	l32r	a10, 400806d4 <_iram_text_start+0x184>
40081c2c:	00a065        	call8	40082634 <z_impl_device_get_binding>
	data->pinmux = device_get_binding(CONFIG_PINMUX_NAME);
40081c2f:	12a9      	s32i.n	a10, a2, 4
		return -ENOTSUP;
40081c31:	ddaf22        	movi	a2, -35
	if (!data->pinmux) {
40081c34:	8abc      	beqz.n	a10, 40081c70 <gpio_esp32_init+0x4c>
	if (!isr_connected) {
40081c36:	faa831        	l32r	a3, 400806d8 <_iram_text_start+0x188>
	return 0;
40081c39:	020c      	movi.n	a2, 0
	if (!isr_connected) {
40081c3b:	000382        	l8ui	a8, a3, 0
40081c3e:	2e9827        	bne	a8, a2, 40081c70 <gpio_esp32_init+0x4c>
 */
static inline void z_xt_ints_off(unsigned int mask)
{
	int val;

	__asm__ volatile("rsr.intenable %0" : "=r"(val));
40081c41:	03e480        	rsr.intenable	a8
	val &= ~mask;
40081c44:	ffab92        	movi	a9, 0xfffffbff
40081c47:	108890        	and	a8, a8, a9
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
40081c4a:	13e480        	wsr.intenable	a8
40081c4d:	002010        	rsync
		esp32_rom_intr_matrix_set(0, ETS_GPIO_INTR_SOURCE,
40081c50:	ac0c      	movi.n	a12, 10
40081c52:	6b1c      	movi.n	a11, 22
40081c54:	02ad      	mov.n	a10, a2
40081c56:	faa181        	l32r	a8, 400806dc <_iram_text_start+0x18c>
40081c59:	0008e0        	callx8	a8
	__asm__ volatile("rsr.intenable %0" : "=r"(val));
40081c5c:	03e480        	rsr.intenable	a8
	val |= mask;
40081c5f:	00a492        	movi	a9, 0x400
40081c62:	208890        	or	a8, a8, a9
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
40081c65:	13e480        	wsr.intenable	a8
40081c68:	002010        	rsync
		isr_connected = true;
40081c6b:	180c      	movi.n	a8, 1
40081c6d:	004382        	s8i	a8, a3, 0
}
40081c70:	f01d      	retw.n
	...

40081c74 <gpio_esp32_config>:
{
40081c74:	006136        	entry	a1, 48
	struct gpio_esp32_data *data = dev->data;
40081c77:	3268      	l32i.n	a6, a2, 12
{
40081c79:	743030        	extui	a3, a3, 0, 8
	r = pinmux_pin_get(data->pinmux, io_pin, &func);
40081c7c:	16a8      	l32i.n	a10, a6, 4
	uint32_t io_pin = pin + data->port.pin_offset; /* Range from 0 - 39 */
40081c7e:	8658      	l32i.n	a5, a6, 32
				 uint32_t *func)
{
	const struct pinmux_driver_api *api =
		(const struct pinmux_driver_api *)dev->api;

	return api->get(dev, pin, func);
40081c80:	2a28      	l32i.n	a2, a10, 8
40081c82:	535a      	add.n	a5, a3, a5
40081c84:	1228      	l32i.n	a2, a2, 4
40081c86:	01cd      	mov.n	a12, a1
40081c88:	20b550        	or	a11, a5, a5
40081c8b:	0002e0        	callx8	a2
40081c8e:	0a2d      	mov.n	a2, a10
	if (r < 0) {
40081c90:	090a96        	bltz	a10, 40081d24 <gpio_esp32_config+0xb0>
	pinmux_pin_set(data->pinmux, io_pin, PIN_FUNC_GPIO);
40081c93:	16a8      	l32i.n	a10, a6, 4
	return api->set(dev, pin, func);
40081c95:	2c0c      	movi.n	a12, 2
40081c97:	2a28      	l32i.n	a2, a10, 8
40081c99:	05bd      	mov.n	a11, a5
40081c9b:	0228      	l32i.n	a2, a2, 0
40081c9d:	0002e0        	callx8	a2
	if (flags & GPIO_PULL_UP) {
40081ca0:	0c1c      	movi.n	a12, 16
40081ca2:	10c4c0        	and	a12, a4, a12
40081ca5:	16a8      	l32i.n	a10, a6, 4
40081ca7:	9c8c      	beqz.n	a12, 40081cb4 <gpio_esp32_config+0x40>
				    uint8_t func)
{
	const struct pinmux_driver_api *api =
		(const struct pinmux_driver_api *)dev->api;

	return api->pullup(dev, pin, func);
40081ca9:	2a28      	l32i.n	a2, a10, 8
40081cab:	1c0c      	movi.n	a12, 1
40081cad:	2228      	l32i.n	a2, a2, 8
40081caf:	000206        	j	40081cbb <gpio_esp32_config+0x47>
40081cb2:	570000        	lsi	f0, a0, 0x15c
	} else if (flags & GPIO_PULL_DOWN) {
40081cb5:	280864        	lsi	f6, a8, 160
40081cb8:	282a      	add.n	a2, a8, a2
40081cba:	05bd22        	l32ai	a2, a13, 20
40081cbd:	0002e0        	callx8	a2
	if (flags & GPIO_OUTPUT) {
40081cc0:	16a8      	l32i.n	a10, a6, 4
40081cc2:	2a28      	l32i.n	a2, a10, 8
40081cc4:	3288      	l32i.n	a8, a2, 12
40081cc6:	00a222        	movi	a2, 0x200
40081cc9:	102420        	and	a2, a4, a2
40081ccc:	04c216        	beqz	a2, 40081d1c <gpio_esp32_config+0xa8>
	uint32_t *reg = GET_GPIO_PIN_REG(io_pin);
40081ccf:	fa7d21        	l32r	a2, 400806c4 <_iram_text_start+0x174>
40081cd2:	252a      	add.n	a2, a5, a2
40081cd4:	1122e0        	slli	a2, a2, 2
		if (flags & GPIO_SINGLE_ENDED) {
40081cd7:	0d6417        	bbci	a4, 1, 40081ce8 <gpio_esp32_config+0x74>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
40081cda:	4b0c      	movi.n	a11, 4
40081cdc:	1104b7        	bnone	a4, a11, 40081cf1 <gpio_esp32_config+0x7d>
				*reg |= GPIO_PIN_PAD_DRIVER;
40081cdf:	0298      	l32i.n	a9, a2, 0
40081ce1:	2099b0        	or	a9, a9, a11
40081ce4:	0001c6        	j	40081cef <gpio_esp32_config+0x7b>
40081ce7:	029800        	andb	b9, b8, b0
			*reg &= ~GPIO_PIN_PAD_DRIVER;
40081cea:	bb7c      	movi.n	a11, -5
40081cec:	1099b0        	and	a9, a9, a11
40081cef:	0299      	s32i.n	a9, a2, 0
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
40081cf1:	0464b7        	bbci	a4, 11, 40081cf9 <gpio_esp32_config+0x85>
			*data->port.set_reg = BIT(pin);
40081cf4:	2648      	l32i.n	a4, a6, 8
40081cf6:	000106        	j	40081cfe <gpio_esp32_config+0x8a>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
40081cf9:	1064a7        	bbci	a4, 10, 40081d0d <gpio_esp32_config+0x99>
			*data->port.clear_reg = BIT(pin);
40081cfc:	3648      	l32i.n	a4, a6, 12
40081cfe:	01a022        	movi	a2, 1
40081d01:	401300        	ssl	a3
40081d04:	a13200        	sll	a3, a2
40081d07:	0020c0        	memw
40081d0a:	006432        	s32i	a3, a4, 0
					  uint8_t func)
{
	const struct pinmux_driver_api *api =
		(const struct pinmux_driver_api *)dev->api;

	return api->input(dev, pin, func);
40081d0d:	0c0c      	movi.n	a12, 0
40081d0f:	05bd      	mov.n	a11, a5
40081d11:	0008e0        	callx8	a8
		if (r < 0) {
40081d14:	020c      	movi.n	a2, 0
40081d16:	432a20        	min	a2, a10, a2
40081d19:	0001c6        	j	40081d24 <gpio_esp32_config+0xb0>
40081d1c:	1c0c      	movi.n	a12, 1
40081d1e:	20b550        	or	a11, a5, a5
40081d21:	0008e0        	callx8	a8
}
40081d24:	f01d      	retw.n
	...

40081d28 <i2c_esp32_isr>:

	return ret;
}

static void i2c_esp32_isr(const struct device *device)
{
40081d28:	004136        	entry	a1, 32
	const int fifo_give_mask = I2C_ACK_ERR_INT_ST |
				   I2C_TIME_OUT_INT_ST |
				   I2C_TRANS_COMPLETE_INT_ST |
				   I2C_ARBITRATION_LOST_INT_ST;
	const struct i2c_esp32_config *config = device->config;
40081d2b:	012232        	l32i	a3, a2, 4

	if (sys_read32(I2C_INT_STATUS_REG(config->index)) & fifo_give_mask) {
40081d2e:	002392        	l32i	a9, a3, 0
40081d31:	1189e0        	slli	a8, a9, 2
40081d34:	808890        	add	a8, a8, a9
40081d37:	fa6a91        	l32r	a9, 400806e0 <_iram_text_start+0x190>
40081d3a:	118820        	slli	a8, a8, 14
40081d3d:	889a      	add.n	a8, a8, a9
	return *(volatile uint32_t *)addr;
40081d3f:	0020c0        	memw
40081d42:	0898      	l32i.n	a9, a8, 0
40081d44:	a0a582        	movi	a8, 0x5a0
40081d47:	060987        	bnone	a9, a8, 40081d51 <i2c_esp32_isr+0x29>

		/* Only give the semaphore if a watched interrupt happens.
		 * Error checking is performed at the other side of the
		 * semaphore, by reading the status register.
		 */
		k_sem_give(&data->fifo_sem);
40081d4a:	32a8      	l32i.n	a10, a2, 12
40081d4c:	aa8b      	addi.n	a10, a10, 8
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
40081d4e:	011625        	call8	40082eb0 <z_impl_k_sem_give>
	}

	/* Acknowledge all I2C interrupts */
	sys_write32(~0, I2C_INT_CLR_REG(config->index));
40081d51:	0398      	l32i.n	a9, a3, 0
40081d53:	fa6421        	l32r	a2, 400806e4 <_iram_text_start+0x194>
40081d56:	1189e0        	slli	a8, a9, 2
40081d59:	889a      	add.n	a8, a8, a9
40081d5b:	118820        	slli	a8, a8, 14
40081d5e:	882a      	add.n	a8, a8, a2
	*(volatile uint32_t *)addr = data;
40081d60:	f27c      	movi.n	a2, -1
40081d62:	0020c0        	memw
40081d65:	0829      	s32i.n	a2, a8, 0
}
40081d67:	f01d      	retw.n
40081d69:	000000        	ill

40081d6c <i2c_esp32_reset_fifo$isra$0>:
static inline void i2c_esp32_reset_fifo(const struct i2c_esp32_config *config)
40081d6c:	004136        	entry	a1, 32
	uint32_t reg = I2C_FIFO_CONF_REG(config->index);
40081d6f:	1182e0        	slli	a8, a2, 2
40081d72:	282a      	add.n	a2, a8, a2
40081d74:	fa5d81        	l32r	a8, 400806e8 <_iram_text_start+0x198>
40081d77:	112220        	slli	a2, a2, 14
40081d7a:	228a      	add.n	a2, a2, a8
	return *(volatile uint32_t *)addr;
40081d7c:	0020c0        	memw
40081d7f:	0288      	l32i.n	a8, a2, 0
40081d81:	fa4d91        	l32r	a9, 400806b8 <_iram_text_start+0x168>
40081d84:	208890        	or	a8, a8, a9
	*(volatile uint32_t *)addr = data;
40081d87:	0020c0        	memw
40081d8a:	0289      	s32i.n	a8, a2, 0
	return *(volatile uint32_t *)addr;
40081d8c:	0020c0        	memw
40081d8f:	0288      	l32i.n	a8, a2, 0
	sys_write32(sys_read32(mem_addr) & ~v, mem_addr);
40081d91:	fa5691        	l32r	a9, 400806ec <_iram_text_start+0x19c>
40081d94:	108890        	and	a8, a8, a9
	*(volatile uint32_t *)addr = data;
40081d97:	0020c0        	memw
40081d9a:	0289      	s32i.n	a8, a2, 0
}
40081d9c:	f01d      	retw.n
	...

40081da0 <i2c_esp32_write_addr>:
{
40081da0:	004136        	entry	a1, 32
	const struct i2c_esp32_config *config = dev->config;
40081da3:	1268      	l32i.n	a6, a2, 4
	struct i2c_esp32_data *data = dev->data;
40081da5:	3278      	l32i.n	a7, a2, 12
	i2c_esp32_reset_fifo(config);
40081da7:	06a8      	l32i.n	a10, a6, 0
40081da9:	fffc25        	call8	40081d6c <i2c_esp32_reset_fifo$isra$0>
	sys_write32(addr & I2C_FIFO_RDATA, I2C_DATA_APB_REG(config->index));
40081dac:	0628      	l32i.n	a2, a6, 0
40081dae:	748050        	extui	a8, a5, 0, 8
40081db1:	1192e0        	slli	a9, a2, 2
40081db4:	992a      	add.n	a9, a9, a2
40081db6:	fa4e21        	l32r	a2, 400806f0 <_iram_text_start+0x1a0>
40081db9:	119920        	slli	a9, a9, 14
40081dbc:	992a      	add.n	a9, a9, a2
40081dbe:	0020c0        	memw
40081dc1:	0989      	s32i.n	a8, a9, 0
	if (data->dev_config & I2C_ADDR_10_BITS) {
40081dc3:	0788      	l32i.n	a8, a7, 0
	uint32_t addr_len = 1U;
40081dc5:	190c      	movi.n	a9, 1
	if (data->dev_config & I2C_ADDR_10_BITS) {
40081dc7:	156807        	bbci	a8, 0, 40081de0 <i2c_esp32_write_addr+0x40>
		sys_write32(I2C_DATA_APB_REG(config->index),
40081dca:	0668      	l32i.n	a6, a6, 0
			    (addr >> 8) & I2C_FIFO_RDATA);
40081dcc:	415850        	srli	a5, a5, 8
		sys_write32(I2C_DATA_APB_REG(config->index),
40081dcf:	1186e0        	slli	a8, a6, 2
40081dd2:	886a      	add.n	a8, a8, a6
40081dd4:	118820        	slli	a8, a8, 14
40081dd7:	882a      	add.n	a8, a8, a2
40081dd9:	0020c0        	memw
40081ddc:	0589      	s32i.n	a8, a5, 0
		addr_len++;
40081dde:	290c      	movi.n	a9, 2
	if ((msg->flags & I2C_MSG_RW_MASK) != I2C_MSG_WRITE) {
40081de0:	080422        	l8ui	a2, a4, 8
40081de3:	116207        	bbci	a2, 0, 40081df8 <i2c_esp32_write_addr+0x58>
		*cmd++ = (struct i2c_esp32_cmd) {
40081de6:	940c      	movi.n	a4, 9
40081de8:	114480        	slli	a4, a4, 8
40081deb:	209940        	or	a9, a9, a4
40081dee:	234b      	addi.n	a2, a3, 4
40081df0:	0020c0        	memw
40081df3:	0399      	s32i.n	a9, a3, 0
40081df5:	0001c6        	j	40081e00 <i2c_esp32_write_addr+0x60>
		msg->len += addr_len;
40081df8:	1458      	l32i.n	a5, a4, 4
40081dfa:	032d      	mov.n	a2, a3
40081dfc:	959a      	add.n	a9, a5, a9
40081dfe:	1499      	s32i.n	a9, a4, 4
}
40081e00:	f01d      	retw.n
	...

40081e04 <i2c_esp32_configure_pins>:
{
40081e04:	004136        	entry	a1, 32
#ifndef ZEPHYR_INCLUDE_DRIVERS_GPIO_GPIO_ESP32_H_
#define ZEPHYR_INCLUDE_DRIVERS_GPIO_GPIO_ESP32_H_

static const char *gpio_esp32_get_gpio_for_pin(int pin)
{
	if (pin < 32) {
40081e07:	1fa052        	movi	a5, 31
		return NULL;
#endif /* CONFIG_GPIO_ESP32_0 */
	}

#if defined(CONFIG_GPIO_ESP32_1)
	return DT_LABEL(DT_INST(1, espressif_esp32_gpio));
40081e0a:	fa3aa1        	l32r	a10, 400806f4 <_iram_text_start+0x1a4>
	if (pin < 32) {
40081e0d:	022527        	blt	a5, a2, 40081e13 <i2c_esp32_configure_pins+0xf>
		return DT_LABEL(DT_INST(0, espressif_esp32_gpio));
40081e10:	fa3aa1        	l32r	a10, 400806f8 <_iram_text_start+0x1a8>
40081e13:	008225        	call8	40082634 <z_impl_device_get_binding>
		return -EINVAL;
40081e16:	eaaf82        	movi	a8, -22
	if (!gpio) {
40081e19:	047a16        	beqz	a10, 40081e64 <i2c_esp32_configure_pins+0x60>
	ret = gpio_pin_configure(gpio, pin, pin_mode);
40081e1c:	746020        	extui	a6, a2, 0, 8
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
40081e1f:	032a52        	l32i	a5, a10, 12
	return api->pin_configure(port, pin, flags);
40081e22:	2a88      	l32i.n	a8, a10, 8
40081e24:	fa36c1        	l32r	a12, 400806fc <_iram_text_start+0x1ac>
40081e27:	0888      	l32i.n	a8, a8, 0
40081e29:	06bd      	mov.n	a11, a6
40081e2b:	0008e0        	callx8	a8
40081e2e:	0a8d      	mov.n	a8, a10
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
40081e30:	0adc      	bnez.n	a10, 40081e44 <i2c_esp32_configure_pins+0x40>
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
40081e32:	eb7c      	movi.n	a11, -2
40081e34:	401600        	ssl	a6
40081e37:	818bb0        	src	a8, a11, a11
40081e3a:	05b8      	l32i.n	a11, a5, 0
40081e3c:	10bb80        	and	a11, a11, a8
40081e3f:	05b9      	s32i.n	a11, a5, 0
	if (ret < 0) {
40081e41:	000086        	j	40081e47 <i2c_esp32_configure_pins+0x43>
40081e44:	01ca96        	bltz	a10, 40081e64 <i2c_esp32_configure_pins+0x60>
	esp32_rom_gpio_matrix_out(pin, matrix_out, false, false);
40081e47:	0d0c      	movi.n	a13, 0
40081e49:	0dcd      	mov.n	a12, a13
40081e4b:	03bd      	mov.n	a11, a3
40081e4d:	20a220        	or	a10, a2, a2
40081e50:	fa2c81        	l32r	a8, 40080700 <_iram_text_start+0x1b0>
40081e53:	0008e0        	callx8	a8
	esp32_rom_gpio_matrix_in(pin, matrix_in, false);
40081e56:	0c0c      	movi.n	a12, 0
40081e58:	04bd      	mov.n	a11, a4
40081e5a:	02ad      	mov.n	a10, a2
40081e5c:	fa2a81        	l32r	a8, 40080704 <_iram_text_start+0x1b4>
40081e5f:	0008e0        	callx8	a8
40081e62:	080c      	movi.n	a8, 0
}
40081e64:	082d      	mov.n	a2, a8
40081e66:	f01d      	retw.n

40081e68 <i2c_esp32_configure>:
{
40081e68:	006136        	entry	a1, 48
	const struct i2c_esp32_config *config = dev->config;
40081e6b:	1248      	l32i.n	a4, a2, 4
	struct i2c_esp32_data *data = dev->data;
40081e6d:	3278      	l32i.n	a7, a2, 12
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40081e6f:	006360        	rsil	a6, 3
	ret = i2c_esp32_configure_pins(config->pins.scl,
40081e72:	64c8      	l32i.n	a12, a4, 24
40081e74:	54b8      	l32i.n	a11, a4, 20
40081e76:	0724a2        	l32i	a10, a4, 28
40081e79:	fff8a5        	call8	40081e04 <i2c_esp32_configure_pins>
	if (ret < 0) {
40081e7c:	242a96        	bltz	a10, 400820c2 <i2c_esp32_configure+0x25a>
	ret = i2c_esp32_configure_pins(config->pins.sda,
40081e7f:	44c8      	l32i.n	a12, a4, 16
40081e81:	34b8      	l32i.n	a11, a4, 12
40081e83:	84a8      	l32i.n	a10, a4, 32
40081e85:	fff7e5        	call8	40081e04 <i2c_esp32_configure_pins>
	if (ret < 0) {
40081e88:	236a96        	bltz	a10, 400820c2 <i2c_esp32_configure+0x25a>
	clock_control_on(data->clock_dev, config->peripheral_id);
40081e8b:	a7a8      	l32i.n	a10, a7, 40
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
40081e8d:	0924b2        	l32i	a11, a4, 36
40081e90:	2a58      	l32i.n	a5, a10, 8
40081e92:	002552        	l32i	a5, a5, 0
40081e95:	0005e0        	callx8	a5
	if (config->mode.tx_lsb_first) {
40081e98:	280492        	l8ui	a9, a4, 40
		v |= I2C_TX_LSB_FIRST;
40081e9b:	084c      	movi.n	a8, 64
40081e9d:	050c      	movi.n	a5, 0
40081e9f:	935890        	movnez	a5, a8, a9
	if (config->mode.rx_lsb_first) {
40081ea2:	290482        	l8ui	a8, a4, 41
40081ea5:	488c      	beqz.n	a8, 40081ead <i2c_esp32_configure+0x45>
		v |= I2C_RX_LSB_FIRST;
40081ea7:	80a082        	movi	a8, 128
40081eaa:	205580        	or	a5, a5, a8
	if (dev_config & I2C_MODE_MASTER) {
40081ead:	0498      	l32i.n	a9, a4, 0
40081eaf:	1189e0        	slli	a8, a9, 2
40081eb2:	889a      	add.n	a8, a8, a9
40081eb4:	fa1591        	l32r	a9, 40080708 <_iram_text_start+0x1b8>
40081eb7:	118820        	slli	a8, a8, 14
40081eba:	889a      	add.n	a8, a8, a9
40081ebc:	091c      	movi.n	a9, 16
40081ebe:	0f0397        	bnone	a3, a9, 40081ed1 <i2c_esp32_configure+0x69>
40081ec1:	070c      	movi.n	a7, 0
		v |= I2C_MS_MODE;
40081ec3:	205590        	or	a5, a5, a9
40081ec6:	0020c0        	memw
40081ec9:	0879      	s32i.n	a7, a8, 0
40081ecb:	001506        	j	40081f23 <i2c_esp32_configure+0xbb>
40081ece:	000000        	ill
		uint32_t addr = (data->address & I2C_SLAVE_ADDR_V);
40081ed1:	021772        	l16ui	a7, a7, 4
40081ed4:	e47070        	extui	a7, a7, 0, 15
		if (dev_config & I2C_ADDR_10_BITS) {
40081ed7:	056307        	bbci	a3, 0, 40081ee0 <i2c_esp32_configure+0x78>
			addr |= I2C_ADDR_10BIT_EN;
40081eda:	f9f291        	l32r	a9, 400806a4 <_iram_text_start+0x154>
40081edd:	207790        	or	a7, a7, a9
40081ee0:	0020c0        	memw
40081ee3:	0879      	s32i.n	a7, a8, 0
		sys_clear_bit(I2C_CTR_REG(config->index), I2C_TRANS_START_S);
40081ee5:	0488      	l32i.n	a8, a4, 0

static ALWAYS_INLINE void sys_clear_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp & ~(1 << bit);
40081ee7:	dfaf92        	movi	a9, -33
40081eea:	1178e0        	slli	a7, a8, 2
40081eed:	778a      	add.n	a7, a7, a8
40081eef:	fa0781        	l32r	a8, 4008070c <_iram_text_start+0x1bc>
40081ef2:	117720        	slli	a7, a7, 14
40081ef5:	778a      	add.n	a7, a7, a8
	uint32_t temp = *(volatile uint32_t *)addr;
40081ef7:	0020c0        	memw
40081efa:	0788      	l32i.n	a8, a7, 0
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
40081efc:	108890        	and	a8, a8, a9
40081eff:	0020c0        	memw
40081f02:	0789      	s32i.n	a8, a7, 0
		sys_clear_bit(I2C_FIFO_CONF_REG(config->index),
40081f04:	0488      	l32i.n	a8, a4, 0
40081f06:	fa0291        	l32r	a9, 40080710 <_iram_text_start+0x1c0>
40081f09:	1178e0        	slli	a7, a8, 2
40081f0c:	778a      	add.n	a7, a7, a8
40081f0e:	f9f681        	l32r	a8, 400806e8 <_iram_text_start+0x198>
40081f11:	117720        	slli	a7, a7, 14
40081f14:	778a      	add.n	a7, a7, a8
	uint32_t temp = *(volatile uint32_t *)addr;
40081f16:	0020c0        	memw
40081f19:	0788      	l32i.n	a8, a7, 0
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
40081f1b:	108890        	and	a8, a8, a9
40081f1e:	0020c0        	memw
40081f21:	0789      	s32i.n	a8, a7, 0
	sys_write32(v, I2C_CTR_REG(config->index));
40081f23:	0488      	l32i.n	a8, a4, 0
	v |= I2C_CLK_EN;
40081f25:	03a172        	movi	a7, 0x103
40081f28:	205570        	or	a5, a5, a7
	sys_write32(v, I2C_CTR_REG(config->index));
40081f2b:	1178e0        	slli	a7, a8, 2
40081f2e:	778a      	add.n	a7, a7, a8
40081f30:	f9f781        	l32r	a8, 4008070c <_iram_text_start+0x1bc>
40081f33:	117720        	slli	a7, a7, 14
40081f36:	778a      	add.n	a7, a7, a8
40081f38:	0020c0        	memw
40081f3b:	0759      	s32i.n	a5, a7, 0
	const struct i2c_esp32_config *config = dev->config;
40081f3d:	1258      	l32i.n	a5, a2, 4
	struct i2c_esp32_data *data = dev->data;
40081f3f:	3278      	l32i.n	a7, a2, 12
	uint32_t sys_clk_freq = 0;
40081f41:	020c      	movi.n	a2, 0
40081f43:	0129      	s32i.n	a2, a1, 0
	ret = i2c_esp32_configure_speed(dev, I2C_SPEED_GET(dev_config));
40081f45:	243130        	extui	a3, a3, 1, 3
	uint32_t freq_hz = speed_to_freq_tbl[speed];
40081f48:	f9f321        	l32r	a2, 40080714 <_iram_text_start+0x1c4>
40081f4b:	1133e0        	slli	a3, a3, 2
40081f4e:	323a      	add.n	a3, a2, a3
40081f50:	0328      	l32i.n	a2, a3, 0
		return -ENOTSUP;
40081f52:	ddafa2        	movi	a10, -35
	if (!freq_hz) {
40081f55:	163216        	beqz	a2, 400820bc <i2c_esp32_configure+0x254>
	if (clock_control_get_rate(data->clock_dev,
40081f58:	a7a8      	l32i.n	a10, a7, 40
		(const struct clock_control_driver_api *)dev->api;

	__ASSERT(api->get_rate != NULL, "%s not implemented for device %s",
		__func__, dev->name);

	return api->get_rate(dev, sys, rate);
40081f5a:	95b8      	l32i.n	a11, a5, 36
40081f5c:	2a38      	l32i.n	a3, a10, 8
40081f5e:	01cd      	mov.n	a12, a1
40081f60:	3338      	l32i.n	a3, a3, 12
40081f62:	0003e0        	callx8	a3
40081f65:	151a56        	bnez	a10, 400820ba <i2c_esp32_configure+0x252>
		   I2C_SCL_LOW_PERIOD_REG(config->index));
40081f68:	0578      	l32i.n	a7, a5, 0
	period = (sys_clk_freq / freq_hz);
40081f6a:	0188      	l32i.n	a8, a1, 0
40081f6c:	c28820        	quou	a8, a8, a2
		   I2C_SCL_LOW_PERIOD_REG(config->index));
40081f6f:	1127e0        	slli	a2, a7, 2
40081f72:	227a      	add.n	a2, a2, a7
40081f74:	f9e971        	l32r	a7, 40080718 <_iram_text_start+0x1c8>
40081f77:	112220        	slli	a2, a2, 14
40081f7a:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40081f7c:	0020c0        	memw
40081f7f:	0278      	l32i.n	a7, a2, 0
	period /= 2U; /* Set hold and setup times to 1/2th of period */
40081f81:	413180        	srli	a3, a8, 1
	sys_write32(sys_read32(mem_addr) | v, mem_addr);
40081f84:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
40081f87:	0020c0        	memw
40081f8a:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_HIGH_PERIOD_REG(config->index));
40081f8c:	0578      	l32i.n	a7, a5, 0
	period /= 2U; /* Set sample and hold times to 1/4th of period */
40081f8e:	418280        	srli	a8, a8, 2
		   I2C_SCL_HIGH_PERIOD_REG(config->index));
40081f91:	1127e0        	slli	a2, a7, 2
40081f94:	227a      	add.n	a2, a2, a7
40081f96:	f9e171        	l32r	a7, 4008071c <_iram_text_start+0x1cc>
40081f99:	112220        	slli	a2, a2, 14
40081f9c:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40081f9e:	0020c0        	memw
40081fa1:	0278      	l32i.n	a7, a2, 0
40081fa3:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
40081fa6:	0020c0        	memw
40081fa9:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_START_HOLD_REG(config->index));
40081fab:	0578      	l32i.n	a7, a5, 0
40081fad:	1127e0        	slli	a2, a7, 2
40081fb0:	227a      	add.n	a2, a2, a7
40081fb2:	f9db71        	l32r	a7, 40080720 <_iram_text_start+0x1d0>
40081fb5:	112220        	slli	a2, a2, 14
40081fb8:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40081fba:	0020c0        	memw
40081fbd:	0278      	l32i.n	a7, a2, 0
40081fbf:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
40081fc2:	0020c0        	memw
40081fc5:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_RSTART_SETUP_REG(config->index));
40081fc7:	0578      	l32i.n	a7, a5, 0
40081fc9:	1127e0        	slli	a2, a7, 2
40081fcc:	227a      	add.n	a2, a2, a7
40081fce:	f9d571        	l32r	a7, 40080724 <_iram_text_start+0x1d4>
40081fd1:	112220        	slli	a2, a2, 14
40081fd4:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40081fd6:	0020c0        	memw
40081fd9:	0278      	l32i.n	a7, a2, 0
40081fdb:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
40081fde:	0020c0        	memw
40081fe1:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_STOP_HOLD_REG(config->index));
40081fe3:	0578      	l32i.n	a7, a5, 0
40081fe5:	1127e0        	slli	a2, a7, 2
40081fe8:	227a      	add.n	a2, a2, a7
40081fea:	f9cf71        	l32r	a7, 40080728 <_iram_text_start+0x1d8>
40081fed:	112220        	slli	a2, a2, 14
40081ff0:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40081ff2:	0020c0        	memw
40081ff5:	0278      	l32i.n	a7, a2, 0
40081ff7:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
40081ffa:	0020c0        	memw
40081ffd:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_STOP_SETUP_REG(config->index));
40081fff:	0578      	l32i.n	a7, a5, 0
40082001:	1127e0        	slli	a2, a7, 2
40082004:	227a      	add.n	a2, a2, a7
40082006:	f9c971        	l32r	a7, 4008072c <_iram_text_start+0x1dc>
40082009:	112220        	slli	a2, a2, 14
4008200c:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
4008200e:	0020c0        	memw
40082011:	0278      	l32i.n	a7, a2, 0
40082013:	203370        	or	a3, a3, a7
	*(volatile uint32_t *)addr = data;
40082016:	0020c0        	memw
40082019:	0239      	s32i.n	a3, a2, 0
		   I2C_SDA_HOLD_REG(config->index));
4008201b:	0538      	l32i.n	a3, a5, 0
4008201d:	1123e0        	slli	a2, a3, 2
40082020:	223a      	add.n	a2, a2, a3
40082022:	f9c331        	l32r	a3, 40080730 <_iram_text_start+0x1e0>
40082025:	112220        	slli	a2, a2, 14
40082028:	223a      	add.n	a2, a2, a3
	return *(volatile uint32_t *)addr;
4008202a:	0020c0        	memw
4008202d:	0238      	l32i.n	a3, a2, 0
4008202f:	203830        	or	a3, a8, a3
	*(volatile uint32_t *)addr = data;
40082032:	0020c0        	memw
40082035:	0239      	s32i.n	a3, a2, 0
		   I2C_SDA_SAMPLE_REG(config->index));
40082037:	0538      	l32i.n	a3, a5, 0
40082039:	ffab52        	movi	a5, 0xfffffbff
4008203c:	1123e0        	slli	a2, a3, 2
4008203f:	223a      	add.n	a2, a2, a3
40082041:	f9bc31        	l32r	a3, 40080734 <_iram_text_start+0x1e4>
40082044:	112220        	slli	a2, a2, 14
40082047:	223a      	add.n	a2, a2, a3
	return *(volatile uint32_t *)addr;
40082049:	0020c0        	memw
4008204c:	0238      	l32i.n	a3, a2, 0
4008204e:	208830        	or	a8, a8, a3
	*(volatile uint32_t *)addr = data;
40082051:	0020c0        	memw
40082054:	0289      	s32i.n	a8, a2, 0
	sys_clear_bit(I2C_FIFO_CONF_REG(config->index), I2C_NONFIFO_EN_S);
40082056:	0438      	l32i.n	a3, a4, 0
40082058:	1123e0        	slli	a2, a3, 2
4008205b:	223a      	add.n	a2, a2, a3
4008205d:	f9a231        	l32r	a3, 400806e8 <_iram_text_start+0x198>
40082060:	112220        	slli	a2, a2, 14
40082063:	223a      	add.n	a2, a2, a3
	uint32_t temp = *(volatile uint32_t *)addr;
40082065:	0020c0        	memw
40082068:	0238      	l32i.n	a3, a2, 0
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
4008206a:	103350        	and	a3, a3, a5
4008206d:	0020c0        	memw
40082070:	0239      	s32i.n	a3, a2, 0
	sys_write32(v << I2C_TIME_OUT_REG_S, I2C_TO_REG(config->index));
40082072:	0438      	l32i.n	a3, a4, 0
40082074:	1123e0        	slli	a2, a3, 2
40082077:	223a      	add.n	a2, a2, a3
40082079:	f9af31        	l32r	a3, 40080738 <_iram_text_start+0x1e8>
4008207c:	112220        	slli	a2, a2, 14
4008207f:	223a      	add.n	a2, a2, a3
40082081:	f9ae31        	l32r	a3, 4008073c <_iram_text_start+0x1ec>
40082084:	0020c0        	memw
40082087:	0239      	s32i.n	a3, a2, 0
		    I2C_INT_ENA_REG(config->index));
40082089:	0438      	l32i.n	a3, a4, 0
4008208b:	1123e0        	slli	a2, a3, 2
4008208e:	223a      	add.n	a2, a2, a3
40082090:	f9ac31        	l32r	a3, 40080740 <_iram_text_start+0x1f0>
40082093:	112220        	slli	a2, a2, 14
40082096:	223a      	add.n	a2, a2, a3
40082098:	a0a532        	movi	a3, 0x5a0
4008209b:	0020c0        	memw
4008209e:	0239      	s32i.n	a3, a2, 0
	__asm__ volatile("rsr.intenable %0" : "=r"(val));
400820a0:	03e430        	rsr.intenable	a3
	z_xt_ints_on(1 << irq);
400820a3:	c448      	l32i.n	a4, a4, 48
400820a5:	120c      	movi.n	a2, 1
400820a7:	401400        	ssl	a4
400820aa:	a12200        	sll	a2, a2
	val |= mask;
400820ad:	202230        	or	a2, a2, a3
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
400820b0:	13e420        	wsr.intenable	a2
400820b3:	002010        	rsync
400820b6:	000086        	j	400820bc <i2c_esp32_configure+0x254>
400820b9:	aa6c00        	floor.s	a6, f12, 0
	XTOS_RESTORE_INTLEVEL(key);
400820bc:	13e660        	wsr.ps	a6
400820bf:	002010        	rsync
}
400820c2:	0a2d      	mov.n	a2, a10
400820c4:	f01d      	retw.n
	...

400820c8 <i2c_esp32_transmit>:
{
400820c8:	004136        	entry	a1, 32
	const struct i2c_esp32_config *config = dev->config;
400820cb:	1238      	l32i.n	a3, a2, 4
	struct i2c_esp32_data *data = dev->data;
400820cd:	32a8      	l32i.n	a10, a2, 12
	sys_set_bit(I2C_CTR_REG(config->index), I2C_TRANS_START_S);
400820cf:	0328      	l32i.n	a2, a3, 0
	*(volatile uint32_t *)addr = temp | (1 << bit);
400820d1:	092c      	movi.n	a9, 32
400820d3:	1182e0        	slli	a8, a2, 2
400820d6:	882a      	add.n	a8, a8, a2
400820d8:	f98d21        	l32r	a2, 4008070c <_iram_text_start+0x1bc>
400820db:	118820        	slli	a8, a8, 14
400820de:	882a      	add.n	a8, a8, a2
	uint32_t temp = *(volatile uint32_t *)addr;
400820e0:	0020c0        	memw
400820e3:	0828      	l32i.n	a2, a8, 0
	*(volatile uint32_t *)addr = temp | (1 << bit);
400820e5:	202290        	or	a2, a2, a9
400820e8:	0020c0        	memw
400820eb:	0829      	s32i.n	a2, a8, 0
	return z_impl_k_sem_take(sem, timeout);
400820ed:	f995c1        	l32r	a12, 40080744 <_iram_text_start+0x1f4>
400820f0:	f938d1        	l32r	a13, 400805d0 <_iram_text_start+0x80>
400820f3:	aa8b      	addi.n	a10, a10, 8
400820f5:	00df65        	call8	40082eec <z_impl_k_sem_take>
		return -ETIMEDOUT;
400820f8:	c4af22        	movi	a2, -60
	if (k_sem_take(&data->fifo_sem, K_MSEC(I2C_ESP32_TIMEOUT_MS)) < 0) {
400820fb:	026a96        	bltz	a10, 40082125 <i2c_esp32_transmit+0x5d>
	status = sys_read32(I2C_INT_RAW_REG(config->index));
400820fe:	0328      	l32i.n	a2, a3, 0
40082100:	1182e0        	slli	a8, a2, 2
40082103:	882a      	add.n	a8, a8, a2
40082105:	f99021        	l32r	a2, 40080748 <_iram_text_start+0x1f8>
40082108:	118820        	slli	a8, a8, 14
4008210b:	882a      	add.n	a8, a8, a2
	return *(volatile uint32_t *)addr;
4008210d:	0020c0        	memw
40082110:	0898      	l32i.n	a9, a8, 0
	if (status & (I2C_ARBITRATION_LOST_INT_RAW | I2C_ACK_ERR_INT_RAW)) {
40082112:	20a482        	movi	a8, 0x420
40082115:	108980        	and	a8, a9, a8
		return -EIO;
40082118:	b27c      	movi.n	a2, -5
	if (status & (I2C_ARBITRATION_LOST_INT_RAW | I2C_ACK_ERR_INT_RAW)) {
4008211a:	78cc      	bnez.n	a8, 40082125 <i2c_esp32_transmit+0x5d>
	if (status & I2C_TIME_OUT_INT_RAW) {
4008211c:	049890        	extui	a9, a9, 8, 1
	return 0;
4008211f:	c4af22        	movi	a2, -60
40082122:	832890        	moveqz	a2, a8, a9
}
40082125:	f01d      	retw.n
	...

40082128 <i2c_esp32_init>:
		    POST_KERNEL, CONFIG_I2C_INIT_PRIORITY,
		    &i2c_esp32_driver_api);
#endif /* DT_NODE_HAS_STATUS(DT_DRV_INST(1), okay) */

static int i2c_esp32_init(const struct device *dev)
{
40082128:	004136        	entry	a1, 32
	const struct i2c_esp32_config *config = dev->config;
4008212b:	1248      	l32i.n	a4, a2, 4
extern "C" {
#endif

static inline uint32_t i2c_map_dt_bitrate(uint32_t bitrate)
{
	switch (bitrate) {
4008212d:	f98751        	l32r	a5, 4008074c <_iram_text_start+0x1fc>
	struct i2c_esp32_data *data = dev->data;
	uint32_t bitrate_cfg = i2c_map_dt_bitrate(config->bitrate);
40082130:	e488      	l32i.n	a8, a4, 56
	struct i2c_esp32_data *data = dev->data;
40082132:	3268      	l32i.n	a6, a2, 12
	case I2C_BITRATE_STANDARD:
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
	case I2C_BITRATE_FAST:
		return I2C_SPEED_FAST << I2C_SPEED_SHIFT;
	case I2C_BITRATE_FAST_PLUS:
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
40082134:	630c      	movi.n	a3, 6
	switch (bitrate) {
40082136:	2c1857        	beq	a8, a5, 40082166 <i2c_esp32_init+0x3e>
40082139:	143587        	bltu	a5, a8, 40082151 <i2c_esp32_init+0x29>
4008213c:	f98551        	l32r	a5, 40080750 <_iram_text_start+0x200>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
4008213f:	230c      	movi.n	a3, 2
	switch (bitrate) {
40082141:	211857        	beq	a8, a5, 40082166 <i2c_esp32_init+0x3e>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
	}

	LOG_ERR("Invalid I2C bit rate value");

	return 0;
40082144:	f98431        	l32r	a3, 40080754 <_iram_text_start+0x204>
40082147:	450c      	movi.n	a5, 4
40082149:	c08830        	sub	a8, a8, a3
4008214c:	000446        	j	40082161 <i2c_esp32_init+0x39>
4008214f:	510000        	lsi	f0, a0, 0x144
	switch (bitrate) {
40082152:	0cf981        	l32r	a8, 40045538 <esp32_rom_gpio_matrix_out+0x3b62c>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
40082155:	185783        	lsi	f8, a7, 96
	switch (bitrate) {
40082158:	310c      	movi.n	a1, 3
	return 0;
4008215a:	0cf980        	lsi	f8, a9, 48
4008215d:	8830a5        	call8	4000a468 <esp32_rom_gpio_matrix_out+0x55c>
40082160:	030cc0        	rsr.scompare1	a12
40082163:	833580        	moveqz	a3, a5, a8
	data->clock_dev = device_get_binding(config->clock_name);
40082166:	24a8      	l32i.n	a10, a4, 8
40082168:	004ca5        	call8	40082634 <z_impl_device_get_binding>
4008216b:	a6a9      	s32i.n	a10, a6, 40
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008216d:	006350        	rsil	a5, 3
	return z_impl_k_sem_init(sem, initial_count, limit);
40082170:	1c0c      	movi.n	a12, 1
40082172:	0cbd      	mov.n	a11, a12
40082174:	a68b      	addi.n	a10, a6, 8
40082176:	0151a5        	call8	40083690 <z_impl_k_sem_init>
40082179:	1c0c      	movi.n	a12, 1
4008217b:	20bcc0        	or	a11, a12, a12
4008217e:	18c6a2        	addi	a10, a6, 24
40082181:	0150e5        	call8	40083690 <z_impl_k_sem_init>
	__asm__ volatile("rsr.intenable %0" : "=r"(val));
40082184:	03e460        	rsr.intenable	a6
	z_xt_ints_off(1 << irq);
40082187:	c498      	l32i.n	a9, a4, 48
	val &= ~mask;
40082189:	e87c      	movi.n	a8, -2
4008218b:	401900        	ssl	a9
4008218e:	818880        	src	a8, a8, a8
40082191:	108860        	and	a8, a8, a6
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
40082194:	13e480        	wsr.intenable	a8
40082197:	002010        	rsync
	irq_disable(config->irq.line);

	/* Even if irq_enable() is called on config->irq.line, disable
	 * interrupt sources in the I2C controller.
	 */
	sys_write32(0, I2C_INT_ENA_REG(config->index));
4008219a:	0468      	l32i.n	a6, a4, 0
	*(volatile uint32_t *)addr = data;
4008219c:	0a0c      	movi.n	a10, 0
4008219e:	1186e0        	slli	a8, a6, 2
400821a1:	886a      	add.n	a8, a8, a6
400821a3:	f96761        	l32r	a6, 40080740 <_iram_text_start+0x1f0>
400821a6:	118820        	slli	a8, a8, 14
400821a9:	886a      	add.n	a8, a8, a6
400821ab:	0020c0        	memw
400821ae:	0068a2        	s32i	a10, a8, 0
	esp32_rom_intr_matrix_set(0, config->irq.source, config->irq.line);
400821b1:	0c24c2        	l32i	a12, a4, 48
400821b4:	b4b8      	l32i.n	a11, a4, 44
400821b6:	f94981        	l32r	a8, 400806dc <_iram_text_start+0x18c>
400821b9:	0008e0        	callx8	a8

	config->connect_irq();
400821bc:	1468      	l32i.n	a6, a4, 4
400821be:	0006e0        	callx8	a6
	XTOS_RESTORE_INTLEVEL(key);
400821c1:	13e650        	wsr.ps	a5
400821c4:	002010        	rsync
	irq_unlock(key);

	return i2c_esp32_configure(dev, config->default_config | bitrate_cfg);
400821c7:	d4b8      	l32i.n	a11, a4, 52
400821c9:	02ad      	mov.n	a10, a2
400821cb:	20b3b0        	or	a11, a3, a11
400821ce:	ffc9a5        	call8	40081e68 <i2c_esp32_configure>
}
400821d1:	0a2d      	mov.n	a2, a10
400821d3:	f01d      	retw.n
400821d5:	000000        	ill

400821d8 <i2c_esp32_wait$isra$1>:
static int i2c_esp32_wait(const struct device *dev,
400821d8:	004136        	entry	a1, 32
	int counter = 0;
400821db:	040c      	movi.n	a4, 0
	if (*counter > I2C_ESP32_TIMEOUT) {
400821dd:	85a352        	movi	a5, 0x385
	if (wait_cmd) {
400821e0:	199347        	bne	a3, a4, 400821fd <i2c_esp32_wait$isra$1+0x25>
400821e3:	000cc6        	j	4008221a <i2c_esp32_wait$isra$1+0x42>
	*counter = *counter + 1;
400821e6:	441b      	addi.n	a4, a4, 1
	if (*counter > I2C_ESP32_TIMEOUT) {
400821e8:	059457        	bne	a4, a5, 400821f1 <i2c_esp32_wait$isra$1+0x19>
		return -ETIMEDOUT;
400821eb:	c4af22        	movi	a2, -60
400821ee:	001206        	j	4008223a <i2c_esp32_wait$isra$1+0x62>
	if (*counter > I2C_ESP32_SPIN_THRESHOLD) {
400821f1:	58a282        	movi	a8, 0x258
400821f4:	05a847        	bge	a8, a4, 400821fd <i2c_esp32_wait$isra$1+0x25>
	z_impl_k_yield();
400821f7:	201110        	or	a1, a1, a1
400821fa:	00be65        	call8	40082de0 <z_impl_k_yield>
		while (!wait_cmd->done) {
400821fd:	0020c0        	memw
40082200:	0388      	l32i.n	a8, a3, 0
40082202:	fe08d6        	bgez	a8, 400821e6 <i2c_esp32_wait$isra$1+0xe>
40082205:	000446        	j	4008221a <i2c_esp32_wait$isra$1+0x42>
	*counter = *counter + 1;
40082208:	01c442        	addi	a4, a4, 1
	if (*counter > I2C_ESP32_TIMEOUT) {
4008220b:	85a332        	movi	a3, 0x385
4008220e:	d91437        	beq	a4, a3, 400821eb <i2c_esp32_wait$isra$1+0x13>
	if (*counter > I2C_ESP32_SPIN_THRESHOLD) {
40082211:	58a232        	movi	a3, 0x258
40082214:	02a347        	bge	a3, a4, 4008221a <i2c_esp32_wait$isra$1+0x42>
40082217:	00bca5        	call8	40082de0 <z_impl_k_yield>
	while (sys_read32(I2C_SR_REG(config->index)) & I2C_BUS_BUSY) {
4008221a:	002292        	l32i	a9, a2, 0
4008221d:	f95031        	l32r	a3, 40080760 <_iram_text_start+0x210>
40082220:	1189e0        	slli	a8, a9, 2
40082223:	808890        	add	a8, a8, a9
40082226:	118820        	slli	a8, a8, 14
40082229:	883a      	add.n	a8, a8, a3
	return *(volatile uint32_t *)addr;
4008222b:	0020c0        	memw
4008222e:	0888      	l32i.n	a8, a8, 0
40082230:	031c      	movi.n	a3, 16
40082232:	108830        	and	a8, a8, a3
40082235:	fcf856        	bnez	a8, 40082208 <i2c_esp32_wait$isra$1+0x30>
	return 0;
40082238:	082d      	mov.n	a2, a8
}
4008223a:	f01d      	retw.n

4008223c <i2c_esp32_transfer>:
{
4008223c:	008136        	entry	a1, 64
4008223f:	206220        	or	a6, a2, a2
	struct i2c_esp32_data *data = dev->data;
40082242:	032222        	l32i	a2, a2, 12
{
40082245:	744040        	extui	a4, a4, 0, 8
40082248:	f45050        	extui	a5, a5, 0, 16
	k_sem_take(&data->transfer_sem, K_FOREVER);
4008224b:	18c272        	addi	a7, a2, 24
	return z_impl_k_sem_take(sem, timeout);
4008224e:	f945c1        	l32r	a12, 40080764 <_iram_text_start+0x214>
40082251:	f944d1        	l32r	a13, 40080764 <_iram_text_start+0x214>
40082254:	20a770        	or	a10, a7, a7
40082257:	00c965        	call8	40082eec <z_impl_k_sem_take>
	addr &= BIT_MASK(data->dev_config & I2C_ADDR_10_BITS ? 10 : 7);
4008225a:	0228      	l32i.n	a2, a2, 0
4008225c:	ffa392        	movi	a9, 0x3ff
4008225f:	042020        	extui	a2, a2, 0, 1
40082262:	7fa082        	movi	a8, 127
40082265:	938920        	movnez	a8, a9, a2
40082268:	1124f0        	slli	a2, a4, 1
4008226b:	224a      	add.n	a2, a2, a4
4008226d:	1122e0        	slli	a2, a2, 2
40082270:	232a      	add.n	a2, a3, a2
40082272:	105850        	and	a5, a8, a5
	addr <<= 1;
40082275:	1155f0        	slli	a5, a5, 1
	for (i = 0U; i < num_msgs; i++) {
40082278:	4129      	s32i.n	a2, a1, 16
	addr |= BIT(0);
4008227a:	120c      	movi.n	a2, 1
	cmd = i2c_esp32_write_addr(dev, cmd, &msg, addr);
4008227c:	202520        	or	a2, a5, a2
4008227f:	5129      	s32i.n	a2, a1, 20
	for (i = 0U; i < num_msgs; i++) {
40082281:	007806        	j	40082465 <i2c_esp32_transfer+0x229>
		if ((msgs[i].flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
40082284:	012642        	l32i	a4, a6, 4
40082287:	0123a2        	l32i	a10, a3, 4
4008228a:	002482        	l32i	a8, a4, 0
4008228d:	2398      	l32i.n	a9, a3, 8
4008228f:	1128e0        	slli	a2, a8, 2
40082292:	228a      	add.n	a2, a2, a8
40082294:	f93581        	l32r	a8, 40080768 <_iram_text_start+0x218>
40082297:	112220        	slli	a2, a2, 14
4008229a:	228a      	add.n	a2, a2, a8
4008229c:	03c8      	l32i.n	a12, a3, 0
4008229e:	080382        	l8ui	a8, a3, 8
400822a1:	01c9      	s32i.n	a12, a1, 0
400822a3:	048080        	extui	a8, a8, 0, 1
400822a6:	11a9      	s32i.n	a10, a1, 4
400822a8:	2199      	s32i.n	a9, a1, 8
400822aa:	b24b      	addi.n	a11, a2, 4
400822ac:	0c3856        	bnez	a8, 40082373 <i2c_esp32_transfer+0x137>
	*cmd++ = (struct i2c_esp32_cmd) {
400822af:	0020c0        	memw
400822b2:	0289      	s32i.n	a8, a2, 0
	cmd = i2c_esp32_write_addr(dev, cmd, &msg, addr);
400822b4:	05dd      	mov.n	a13, a5
400822b6:	01cd      	mov.n	a12, a1
400822b8:	06ad      	mov.n	a10, a6
400822ba:	ffae65        	call8	40081da0 <i2c_esp32_write_addr>
400822bd:	0abd      	mov.n	a11, a10
		uint32_t to_send = MIN(I2C_ESP32_BUFFER_SIZE, msg.len);
400822bf:	022c      	movi.n	a2, 32
400822c1:	002986        	j	4008236b <i2c_esp32_transfer+0x12f>
400822c4:	882000        	lsi	f0, a0, 0x220
400822c7:	0ad163        	lsi	f6, a1, 40
				    I2C_DATA_APB_REG(config->index));
400822ca:	adf9      	s32i.n	a15, a13, 40
400822cc:	7608      	l32i.n	a0, a6, 28
400822ce:	198a      	add.n	a1, a9, a8
			sys_write32(*msg.buf++,
400822d0:	0198      	l32i.n	a9, a1, 0
				    I2C_DATA_APB_REG(config->index));
400822d2:	04e8      	l32i.n	a14, a4, 0
			sys_write32(*msg.buf++,
400822d4:	c91b      	addi.n	a12, a9, 1
400822d6:	01c9      	s32i.n	a12, a1, 0
400822d8:	0009c2        	l8ui	a12, a9, 0
				    I2C_DATA_APB_REG(config->index));
400822db:	119ee0        	slli	a9, a14, 2
400822de:	99ea      	add.n	a9, a9, a14
400822e0:	119920        	slli	a9, a9, 14
400822e3:	99da      	add.n	a9, a9, a13
	*(volatile uint32_t *)addr = data;
400822e5:	0020c0        	memw
400822e8:	09c9      	s32i.n	a12, a9, 0
		*cmd++ = (struct i2c_esp32_cmd) {
400822ea:	990c      	movi.n	a9, 9
400822ec:	11a980        	slli	a10, a9, 8
400822ef:	749080        	extui	a9, a8, 0, 8
400822f2:	2099a0        	or	a9, a9, a10
400822f5:	0020c0        	memw
400822f8:	0b99      	s32i.n	a9, a11, 0
		msg.len -= to_send;
400822fa:	1198      	l32i.n	a9, a1, 4
400822fc:	c08980        	sub	a8, a9, a8
400822ff:	1189      	s32i.n	a8, a1, 4
		if (!msg.len && (msg.flags & I2C_MSG_STOP)) {
40082301:	c8dc      	bnez.n	a8, 40082321 <i2c_esp32_transfer+0xe5>
40082303:	080192        	l8ui	a9, a1, 8
40082306:	176917        	bbci	a9, 1, 40082321 <i2c_esp32_transfer+0xe5>
			*cmd = (struct i2c_esp32_cmd) {
40082309:	0020c0        	memw
4008230c:	1b89      	s32i.n	a8, a11, 4
4008230e:	f8bf91        	l32r	a9, 4008060c <_iram_text_start+0xbc>
40082311:	0020c0        	memw
40082314:	1b88      	l32i.n	a8, a11, 4
40082316:	108890        	and	a8, a8, a9
40082319:	f91491        	l32r	a9, 4008076c <_iram_text_start+0x21c>
4008231c:	000586        	j	40082336 <i2c_esp32_transfer+0xfa>
4008231f:	0c0000        	lsi	f0, a0, 48
			*cmd = (struct i2c_esp32_cmd) {
40082322:	c008      	l32i.n	a0, a0, 48
40082324:	890020        	lsi	f2, a0, 0x224
40082327:	911b      	addi.n	a9, a1, 1
40082329:	f8b9      	s32i.n	a11, a8, 60
4008232b:	0020c0        	memw
4008232e:	1b88      	l32i.n	a8, a11, 4
40082330:	108890        	and	a8, a8, a9
40082333:	f8b791        	l32r	a9, 40080610 <_iram_text_start+0xc0>
40082336:	208890        	or	a8, a8, a9
40082339:	0020c0        	memw
4008233c:	1b89      	s32i.n	a8, a11, 4
	ret = i2c_esp32_transmit(dev);
4008233e:	06ad      	mov.n	a10, a6
40082340:	61b9      	s32i.n	a11, a1, 24
40082342:	ffd865        	call8	400820c8 <i2c_esp32_transmit>
40082345:	0a8d      	mov.n	a8, a10
	if (!ret) {
40082347:	61b8      	l32i.n	a11, a1, 24
40082349:	7acc      	bnez.n	a10, 40082354 <i2c_esp32_transfer+0x118>
		return i2c_esp32_wait(dev, wait_cmd);
4008234b:	16a8      	l32i.n	a10, a6, 4
4008234d:	bb4b      	addi.n	a11, a11, 4
4008234f:	ffe8a5        	call8	400821d8 <i2c_esp32_wait$isra$1>
40082352:	0a8d      	mov.n	a8, a10
		if (ret < 0) {
40082354:	109896        	bltz	a8, 40082461 <i2c_esp32_transfer+0x225>
		i2c_esp32_reset_fifo(config);
40082357:	04a8      	l32i.n	a10, a4, 0
40082359:	ffa125        	call8	40081d6c <i2c_esp32_reset_fifo$isra$0>
	for (; msg.len; cmd = (void *)I2C_COMD0_REG(config->index)) {
4008235c:	0488      	l32i.n	a8, a4, 0
4008235e:	11b8e0        	slli	a11, a8, 2
40082361:	bb8a      	add.n	a11, a11, a8
40082363:	f90181        	l32r	a8, 40080768 <_iram_text_start+0x218>
40082366:	11bb20        	slli	a11, a11, 14
40082369:	bb8a      	add.n	a11, a11, a8
4008236b:	1188      	l32i.n	a8, a1, 4
4008236d:	f54856        	bnez	a8, 400822c5 <i2c_esp32_transfer+0x89>
40082370:	003b46        	j	40082461 <i2c_esp32_transfer+0x225>
	*cmd++ = (struct i2c_esp32_cmd) {
40082373:	080c      	movi.n	a8, 0
	cmd = i2c_esp32_write_addr(dev, cmd, &msg, addr);
40082375:	51d8      	l32i.n	a13, a1, 20
	*cmd++ = (struct i2c_esp32_cmd) {
40082377:	0020c0        	memw
4008237a:	0289      	s32i.n	a8, a2, 0
	cmd = i2c_esp32_write_addr(dev, cmd, &msg, addr);
4008237c:	01cd      	mov.n	a12, a1
4008237e:	20a660        	or	a10, a6, a6
40082381:	ffa1e5        	call8	40081da0 <i2c_esp32_write_addr>
	for (; msg.len; cmd = (void *)I2C_COMD0_REG(config->index)) {
40082384:	003506        	j	4008245c <i2c_esp32_transfer+0x220>
40082387:	000000        	ill
		uint32_t to_read = MIN(I2C_ESP32_BUFFER_SIZE, msg.len - 1);
4008238a:	280b      	addi.n	a2, a8, -1
4008238c:	092c      	movi.n	a9, 32
4008238e:	632290        	minu	a2, a2, a9
		if (to_read) {
40082391:	0f1826        	beqi	a8, 1, 400823a4 <i2c_esp32_transfer+0x168>
			*cmd++ = (struct i2c_esp32_cmd) {
40082394:	f8c6c1        	l32r	a12, 400806ac <_iram_text_start+0x15c>
40082397:	74b020        	extui	a11, a2, 0, 8
4008239a:	20bbc0        	or	a11, a11, a12
4008239d:	0020c0        	memw
400823a0:	0ab9      	s32i.n	a11, a10, 0
400823a2:	aa4b      	addi.n	a10, a10, 4
		if (msg.len - to_read <= 1U) {
400823a4:	c08820        	sub	a8, a8, a2
400823a7:	3728f6        	bgeui	a8, 2, 400823e2 <i2c_esp32_transfer+0x1a6>
			*cmd++ = (struct i2c_esp32_cmd) {
400823aa:	f8f181        	l32r	a8, 40080770 <_iram_text_start+0x220>
400823ad:	ba4b      	addi.n	a11, a10, 4
400823af:	0020c0        	memw
400823b2:	0a89      	s32i.n	a8, a10, 0
			if (msg.flags & I2C_MSG_STOP) {
400823b4:	080182        	l8ui	a8, a1, 8
			to_read++;
400823b7:	221b      	addi.n	a2, a2, 1
			if (msg.flags & I2C_MSG_STOP) {
400823b9:	236817        	bbci	a8, 1, 400823e0 <i2c_esp32_transfer+0x1a4>
				*cmd++ = (struct i2c_esp32_cmd) {
400823bc:	080c      	movi.n	a8, 0
400823be:	0020c0        	memw
400823c1:	1a89      	s32i.n	a8, a10, 4
400823c3:	0020c0        	memw
400823c6:	1a88      	l32i.n	a8, a10, 4
400823c8:	f891c1        	l32r	a12, 4008060c <_iram_text_start+0xbc>
400823cb:	1088c0        	and	a8, a8, a12
400823ce:	f8e7c1        	l32r	a12, 4008076c <_iram_text_start+0x21c>
400823d1:	2088c0        	or	a8, a8, a12
400823d4:	0020c0        	memw
400823d7:	1a89      	s32i.n	a8, a10, 4
400823d9:	4a0c      	movi.n	a10, 4
		if (!wait_cmd) {
400823db:	3b8c      	beqz.n	a11, 400823e2 <i2c_esp32_transfer+0x1a6>
400823dd:	000786        	j	400823ff <i2c_esp32_transfer+0x1c3>
			*cmd++ = (struct i2c_esp32_cmd) {
400823e0:	0bad      	mov.n	a10, a11
			*cmd++ = (struct i2c_esp32_cmd) {
400823e2:	0b0c      	movi.n	a11, 0
400823e4:	0020c0        	memw
400823e7:	0ab9      	s32i.n	a11, a10, 0
400823e9:	0020c0        	memw
400823ec:	0a88      	l32i.n	a8, a10, 0
400823ee:	f887c1        	l32r	a12, 4008060c <_iram_text_start+0xbc>
400823f1:	1088c0        	and	a8, a8, a12
400823f4:	f887c1        	l32r	a12, 40080610 <_iram_text_start+0xc0>
400823f7:	2088c0        	or	a8, a8, a12
400823fa:	0020c0        	memw
400823fd:	0a89      	s32i.n	a8, a10, 0
	ret = i2c_esp32_transmit(dev);
400823ff:	06ad      	mov.n	a10, a6
40082401:	61b9      	s32i.n	a11, a1, 24
40082403:	ffcc65        	call8	400820c8 <i2c_esp32_transmit>
40082406:	0a8d      	mov.n	a8, a10
	if (!ret) {
40082408:	61b8      	l32i.n	a11, a1, 24
4008240a:	006a56        	bnez	a10, 40082414 <i2c_esp32_transfer+0x1d8>
		return i2c_esp32_wait(dev, wait_cmd);
4008240d:	16a8      	l32i.n	a10, a6, 4
4008240f:	ffdca5        	call8	400821d8 <i2c_esp32_wait$isra$1>
40082412:	0a8d      	mov.n	a8, a10
		if (ret < 0) {
40082414:	049896        	bltz	a8, 40082461 <i2c_esp32_transfer+0x225>
		for (i = 0U; i < to_read; i++) {
40082417:	0a0c      	movi.n	a10, 0
			uint32_t v = sys_read32(I2C_DATA_APB_REG(config->index));
40082419:	f8b5b1        	l32r	a11, 400806f0 <_iram_text_start+0x1a0>
4008241c:	000786        	j	4008243e <i2c_esp32_transfer+0x202>
4008241f:	24c200        	extui	a12, a0, 2, 3
40082422:	caa200        	float.s	f10, a2, 0
		for (i = 0U; i < to_read; i++) {
40082425:	8ce001        	l32r	a0, 400657a8 <esp32_rom_gpio_matrix_out+0x5b89c>
			uint32_t v = sys_read32(I2C_DATA_APB_REG(config->index));
40082428:	88ca11        	l32r	a1, 40064750 <esp32_rom_gpio_matrix_out+0x5a844>
4008242b:	118820        	slli	a8, a8, 14
4008242e:	88ba      	add.n	a8, a8, a11
	return *(volatile uint32_t *)addr;
40082430:	0020c0        	memw
40082433:	08c8      	l32i.n	a12, a8, 0
			*msg.buf++ = v & I2C_FIFO_RDATA;
40082435:	0188      	l32i.n	a8, a1, 0
40082437:	d81b      	addi.n	a13, a8, 1
40082439:	01d9      	s32i.n	a13, a1, 0
4008243b:	0048c2        	s8i	a12, a8, 0
		for (i = 0U; i < to_read; i++) {
4008243e:	de9a27        	bne	a10, a2, 40082420 <i2c_esp32_transfer+0x1e4>
		msg.len -= to_read;
40082441:	1188      	l32i.n	a8, a1, 4
40082443:	c0a8a0        	sub	a10, a8, a10
40082446:	11a9      	s32i.n	a10, a1, 4
		i2c_esp32_reset_fifo(config);
40082448:	04a8      	l32i.n	a10, a4, 0
4008244a:	ff9225        	call8	40081d6c <i2c_esp32_reset_fifo$isra$0>
	for (; msg.len; cmd = (void *)I2C_COMD0_REG(config->index)) {
4008244d:	0488      	l32i.n	a8, a4, 0
4008244f:	11a8e0        	slli	a10, a8, 2
40082452:	aa8a      	add.n	a10, a10, a8
40082454:	f8c581        	l32r	a8, 40080768 <_iram_text_start+0x218>
40082457:	11aa20        	slli	a10, a10, 14
4008245a:	aa8a      	add.n	a10, a10, a8
4008245c:	1188      	l32i.n	a8, a1, 4
4008245e:	f28856        	bnez	a8, 4008238a <i2c_esp32_transfer+0x14e>
		if (ret < 0) {
40082461:	33cb      	addi.n	a3, a3, 12
40082463:	88cc      	bnez.n	a8, 4008246f <i2c_esp32_transfer+0x233>
	for (i = 0U; i < num_msgs; i++) {
40082465:	4128      	l32i.n	a2, a1, 16
40082467:	021237        	beq	a2, a3, 4008246d <i2c_esp32_transfer+0x231>
4008246a:	ff8586        	j	40082284 <i2c_esp32_transfer+0x48>
4008246d:	080c      	movi.n	a8, 0
	z_impl_k_sem_give(sem);
4008246f:	07ad      	mov.n	a10, a7
40082471:	6189      	s32i.n	a8, a1, 24
40082473:	00a3e5        	call8	40082eb0 <z_impl_k_sem_give>
}
40082476:	6188      	l32i.n	a8, a1, 24
40082478:	082d      	mov.n	a2, a8
4008247a:	f01d      	retw.n

4008247c <uart_esp32_configure>:
	return 0;
}

static int uart_esp32_configure(const struct device *dev,
				const struct uart_config *cfg)
{
4008247c:	006136        	entry	a1, 48
	uint32_t conf0 = UART_TICK_REF_ALWAYS_ON;
	uint32_t conf1 = (UART_RX_FIFO_THRESH << UART_RXFIFO_FULL_THRHD_S)
		      | (UART_TX_FIFO_THRESH << UART_TXFIFO_EMPTY_THRHD_S);

	uart_esp32_configure_pins(dev);
4008247f:	1248      	l32i.n	a4, a2, 4
	esp32_rom_gpio_matrix_out(cfg->pins.tx,
40082481:	0d0c      	movi.n	a13, 0
40082483:	34b8      	l32i.n	a11, a4, 12
40082485:	0724a2        	l32i	a10, a4, 28
40082488:	0dcd      	mov.n	a12, a13
4008248a:	f89d81        	l32r	a8, 40080700 <_iram_text_start+0x1b0>
4008248d:	0008e0        	callx8	a8
	esp32_rom_gpio_matrix_in(cfg->pins.rx,
40082490:	44b8      	l32i.n	a11, a4, 16
40082492:	84a8      	l32i.n	a10, a4, 32
40082494:	0c0c      	movi.n	a12, 0
40082496:	f89b81        	l32r	a8, 40080704 <_iram_text_start+0x1b4>
40082499:	0008e0        	callx8	a8
	if (cfg->pins.cts) {
4008249c:	a4a8      	l32i.n	a10, a4, 40
4008249e:	aa8c      	beqz.n	a10, 400824ac <uart_esp32_configure+0x30>
		esp32_rom_gpio_matrix_out(cfg->pins.cts,
400824a0:	0d0c      	movi.n	a13, 0
400824a2:	64b8      	l32i.n	a11, a4, 24
400824a4:	0dcd      	mov.n	a12, a13
400824a6:	f89681        	l32r	a8, 40080700 <_iram_text_start+0x1b0>
400824a9:	0008e0        	callx8	a8
	if (cfg->pins.rts) {
400824ac:	94a8      	l32i.n	a10, a4, 36
400824ae:	8a8c      	beqz.n	a10, 400824ba <uart_esp32_configure+0x3e>
		esp32_rom_gpio_matrix_in(cfg->pins.rts,
400824b0:	54b8      	l32i.n	a11, a4, 20
400824b2:	0c0c      	movi.n	a12, 0
400824b4:	f89481        	l32r	a8, 40080704 <_iram_text_start+0x1b4>
400824b7:	0008e0        	callx8	a8
	clock_control_on(DEV_DATA(dev)->clock_dev, DEV_CFG(dev)->peripheral_id);
400824ba:	3248      	l32i.n	a4, a2, 12
400824bc:	1258      	l32i.n	a5, a2, 4
400824be:	24a8      	l32i.n	a10, a4, 8
	return api->on(dev, sys);
400824c0:	b5b8      	l32i.n	a11, a5, 44
400824c2:	2a48      	l32i.n	a4, a10, 8
400824c4:	0448      	l32i.n	a4, a4, 0
400824c6:	0004e0        	callx8	a4

	/*
	 * Reset RX Buffer by reading all received bytes
	 * Hardware Reset functionality can't be used with UART 1/2
	 */
	while (UART_RXFIFO_COUNT(DEV_BASE(dev)->status) != 0) {
400824c9:	12b8      	l32i.n	a11, a2, 4
400824cb:	0b58      	l32i.n	a5, a11, 0
400824cd:	000106        	j	400824d5 <uart_esp32_configure+0x59>
		(void) DEV_BASE(dev)->fifo;
400824d0:	0020c0        	memw
400824d3:	0548      	l32i.n	a4, a5, 0
	while (UART_RXFIFO_COUNT(DEV_BASE(dev)->status) != 0) {
400824d5:	0020c0        	memw
400824d8:	7548      	l32i.n	a4, a5, 28
400824da:	744040        	extui	a4, a4, 0, 8
400824dd:	fef456        	bnez	a4, 400824d0 <uart_esp32_configure+0x54>
	}

	switch (cfg->parity) {
400824e0:	040342        	l8ui	a4, a3, 4
400824e3:	0d1426        	beqi	a4, 1, 400824f4 <uart_esp32_configure+0x78>
400824e6:	249c      	beqz.n	a4, 400824fc <uart_esp32_configure+0x80>
		break;
	case UART_CFG_PARITY_ODD:
		conf0 |= UART_PARITY;
		break;
	default:
		return -ENOTSUP;
400824e8:	ddaf92        	movi	a9, -35
	switch (cfg->parity) {
400824eb:	022426        	beqi	a4, 2, 400824f1 <uart_esp32_configure+0x75>
400824ee:	002606        	j	4008258a <uart_esp32_configure+0x10e>
400824f1:	0001c6        	j	400824fc <uart_esp32_configure+0x80>
		conf0 |= UART_PARITY;
400824f4:	f8a051        	l32r	a5, 40080774 <_iram_text_start+0x224>
400824f7:	000106        	j	400824ff <uart_esp32_configure+0x83>
400824fa:	510000        	lsi	f0, a0, 0x144
		conf0 &= ~(UART_PARITY);
400824fd:	f848      	l32i.n	a4, a8, 60
	}

	switch (cfg->stop_bits) {
400824ff:	050382        	l8ui	a8, a3, 5
	case UART_CFG_STOP_BITS_1_5:
	case UART_CFG_STOP_BITS_2:
		conf0 |= cfg->stop_bits << UART_STOP_BIT_NUM_S;
		break;
	default:
		return -ENOTSUP;
40082502:	ddaf92        	movi	a9, -35
	switch (cfg->stop_bits) {
40082505:	480b      	addi.n	a4, a8, -1
40082507:	7f34f6        	bgeui	a4, 3, 4008258a <uart_esp32_configure+0x10e>
		conf0 |= cfg->stop_bits << UART_STOP_BIT_NUM_S;
4008250a:	11a8c0        	slli	a10, a8, 4
	}

	if (cfg->data_bits <= UART_CFG_DATA_BITS_8) {
4008250d:	060382        	l8ui	a8, a3, 6
40082510:	7648f6        	bgeui	a8, 4, 4008258a <uart_esp32_configure+0x10e>
		conf0 |= cfg->data_bits << UART_BIT_NUM_S;
40082513:	1148e0        	slli	a4, a8, 2
40082516:	2044a0        	or	a4, a4, a10
40082519:	204450        	or	a4, a4, a5
	} else {
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
4008251c:	070352        	l8ui	a5, a3, 7
4008251f:	d58c      	beqz.n	a5, 40082530 <uart_esp32_configure+0xb4>
40082521:	651566        	bnei	a5, 1, 4008258a <uart_esp32_configure+0x10e>
	case UART_CFG_FLOW_CTRL_NONE:
		conf0 &= ~(UART_TX_FLOW_EN);
		conf1 &= ~(UART_RX_FLOW_EN);
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		conf0 |= UART_TX_FLOW_EN;
40082524:	f84b51        	l32r	a5, 40080650 <_iram_text_start+0x100>
40082527:	204450        	or	a4, a4, a5
		conf1 |= UART_RX_FLOW_EN;
4008252a:	f89351        	l32r	a5, 40080778 <_iram_text_start+0x228>
		break;
4008252d:	000086        	j	40082533 <uart_esp32_configure+0xb7>
		conf1 &= ~(UART_RX_FLOW_EN);
40082530:	01a152        	movi	a5, 0x101
	uint32_t sys_clk_freq = 0;
40082533:	080c      	movi.n	a8, 0
40082535:	0189      	s32i.n	a8, a1, 0
	if (clock_control_get_rate(DEV_DATA(dev)->clock_dev,
40082537:	3288      	l32i.n	a8, a2, 12
	return api->get_rate(dev, sys, rate);
40082539:	bbb8      	l32i.n	a11, a11, 44
4008253b:	28a8      	l32i.n	a10, a8, 8
4008253d:	01cd      	mov.n	a12, a1
4008253f:	2a88      	l32i.n	a8, a10, 8
	default:
		return -ENOTSUP;
	}

	if (uart_esp32_set_baudrate(dev, cfg->baudrate)) {
40082541:	002362        	l32i	a6, a3, 0
40082544:	032882        	l32i	a8, a8, 12
40082547:	0008e0        	callx8	a8
4008254a:	12b8      	l32i.n	a11, a2, 4
	if (clock_control_get_rate(DEV_DATA(dev)->clock_dev,
4008254c:	6aec      	bnez.n	a10, 40082576 <uart_esp32_configure+0xfa>
	uint32_t clk_div = (((sys_clk_freq) << 4) / baudrate);
4008254e:	0188      	l32i.n	a8, a1, 0
	while (UART_TXFIFO_COUNT(DEV_BASE(dev)->status)) {
40082550:	0ba8      	l32i.n	a10, a11, 0
	uint32_t clk_div = (((sys_clk_freq) << 4) / baudrate);
40082552:	1188c0        	slli	a8, a8, 4
40082555:	c28860        	quou	a8, a8, a6
	while (UART_TXFIFO_COUNT(DEV_BASE(dev)->status)) {
40082558:	0020c0        	memw
4008255b:	7a98      	l32i.n	a9, a10, 28
4008255d:	759090        	extui	a9, a9, 16, 8
40082560:	ff4956        	bnez	a9, 40082558 <uart_esp32_configure+0xdc>
	if (clk_div < 16) {
40082563:	f90c      	movi.n	a9, 15
40082565:	0db987        	bgeu	a9, a8, 40082576 <uart_esp32_configure+0xfa>
	DEV_BASE(dev)->clk_div = ((clk_div >> 4) | (clk_div & 0xf));
40082568:	419480        	srli	a9, a8, 4
4008256b:	348080        	extui	a8, a8, 0, 4
4008256e:	208980        	or	a8, a9, a8
40082571:	0020c0        	memw
40082574:	5a89      	s32i.n	a8, a10, 20
		DEV_DATA(dev)->uart_config.baudrate = cfg->baudrate;
40082576:	0338      	l32i.n	a3, a3, 0
40082578:	3228      	l32i.n	a2, a2, 12
	}

	DEV_BASE(dev)->conf0 = conf0;
	DEV_BASE(dev)->conf1 = conf1;

	return 0;
4008257a:	090c      	movi.n	a9, 0
		DEV_DATA(dev)->uart_config.baudrate = cfg->baudrate;
4008257c:	0239      	s32i.n	a3, a2, 0
	DEV_BASE(dev)->conf0 = conf0;
4008257e:	0b28      	l32i.n	a2, a11, 0
40082580:	0020c0        	memw
40082583:	8249      	s32i.n	a4, a2, 32
	DEV_BASE(dev)->conf1 = conf1;
40082585:	0020c0        	memw
40082588:	9259      	s32i.n	a5, a2, 36
}
4008258a:	092d      	mov.n	a2, a9
4008258c:	f01d      	retw.n
	...

40082590 <uart_esp32_init>:

static int uart_esp32_init(const struct device *dev)
{
40082590:	004136        	entry	a1, 32
	struct uart_esp32_data *data = DEV_DATA(dev);

	data->clock_dev = device_get_binding(DEV_CFG(dev)->clock_name);
40082593:	012282        	l32i	a8, a2, 4
	struct uart_esp32_data *data = DEV_DATA(dev);
40082596:	032232        	l32i	a3, a2, 12
	data->clock_dev = device_get_binding(DEV_CFG(dev)->clock_name);
40082599:	0228a2        	l32i	a10, a8, 8
4008259c:	000965        	call8	40082634 <z_impl_device_get_binding>

	__ASSERT_NO_MSG(data->clock_dev);

	uart_esp32_configure(dev, &DEV_DATA(dev)->uart_config);
4008259f:	32b8      	l32i.n	a11, a2, 12
	data->clock_dev = device_get_binding(DEV_CFG(dev)->clock_name);
400825a1:	23a9      	s32i.n	a10, a3, 8
	uart_esp32_configure(dev, &DEV_DATA(dev)->uart_config);
400825a3:	02ad      	mov.n	a10, a2
400825a5:	ffed65        	call8	4008247c <uart_esp32_configure>

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	DEV_CFG(dev)->dev_conf.irq_config_func(dev);
#endif
	return 0;
}
400825a8:	020c      	movi.n	a2, 0
400825aa:	f01d      	retw.n

400825ac <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
400825ac:	004136        	entry	a1, 32
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
400825af:	f87381        	l32r	a8, 4008077c <_iram_text_start+0x22c>
400825b2:	1132e0        	slli	a3, a2, 2
400825b5:	221b      	addi.n	a2, a2, 1
400825b7:	1122e0        	slli	a2, a2, 2
400825ba:	383a      	add.n	a3, a8, a3
400825bc:	282a      	add.n	a2, a8, a2
400825be:	0338      	l32i.n	a3, a3, 0
400825c0:	0248      	l32i.n	a4, a2, 0

		if (dev != NULL) {
			z_object_init(dev);
		}

		if ((entry->init(dev) == 0) && (dev != NULL)) {
400825c2:	150c      	movi.n	a5, 1
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
400825c4:	000d86        	j	400825fe <z_sys_init_run_level+0x52>
400825c7:	132800        	lsi	f0, a8, 76
		if ((entry->init(dev) == 0) && (dev != NULL)) {
400825ca:	0388      	l32i.n	a8, a3, 0
400825cc:	02ad      	mov.n	a10, a2
400825ce:	0008e0        	callx8	a8
400825d1:	7aec      	bnez.n	a10, 400825fc <z_sys_init_run_level+0x50>
400825d3:	52ac      	beqz.n	a2, 400825fc <z_sys_init_run_level+0x50>
			/* Initialization was successful.
			 * Set the init status bit so device is declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
400825d5:	f86a81        	l32r	a8, 40080780 <_iram_text_start+0x230>
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
400825d8:	f86b91        	l32r	a9, 40080784 <_iram_text_start+0x234>
400825db:	c02280        	sub	a2, a2, a8
400825de:	212420        	srai	a2, a2, 4
400825e1:	418520        	srli	a8, a2, 5
400825e4:	1188e0        	slli	a8, a8, 2
400825e7:	889a      	add.n	a8, a8, a9
	uint32_t temp = *(volatile uint32_t *)addr;
400825e9:	0020c0        	memw
400825ec:	0898      	l32i.n	a9, a8, 0
	*(volatile uint32_t *)addr = temp | (1 << bit);
400825ee:	401200        	ssl	a2
400825f1:	a12500        	sll	a2, a5
400825f4:	202290        	or	a2, a2, a9
400825f7:	0020c0        	memw
400825fa:	0829      	s32i.n	a2, a8, 0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
400825fc:	338b      	addi.n	a3, a3, 8
400825fe:	c63347        	bltu	a3, a4, 400825c8 <z_sys_init_run_level+0x1c>
		}
	}
}
40082601:	f01d      	retw.n
	...

40082604 <z_device_ready>:
	*devices = __device_start;
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
40082604:	004136        	entry	a1, 32
	return !!(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
40082607:	f85e81        	l32r	a8, 40080780 <_iram_text_start+0x230>
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
4008260a:	f85e91        	l32r	a9, 40080784 <_iram_text_start+0x234>
4008260d:	c08280        	sub	a8, a2, a8
40082610:	218480        	srai	a8, a8, 4
40082613:	412580        	srli	a2, a8, 5
40082616:	1122e0        	slli	a2, a2, 2
40082619:	229a      	add.n	a2, a2, a9
	uint32_t temp = *(volatile uint32_t *)addr;
4008261b:	0020c0        	memw
4008261e:	02a8      	l32i.n	a10, a2, 0
	return temp & (1 << bit);
40082620:	190c      	movi.n	a9, 1
40082622:	401800        	ssl	a8
40082625:	a12900        	sll	a2, a9
40082628:	1022a0        	and	a2, a2, a10
	return !!(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
4008262b:	080c      	movi.n	a8, 0
4008262d:	938920        	movnez	a8, a9, a2
40082630:	082d      	mov.n	a2, a8
}
40082632:	f01d      	retw.n

40082634 <z_impl_device_get_binding>:
{
40082634:	004136        	entry	a1, 32
40082637:	024d      	mov.n	a4, a2
	for (dev = __device_start; dev != __device_end; dev++) {
40082639:	f85121        	l32r	a2, 40080780 <_iram_text_start+0x230>
4008263c:	f85231        	l32r	a3, 40080784 <_iram_text_start+0x234>
4008263f:	025d      	mov.n	a5, a2
40082641:	000486        	j	40082657 <z_impl_device_get_binding+0x23>
40082644:	a22000        	muluh	a2, a0, a0
		if (z_device_ready(dev) && (dev->name == name)) {
40082647:	fba520        	f64subc	a2, a5, 1, 0
4008264a:	ff          	.byte 0xff
4008264b:	005a16        	beqz	a10, 40082654 <z_impl_device_get_binding+0x20>
4008264e:	002282        	l32i	a8, a2, 0
40082651:	2f1847        	beq	a8, a4, 40082684 <z_impl_device_get_binding+0x50>
	for (dev = __device_start; dev != __device_end; dev++) {
40082654:	10c222        	addi	a2, a2, 16
40082657:	ea9237        	bne	a2, a3, 40082645 <z_impl_device_get_binding+0x11>
	for (dev = __device_start; dev != __device_end; dev++) {
4008265a:	052d      	mov.n	a2, a5
4008265c:	0007c6        	j	4008267f <z_impl_device_get_binding+0x4b>
4008265f:	000000        	ill
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
40082662:	02ad      	mov.n	a10, a2
40082664:	fff9e5        	call8	40082604 <z_device_ready>
40082667:	7acc      	bnez.n	a10, 40082672 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
40082669:	10c222        	addi	a2, a2, 16
4008266c:	0003c6        	j	4008267f <z_impl_device_get_binding+0x4b>
4008266f:	000000        	ill
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
40082672:	02b8      	l32i.n	a11, a2, 0
40082674:	04ad      	mov.n	a10, a4
40082676:	00d8e5        	call8	40083404 <strcmp>
40082679:	feca56        	bnez	a10, 40082669 <z_impl_device_get_binding+0x35>
4008267c:	000106        	j	40082684 <z_impl_device_get_binding+0x50>
	for (dev = __device_start; dev != __device_end; dev++) {
4008267f:	df9237        	bne	a2, a3, 40082662 <z_impl_device_get_binding+0x2e>
	return NULL;
40082682:	020c      	movi.n	a2, 0
}
40082684:	f01d      	retw.n
	...

40082688 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
40082688:	004136        	entry	a1, 32
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
4008268b:	02ad      	mov.n	a10, a2
4008268d:	00fd25        	call8	40083660 <arch_system_halt>

40082690 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
40082690:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082693:	006350        	rsil	a5, 3
	return z_impl_k_current_get();
40082696:	0080e5        	call8	40082ea4 <z_impl_k_current_get>
40082699:	204aa0        	or	a4, a10, a10
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
4008269c:	03bd      	mov.n	a11, a3
4008269e:	02ad      	mov.n	a10, a2
400826a0:	fffe65        	call8	40082688 <k_sys_fatal_error_handler>
	XTOS_RESTORE_INTLEVEL(key);
400826a3:	13e650        	wsr.ps	a5
400826a6:	002010        	rsync
	z_impl_k_thread_abort(thread);
400826a9:	04ad      	mov.n	a10, a4
400826ab:	0094e5        	call8	40082ff8 <z_impl_k_thread_abort>
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
400826ae:	f01d      	retw.n

400826b0 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
400826b0:	004136        	entry	a1, 32
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
400826b3:	f83581        	l32r	a8, 40080788 <_iram_text_start+0x238>
400826b6:	190c      	movi.n	a9, 1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
400826b8:	02a0a2        	movi	a10, 2
	z_sys_post_kernel = true;
400826bb:	004892        	s8i	a9, a8, 0
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
400826be:	ffeee5        	call8	400825ac <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
400826c1:	f832c1        	l32r	a12, 4008078c <_iram_text_start+0x23c>
400826c4:	f833b1        	l32r	a11, 40080790 <_iram_text_start+0x240>
400826c7:	f833a1        	l32r	a10, 40080794 <_iram_text_start+0x244>
400826ca:	fe7ba5        	call8	40080e84 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
400826cd:	3a0c      	movi.n	a10, 3
400826cf:	ffede5        	call8	400825ac <z_sys_init_run_level>

	z_init_static_threads();
400826d2:	008ae5        	call8	40082f80 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
400826d5:	fe1d25        	call8	400808a8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
400826d8:	f83091        	l32r	a9, 40080798 <_iram_text_start+0x248>
400826db:	ea7c      	movi.n	a10, -2
400826dd:	0c0982        	l8ui	a8, a9, 12
400826e0:	1088a0        	and	a8, a8, a10
400826e3:	0c4982        	s8i	a8, a9, 12

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
400826e6:	f01d      	retw.n

400826e8 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
400826e8:	020136        	entry	a1, 0x100

static ALWAYS_INLINE void arch_kernel_init(void)
{
	_cpu_t *cpu0 = &_kernel.cpus[0];

	cpu0->nested = 0;
400826eb:	f7a121        	l32r	a2, 40080570 <_iram_text_start+0x20>
400826ee:	030c      	movi.n	a3, 0
400826f0:	0239      	s32i.n	a3, a2, 0
	 * access.  That saves 4 bytes of immediate value to store the
	 * address when compared to the legacy scheme.  But in SMP
	 * this record is a per-CPU thing and having it stored in a SR
	 * already is a big win.
	 */
	WSR(CONFIG_XTENSA_KERNEL_CPU_PTR_SR, cpu0);
400826f2:	13f420        	wsr.misc0	a2
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
400826f5:	01a142        	movi	a4, 0x101
400826f8:	0e5142        	s16i	a4, a1, 28
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
400826fb:	10c142        	addi	a4, a1, 16
400826fe:	2249      	s32i.n	a4, a2, 8

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
40082700:	03ad      	mov.n	a10, a3
40082702:	ffeaa5        	call8	400825ac <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
40082705:	1a0c      	movi.n	a10, 1
40082707:	ffea65        	call8	400825ac <z_sys_init_run_level>
	z_sched_init();
4008270a:	006ba5        	call8	40082dc4 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
4008270d:	f82241        	l32r	a4, 40080798 <_iram_text_start+0x248>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
40082710:	f82551        	l32r	a5, 400807a4 <_iram_text_start+0x254>
	_kernel.ready_q.cache = &z_main_thread;
40082713:	e249      	s32i.n	a4, a2, 56
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
40082715:	3159      	s32i.n	a5, a1, 12
40082717:	f821d1        	l32r	a13, 4008079c <_iram_text_start+0x24c>
4008271a:	150c      	movi.n	a5, 1
4008271c:	f7c6c1        	l32r	a12, 40080634 <_iram_text_start+0xe4>
4008271f:	f820b1        	l32r	a11, 400807a0 <_iram_text_start+0x250>
40082722:	03fd      	mov.n	a15, a3
40082724:	03ed      	mov.n	a14, a3
40082726:	1139      	s32i.n	a3, a1, 4
40082728:	0139      	s32i.n	a3, a1, 0
4008272a:	2159      	s32i.n	a5, a1, 8
4008272c:	04ad      	mov.n	a10, a4
4008272e:	007fa5        	call8	40082f28 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
40082731:	0d0462        	l8ui	a6, a4, 13
40082734:	b77c      	movi.n	a7, -5
40082736:	106670        	and	a6, a6, a7
40082739:	0d4462        	s8i	a6, a4, 13
	z_ready_thread(&z_main_thread);
4008273c:	04ad      	mov.n	a10, a4
4008273e:	002ce5        	call8	40082a0c <z_ready_thread>
	z_setup_new_thread(thread, stack,
40082741:	f81b41        	l32r	a4, 400807b0 <_iram_text_start+0x260>
40082744:	f90c      	movi.n	a9, 15
40082746:	f818d1        	l32r	a13, 400807a8 <_iram_text_start+0x258>
40082749:	f818b1        	l32r	a11, 400807ac <_iram_text_start+0x25c>
4008274c:	3139      	s32i.n	a3, a1, 12
4008274e:	1199      	s32i.n	a9, a1, 4
40082750:	0139      	s32i.n	a3, a1, 0
40082752:	03fd      	mov.n	a15, a3
40082754:	03ed      	mov.n	a14, a3
40082756:	2159      	s32i.n	a5, a1, 8
40082758:	00a4c2        	movi	a12, 0x400
4008275b:	04ad      	mov.n	a10, a4
4008275d:	346192        	s32i	a9, a1, 208
40082760:	007c65        	call8	40082f28 <z_setup_new_thread>
40082763:	0d0462        	l8ui	a6, a4, 13
		_kernel.cpus[i].id = i;
40082766:	144232        	s8i	a3, a2, 20
40082769:	106670        	and	a6, a6, a7
4008276c:	0d4462        	s8i	a6, a4, 13
		_kernel.cpus[i].irq_stack =
4008276f:	f81161        	l32r	a6, 400807b4 <_iram_text_start+0x264>
	z_setup_new_thread(thread, stack,
40082772:	342192        	l32i	a9, a1, 208
		_kernel.cpus[i].irq_stack =
40082775:	1269      	s32i.n	a6, a2, 4
	z_setup_new_thread(thread, stack,
40082777:	f81161        	l32r	a6, 400807bc <_iram_text_start+0x26c>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
4008277a:	3249      	s32i.n	a4, a2, 12
	z_setup_new_thread(thread, stack,
4008277c:	f80bd1        	l32r	a13, 400807a8 <_iram_text_start+0x258>
4008277f:	f80eb1        	l32r	a11, 400807b8 <_iram_text_start+0x268>
40082782:	3139      	s32i.n	a3, a1, 12
40082784:	0139      	s32i.n	a3, a1, 0
40082786:	03fd      	mov.n	a15, a3
40082788:	03ed      	mov.n	a14, a3
4008278a:	2159      	s32i.n	a5, a1, 8
4008278c:	1199      	s32i.n	a9, a1, 4
4008278e:	00a4c2        	movi	a12, 0x400
40082791:	06ad      	mov.n	a10, a6
40082793:	007965        	call8	40082f28 <z_setup_new_thread>
40082796:	cd0432        	l8ui	a3, a4, 205
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
40082799:	9269      	s32i.n	a6, a2, 36
4008279b:	103370        	and	a3, a3, a7
4008279e:	cd4432        	s8i	a3, a4, 205
		_kernel.cpus[i].irq_stack =
400827a1:	f80731        	l32r	a3, 400807c0 <_iram_text_start+0x270>
		_kernel.cpus[i].id = i;
400827a4:	2c4252        	s8i	a5, a2, 44
		_kernel.cpus[i].irq_stack =
400827a7:	7239      	s32i.n	a3, a2, 28
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
400827a9:	f80631        	l32r	a3, 400807c4 <_iram_text_start+0x274>
400827ac:	c239      	s32i.n	a3, a2, 48
	list->tail = (sys_dnode_t *)list;
400827ae:	d239      	s32i.n	a3, a2, 52
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400827b0:	006350        	rsil	a5, 3
	old_thread = _current;
400827b3:	2248      	l32i.n	a4, a2, 8
	return _kernel.ready_q.cache;
400827b5:	e238      	l32i.n	a3, a2, 56
	if (new_thread != old_thread) {
400827b7:	121437        	beq	a4, a3, 400827cd <z_cstart+0xe5>
		z_reset_time_slice();
400827ba:	0001a5        	call8	400827d4 <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
400827bd:	567c      	movi.n	a6, -11

void xtensa_switch(void *switch_to, void **switched_from);

static inline void arch_switch(void *switch_to, void **switched_from)
{
	return xtensa_switch(switch_to, switched_from);
400827bf:	1423a2        	l32i	a10, a3, 80
400827c2:	136462        	s32i	a6, a4, 76
		_current_cpu->current = new_thread;
400827c5:	2239      	s32i.n	a3, a2, 8
400827c7:	50c4b2        	addi	a11, a4, 80
400827ca:	fef0e5        	call8	400816d8 <xtensa_switch>
	XTOS_RESTORE_INTLEVEL(key);
400827cd:	13e650        	wsr.ps	a5
400827d0:	002010        	rsync
	...

400827d4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
400827d4:	004136        	entry	a1, 32
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
400827d7:	f7fc21        	l32r	a2, 400807c8 <_iram_text_start+0x278>
400827da:	002282        	l32i	a8, a2, 0
400827dd:	013816        	beqz	a8, 400827f4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
400827e0:	fede65        	call8	400815c8 <z_clock_elapsed>
400827e3:	002282        	l32i	a8, a2, 0
400827e6:	f76221        	l32r	a2, 40080570 <_iram_text_start+0x20>
400827e9:	a8aa      	add.n	a10, a8, a10
400827eb:	42a9      	s32i.n	a10, a2, 16
		z_set_timeout_expiry(slice_time, false);
400827ed:	0b0c      	movi.n	a11, 0
400827ef:	08ad      	mov.n	a10, a8
400827f1:	00a3a5        	call8	4008322c <z_set_timeout_expiry>
	}
}
400827f4:	f01d      	retw.n
	...

400827f8 <z_swap_irqlock>:
{
400827f8:	004136        	entry	a1, 32
	old_thread = _current;
400827fb:	f75d31        	l32r	a3, 40080570 <_iram_text_start+0x20>
400827fe:	2358      	l32i.n	a5, a3, 8
40082800:	e348      	l32i.n	a4, a3, 56
	if (new_thread != old_thread) {
40082802:	121547        	beq	a5, a4, 40082818 <z_swap_irqlock+0x20>
		z_reset_time_slice();
40082805:	fffce5        	call8	400827d4 <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
40082808:	587c      	movi.n	a8, -11
4008280a:	1424a2        	l32i	a10, a4, 80
4008280d:	136582        	s32i	a8, a5, 76
		_current_cpu->current = new_thread;
40082810:	2349      	s32i.n	a4, a3, 8
40082812:	50c5b2        	addi	a11, a5, 80
40082815:	feec25        	call8	400816d8 <xtensa_switch>
40082818:	13e620        	wsr.ps	a2
4008281b:	002010        	rsync
	return _current->swap_retval;
4008281e:	2338      	l32i.n	a3, a3, 8
}
40082820:	132322        	l32i	a2, a3, 76
40082823:	f01d      	retw.n
40082825:	000000        	ill

40082828 <z_swap$isra$14>:
static inline int z_swap(struct k_spinlock *lock, k_spinlock_key_t key)
40082828:	004136        	entry	a1, 32
	old_thread = _current;
4008282b:	f75131        	l32r	a3, 40080570 <_iram_text_start+0x20>
4008282e:	2358      	l32i.n	a5, a3, 8
40082830:	e348      	l32i.n	a4, a3, 56
	if (new_thread != old_thread) {
40082832:	121547        	beq	a5, a4, 40082848 <z_swap$isra$14+0x20>
		z_reset_time_slice();
40082835:	fff9e5        	call8	400827d4 <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
40082838:	587c      	movi.n	a8, -11
4008283a:	1424a2        	l32i	a10, a4, 80
4008283d:	136582        	s32i	a8, a5, 76
		_current_cpu->current = new_thread;
40082840:	2349      	s32i.n	a4, a3, 8
40082842:	50c5b2        	addi	a11, a5, 80
40082845:	fee925        	call8	400816d8 <xtensa_switch>
40082848:	13e620        	wsr.ps	a2
4008284b:	002010        	rsync
	return _current->swap_retval;
4008284e:	2338      	l32i.n	a3, a3, 8
}
40082850:	132322        	l32i	a2, a3, 76
40082853:	f01d      	retw.n
40082855:	000000        	ill

40082858 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
40082858:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008285b:	006340        	rsil	a4, 3
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
4008285e:	f74481        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082861:	00a092        	movi	a9, 0
40082864:	046892        	s32i	a9, a8, 16
		} else {
			return t / (from_hz / to_hz);
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
40082867:	1182e0        	slli	a8, a2, 2
4008286a:	808820        	add	a8, a8, a2
		slice_time = k_ms_to_ticks_ceil32(slice);
4008286d:	f7d621        	l32r	a2, 400807c8 <_iram_text_start+0x278>
40082870:	1188f0        	slli	a8, a8, 1
40082873:	0289      	s32i.n	a8, a2, 0
		slice_max_prio = prio;
40082875:	f7d521        	l32r	a2, 400807cc <_iram_text_start+0x27c>
40082878:	0239      	s32i.n	a3, a2, 0
		z_reset_time_slice();
4008287a:	fff5a5        	call8	400827d4 <z_reset_time_slice>
	XTOS_RESTORE_INTLEVEL(key);
4008287d:	13e640        	wsr.ps	a4
40082880:	002010        	rsync
	}
}
40082883:	f01d      	retw.n
40082885:	000000        	ill

40082888 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
40082888:	004136        	entry	a1, 32
}

static ALWAYS_INLINE bool arch_irq_unlocked(unsigned int key)
{
	return (key & 0xf) == 0; /* INTLEVEL field */
4008288b:	348030        	extui	a8, a3, 0, 4
4008288e:	20a330        	or	a10, a3, a3
	return arch_irq_unlocked(key) && !arch_is_in_isr();
40082891:	017856        	bnez	a8, 400828ac <z_reschedule+0x24>

static ALWAYS_INLINE _cpu_t *arch_curr_cpu(void)
{
	_cpu_t *cpu;

	cpu = (_cpu_t *)RSR(CONFIG_XTENSA_KERNEL_CPU_PTR_SR);
40082894:	03f480        	rsr.misc0	a8
40082897:	002882        	l32i	a8, a8, 0
4008289a:	e8cc      	bnez.n	a8, 400828ac <z_reschedule+0x24>
4008289c:	f73581        	l32r	a8, 40080570 <_iram_text_start+0x20>
	if (resched(key.key) && need_swap()) {
4008289f:	e898      	l32i.n	a9, a8, 56
400828a1:	2888      	l32i.n	a8, a8, 8
400828a3:	051987        	beq	a9, a8, 400828ac <z_reschedule+0x24>
		z_swap(lock, key);
400828a6:	fff825        	call8	40082828 <z_swap$isra$14>
400828a9:	000146        	j	400828b2 <z_reschedule+0x2a>
	XTOS_RESTORE_INTLEVEL(key);
400828ac:	13e6a0        	wsr.ps	a10
400828af:	002010        	rsync
	} else {
		k_spin_unlock(lock, key);
	}
}
400828b2:	f01d      	retw.n

400828b4 <z_reschedule_irqlock>:

void z_reschedule_irqlock(uint32_t key)
{
400828b4:	004136        	entry	a1, 32
	return (key & 0xf) == 0; /* INTLEVEL field */
400828b7:	348020        	extui	a8, a2, 0, 4
400828ba:	20a220        	or	a10, a2, a2
	return arch_irq_unlocked(key) && !arch_is_in_isr();
400828bd:	00f856        	bnez	a8, 400828d0 <z_reschedule_irqlock+0x1c>
400828c0:	03f480        	rsr.misc0	a8
400828c3:	002882        	l32i	a8, a8, 0
400828c6:	006856        	bnez	a8, 400828d0 <z_reschedule_irqlock+0x1c>
	if (resched(key)) {
		z_swap_irqlock(key);
400828c9:	fff2e5        	call8	400827f8 <z_swap_irqlock>
400828cc:	000186        	j	400828d6 <z_reschedule_irqlock+0x22>
400828cf:	e6a000        	lsi	f0, a0, 0x398
	XTOS_RESTORE_INTLEVEL(key);
400828d2:	201013        	lsi	f1, a0, 128
400828d5:	f01d00        	subx8	a1, a13, a0

400828d8 <z_reschedule_unlocked>:
{
400828d8:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400828db:	0063a0        	rsil	a10, 3
	(void) z_reschedule_irqlock(arch_irq_lock());
400828de:	fffd65        	call8	400828b4 <z_reschedule_irqlock>
}
400828e1:	f01d      	retw.n
	...

400828e4 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
400828e4:	004136        	entry	a1, 32
400828e7:	0063a0        	rsil	a10, 3
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
400828ea:	f72181        	l32r	a8, 40080570 <_iram_text_start+0x20>
400828ed:	2898      	l32i.n	a9, a8, 8
400828ef:	0f0982        	l8ui	a8, a9, 15
400828f2:	880b      	addi.n	a8, a8, -1
400828f4:	0f4982        	s8i	a8, a9, 15
	XTOS_RESTORE_INTLEVEL(key);
400828f7:	13e6a0        	wsr.ps	a10
400828fa:	002010        	rsync
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
400828fd:	f01d      	retw.n
	...

40082900 <z_get_next_switch_handle>:
	_current_cpu->current = new_thread;
}

#ifdef CONFIG_USE_SWITCH
void *z_get_next_switch_handle(void *interrupted)
{
40082900:	004136        	entry	a1, 32
	_current->switch_handle = interrupted;
40082903:	f71b81        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082906:	28a8      	l32i.n	a10, a8, 8
	return _kernel.ready_q.cache;
40082908:	e898      	l32i.n	a9, a8, 56
4008290a:	146a22        	s32i	a2, a10, 80
#endif
		}
	}
#else
	struct k_thread *thread = z_get_next_ready_thread();
	if (_current != thread) {
4008290d:	011a97        	beq	a10, a9, 40082912 <z_get_next_switch_handle+0x12>
	_current_cpu->current = new_thread;
40082910:	2899      	s32i.n	a9, a8, 8
		set_current(thread);
	}
#endif

	wait_for_switch(_current);
	return _current->switch_handle;
40082912:	2888      	l32i.n	a8, a8, 8
}
40082914:	142822        	l32i	a2, a8, 80
40082917:	f01d      	retw.n
40082919:	000000        	ill

4008291c <update_cache>:
{
4008291c:	004136        	entry	a1, 32
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
4008291f:	f7aca1        	l32r	a10, 400807d0 <_iram_text_start+0x280>
40082922:	00d5e5        	call8	40083680 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
40082925:	f71231        	l32r	a3, 40080570 <_iram_text_start+0x20>
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
40082928:	204aa0        	or	a4, a10, a10
	if (_current->base.thread_state & _THREAD_ABORTING) {
4008292b:	022382        	l32i	a8, a3, 8
4008292e:	0d0892        	l8ui	a9, a8, 13
40082931:	086957        	bbci	a9, 5, 4008293d <update_cache+0x21>
		_current->base.thread_state |= _THREAD_DEAD;
40082934:	08a0a2        	movi	a10, 8
40082937:	2099a0        	or	a9, a9, a10
4008293a:	0d4892        	s8i	a9, a8, 13
	return thread ? thread : _current_cpu->idle_thread;
4008293d:	04cc      	bnez.n	a4, 40082941 <update_cache+0x25>
4008293f:	3348      	l32i.n	a4, a3, 12
	if (preempt_ok != 0) {
40082941:	42dc      	bnez.n	a2, 40082959 <update_cache+0x3d>
	if (z_is_thread_prevented_from_running(_current)) {
40082943:	0d0892        	l8ui	a9, a8, 13
40082946:	449090        	extui	a9, a9, 0, 5
40082949:	c9cc      	bnez.n	a9, 40082959 <update_cache+0x3d>
	if (is_preempt(_current) || is_metairq(thread)) {
4008294b:	071892        	l16ui	a9, a8, 14
4008294e:	7fa0a2        	movi	a10, 127
40082951:	04ba97        	bgeu	a10, a9, 40082959 <update_cache+0x3d>
		_kernel.ready_q.cache = _current;
40082954:	e389      	s32i.n	a8, a3, 56
40082956:	000286        	j	40082964 <update_cache+0x48>
		if (thread != _current) {
40082959:	051847        	beq	a8, a4, 40082962 <update_cache+0x46>
			z_reset_time_slice();
4008295c:	201110        	or	a1, a1, a1
4008295f:	ffe765        	call8	400827d4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
40082962:	e349      	s32i.n	a4, a3, 56
}
40082964:	f01d      	retw.n
	...

40082968 <k_sched_unlock>:
{
40082968:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008296b:	006320        	rsil	a2, 3
		++_current->base.sched_locked;
4008296e:	f70081        	l32r	a8, 40080570 <_iram_text_start+0x20>
		update_cache(0);
40082971:	00a0a2        	movi	a10, 0
		++_current->base.sched_locked;
40082974:	022892        	l32i	a9, a8, 8
40082977:	0f0982        	l8ui	a8, a9, 15
4008297a:	01c882        	addi	a8, a8, 1
4008297d:	0f4982        	s8i	a8, a9, 15
		update_cache(0);
40082980:	fff9a5        	call8	4008291c <update_cache>
	XTOS_RESTORE_INTLEVEL(key);
40082983:	13e620        	wsr.ps	a2
40082986:	002010        	rsync
	z_reschedule_unlocked();
40082989:	fff4e5        	call8	400828d8 <z_reschedule_unlocked>
}
4008298c:	f01d      	retw.n
	...

40082990 <ready_thread>:
{
40082990:	004136        	entry	a1, 32
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
40082993:	0d0282        	l8ui	a8, a2, 13
40082996:	448080        	extui	a8, a8, 0, 5
40082999:	06b856        	bnez	a8, 40082a08 <ready_thread+0x78>
	if (z_is_thread_ready(thread)) {
4008299c:	62b8      	l32i.n	a11, a2, 24
4008299e:	066b56        	bnez	a11, 40082a08 <ready_thread+0x78>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
400829a1:	f6f3a1        	l32r	a10, 40080570 <_iram_text_start+0x20>
{
	struct k_thread *t;

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
400829a4:	1f0c      	movi.n	a15, 1
400829a6:	fa88      	l32i.n	a8, a10, 60
400829a8:	0bcd      	mov.n	a12, a11
400829aa:	93cf80        	movnez	a12, a15, a8
400829ad:	74c0c0        	extui	a12, a12, 0, 8
400829b0:	102ad2        	l32i	a13, a10, 64
400829b3:	f787e1        	l32r	a14, 400807d0 <_iram_text_start+0x280>
400829b6:	fcac      	beqz.n	a12, 400829e9 <ready_thread+0x59>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
400829b8:	c098e0        	sub	a9, a8, a14
400829bb:	93bf90        	movnez	a11, a15, a9
400829be:	7490b0        	extui	a9, a11, 0, 8
400829c1:	49ac      	beqz.n	a9, 400829e9 <ready_thread+0x59>
	if (thread_1->base.prio < thread_2->base.prio) {
400829c3:	0e0292        	l8ui	a9, a2, 14
400829c6:	239900        	sext	a9, a9, 7
400829c9:	0e08b2        	l8ui	a11, a8, 14
400829cc:	23bb00        	sext	a11, a11, 7
400829cf:	0da9b7        	bge	a9, a11, 400829e0 <ready_thread+0x50>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	node->prev = successor->prev;
400829d2:	1898      	l32i.n	a9, a8, 4
	node->next = successor;
400829d4:	0289      	s32i.n	a8, a2, 0
	node->prev = successor->prev;
400829d6:	1299      	s32i.n	a9, a2, 4
	successor->prev->next = node;
400829d8:	0929      	s32i.n	a2, a9, 0
	successor->prev = node;
400829da:	1829      	s32i.n	a2, a8, 4
400829dc:	0005c6        	j	400829f7 <ready_thread+0x67>
400829df:	1d8700        	lsi	f0, a7, 116
	return (node == list->tail) ? NULL : node->next;
400829e2:	288205        	call0	400ab204 <_iram_text_end+0x27666>
400829e5:	f85600        	lsi	f0, a6, 0x3e0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
400829e8:	d2fd      	lsi	f15, a2, 8
	node->prev = list->tail;
400829ea:	820162        	l8ui	a6, a1, 130
	list->tail->next = node;
400829ed:	102a      	add.n	a1, a0, a2
	node->next = list;
400829ef:	0062e2        	s32i	a14, a2, 0
	list->tail->next = node;
400829f2:	0829      	s32i.n	a2, a8, 0
	list->tail = node;
400829f4:	106a22        	s32i	a2, a10, 64
	thread->base.thread_state |= states;
400829f7:	0d0282        	l8ui	a8, a2, 13
400829fa:	80af92        	movi	a9, -128
400829fd:	208890        	or	a8, a8, a9
40082a00:	0d4282        	s8i	a8, a2, 13
		update_cache(0);
40082a03:	0a0c      	movi.n	a10, 0
40082a05:	fff165        	call8	4008291c <update_cache>
}
40082a08:	f01d      	retw.n
	...

40082a0c <z_ready_thread>:
{
40082a0c:	004136        	entry	a1, 32
40082a0f:	02ad      	mov.n	a10, a2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082a11:	006330        	rsil	a3, 3
		ready_thread(thread);
40082a14:	fff7a5        	call8	40082990 <ready_thread>
	XTOS_RESTORE_INTLEVEL(key);
40082a17:	13e630        	wsr.ps	a3
40082a1a:	002010        	rsync
}
40082a1d:	f01d      	retw.n
	...

40082a20 <z_thread_timeout>:
{
40082a20:	004136        	entry	a1, 32
	struct k_thread *thread = CONTAINER_OF(timeout,
40082a23:	e8c232        	addi	a3, a2, -24
	if (thread->base.pended_on != NULL) {
40082a26:	022342        	l32i	a4, a3, 8
40082a29:	f5c222        	addi	a2, a2, -11
40082a2c:	01c416        	beqz	a4, 40082a4c <z_thread_timeout+0x2c>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082a2f:	006340        	rsil	a4, 3
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
40082a32:	03ad      	mov.n	a10, a3
40082a34:	00c365        	call8	4008366c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
40082a37:	000282        	l8ui	a8, a2, 0
40082a3a:	d97c      	movi.n	a9, -3
40082a3c:	108890        	and	a8, a8, a9
40082a3f:	004282        	s8i	a8, a2, 0
		thread->base.pended_on = NULL;
40082a42:	080c      	movi.n	a8, 0
40082a44:	2389      	s32i.n	a8, a3, 8
	XTOS_RESTORE_INTLEVEL(key);
40082a46:	13e640        	wsr.ps	a4
40082a49:	002010        	rsync
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
40082a4c:	000282        	l8ui	a8, a2, 0
40082a4f:	b96c      	movi.n	a9, -21
40082a51:	108890        	and	a8, a8, a9
40082a54:	004282        	s8i	a8, a2, 0
	z_ready_thread(thread);
40082a57:	03ad      	mov.n	a10, a3
40082a59:	fffb25        	call8	40082a0c <z_ready_thread>
}
40082a5c:	f01d      	retw.n
	...

40082a60 <z_sched_start>:
{
40082a60:	004136        	entry	a1, 32
40082a63:	02ad      	mov.n	a10, a2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082a65:	006320        	rsil	a2, 3
	if (z_has_thread_started(thread)) {
40082a68:	0d0a82        	l8ui	a8, a10, 13
40082a6b:	0be827        	bbsi	a8, 2, 40082a7a <z_sched_start+0x1a>
	XTOS_RESTORE_INTLEVEL(key);
40082a6e:	13e620        	wsr.ps	a2
40082a71:	002010        	rsync
		return;
40082a74:	0005c6        	j	40082a8f <z_sched_start+0x2f>
40082a77:	000000        	ill
	thread->base.thread_state &= ~_THREAD_PRESTART;
40082a7a:	fbaf92        	movi	a9, -5
40082a7d:	108890        	and	a8, a8, a9
40082a80:	0d4a82        	s8i	a8, a10, 13
	ready_thread(thread);
40082a83:	fff0e5        	call8	40082990 <ready_thread>
	z_reschedule(&sched_spinlock, key);
40082a86:	f753a1        	l32r	a10, 400807d4 <_iram_text_start+0x284>
40082a89:	20b220        	or	a11, a2, a2
40082a8c:	ffdfa5        	call8	40082888 <z_reschedule>
}
40082a8f:	000090        	retw
	...

40082a94 <z_move_thread_to_end_of_prio_q>:
{
40082a94:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082a97:	006330        	rsil	a3, 3
		if (z_is_thread_queued(thread)) {
40082a9a:	0d0282        	l8ui	a8, a2, 13
40082a9d:	056877        	bbci	a8, 7, 40082aa6 <z_move_thread_to_end_of_prio_q+0x12>
	sys_dlist_remove(&thread->base.qnode_dlist);
40082aa0:	20a220        	or	a10, a2, a2
40082aa3:	00bca5        	call8	4008366c <sys_dlist_remove>
	return list->head == list;
40082aa6:	f6b291        	l32r	a9, 40080570 <_iram_text_start+0x20>
40082aa9:	f749d1        	l32r	a13, 400807d0 <_iram_text_start+0x280>
40082aac:	0f2982        	l32i	a8, a9, 60
40082aaf:	1029c2        	l32i	a12, a9, 64
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082ab2:	027816        	beqz	a8, 40082add <z_move_thread_to_end_of_prio_q+0x49>
40082ab5:	2418d7        	beq	a8, a13, 40082add <z_move_thread_to_end_of_prio_q+0x49>
	if (thread_1->base.prio < thread_2->base.prio) {
40082ab8:	0e02a2        	l8ui	a10, a2, 14
40082abb:	23aa00        	sext	a10, a10, 7
40082abe:	0e08b2        	l8ui	a11, a8, 14
40082ac1:	23bb00        	sext	a11, a11, 7
40082ac4:	0caab7        	bge	a10, a11, 40082ad4 <z_move_thread_to_end_of_prio_q+0x40>
	node->prev = successor->prev;
40082ac7:	18a8      	l32i.n	a10, a8, 4
	node->next = successor;
40082ac9:	0289      	s32i.n	a8, a2, 0
	node->prev = successor->prev;
40082acb:	12a9      	s32i.n	a10, a2, 4
	successor->prev->next = node;
40082acd:	0a29      	s32i.n	a2, a10, 0
	successor->prev = node;
40082acf:	1829      	s32i.n	a2, a8, 4
40082ad1:	000586        	j	40082aeb <z_move_thread_to_end_of_prio_q+0x57>
	return (node == list->tail) ? NULL : node->next;
40082ad4:	051c87        	beq	a12, a8, 40082add <z_move_thread_to_end_of_prio_q+0x49>
40082ad7:	002882        	l32i	a8, a8, 0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082ada:	fe0856        	bnez	a8, 40082abe <z_move_thread_to_end_of_prio_q+0x2a>
	node->prev = list->tail;
40082add:	0162c2        	s32i	a12, a2, 4
	list->tail->next = node;
40082ae0:	102982        	l32i	a8, a9, 64
	node->next = list;
40082ae3:	0062d2        	s32i	a13, a2, 0
	list->tail->next = node;
40082ae6:	0829      	s32i.n	a2, a8, 0
	list->tail = node;
40082ae8:	106922        	s32i	a2, a9, 64
	thread->base.thread_state |= states;
40082aeb:	0d0282        	l8ui	a8, a2, 13
40082aee:	80afa2        	movi	a10, -128
40082af1:	2088a0        	or	a8, a8, a10
		update_cache(thread == _current);
40082af4:	29a8      	l32i.n	a10, a9, 8
40082af6:	0d4282        	s8i	a8, a2, 13
40082af9:	c0aa20        	sub	a10, a10, a2
40082afc:	180c      	movi.n	a8, 1
40082afe:	020c      	movi.n	a2, 0
40082b00:	8328a0        	moveqz	a2, a8, a10
40082b03:	02ad      	mov.n	a10, a2
40082b05:	ffe165        	call8	4008291c <update_cache>
	XTOS_RESTORE_INTLEVEL(key);
40082b08:	13e630        	wsr.ps	a3
40082b0b:	002010        	rsync
}
40082b0e:	f01d      	retw.n

40082b10 <z_time_slice>:
{
40082b10:	004136        	entry	a1, 32
	if (slice_time && sliceable(_current)) {
40082b13:	f72d81        	l32r	a8, 400807c8 <_iram_text_start+0x278>
40082b16:	002892        	l32i	a9, a8, 0
40082b19:	f69581        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082b1c:	039916        	beqz	a9, 40082b59 <z_time_slice+0x49>
40082b1f:	28a8      	l32i.n	a10, a8, 8
		&& !z_is_thread_timeout_active(thread);
40082b21:	7fa0b2        	movi	a11, 127
40082b24:	071a92        	l16ui	a9, a10, 14
40082b27:	2e3b97        	bltu	a11, a9, 40082b59 <z_time_slice+0x49>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
40082b2a:	f72891        	l32r	a9, 400807cc <_iram_text_start+0x27c>
40082b2d:	0e0ab2        	l8ui	a11, a10, 14
40082b30:	0998      	l32i.n	a9, a9, 0
40082b32:	23bb00        	sext	a11, a11, 7
40082b35:	202b97        	blt	a11, a9, 40082b59 <z_time_slice+0x49>
		&& !z_is_idle_thread_object(thread)
40082b38:	f71e91        	l32r	a9, 400807b0 <_iram_text_start+0x260>
40082b3b:	1a1a97        	beq	a10, a9, 40082b59 <z_time_slice+0x49>
		&& !z_is_thread_timeout_active(thread);
40082b3e:	6a98      	l32i.n	a9, a10, 24
40082b40:	015956        	bnez	a9, 40082b59 <z_time_slice+0x49>
		if (ticks >= _current_cpu->slice_ticks) {
40082b43:	4898      	l32i.n	a9, a8, 16
40082b45:	082297        	blt	a2, a9, 40082b51 <z_time_slice+0x41>
			z_move_thread_to_end_of_prio_q(_current);
40082b48:	fff4a5        	call8	40082a94 <z_move_thread_to_end_of_prio_q>
			z_reset_time_slice();
40082b4b:	ffc8a5        	call8	400827d4 <z_reset_time_slice>
40082b4e:	0002c6        	j	40082b5d <z_time_slice+0x4d>
			_current_cpu->slice_ticks -= ticks;
40082b51:	c09920        	sub	a9, a9, a2
40082b54:	4899      	s32i.n	a9, a8, 16
40082b56:	0000c6        	j	40082b5d <z_time_slice+0x4d>
		_current_cpu->slice_ticks = 0;
40082b59:	020c      	movi.n	a2, 0
40082b5b:	4829      	s32i.n	a2, a8, 16
}
40082b5d:	f01d      	retw.n
	...

40082b60 <z_impl_k_thread_suspend>:
{
40082b60:	004136        	entry	a1, 32
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
40082b63:	18c2a2        	addi	a10, a2, 24
40082b66:	006925        	call8	400831f8 <z_abort_timeout>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082b69:	006330        	rsil	a3, 3
		if (z_is_thread_queued(thread)) {
40082b6c:	0d0242        	l8ui	a4, a2, 13
40082b6f:	0d6477        	bbci	a4, 7, 40082b80 <z_impl_k_thread_suspend+0x20>
	sys_dlist_remove(&thread->base.qnode_dlist);
40082b72:	02ad      	mov.n	a10, a2
40082b74:	00af65        	call8	4008366c <sys_dlist_remove>
	thread->base.thread_state &= ~states;
40082b77:	0d0282        	l8ui	a8, a2, 13
40082b7a:	648080        	extui	a8, a8, 0, 7
40082b7d:	0d4282        	s8i	a8, a2, 13
	thread->base.thread_state |= _THREAD_SUSPENDED;
40082b80:	0d0282        	l8ui	a8, a2, 13
40082b83:	041c      	movi.n	a4, 16
40082b85:	208840        	or	a8, a8, a4
		update_cache(thread == _current);
40082b88:	f67a41        	l32r	a4, 40080570 <_iram_text_start+0x20>
40082b8b:	0d4282        	s8i	a8, a2, 13
40082b8e:	24a8      	l32i.n	a10, a4, 8
40082b90:	190c      	movi.n	a9, 1
40082b92:	c0aa20        	sub	a10, a10, a2
40082b95:	080c      	movi.n	a8, 0
40082b97:	8389a0        	moveqz	a8, a9, a10
40082b9a:	08ad      	mov.n	a10, a8
40082b9c:	ffd7e5        	call8	4008291c <update_cache>
	XTOS_RESTORE_INTLEVEL(key);
40082b9f:	13e630        	wsr.ps	a3
40082ba2:	002010        	rsync
	if (thread == _current) {
40082ba5:	2438      	l32i.n	a3, a4, 8
40082ba7:	029327        	bne	a3, a2, 40082bad <z_impl_k_thread_suspend+0x4d>
		z_reschedule_unlocked();
40082baa:	ffd2e5        	call8	400828d8 <z_reschedule_unlocked>
}
40082bad:	f01d      	retw.n
	...

40082bb0 <z_thread_single_abort>:
{
40082bb0:	004136        	entry	a1, 32
	if (thread->fn_abort != NULL) {
40082bb3:	112232        	l32i	a3, a2, 68
40082bb6:	002316        	beqz	a3, 40082bbc <z_thread_single_abort+0xc>
		thread->fn_abort();
40082bb9:	0003e0        	callx8	a3
40082bbc:	18c2a2        	addi	a10, a2, 24
40082bbf:	0063a5        	call8	400831f8 <z_abort_timeout>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082bc2:	006340        	rsil	a4, 3
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
40082bc5:	0d0232        	l8ui	a3, a2, 13
40082bc8:	445030        	extui	a5, a3, 0, 5
40082bcb:	032556        	bnez	a5, 40082c01 <z_thread_single_abort+0x51>
		if (z_is_thread_ready(thread)) {
40082bce:	062252        	l32i	a5, a2, 24
40082bd1:	c5ec      	bnez.n	a5, 40082c01 <z_thread_single_abort+0x51>
			if (z_is_thread_queued(thread)) {
40082bd3:	233300        	sext	a3, a3, 7
40082bd6:	00e3d6        	bgez	a3, 40082be8 <z_thread_single_abort+0x38>
	sys_dlist_remove(&thread->base.qnode_dlist);
40082bd9:	20a220        	or	a10, a2, a2
40082bdc:	00a8e5        	call8	4008366c <sys_dlist_remove>
	thread->base.thread_state &= ~states;
40082bdf:	0d0232        	l8ui	a3, a2, 13
40082be2:	643030        	extui	a3, a3, 0, 7
40082be5:	0d4232        	s8i	a3, a2, 13
			update_cache(thread == _current);
40082be8:	f66231        	l32r	a3, 40080570 <_iram_text_start+0x20>
40082beb:	150c      	movi.n	a5, 1
40082bed:	23a8      	l32i.n	a10, a3, 8
40082bef:	030c      	movi.n	a3, 0
40082bf1:	c0aa20        	sub	a10, a10, a2
40082bf4:	8335a0        	moveqz	a3, a5, a10
40082bf7:	03ad      	mov.n	a10, a3
40082bf9:	ffd225        	call8	4008291c <update_cache>
40082bfc:	000606        	j	40082c18 <z_thread_single_abort+0x68>
40082bff:	170000        	lsi	f0, a0, 92
			if (z_is_thread_pending(thread)) {
40082c02:	ad1363        	lsi	f6, a3, 0x2b4
	sys_dlist_remove(&thread->base.qnode_dlist);
40082c05:	a66502        	s32i	a0, a5, 0x298
40082c08:	023200        	andb	b3, b2, b0
	thread->base.thread_state &= ~_THREAD_PENDING;
40082c0b:	7c0d      	lsi	f0, a12, 48
40082c0d:	3350d5        	call4	400b611c <_iram_text_end+0x3257e>
40082c10:	423210        	xorb	b3, b2, b1
40082c13:	0c0d      	mov.n	a0, a12
				thread->base.pended_on = NULL;
40082c15:	223903        	lsi	f0, a9, 136
		thread->base.thread_state |= mask;
40082c18:	0d0232        	l8ui	a3, a2, 13
40082c1b:	850c      	movi.n	a5, 8
40082c1d:	203350        	or	a3, a3, a5
40082c20:	0d4232        	s8i	a3, a2, 13
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
40082c23:	000886        	j	40082c49 <z_thread_single_abort+0x99>
40082c26:	a20000        	muluh	a0, a0, a0
40082c29:	e518c3        	lsi	f12, a8, 0x394
40082c2c:	005c      	movi.n	a0, 80
	sys_dlist_remove(&thread->base.qnode_dlist);
40082c2e:	20a330        	or	a10, a3, a3
40082c31:	00a3a5        	call8	4008366c <sys_dlist_remove>
40082c34:	0d0382        	l8ui	a8, a3, 13
40082c37:	d97c      	movi.n	a9, -3
40082c39:	108890        	and	a8, a8, a9
40082c3c:	0d4382        	s8i	a8, a3, 13
			waiter->base.pended_on = NULL;
40082c3f:	2359      	s32i.n	a5, a3, 8
 * z_swap() is in use it's a simple inline provided by the kernel.
 */
static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->swap_retval = value;
40082c41:	136352        	s32i	a5, a3, 76
			ready_thread(waiter);
40082c44:	03ad      	mov.n	a10, a3
40082c46:	ffd4a5        	call8	40082990 <ready_thread>
	return list->head == list;
40082c49:	0c2232        	l32i	a3, a2, 48
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
40082c4c:	00a052        	movi	a5, 0
40082c4f:	051357        	beq	a3, a5, 40082c58 <z_thread_single_abort+0xa8>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
40082c52:	30c282        	addi	a8, a2, 48
40082c55:	cf9387        	bne	a3, a8, 40082c28 <z_thread_single_abort+0x78>
	XTOS_RESTORE_INTLEVEL(key);
40082c58:	13e640        	wsr.ps	a4
40082c5b:	002010        	rsync
}
40082c5e:	f01d      	retw.n

40082c60 <unready_thread>:
{
40082c60:	004136        	entry	a1, 32
	if (z_is_thread_queued(thread)) {
40082c63:	0d0282        	l8ui	a8, a2, 13
40082c66:	0e6877        	bbci	a8, 7, 40082c78 <unready_thread+0x18>
	sys_dlist_remove(&thread->base.qnode_dlist);
40082c69:	20a220        	or	a10, a2, a2
40082c6c:	009fe5        	call8	4008366c <sys_dlist_remove>
	thread->base.thread_state &= ~states;
40082c6f:	0d0282        	l8ui	a8, a2, 13
40082c72:	648080        	extui	a8, a8, 0, 7
40082c75:	0d4282        	s8i	a8, a2, 13
	update_cache(thread == _current);
40082c78:	f63e81        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082c7b:	0228a2        	l32i	a10, a8, 8
40082c7e:	180c      	movi.n	a8, 1
40082c80:	c0aa20        	sub	a10, a10, a2
40082c83:	020c      	movi.n	a2, 0
40082c85:	8328a0        	moveqz	a2, a8, a10
40082c88:	02ad      	mov.n	a10, a2
40082c8a:	ffc925        	call8	4008291c <update_cache>
}
40082c8d:	f01d      	retw.n
	...

40082c90 <z_remove_thread_from_ready_q>:
{
40082c90:	004136        	entry	a1, 32
40082c93:	02ad      	mov.n	a10, a2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082c95:	006330        	rsil	a3, 3
		unready_thread(thread);
40082c98:	fffc65        	call8	40082c60 <unready_thread>
	XTOS_RESTORE_INTLEVEL(key);
40082c9b:	13e630        	wsr.ps	a3
40082c9e:	002010        	rsync
}
40082ca1:	f01d      	retw.n
	...

40082ca4 <z_tick_sleep$part$23>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
40082ca4:	004136        	entry	a1, 32
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
40082ca7:	006a25        	call8	40083348 <z_tick_get_32>
40082caa:	8032a0        	add	a3, a2, a10
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082cad:	006350        	rsil	a5, 3
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
#endif
	z_remove_thread_from_ready_q(_current);
40082cb0:	f63041        	l32r	a4, 40080570 <_iram_text_start+0x20>
40082cb3:	0224a2        	l32i	a10, a4, 8
40082cb6:	fffda5        	call8	40082c90 <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
40082cb9:	0224a2        	l32i	a10, a4, 8
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
40082cbc:	f6c7b1        	l32r	a11, 400807d8 <_iram_text_start+0x288>
40082cbf:	02cd      	mov.n	a12, a2
40082cc1:	31df20        	srai	a13, a2, 31
40082cc4:	18caa2        	addi	a10, a10, 24
40082cc7:	003ee5        	call8	400830b4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
40082cca:	2428      	l32i.n	a2, a4, 8
	thread->base.thread_state |= _THREAD_SUSPENDED;
40082ccc:	041c      	movi.n	a4, 16
40082cce:	0d0282        	l8ui	a8, a2, 13

	(void)z_swap(&local_lock, key);
40082cd1:	05ad      	mov.n	a10, a5
40082cd3:	208840        	or	a8, a8, a4
40082cd6:	0d4282        	s8i	a8, a2, 13
40082cd9:	ffb4e5        	call8	40082828 <z_swap$isra$14>

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
40082cdc:	0066a5        	call8	40083348 <z_tick_get_32>
40082cdf:	c0a3a0        	sub	a10, a3, a10
		return ticks;
	}
#endif

	return 0;
}
40082ce2:	020c      	movi.n	a2, 0
40082ce4:	532a20        	max	a2, a10, a2
40082ce7:	f01d      	retw.n
40082ce9:	000000        	ill

40082cec <add_to_waitq_locked>:
{
40082cec:	004136        	entry	a1, 32
	unready_thread(thread);
40082cef:	02ad      	mov.n	a10, a2
40082cf1:	fff6e5        	call8	40082c60 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
40082cf4:	0d0282        	l8ui	a8, a2, 13
40082cf7:	290c      	movi.n	a9, 2
40082cf9:	208890        	or	a8, a8, a9
40082cfc:	0d4282        	s8i	a8, a2, 13
	if (wait_q != NULL) {
40082cff:	93bc      	beqz.n	a3, 40082d3c <add_to_waitq_locked+0x50>
40082d01:	0388      	l32i.n	a8, a3, 0
		thread->base.pended_on = wait_q;
40082d03:	2239      	s32i.n	a3, a2, 8
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082d05:	78ac      	beqz.n	a8, 40082d30 <add_to_waitq_locked+0x44>
40082d07:	251387        	beq	a3, a8, 40082d30 <add_to_waitq_locked+0x44>
	if (thread_1->base.prio < thread_2->base.prio) {
40082d0a:	0e0292        	l8ui	a9, a2, 14
40082d0d:	239900        	sext	a9, a9, 7
40082d10:	0e08a2        	l8ui	a10, a8, 14
40082d13:	23aa00        	sext	a10, a10, 7
40082d16:	0ca9a7        	bge	a9, a10, 40082d26 <add_to_waitq_locked+0x3a>
	node->prev = successor->prev;
40082d19:	1838      	l32i.n	a3, a8, 4
	node->next = successor;
40082d1b:	0289      	s32i.n	a8, a2, 0
	node->prev = successor->prev;
40082d1d:	1239      	s32i.n	a3, a2, 4
	successor->prev->next = node;
40082d1f:	0329      	s32i.n	a2, a3, 0
	successor->prev = node;
40082d21:	1829      	s32i.n	a2, a8, 4
40082d23:	000546        	j	40082d3c <add_to_waitq_locked+0x50>
	return (node == list->tail) ? NULL : node->next;
40082d26:	13a8      	l32i.n	a10, a3, 4
40082d28:	0418a7        	beq	a8, a10, 40082d30 <add_to_waitq_locked+0x44>
40082d2b:	0888      	l32i.n	a8, a8, 0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082d2d:	fdf856        	bnez	a8, 40082d10 <add_to_waitq_locked+0x24>
	node->prev = list->tail;
40082d30:	1388      	l32i.n	a8, a3, 4
	node->next = list;
40082d32:	0239      	s32i.n	a3, a2, 0
	node->prev = list->tail;
40082d34:	1289      	s32i.n	a8, a2, 4
	list->tail->next = node;
40082d36:	1388      	l32i.n	a8, a3, 4
40082d38:	0829      	s32i.n	a2, a8, 0
	list->tail = node;
40082d3a:	1329      	s32i.n	a2, a3, 4
}
40082d3c:	f01d      	retw.n
	...

40082d40 <pend>:
{
40082d40:	004136        	entry	a1, 32
40082d43:	20b330        	or	a11, a3, a3
40082d46:	006360        	rsil	a6, 3
		add_to_waitq_locked(thread, wait_q);
40082d49:	20a220        	or	a10, a2, a2
40082d4c:	fff9e5        	call8	40082cec <add_to_waitq_locked>
	XTOS_RESTORE_INTLEVEL(key);
40082d4f:	13e660        	wsr.ps	a6
40082d52:	002010        	rsync
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
40082d55:	020466        	bnei	a4, -1, 40082d5b <pend+0x1b>
40082d58:	0c0526        	beqi	a5, -1, 40082d68 <pend+0x28>
40082d5b:	f69fb1        	l32r	a11, 400807d8 <_iram_text_start+0x288>
40082d5e:	04cd      	mov.n	a12, a4
40082d60:	05dd      	mov.n	a13, a5
40082d62:	18c2a2        	addi	a10, a2, 24
40082d65:	0034e5        	call8	400830b4 <z_add_timeout>
}
40082d68:	f01d      	retw.n
	...

40082d6c <z_pend_curr>:
{
40082d6c:	004136        	entry	a1, 32
	pend(_current, wait_q, timeout);
40082d6f:	f60081        	l32r	a8, 40080570 <_iram_text_start+0x20>
{
40082d72:	20d770        	or	a13, a7, a7
	pend(_current, wait_q, timeout);
40082d75:	0228a2        	l32i	a10, a8, 8
40082d78:	06cd      	mov.n	a12, a6
40082d7a:	04bd      	mov.n	a11, a4
40082d7c:	fffc25        	call8	40082d40 <pend>
	return z_swap(lock, key);
40082d7f:	03ad      	mov.n	a10, a3
40082d81:	ffaa65        	call8	40082828 <z_swap$isra$14>
}
40082d84:	0a2d      	mov.n	a2, a10
40082d86:	f01d      	retw.n

40082d88 <z_unpend_first_thread>:
{
40082d88:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082d8b:	006330        	rsil	a3, 3
		ret = _priq_wait_best(&wait_q->waitq);
40082d8e:	20a220        	or	a10, a2, a2
40082d91:	008ee5        	call8	40083680 <z_priq_dumb_best>
40082d94:	0a2d      	mov.n	a2, a10
	XTOS_RESTORE_INTLEVEL(key);
40082d96:	13e630        	wsr.ps	a3
40082d99:	002010        	rsync

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
40082d9c:	0aac      	beqz.n	a10, 40082dc0 <z_unpend_first_thread+0x38>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082d9e:	006330        	rsil	a3, 3
	sys_dlist_remove(&thread->base.qnode_dlist);
40082da1:	008ca5        	call8	4008366c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
40082da4:	0d0282        	l8ui	a8, a2, 13
40082da7:	d97c      	movi.n	a9, -3
40082da9:	108890        	and	a8, a8, a9
40082dac:	0d4282        	s8i	a8, a2, 13
		thread->base.pended_on = NULL;
40082daf:	080c      	movi.n	a8, 0
40082db1:	026282        	s32i	a8, a2, 8
	XTOS_RESTORE_INTLEVEL(key);
40082db4:	13e630        	wsr.ps	a3
40082db7:	002010        	rsync
	return z_abort_timeout(&thread->base.timeout);
40082dba:	18c2a2        	addi	a10, a2, 24
40082dbd:	0043a5        	call8	400831f8 <z_abort_timeout>
}
40082dc0:	f01d      	retw.n
	...

40082dc4 <z_sched_init>:
{
40082dc4:	004136        	entry	a1, 32
	list->head = (sys_dnode_t *)list;
40082dc7:	f5ea81        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082dca:	f68191        	l32r	a9, 400807d0 <_iram_text_start+0x280>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
40082dcd:	00a0b2        	movi	a11, 0
40082dd0:	0f6892        	s32i	a9, a8, 60
	list->tail = (sys_dnode_t *)list;
40082dd3:	106892        	s32i	a9, a8, 64
40082dd6:	20abb0        	or	a10, a11, a11
40082dd9:	ffa7e5        	call8	40082858 <k_sched_time_slice_set>
}
40082ddc:	f01d      	retw.n
	...

40082de0 <z_impl_k_yield>:
{
40082de0:	004136        	entry	a1, 32
	if (!z_is_idle_thread_object(_current)) {
40082de3:	f5e321        	l32r	a2, 40080570 <_iram_text_start+0x20>
40082de6:	f67231        	l32r	a3, 400807b0 <_iram_text_start+0x260>
40082de9:	2288      	l32i.n	a8, a2, 8
40082deb:	671837        	beq	a8, a3, 40082e56 <z_impl_k_yield+0x76>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082dee:	006330        	rsil	a3, 3
	sys_dlist_remove(&thread->base.qnode_dlist);
40082df1:	22a8      	l32i.n	a10, a2, 8
40082df3:	0087a5        	call8	4008366c <sys_dlist_remove>
	return list->head == list;
40082df6:	f298      	l32i.n	a9, a2, 60
			_priq_run_add(&_kernel.ready_q.runq, _current);
40082df8:	022282        	l32i	a8, a2, 8
40082dfb:	f675c1        	l32r	a12, 400807d0 <_iram_text_start+0x280>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082dfe:	c9ac      	beqz.n	a9, 40082e2e <z_impl_k_yield+0x4e>
40082e00:	2a19c7        	beq	a9, a12, 40082e2e <z_impl_k_yield+0x4e>
	if (thread_1->base.prio < thread_2->base.prio) {
40082e03:	0e08a2        	l8ui	a10, a8, 14
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
40082e06:	1022d2        	l32i	a13, a2, 64
40082e09:	23aa00        	sext	a10, a10, 7
40082e0c:	0e09b2        	l8ui	a11, a9, 14
40082e0f:	23bb00        	sext	a11, a11, 7
40082e12:	0faab7        	bge	a10, a11, 40082e25 <z_impl_k_yield+0x45>
	node->prev = successor->prev;
40082e15:	1928      	l32i.n	a2, a9, 4
	node->next = successor;
40082e17:	0899      	s32i.n	a9, a8, 0
	node->prev = successor->prev;
40082e19:	1829      	s32i.n	a2, a8, 4
	successor->prev->next = node;
40082e1b:	0289      	s32i.n	a8, a2, 0
	successor->prev = node;
40082e1d:	1989      	s32i.n	a8, a9, 4
40082e1f:	0006c6        	j	40082e3e <z_impl_k_yield+0x5e>
40082e22:	000000        	ill
	return (node == list->tail) ? NULL : node->next;
40082e25:	0519d7        	beq	a9, a13, 40082e2e <z_impl_k_yield+0x4e>
40082e28:	002992        	l32i	a9, a9, 0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082e2b:	fdd956        	bnez	a9, 40082e0c <z_impl_k_yield+0x2c>
	node->prev = list->tail;
40082e2e:	102292        	l32i	a9, a2, 64
	node->next = list;
40082e31:	0068c2        	s32i	a12, a8, 0
	node->prev = list->tail;
40082e34:	1899      	s32i.n	a9, a8, 4
	list->tail->next = node;
40082e36:	102292        	l32i	a9, a2, 64
40082e39:	0989      	s32i.n	a8, a9, 0
	list->tail = node;
40082e3b:	106282        	s32i	a8, a2, 64
	thread->base.thread_state |= states;
40082e3e:	0d0822        	l8ui	a2, a8, 13
40082e41:	80af92        	movi	a9, -128
40082e44:	202290        	or	a2, a2, a9
40082e47:	0d4822        	s8i	a2, a8, 13
			update_cache(1);
40082e4a:	01a0a2        	movi	a10, 1
40082e4d:	fface5        	call8	4008291c <update_cache>
	XTOS_RESTORE_INTLEVEL(key);
40082e50:	13e630        	wsr.ps	a3
40082e53:	002010        	rsync
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082e56:	0063a0        	rsil	a10, 3
	(void) z_swap(&lock, key);
40082e59:	ff9ce5        	call8	40082828 <z_swap$isra$14>
}
40082e5c:	f01d      	retw.n
	...

40082e60 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
40082e60:	004136        	entry	a1, 32
40082e63:	20a220        	or	a10, a2, a2
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
40082e66:	140266        	bnei	a2, -1, 40082e7e <z_impl_k_sleep+0x1e>
40082e69:	110366        	bnei	a3, -1, 40082e7e <z_impl_k_sleep+0x1e>
		k_thread_suspend(_current);
40082e6c:	f5c181        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082e6f:	0228a2        	l32i	a10, a8, 8
	z_impl_k_thread_suspend(thread);
40082e72:	ffcee5        	call8	40082b60 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
40082e75:	20a330        	or	a10, a3, a3
40082e78:	000846        	j	40082e9d <z_impl_k_sleep+0x3d>
40082e7b:	000000        	ill
	ticks = k_ms_to_ticks_ceil32(timeout);
#else
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
40082e7e:	0a3d      	mov.n	a3, a10
	if (ticks == 0) {
40082e80:	4acc      	bnez.n	a10, 40082e88 <z_impl_k_sleep+0x28>
	z_impl_k_yield();
40082e82:	fff5e5        	call8	40082de0 <z_impl_k_yield>
40082e85:	000146        	j	40082e8e <z_impl_k_sleep+0x2e>
40082e88:	ffe1a5        	call8	40082ca4 <z_tick_sleep$part$23>
40082e8b:	203aa0        	or	a3, a10, a10
			return t / (from_hz / to_hz);
40082e8e:	f653c1        	l32r	a12, 400807dc <_iram_text_start+0x28c>
40082e91:	f5cfd1        	l32r	a13, 400805d0 <_iram_text_start+0x80>
40082e94:	20a330        	or	a10, a3, a3
40082e97:	31bf30        	srai	a11, a3, 31
40082e9a:	008225        	call8	400836bc <__udivdi3>
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
40082e9d:	0a2d      	mov.n	a2, a10
40082e9f:	f01d      	retw.n
40082ea1:	000000        	ill

40082ea4 <z_impl_k_current_get>:
}
#include <syscalls/k_wakeup_mrsh.c>
#endif

k_tid_t z_impl_k_current_get(void)
{
40082ea4:	004136        	entry	a1, 32

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
40082ea7:	f5b281        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082eaa:	2828      	l32i.n	a2, a8, 8
40082eac:	f01d      	retw.n
	...

40082eb0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
40082eb0:	004136        	entry	a1, 32
40082eb3:	006330        	rsil	a3, 3
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
40082eb6:	20a220        	or	a10, a2, a2
40082eb9:	ffece5        	call8	40082d88 <z_unpend_first_thread>

	if (thread != NULL) {
40082ebc:	00da16        	beqz	a10, 40082ecd <z_impl_k_sem_give+0x1d>
40082ebf:	00a022        	movi	a2, 0
40082ec2:	136a22        	s32i	a2, a10, 76
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
40082ec5:	ffb465        	call8	40082a0c <z_ready_thread>
40082ec8:	000506        	j	40082ee0 <z_impl_k_sem_give+0x30>
40082ecb:	920000        	lsi	f0, a0, 0x248
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
40082ece:	820222        	l8ui	a2, a2, 130
40082ed1:	b20322        	l8ui	a2, a3, 178
40082ed4:	9001a0        	addx2	a0, a1, a10
40082ed7:	c088      	l32i.n	a8, a0, 48
40082ed9:	93ab80        	movnez	a10, a11, a8
40082edc:	8a9a      	add.n	a8, a10, a9
40082ede:	2289      	s32i.n	a8, a2, 8
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
40082ee0:	f640a1        	l32r	a10, 400807e0 <_iram_text_start+0x290>
40082ee3:	03bd      	mov.n	a11, a3
40082ee5:	ff9a25        	call8	40082888 <z_reschedule>
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
40082ee8:	f01d      	retw.n
	...

40082eec <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
40082eec:	004136        	entry	a1, 32
40082eef:	02cd      	mov.n	a12, a2
40082ef1:	04ed      	mov.n	a14, a4
40082ef3:	05fd      	mov.n	a15, a5
40082ef5:	0063b0        	rsil	a11, 3
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
40082ef8:	2288      	l32i.n	a8, a2, 8
40082efa:	e88c      	beqz.n	a8, 40082f0c <z_impl_k_sem_take+0x20>
		sem->count--;
40082efc:	880b      	addi.n	a8, a8, -1
40082efe:	2289      	s32i.n	a8, a2, 8
	XTOS_RESTORE_INTLEVEL(key);
40082f00:	13e6b0        	wsr.ps	a11
40082f03:	002010        	rsync
		k_spin_unlock(&lock, key);
		ret = 0;
40082f06:	0a0c      	movi.n	a10, 0
		goto out;
40082f08:	000586        	j	40082f22 <z_impl_k_sem_take+0x36>
40082f0b:	845000        	extui	a5, a0, 0, 9
	}

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
40082f0e:	98cc20        	lsi	f2, a12, 0x260
40082f11:	13e6b0        	wsr.ps	a11
40082f14:	002010        	rsync
		k_spin_unlock(&lock, key);
		ret = -EBUSY;
40082f17:	0a7c      	movi.n	a10, -16
		goto out;
40082f19:	000146        	j	40082f22 <z_impl_k_sem_take+0x36>
	}

	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
40082f1c:	f631a1        	l32r	a10, 400807e0 <_iram_text_start+0x290>
40082f1f:	ffe4e5        	call8	40082d6c <z_pend_curr>

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
40082f22:	0a2d      	mov.n	a2, a10
40082f24:	f01d      	retw.n
	...

40082f28 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
40082f28:	006136        	entry	a1, 48
40082f2b:	07fd      	mov.n	a15, a7
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
40082f2d:	e178      	l32i.n	a7, a1, 56
	sys_dlist_init(&w->waitq);
40082f2f:	30c282        	addi	a8, a2, 48
40082f32:	0c4272        	s8i	a7, a2, 12
	thread_base->thread_state = (uint8_t)initial_state;
40082f35:	470c      	movi.n	a7, 4
40082f37:	0d4272        	s8i	a7, a2, 13

	thread_base->prio = priority;
40082f3a:	d178      	l32i.n	a7, a1, 52
	list->head = (sys_dnode_t *)list;
40082f3c:	c289      	s32i.n	a8, a2, 48
	list->tail = (sys_dnode_t *)list;
40082f3e:	d289      	s32i.n	a8, a2, 52
40082f40:	0e4272        	s8i	a7, a2, 14
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
40082f43:	087c      	movi.n	a8, -16

	thread_base->sched_locked = 0U;
40082f45:	070c      	movi.n	a7, 0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
40082f47:	44fb      	addi.n	a4, a4, 15
	thread_base->sched_locked = 0U;
40082f49:	0f4272        	s8i	a7, a2, 15
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
40082f4c:	104480        	and	a4, a4, a8
	node->next = NULL;
40082f4f:	070c      	movi.n	a7, 0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
40082f51:	c188      	l32i.n	a8, a1, 48
40082f53:	6279      	s32i.n	a7, a2, 24
	node->prev = NULL;
40082f55:	7279      	s32i.n	a7, a2, 28
	stack_ptr = (char *)stack + stack_obj_size;
40082f57:	434a      	add.n	a4, a3, a4
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
40082f59:	02ad      	mov.n	a10, a2
{
40082f5b:	03bd      	mov.n	a11, a3
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
40082f5d:	0189      	s32i.n	a8, a1, 0
40082f5f:	06ed      	mov.n	a14, a6
40082f61:	05dd      	mov.n	a13, a5
40082f63:	04cd      	mov.n	a12, a4
40082f65:	fe8e25        	call8	40081848 <arch_new_thread>
	new_thread->init_data = NULL;
40082f68:	106272        	s32i	a7, a2, 64
	new_thread->fn_abort = NULL;
40082f6b:	116272        	s32i	a7, a2, 68
	new_thread->resource_pool = _current->resource_pool;
40082f6e:	f58071        	l32r	a7, 40080570 <_iram_text_start+0x20>
40082f71:	2778      	l32i.n	a7, a7, 8
40082f73:	152772        	l32i	a7, a7, 84
40082f76:	156272        	s32i	a7, a2, 84
}
40082f79:	042d      	mov.n	a2, a4
40082f7b:	f01d      	retw.n
40082f7d:	000000        	ill

40082f80 <z_init_static_threads>:
{
40082f80:	006136        	entry	a1, 48
	_FOREACH_STATIC_THREAD(thread_data) {
40082f83:	f61821        	l32r	a2, 400807e4 <_iram_text_start+0x294>
40082f86:	f61731        	l32r	a3, 400807e4 <_iram_text_start+0x294>
40082f89:	024d      	mov.n	a4, a2
40082f8b:	000a46        	j	40082fb8 <z_init_static_threads+0x38>
		z_setup_new_thread(
40082f8e:	0b2282        	l32i	a8, a2, 44
40082f91:	036182        	s32i	a8, a1, 12
40082f94:	8288      	l32i.n	a8, a2, 32
40082f96:	2189      	s32i.n	a8, a1, 8
40082f98:	7288      	l32i.n	a8, a2, 28
40082f9a:	1189      	s32i.n	a8, a1, 4
40082f9c:	6288      	l32i.n	a8, a2, 24
40082f9e:	0189      	s32i.n	a8, a1, 0
40082fa0:	52f8      	l32i.n	a15, a2, 20
40082fa2:	42e8      	l32i.n	a14, a2, 16
40082fa4:	32d8      	l32i.n	a13, a2, 12
40082fa6:	22c8      	l32i.n	a12, a2, 8
40082fa8:	12b8      	l32i.n	a11, a2, 4
40082faa:	0022a2        	l32i	a10, a2, 0
40082fad:	fff7a5        	call8	40082f28 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
40082fb0:	0288      	l32i.n	a8, a2, 0
40082fb2:	106822        	s32i	a2, a8, 64
	_FOREACH_STATIC_THREAD(thread_data) {
40082fb5:	30c222        	addi	a2, a2, 48
40082fb8:	d23237        	bltu	a2, a3, 40082f8e <z_init_static_threads+0xe>
	_FOREACH_STATIC_THREAD(thread_data) {
40082fbb:	042d      	mov.n	a2, a4
	k_sched_lock();
40082fbd:	ff9265        	call8	400828e4 <k_sched_lock>
					    K_MSEC(thread_data->init_delay));
40082fc0:	040c      	movi.n	a4, 0
	_FOREACH_STATIC_THREAD(thread_data) {
40082fc2:	000a86        	j	40082ff0 <z_init_static_threads+0x70>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
40082fc5:	92d8      	l32i.n	a13, a2, 36
40082fc7:	220d26        	beqi	a13, -1, 40082fed <z_init_static_threads+0x6d>
		} else {
			return t * (to_hz / from_hz);
40082fca:	a80c      	movi.n	a8, 10
					    K_MSEC(thread_data->init_delay));
40082fcc:	53dd40        	max	a13, a13, a4
40082fcf:	82cd80        	mull	a12, a13, a8
40082fd2:	b2dd80        	mulsh	a13, a13, a8
			schedule_new_thread(thread_data->init_thread,
40082fd5:	02a8      	l32i.n	a10, a2, 0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
40082fd7:	208cd0        	or	a8, a12, a13
40082fda:	006856        	bnez	a8, 40082fe4 <z_init_static_threads+0x64>
	z_sched_start(thread);
40082fdd:	ffa825        	call8	40082a60 <z_sched_start>
40082fe0:	000246        	j	40082fed <z_init_static_threads+0x6d>
40082fe3:	fdb100        	lsi	f0, a1, 0x3f4
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
40082fe6:	caa2f5        	call12	4004da14 <esp32_rom_gpio_matrix_out+0x43b08>
40082fe9:	a518      	l32i.n	a1, a5, 40
40082feb:	000c      	movi.n	a0, 0
	_FOREACH_STATIC_THREAD(thread_data) {
40082fed:	30c222        	addi	a2, a2, 48
40082ff0:	d13237        	bltu	a2, a3, 40082fc5 <z_init_static_threads+0x45>
	k_sched_unlock();
40082ff3:	ff9765        	call8	40082968 <k_sched_unlock>
}
40082ff6:	f01d      	retw.n

40082ff8 <z_impl_k_thread_abort>:
#include <sys/__assert.h>
#include <syscall_handler.h>

#if !defined(CONFIG_ARCH_HAS_THREAD_ABORT)
void z_impl_k_thread_abort(k_tid_t thread)
{
40082ff8:	004136        	entry	a1, 32
	z_thread_single_abort(thread);
40082ffb:	02ad      	mov.n	a10, a2
40082ffd:	ffbb25        	call8	40082bb0 <z_thread_single_abort>
40083000:	03f430        	rsr.misc0	a3

	/* If we're in an interrupt handler, we reschedule on the way out
	 * anyway, nothing needs to be done here.
	 */
	if (!arch_is_in_isr()) {
40083003:	0338      	l32i.n	a3, a3, 0
40083005:	23fc      	bnez.n	a3, 4008303b <z_impl_k_thread_abort+0x43>
		if (thread == _current) {
40083007:	f55a31        	l32r	a3, 40080570 <_iram_text_start+0x20>
4008300a:	2348      	l32i.n	a4, a3, 8
4008300c:	259427        	bne	a4, a2, 40083035 <z_impl_k_thread_abort+0x3d>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008300f:	006350        	rsil	a5, 3
	old_thread = _current;
40083012:	2348      	l32i.n	a4, a3, 8
	return _kernel.ready_q.cache;
40083014:	e328      	l32i.n	a2, a3, 56
	if (new_thread != old_thread) {
40083016:	121427        	beq	a4, a2, 4008302c <z_impl_k_thread_abort+0x34>
		z_reset_time_slice();
40083019:	ff7ba5        	call8	400827d4 <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
4008301c:	587c      	movi.n	a8, -11
4008301e:	1422a2        	l32i	a10, a2, 80
40083021:	136482        	s32i	a8, a4, 76
		_current_cpu->current = new_thread;
40083024:	2329      	s32i.n	a2, a3, 8
40083026:	50c4b2        	addi	a11, a4, 80
40083029:	fe6ae5        	call8	400816d8 <xtensa_switch>
	XTOS_RESTORE_INTLEVEL(key);
4008302c:	13e650        	wsr.ps	a5
4008302f:	002010        	rsync
	return _current->swap_retval;
40083032:	000146        	j	4008303b <z_impl_k_thread_abort+0x43>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083035:	0063a0        	rsil	a10, 3
	(void) z_reschedule_irqlock(arch_irq_lock());
40083038:	ff87a5        	call8	400828b4 <z_reschedule_irqlock>
			z_swap_unlocked();
		} else {
			z_reschedule_unlocked();
		}
	}
}
4008303b:	f01d      	retw.n
4008303d:	000000        	ill

40083040 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
40083040:	004136        	entry	a1, 32
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
40083043:	f5e981        	l32r	a8, 400807e8 <_iram_text_start+0x298>
40083046:	0a0c      	movi.n	a10, 0
40083048:	0888      	l32i.n	a8, a8, 0
4008304a:	0298a7        	bne	a8, a10, 40083050 <elapsed+0x10>
4008304d:	fe57a5        	call8	400815c8 <z_clock_elapsed>
}
40083050:	0a2d      	mov.n	a2, a10
40083052:	f01d      	retw.n

40083054 <remove_timeout>:
{
40083054:	004136        	entry	a1, 32
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
40083057:	0288      	l32i.n	a8, a2, 0
40083059:	12ac      	beqz.n	a2, 4008307e <remove_timeout+0x2a>
4008305b:	f5e491        	l32r	a9, 400807ec <_iram_text_start+0x29c>
	return (node == list->tail) ? NULL : node->next;
4008305e:	1998      	l32i.n	a9, a9, 4
40083060:	1a1297        	beq	a2, a9, 4008307e <remove_timeout+0x2a>
	if (next(t) != NULL) {
40083063:	789c      	beqz.n	a8, 4008307e <remove_timeout+0x2a>
		next(t)->dticks += t->dticks;
40083065:	48c8      	l32i.n	a12, a8, 16
40083067:	42a8      	l32i.n	a10, a2, 16
40083069:	58b8      	l32i.n	a11, a8, 20
4008306b:	acaa      	add.n	a10, a12, a10
4008306d:	52d8      	l32i.n	a13, a2, 20
4008306f:	190c      	movi.n	a9, 1
40083071:	013ac7        	bltu	a10, a12, 40083076 <remove_timeout+0x22>
40083074:	090c      	movi.n	a9, 0
40083076:	bbda      	add.n	a11, a11, a13
40083078:	99ba      	add.n	a9, a9, a11
4008307a:	48a9      	s32i.n	a10, a8, 16
4008307c:	5899      	s32i.n	a9, a8, 20
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
4008307e:	1298      	l32i.n	a9, a2, 4
40083080:	0989      	s32i.n	a8, a9, 0
	node->next->prev = node->prev;
40083082:	1899      	s32i.n	a9, a8, 4
	node->next = NULL;
40083084:	080c      	movi.n	a8, 0
40083086:	0289      	s32i.n	a8, a2, 0
	node->prev = NULL;
40083088:	1289      	s32i.n	a8, a2, 4
}
4008308a:	f01d      	retw.n

4008308c <next_timeout>:

static int32_t next_timeout(void)
{
4008308c:	004136        	entry	a1, 32
	return list->head == list;
4008308f:	f5d781        	l32r	a8, 400807ec <_iram_text_start+0x29c>
40083092:	0828      	l32i.n	a2, a8, 0
	return sys_dlist_is_empty(list) ? NULL : list->head;
40083094:	019287        	bne	a2, a8, 40083099 <next_timeout+0xd>
40083097:	020c      	movi.n	a2, 0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
40083099:	fffa65        	call8	40083040 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
4008309c:	f5d581        	l32r	a8, 400807f0 <_iram_text_start+0x2a0>
4008309f:	328c      	beqz.n	a2, 400830a6 <next_timeout+0x1a>
400830a1:	4288      	l32i.n	a8, a2, 16
400830a3:	c088a0        	sub	a8, a8, a10

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
400830a6:	f53221        	l32r	a2, 40080570 <_iram_text_start+0x20>
400830a9:	4228      	l32i.n	a2, a2, 16
400830ab:	128c      	beqz.n	a2, 400830b0 <next_timeout+0x24>
400830ad:	012287        	blt	a2, a8, 400830b2 <next_timeout+0x26>
400830b0:	082d      	mov.n	a2, a8
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
400830b2:	f01d      	retw.n

400830b4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
400830b4:	006136        	entry	a1, 48
400830b7:	046d      	mov.n	a6, a4
400830b9:	207550        	or	a7, a5, a5
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
400830bc:	050466        	bnei	a4, -1, 400830c5 <z_add_timeout+0x11>
400830bf:	020566        	bnei	a5, -1, 400830c5 <z_add_timeout+0x11>
400830c2:	004b86        	j	400831f4 <z_add_timeout+0x140>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
400830c5:	441b      	addi.n	a4, a4, 1
400830c7:	180c      	movi.n	a8, 1
400830c9:	013467        	bltu	a4, a6, 400830ce <z_add_timeout+0x1a>
400830cc:	080c      	movi.n	a8, 0
400830ce:	885a      	add.n	a8, a8, a5

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
400830d0:	e57c      	movi.n	a5, -2
400830d2:	c0a540        	sub	a10, a5, a4
	k_ticks_t ticks = timeout.ticks + 1;
400830d5:	047d      	mov.n	a7, a4
400830d7:	086d      	mov.n	a6, a8
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
400830d9:	190c      	movi.n	a9, 1
400830db:	0235a7        	bltu	a5, a10, 400830e1 <z_add_timeout+0x2d>
400830de:	00a092        	movi	a9, 0
400830e1:	f57c      	movi.n	a5, -1
400830e3:	c05580        	sub	a5, a5, a8
400830e6:	c05590        	sub	a5, a5, a9
400830e9:	045596        	bltz	a5, 40083132 <z_add_timeout+0x7e>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
400830ec:	0189      	s32i.n	a8, a1, 0
400830ee:	fff525        	call8	40083040 <elapsed>
400830f1:	f5c051        	l32r	a5, 400807f4 <_iram_text_start+0x2a4>
400830f4:	e97c      	movi.n	a9, -2
400830f6:	0568      	l32i.n	a6, a5, 0
400830f8:	15b8      	l32i.n	a11, a5, 4
400830fa:	c06960        	sub	a6, a9, a6
400830fd:	170c      	movi.n	a7, 1
400830ff:	0188      	l32i.n	a8, a1, 0
40083101:	013967        	bltu	a9, a6, 40083106 <z_add_timeout+0x52>
40083104:	070c      	movi.n	a7, 0
40083106:	f57c      	movi.n	a5, -1
40083108:	c055b0        	sub	a5, a5, a11
4008310b:	c04640        	sub	a4, a6, a4
4008310e:	c05570        	sub	a5, a5, a7
40083111:	170c      	movi.n	a7, 1
40083113:	023647        	bltu	a6, a4, 40083119 <z_add_timeout+0x65>
40083116:	00a072        	movi	a7, 0
40083119:	c05580        	sub	a5, a5, a8
4008311c:	c05570        	sub	a5, a5, a7
4008311f:	c074a0        	sub	a7, a4, a10
40083122:	318fa0        	srai	a8, a10, 31
40083125:	160c      	movi.n	a6, 1
40083127:	013477        	bltu	a4, a7, 4008312c <z_add_timeout+0x78>
4008312a:	060c      	movi.n	a6, 0
4008312c:	c05580        	sub	a5, a5, a8
4008312f:	c06560        	sub	a6, a5, a6
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
40083132:	026232        	s32i	a3, a2, 8
40083135:	006330        	rsil	a3, 3
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
40083138:	fff065        	call8	40083040 <elapsed>
	ticks = MAX(1, ticks);
4008313b:	205770        	or	a5, a7, a7
4008313e:	204660        	or	a4, a6, a6
40083141:	0716e6        	bgei	a6, 1, 4008314c <z_add_timeout+0x98>
40083144:	06cc      	bnez.n	a6, 40083148 <z_add_timeout+0x94>
40083146:	27cc      	bnez.n	a7, 4008314c <z_add_timeout+0x98>
40083148:	150c      	movi.n	a5, 1
4008314a:	040c      	movi.n	a4, 0
		to->dticks = ticks + elapsed();
4008314c:	317fa0        	srai	a7, a10, 31
4008314f:	a5aa      	add.n	a10, a5, a10
40083151:	160c      	movi.n	a6, 1
40083153:	013a57        	bltu	a10, a5, 40083158 <z_add_timeout+0xa4>
40083156:	060c      	movi.n	a6, 0
40083158:	447a      	add.n	a4, a4, a7
4008315a:	464a      	add.n	a4, a6, a4
4008315c:	5249      	s32i.n	a4, a2, 20
	return list->head == list;
4008315e:	f5a341        	l32r	a4, 400807ec <_iram_text_start+0x29c>
40083161:	42a9      	s32i.n	a10, a2, 16
40083163:	0458      	l32i.n	a5, a4, 0
	return sys_dlist_is_empty(list) ? NULL : list->head;
40083165:	029547        	bne	a5, a4, 4008316b <z_add_timeout+0xb7>
40083168:	001e46        	j	400831e5 <z_add_timeout+0x131>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
4008316b:	14a8      	l32i.n	a10, a4, 4
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
4008316d:	1b0c      	movi.n	a11, 1
4008316f:	0c0c      	movi.n	a12, 0
40083171:	001386        	j	400831c3 <z_add_timeout+0x10f>
			if (t->dticks > to->dticks) {
40083174:	5588      	l32i.n	a8, a5, 20
40083176:	5268      	l32i.n	a6, a2, 20
40083178:	4578      	l32i.n	a7, a5, 16
4008317a:	4298      	l32i.n	a9, a2, 16
4008317c:	053687        	bltu	a6, a8, 40083185 <z_add_timeout+0xd1>
4008317f:	259867        	bne	a8, a6, 400831a8 <z_add_timeout+0xf4>
40083182:	22b977        	bgeu	a9, a7, 400831a8 <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
40083185:	c09790        	sub	a9, a7, a9
40083188:	1a0c      	movi.n	a10, 1
4008318a:	023797        	bltu	a7, a9, 40083190 <z_add_timeout+0xdc>
4008318d:	00a0a2        	movi	a10, 0
40083190:	c06860        	sub	a6, a8, a6
40083193:	c066a0        	sub	a6, a6, a10
40083196:	5569      	s32i.n	a6, a5, 20
	node->prev = successor->prev;
40083198:	1568      	l32i.n	a6, a5, 4
4008319a:	4599      	s32i.n	a9, a5, 16
4008319c:	1269      	s32i.n	a6, a2, 4
	node->next = successor;
4008319e:	0259      	s32i.n	a5, a2, 0
	successor->prev->next = node;
400831a0:	0629      	s32i.n	a2, a6, 0
	successor->prev = node;
400831a2:	1529      	s32i.n	a2, a5, 4
		}

		if (t == NULL) {
400831a4:	000886        	j	400831ca <z_add_timeout+0x116>
400831a7:	797000        	lsi	f0, a0, 0x1e4
			to->dticks -= t->dticks;
400831aa:	dbb0c0        	movt.s	f11, f0, b12
400831ad:	397720        	lsi	f2, a7, 228
400831b0:	dcc002        	addi	a0, a0, -36
400831b3:	668020        	lsi	f2, a0, 0x198
400831b6:	66d0c0        	lsi	f12, a0, 0x198
400831b9:	4279c0        	xorb	b7, b9, b12
400831bc:	5269      	s32i.n	a6, a2, 20
	return (node == list->tail) ? NULL : node->next;
400831be:	2315a7        	beq	a5, a10, 400831e5 <z_add_timeout+0x131>
400831c1:	0558      	l32i.n	a5, a5, 0
		for (t = first(); t != NULL; t = next(t)) {
400831c3:	fad556        	bnez	a5, 40083174 <z_add_timeout+0xc0>
400831c6:	0006c6        	j	400831e5 <z_add_timeout+0x131>
400831c9:	245200        	extui	a5, a0, 2, 3
	return list->head == list;
400831cc:	925700        	lsi	f0, a7, 0x248
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
400831cf:	470b      	addi.n	a4, a7, -1
400831d1:	a50815        	call4	40028254 <esp32_rom_gpio_matrix_out+0x1e348>
			z_clock_set_timeout(next_timeout(), false);
400831d4:	ffeb      	addi.n	a15, a15, 14
400831d6:	00a0b2        	movi	a11, 0
400831d9:	fe38e5        	call8	40081568 <z_clock_set_timeout>
	XTOS_RESTORE_INTLEVEL(key);
400831dc:	13e630        	wsr.ps	a3
400831df:	002010        	rsync
	LOCKED(&timeout_lock) {
400831e2:	000386        	j	400831f4 <z_add_timeout+0x140>
	node->prev = list->tail;
400831e5:	1458      	l32i.n	a5, a4, 4
	node->next = list;
400831e7:	0249      	s32i.n	a4, a2, 0
	node->prev = list->tail;
400831e9:	1259      	s32i.n	a5, a2, 4
	list->tail->next = node;
400831eb:	1458      	l32i.n	a5, a4, 4
400831ed:	0529      	s32i.n	a2, a5, 0
	list->tail = node;
400831ef:	1429      	s32i.n	a2, a4, 4
400831f1:	fff546        	j	400831ca <z_add_timeout+0x116>
		}
	}
}
400831f4:	f01d      	retw.n
	...

400831f8 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
400831f8:	004136        	entry	a1, 32
400831fb:	02ad      	mov.n	a10, a2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400831fd:	006320        	rsil	a2, 3
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
40083200:	0a98      	l32i.n	a9, a10, 0
	int ret = -EINVAL;
40083202:	a86c      	movi.n	a8, -22
		if (sys_dnode_is_linked(&to->node)) {
40083204:	004916        	beqz	a9, 4008320c <z_abort_timeout+0x14>
			remove_timeout(to);
40083207:	ffe4e5        	call8	40083054 <remove_timeout>
			ret = 0;
4008320a:	080c      	movi.n	a8, 0
	XTOS_RESTORE_INTLEVEL(key);
4008320c:	13e620        	wsr.ps	a2
4008320f:	002010        	rsync
		}
	}

	return ret;
}
40083212:	082d      	mov.n	a2, a8
40083214:	f01d      	retw.n
	...

40083218 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
40083218:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008321b:	006320        	rsil	a2, 3
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
4008321e:	ffe6e5        	call8	4008308c <next_timeout>
	XTOS_RESTORE_INTLEVEL(key);
40083221:	13e620        	wsr.ps	a2
40083224:	002010        	rsync
	}
	return ret;
}
40083227:	0a2d      	mov.n	a2, a10
40083229:	f01d      	retw.n
	...

4008322c <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
4008322c:	004136        	entry	a1, 32
4008322f:	743030        	extui	a3, a3, 0, 8
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083232:	006340        	rsil	a4, 3
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
40083235:	ffe565        	call8	4008308c <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
40083238:	00a0c2        	movi	a12, 0
4008323b:	01ca92        	addi	a9, a10, 1
4008323e:	01a082        	movi	a8, 1
40083241:	0c5d      	mov.n	a5, a12
40083243:	835890        	moveqz	a5, a8, a9
40083246:	059d      	mov.n	a9, a5
			      || (ticks < next_to);
40083248:	0122a7        	blt	a2, a10, 4008324d <z_set_timeout_expiry+0x21>
4008324b:	0c8d      	mov.n	a8, a12
4008324d:	208980        	or	a8, a9, a8
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
40083250:	0b6807        	bbci	a8, 0, 4008325f <z_set_timeout_expiry+0x33>
40083253:	082aa6        	blti	a10, 2, 4008325f <z_set_timeout_expiry+0x33>
			z_clock_set_timeout(ticks, is_idle);
40083256:	20b330        	or	a11, a3, a3
40083259:	20a220        	or	a10, a2, a2
4008325c:	fe30a5        	call8	40081568 <z_clock_set_timeout>
	XTOS_RESTORE_INTLEVEL(key);
4008325f:	13e640        	wsr.ps	a4
40083262:	002010        	rsync
		}
	}
}
40083265:	000090        	retw

40083268 <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
40083268:	004136        	entry	a1, 32
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
4008326b:	02ad      	mov.n	a10, a2
4008326d:	ff8a25        	call8	40082b10 <z_time_slice>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083270:	006330        	rsil	a3, 3
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
40083273:	f55d61        	l32r	a6, 400807e8 <_iram_text_start+0x298>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
		announce_remaining -= dt;
		t->dticks = 0;
40083276:	f4d641        	l32r	a4, 400805d0 <_iram_text_start+0x80>
	announce_remaining = ticks;
40083279:	0629      	s32i.n	a2, a6, 0
		t->dticks = 0;
4008327b:	f4d551        	l32r	a5, 400805d0 <_iram_text_start+0x80>
	while (first() != NULL && first()->dticks <= announce_remaining) {
4008327e:	000c86        	j	400832b4 <z_clock_announce+0x4c>
		curr_tick += dt;
40083281:	989a      	add.n	a9, a8, a9
40083283:	31bf80        	srai	a11, a8, 31
40083286:	1a0c      	movi.n	a10, 1
40083288:	013987        	bltu	a9, a8, 4008328d <z_clock_announce+0x25>
4008328b:	0a0c      	movi.n	a10, 0
4008328d:	ebea      	add.n	a14, a11, a14
4008328f:	aaea      	add.n	a10, a10, a14
40083291:	1da9      	s32i.n	a10, a13, 4
		announce_remaining -= dt;
40083293:	c08c80        	sub	a8, a12, a8
		t->dticks = 0;
40083296:	4249      	s32i.n	a4, a2, 16
40083298:	5259      	s32i.n	a5, a2, 20
		remove_timeout(t);
4008329a:	02ad      	mov.n	a10, a2
		curr_tick += dt;
4008329c:	0d99      	s32i.n	a9, a13, 0
		announce_remaining -= dt;
4008329e:	006682        	s32i	a8, a6, 0
		remove_timeout(t);
400832a1:	ffdb25        	call8	40083054 <remove_timeout>
	XTOS_RESTORE_INTLEVEL(key);
400832a4:	13e630        	wsr.ps	a3
400832a7:	002010        	rsync

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
400832aa:	2238      	l32i.n	a3, a2, 8
400832ac:	02ad      	mov.n	a10, a2
400832ae:	0003e0        	callx8	a3
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400832b1:	006330        	rsil	a3, 3
	return list->head == list;
400832b4:	f54e81        	l32r	a8, 400807ec <_iram_text_start+0x29c>
400832b7:	f54fd1        	l32r	a13, 400807f4 <_iram_text_start+0x2a4>
400832ba:	06c8      	l32i.n	a12, a6, 0
400832bc:	0828      	l32i.n	a2, a8, 0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
400832be:	31bfc0        	srai	a11, a12, 31
400832c1:	0d98      	l32i.n	a9, a13, 0
400832c3:	1de8      	l32i.n	a14, a13, 4
	while (first() != NULL && first()->dticks <= announce_remaining) {
400832c5:	129c      	beqz.n	a2, 400832da <z_clock_announce+0x72>
400832c7:	0f1287        	beq	a2, a8, 400832da <z_clock_announce+0x72>
400832ca:	52a8      	l32i.n	a10, a2, 20
400832cc:	4288      	l32i.n	a8, a2, 16
400832ce:	323ba7        	bltu	a11, a10, 40083304 <z_clock_announce+0x9c>
400832d1:	ac9ab7        	bne	a10, a11, 40083281 <z_clock_announce+0x19>
400832d4:	a9bc87        	bgeu	a12, a8, 40083281 <z_clock_announce+0x19>
400832d7:	000a46        	j	40083304 <z_clock_announce+0x9c>

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
	}

	curr_tick += announce_remaining;
400832da:	9c9a      	add.n	a9, a12, a9
400832dc:	01a022        	movi	a2, 1
400832df:	0139c7        	bltu	a9, a12, 400832e4 <z_clock_announce+0x7c>
400832e2:	020c      	movi.n	a2, 0
400832e4:	80bbe0        	add	a11, a11, a14
400832e7:	8022b0        	add	a2, a2, a11
400832ea:	1d29      	s32i.n	a2, a13, 4
	announce_remaining = 0;
400832ec:	020c      	movi.n	a2, 0
	curr_tick += announce_remaining;
400832ee:	0d99      	s32i.n	a9, a13, 0
	announce_remaining = 0;
400832f0:	0629      	s32i.n	a2, a6, 0

	z_clock_set_timeout(next_timeout(), false);
400832f2:	ffd9a5        	call8	4008308c <next_timeout>
400832f5:	02bd      	mov.n	a11, a2
400832f7:	fe2725        	call8	40081568 <z_clock_set_timeout>
	XTOS_RESTORE_INTLEVEL(key);
400832fa:	13e630        	wsr.ps	a3
400832fd:	002010        	rsync

	k_spin_unlock(&timeout_lock, key);
}
40083300:	f01d      	retw.n
40083302:	c00000        	sub	a0, a0, a0
		first()->dticks -= announce_remaining;
40083305:	c048      	l32i.n	a4, a0, 48
40083307:	01a052        	movi	a5, 1
4008330a:	023847        	bltu	a8, a4, 40083310 <z_clock_announce+0xa8>
4008330d:	00a052        	movi	a5, 0
40083310:	c0aab0        	sub	a10, a10, a11
40083313:	c0aa50        	sub	a10, a10, a5
40083316:	4249      	s32i.n	a4, a2, 16
40083318:	52a9      	s32i.n	a10, a2, 20
4008331a:	ffef06        	j	400832da <z_clock_announce+0x72>
4008331d:	000000        	ill

40083320 <z_tick_get>:

int64_t z_tick_get(void)
{
40083320:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083323:	006340        	rsil	a4, 3
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
40083326:	fe2a25        	call8	400815c8 <z_clock_elapsed>
40083329:	f53231        	l32r	a3, 400807f4 <_iram_text_start+0x2a4>
4008332c:	002322        	l32i	a2, a3, 0
4008332f:	012382        	l32i	a8, a3, 4
40083332:	802a20        	add	a2, a10, a2
40083335:	130c      	movi.n	a3, 1
40083337:	0132a7        	bltu	a2, a10, 4008333c <z_tick_get+0x1c>
4008333a:	030c      	movi.n	a3, 0
4008333c:	338a      	add.n	a3, a3, a8
	XTOS_RESTORE_INTLEVEL(key);
4008333e:	13e640        	wsr.ps	a4
40083341:	002010        	rsync
	}
	return t;
}
40083344:	f01d      	retw.n
	...

40083348 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
40083348:	004136        	entry	a1, 32
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
4008334b:	fffd65        	call8	40083320 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
4008334e:	0a2d      	mov.n	a2, a10
40083350:	f01d      	retw.n
	...

40083354 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
40083354:	004136        	entry	a1, 32
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
40083357:	120c      	movi.n	a2, 1
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083359:	006380        	rsil	a8, 3
	int32_t ticks = z_get_next_timeout_expiry();
4008335c:	ffeba5        	call8	40083218 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
4008335f:	013ae6        	bgei	a10, 3, 40083364 <idle+0x10>
40083362:	02ad      	mov.n	a10, a2
40083364:	02bd      	mov.n	a11, a2
40083366:	ffec65        	call8	4008322c <z_set_timeout_expiry>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
40083369:	0008a5        	call8	400833f4 <arch_cpu_idle>
4008336c:	fffa46        	j	40083359 <idle+0x5>
	...

40083370 <k_heap_init>:
#include <ksched.h>
#include <wait_q.h>
#include <init.h>

void k_heap_init(struct k_heap *h, void *mem, size_t bytes)
{
40083370:	004136        	entry	a1, 32
40083373:	0cc282        	addi	a8, a2, 12
40083376:	20a220        	or	a10, a2, a2
	list->head = (sys_dnode_t *)list;
40083379:	036282        	s32i	a8, a2, 12
	list->tail = (sys_dnode_t *)list;
4008337c:	4289      	s32i.n	a8, a2, 16
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
4008337e:	04cd      	mov.n	a12, a4
40083380:	03bd      	mov.n	a11, a3
40083382:	fdca25        	call8	40081024 <sys_heap_init>
}
40083385:	f01d      	retw.n
	...

40083388 <statics_init>:

static int statics_init(const struct device *unused)
{
40083388:	004136        	entry	a1, 32
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
4008338b:	f51b21        	l32r	a2, 400807f8 <_iram_text_start+0x2a8>
4008338e:	000386        	j	400833a0 <statics_init+0x18>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
40083391:	0222c2        	l32i	a12, a2, 8
40083394:	0122b2        	l32i	a11, a2, 4
40083397:	20a220        	or	a10, a2, a2
4008339a:	fffd65        	call8	40083370 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
4008339d:	14c222        	addi	a2, a2, 20
400833a0:	f51631        	l32r	a3, 400807f8 <_iram_text_start+0x2a8>
400833a3:	ea3237        	bltu	a2, a3, 40083391 <statics_init+0x9>
	}
	return 0;
}
400833a6:	020c      	movi.n	a2, 0
400833a8:	f01d      	retw.n
	...

400833ac <i2c_read>:
 * @retval 0 If successful.
 * @retval -EIO General input / output error.
 */
static inline int i2c_read(const struct device *dev, uint8_t *buf,
			   uint32_t num_bytes, uint16_t addr)
{
400833ac:	006136        	entry	a1, 48
	struct i2c_msg msg;

	msg.buf = buf;
	msg.len = num_bytes;
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
400833af:	380c      	movi.n	a8, 3
{
400833b1:	02ad      	mov.n	a10, a2
400833b3:	05dd      	mov.n	a13, a5
	msg.buf = buf;
400833b5:	0139      	s32i.n	a3, a1, 0
	msg.len = num_bytes;
400833b7:	1149      	s32i.n	a4, a1, 4
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
400833b9:	084182        	s8i	a8, a1, 8
	return api->transfer(dev, msgs, num_msgs, addr);
400833bc:	2288      	l32i.n	a8, a2, 8
400833be:	1c0c      	movi.n	a12, 1
400833c0:	1888      	l32i.n	a8, a8, 4
400833c2:	20b110        	or	a11, a1, a1
400833c5:	0008e0        	callx8	a8

	return i2c_transfer(dev, &msg, 1, addr);
}
400833c8:	0a2d      	mov.n	a2, a10
400833ca:	f01d      	retw.n

400833cc <i2c_write>:
{
400833cc:	006136        	entry	a1, 48
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
400833cf:	280c      	movi.n	a8, 2
{
400833d1:	02ad      	mov.n	a10, a2
400833d3:	05dd      	mov.n	a13, a5
	msg.buf = (uint8_t *)buf;
400833d5:	0139      	s32i.n	a3, a1, 0
	msg.len = num_bytes;
400833d7:	1149      	s32i.n	a4, a1, 4
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
400833d9:	084182        	s8i	a8, a1, 8
	return api->transfer(dev, msgs, num_msgs, addr);
400833dc:	2288      	l32i.n	a8, a2, 8
400833de:	1c0c      	movi.n	a12, 1
400833e0:	1888      	l32i.n	a8, a8, 4
400833e2:	20b110        	or	a11, a1, a1
400833e5:	0008e0        	callx8	a8
}
400833e8:	0a2d      	mov.n	a2, a10
400833ea:	f01d      	retw.n

400833ec <_ConfigAbsSyms>:

/* file is auto-generated, do not modify ! */

#include <toolchain.h>

GEN_ABS_SYM_BEGIN (_ConfigAbsSyms)
400833ec:	004136        	entry	a1, 32
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_BOOTLOADER_SRAM_SIZE, 16);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
400833ef:	f01d      	retw.n
400833f1:	000000        	ill

400833f4 <arch_cpu_idle>:
 */

#include <tracing/tracing.h>

void arch_cpu_idle(void)
{
400833f4:	004136        	entry	a1, 32
	sys_trace_idle();
	__asm__ volatile ("waiti 0");
400833f7:	007000        	waiti	0
}
400833fa:	f01d      	retw.n

400833fc <z_xtensa_dump_stack>:
{
400833fc:	004136        	entry	a1, 32
}
400833ff:	f01d      	retw.n
40083401:	000000        	ill

40083404 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
40083404:	004136        	entry	a1, 32
	while ((*s1 == *s2) && (*s1 != '\0')) {
40083407:	0000c6        	j	4008340e <strcmp+0xa>
		s1++;
4008340a:	221b      	addi.n	a2, a2, 1
		s2++;
4008340c:	331b      	addi.n	a3, a3, 1
	while ((*s1 == *s2) && (*s1 != '\0')) {
4008340e:	000282        	l8ui	a8, a2, 0
40083411:	000392        	l8ui	a9, a3, 0
40083414:	029897        	bne	a8, a9, 4008341a <strcmp+0x16>
40083417:	fef856        	bnez	a8, 4008340a <strcmp+0x6>
	}

	return *s1 - *s2;
}
4008341a:	c02890        	sub	a2, a8, a9
4008341d:	f01d      	retw.n
	...

40083420 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
40083420:	004136        	entry	a1, 32
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
40083423:	74b030        	extui	a11, a3, 0, 8

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
40083426:	028d      	mov.n	a8, a2
40083428:	000286        	j	40083436 <memset+0x16>
4008342b:	441600        	extui	a1, a0, 6, 5
		if (n == 0) {
4008342e:	48b204        	lsi	f0, a2, 0x120
			return buf;
		}
		*(d_byte++) = c_byte;
40083431:	440b00        	extui	a0, a0, 11, 5
		n--;
40083434:	881b      	addi.n	a8, a8, 1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
40083436:	149080        	extui	a9, a8, 0, 2
40083439:	08cd      	mov.n	a12, a8
4008343b:	fed956        	bnez	a9, 4008342c <memset+0xc>
	};

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
4008343e:	743030        	extui	a3, a3, 0, 8

	c_word |= c_word << 8;
40083441:	11a380        	slli	a10, a3, 8
40083444:	203a30        	or	a3, a10, a3
	c_word |= c_word << 16;
40083447:	11a300        	slli	a10, a3, 16
4008344a:	203a30        	or	a3, a10, a3
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
4008344d:	41a240        	srli	a10, a4, 2
40083450:	11dae0        	slli	a13, a10, 2
40083453:	ed8a      	add.n	a14, a13, a8
40083455:	0000c6        	j	4008345c <memset+0x3c>
		*(d_word++) = c_word;
40083458:	0839      	s32i.n	a3, a8, 0
		n -= sizeof(mem_word_t);
4008345a:	884b      	addi.n	a8, a8, 4
	while (n >= sizeof(mem_word_t)) {
4008345c:	f898e7        	bne	a8, a14, 40083458 <memset+0x38>
4008345f:	11aae0        	slli	a10, a10, 2
40083462:	c044a0        	sub	a4, a4, a10
40083465:	000206        	j	40083471 <memset+0x51>
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
		*(d_byte++) = c_byte;
40083468:	39da      	add.n	a3, a9, a13
4008346a:	3c3a      	add.n	a3, a12, a3
4008346c:	0043b2        	s8i	a11, a3, 0
		n--;
4008346f:	991b      	addi.n	a9, a9, 1
	while (n > 0) {
40083471:	f39497        	bne	a4, a9, 40083468 <memset+0x48>
	}

	return buf;
}
40083474:	f01d      	retw.n
	...

40083478 <_stdout_hook_default>:
{
40083478:	004136        	entry	a1, 32
}
4008347b:	f27c      	movi.n	a2, -1
4008347d:	f01d      	retw.n
	...

40083480 <gpio_esp32_port_get_raw>:
{
40083480:	004136        	entry	a1, 32
	*value = *data->port.input_reg;
40083483:	3288      	l32i.n	a8, a2, 12
}
40083485:	020c      	movi.n	a2, 0
	*value = *data->port.input_reg;
40083487:	4888      	l32i.n	a8, a8, 16
40083489:	0020c0        	memw
4008348c:	0888      	l32i.n	a8, a8, 0
4008348e:	0389      	s32i.n	a8, a3, 0
}
40083490:	f01d      	retw.n
	...

40083494 <gpio_esp32_port_set_masked_raw>:
{
40083494:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = port->data;
40083497:	3288      	l32i.n	a8, a2, 12
40083499:	0063a0        	rsil	a10, 3
	*data->port.output_reg = (*data->port.output_reg & ~mask)
4008349c:	5888      	l32i.n	a8, a8, 20
4008349e:	0020c0        	memw
400834a1:	0898      	l32i.n	a9, a8, 0
				 | (mask & value);
400834a3:	304940        	xor	a4, a9, a4
400834a6:	104430        	and	a4, a4, a3
400834a9:	304490        	xor	a4, a4, a9
	*data->port.output_reg = (*data->port.output_reg & ~mask)
400834ac:	0020c0        	memw
400834af:	0849      	s32i.n	a4, a8, 0
	XTOS_RESTORE_INTLEVEL(key);
400834b1:	13e6a0        	wsr.ps	a10
400834b4:	002010        	rsync
}
400834b7:	020c      	movi.n	a2, 0
400834b9:	f01d      	retw.n
	...

400834bc <gpio_esp32_port_set_bits_raw>:
{
400834bc:	004136        	entry	a1, 32
	*data->port.set_reg = pins;
400834bf:	3288      	l32i.n	a8, a2, 12
}
400834c1:	020c      	movi.n	a2, 0
	*data->port.set_reg = pins;
400834c3:	2888      	l32i.n	a8, a8, 8
400834c5:	0020c0        	memw
400834c8:	0839      	s32i.n	a3, a8, 0
}
400834ca:	f01d      	retw.n

400834cc <gpio_esp32_port_clear_bits_raw>:
{
400834cc:	004136        	entry	a1, 32
	*data->port.clear_reg = pins;
400834cf:	3288      	l32i.n	a8, a2, 12
}
400834d1:	020c      	movi.n	a2, 0
	*data->port.clear_reg = pins;
400834d3:	3888      	l32i.n	a8, a8, 12
400834d5:	0020c0        	memw
400834d8:	0839      	s32i.n	a3, a8, 0
}
400834da:	f01d      	retw.n

400834dc <gpio_esp32_port_toggle_bits>:
{
400834dc:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = port->data;
400834df:	3288      	l32i.n	a8, a2, 12
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400834e1:	0063a0        	rsil	a10, 3
	*data->port.output_reg = (*data->port.output_reg ^ pins);
400834e4:	5898      	l32i.n	a9, a8, 20
400834e6:	0020c0        	memw
400834e9:	0988      	l32i.n	a8, a9, 0
400834eb:	308830        	xor	a8, a8, a3
400834ee:	0020c0        	memw
400834f1:	0989      	s32i.n	a8, a9, 0
	XTOS_RESTORE_INTLEVEL(key);
400834f3:	13e6a0        	wsr.ps	a10
400834f6:	002010        	rsync
}
400834f9:	020c      	movi.n	a2, 0
400834fb:	f01d      	retw.n
400834fd:	000000        	ill

40083500 <gpio_esp32_manage_callback>:
{
40083500:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = dev->data;
40083503:	3288      	l32i.n	a8, a2, 12
{
40083505:	744040        	extui	a4, a4, 0, 8
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
40083508:	9828      	l32i.n	a2, a8, 36
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
4008350a:	090c      	movi.n	a9, 0
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
4008350c:	42cc      	bnez.n	a2, 40083514 <gpio_esp32_manage_callback+0x14>
4008350e:	000fc6        	j	40083551 <gpio_esp32_manage_callback+0x51>
40083511:	0a2d00        	add.s	f2, f13, f0
40083514:	209327        	bne	a3, a2, 40083538 <gpio_esp32_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
40083517:	0328      	l32i.n	a2, a3, 0
40083519:	b9cc      	bnez.n	a9, 40083528 <gpio_esp32_manage_callback+0x28>
4008351b:	a898      	l32i.n	a9, a8, 40
	list->head = node;
4008351d:	9829      	s32i.n	a2, a8, 36
Z_GENLIST_REMOVE(slist, snode)
4008351f:	0e9397        	bne	a3, a9, 40083531 <gpio_esp32_manage_callback+0x31>
	list->tail = node;
40083522:	a829      	s32i.n	a2, a8, 40
40083524:	000246        	j	40083531 <gpio_esp32_manage_callback+0x31>
40083527:	092900        	l32e	a0, a9, -56
Z_GENLIST_REMOVE(slist, snode)
4008352a:	a828      	l32i.n	a2, a8, 40
4008352c:	019327        	bne	a3, a2, 40083531 <gpio_esp32_manage_callback+0x31>
	list->tail = node;
4008352f:	a899      	s32i.n	a9, a8, 40
	parent->next = child;
40083531:	020c      	movi.n	a2, 0
40083533:	0329      	s32i.n	a2, a3, 0
40083535:	000606        	j	40083551 <gpio_esp32_manage_callback+0x51>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
40083538:	02a8      	l32i.n	a10, a2, 0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
4008353a:	029d      	mov.n	a9, a2
4008353c:	fd2a56        	bnez	a10, 40083512 <gpio_esp32_manage_callback+0x12>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
			if (!set) {
				return -EINVAL;
4008353f:	a26c      	movi.n	a2, -22
			if (!set) {
40083541:	017416        	beqz	a4, 4008355c <gpio_esp32_manage_callback+0x5c>
Z_GENLIST_PREPEND(slist, snode)
40083544:	9828      	l32i.n	a2, a8, 36
	parent->next = child;
40083546:	0329      	s32i.n	a2, a3, 0
Z_GENLIST_PREPEND(slist, snode)
40083548:	a828      	l32i.n	a2, a8, 40
	list->head = node;
4008354a:	9839      	s32i.n	a3, a8, 36
Z_GENLIST_PREPEND(slist, snode)
4008354c:	42cc      	bnez.n	a2, 40083554 <gpio_esp32_manage_callback+0x54>
4008354e:	000206        	j	4008355a <gpio_esp32_manage_callback+0x5a>
			}
		}
	}

	if (set) {
40083551:	fef456        	bnez	a4, 40083544 <gpio_esp32_manage_callback+0x44>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
40083554:	020c      	movi.n	a2, 0
40083556:	000086        	j	4008355c <gpio_esp32_manage_callback+0x5c>
40083559:	a83900        	lsi	f0, a9, 0x2a0
}
4008355c:	f01d      	retw.n
	...

40083560 <gpio_esp32_fire_callbacks>:
{
40083560:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = device->data;
40083563:	3238      	l32i.n	a3, a2, 12
	uint32_t irq_status = *data->port.irq_status_reg;
40083565:	6348      	l32i.n	a4, a3, 24
	*data->port.irq_ack_reg = irq_status;
40083567:	7388      	l32i.n	a8, a3, 28
	uint32_t irq_status = *data->port.irq_status_reg;
40083569:	0020c0        	memw
4008356c:	0448      	l32i.n	a4, a4, 0
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
4008356e:	93b8      	l32i.n	a11, a3, 36
	*data->port.irq_ack_reg = irq_status;
40083570:	0020c0        	memw
40083573:	0849      	s32i.n	a4, a8, 0
40083575:	8b9c      	beqz.n	a11, 40083591 <gpio_esp32_fire_callbacks+0x31>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
40083577:	0b38      	l32i.n	a3, a11, 0
		if (cb->pin_mask & pins) {
40083579:	2bc8      	l32i.n	a12, a11, 8
4008357b:	10c4c0        	and	a12, a4, a12
4008357e:	6c8c      	beqz.n	a12, 40083588 <gpio_esp32_fire_callbacks+0x28>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
40083580:	1b88      	l32i.n	a8, a11, 4
40083582:	20a220        	or	a10, a2, a2
40083585:	0008e0        	callx8	a8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
40083588:	538c      	beqz.n	a3, 40083591 <gpio_esp32_fire_callbacks+0x31>
4008358a:	03bd      	mov.n	a11, a3
4008358c:	0338      	l32i.n	a3, a3, 0
4008358e:	fff9c6        	j	40083579 <gpio_esp32_fire_callbacks+0x19>
}
40083591:	f01d      	retw.n
	...

40083594 <i2c_esp32_connect_irq_0>:
{
40083594:	004136        	entry	a1, 32
}
40083597:	f01d      	retw.n
40083599:	000000        	ill

4008359c <i2c_esp32_connect_irq_1>:
4008359c:	004136        	entry	a1, 32
4008359f:	f01d      	retw.n
400835a1:	000000        	ill

400835a4 <uart_esp32_poll_in>:
{
400835a4:	004136        	entry	a1, 32
	if (UART_RXFIFO_COUNT(DEV_BASE(dev)->status) == 0) {
400835a7:	1228      	l32i.n	a2, a2, 4
400835a9:	0298      	l32i.n	a9, a2, 0
		return -1;
400835ab:	f27c      	movi.n	a2, -1
	if (UART_RXFIFO_COUNT(DEV_BASE(dev)->status) == 0) {
400835ad:	0020c0        	memw
400835b0:	7988      	l32i.n	a8, a9, 28
400835b2:	748080        	extui	a8, a8, 0, 8
400835b5:	888c      	beqz.n	a8, 400835c1 <uart_esp32_poll_in+0x1d>
	*p_char = DEV_BASE(dev)->fifo;
400835b7:	0020c0        	memw
400835ba:	0928      	l32i.n	a2, a9, 0
400835bc:	004322        	s8i	a2, a3, 0
	return 0;
400835bf:	020c      	movi.n	a2, 0
}
400835c1:	f01d      	retw.n
	...

400835c4 <uart_esp32_poll_out>:
{
400835c4:	004136        	entry	a1, 32
	while (UART_TXFIFO_COUNT(DEV_BASE(dev)->status) >= UART_FIFO_LIMIT) {
400835c7:	1288      	l32i.n	a8, a2, 4
{
400835c9:	743030        	extui	a3, a3, 0, 8
	while (UART_TXFIFO_COUNT(DEV_BASE(dev)->status) >= UART_FIFO_LIMIT) {
400835cc:	0898      	l32i.n	a9, a8, 0
400835ce:	7ea0a2        	movi	a10, 126
400835d1:	0020c0        	memw
400835d4:	7988      	l32i.n	a8, a9, 28
400835d6:	758080        	extui	a8, a8, 16, 8
400835d9:	f43a87        	bltu	a10, a8, 400835d1 <uart_esp32_poll_out+0xd>
	DEV_BASE(dev)->fifo = (uint32_t)c;
400835dc:	0020c0        	memw
400835df:	0939      	s32i.n	a3, a9, 0
}
400835e1:	f01d      	retw.n
	...

400835e4 <uart_esp32_err_check>:
{
400835e4:	004136        	entry	a1, 32
	uint32_t err = UART_GET_PARITY_ERR(DEV_BASE(dev)->int_st)
400835e7:	1228      	l32i.n	a2, a2, 4
400835e9:	0288      	l32i.n	a8, a2, 0
400835eb:	0020c0        	memw
400835ee:	2828      	l32i.n	a2, a8, 8
		    | UART_GET_FRAME_ERR(DEV_BASE(dev)->int_st);
400835f0:	0020c0        	memw
400835f3:	2888      	l32i.n	a8, a8, 8
	uint32_t err = UART_GET_PARITY_ERR(DEV_BASE(dev)->int_st)
400835f5:	412220        	srli	a2, a2, 2
		    | UART_GET_FRAME_ERR(DEV_BASE(dev)->int_st);
400835f8:	418380        	srli	a8, a8, 3
400835fb:	202280        	or	a2, a2, a8
}
400835fe:	042020        	extui	a2, a2, 0, 1
40083601:	f01d      	retw.n
	...

40083604 <uart_esp32_config_get>:
{
40083604:	004136        	entry	a1, 32
	cfg->baudrate = data->uart_config.baudrate;
40083607:	3288      	l32i.n	a8, a2, 12
	if (UART_GET_PARITY_EN(DEV_BASE(dev)->conf0)) {
40083609:	1228      	l32i.n	a2, a2, 4
	cfg->baudrate = data->uart_config.baudrate;
4008360b:	0888      	l32i.n	a8, a8, 0
		cfg->parity = UART_CFG_PARITY_NONE;
4008360d:	090c      	movi.n	a9, 0
	cfg->baudrate = data->uart_config.baudrate;
4008360f:	0389      	s32i.n	a8, a3, 0
	if (UART_GET_PARITY_EN(DEV_BASE(dev)->conf0)) {
40083611:	0288      	l32i.n	a8, a2, 0
40083613:	0020c0        	memw
40083616:	082822        	l32i	a2, a8, 32
40083619:	076217        	bbci	a2, 1, 40083624 <uart_esp32_config_get+0x20>
		cfg->parity = UART_GET_PARITY(DEV_BASE(dev)->conf0);
4008361c:	0020c0        	memw
4008361f:	8898      	l32i.n	a9, a8, 32
40083621:	049090        	extui	a9, a9, 0, 1
40083624:	044392        	s8i	a9, a3, 4
	cfg->stop_bits = UART_GET_STOP_BITS(DEV_BASE(dev)->conf0);
40083627:	0020c0        	memw
4008362a:	8898      	l32i.n	a9, a8, 32
4008362c:	149490        	extui	a9, a9, 4, 2
4008362f:	054392        	s8i	a9, a3, 5
	cfg->data_bits = UART_GET_DATA_BITS(DEV_BASE(dev)->conf0);
40083632:	0020c0        	memw
40083635:	082892        	l32i	a9, a8, 32
40083638:	149290        	extui	a9, a9, 2, 2
4008363b:	064392        	s8i	a9, a3, 6
	if (UART_GET_TX_FLOW(DEV_BASE(dev)->conf0)) {
4008363e:	0020c0        	memw
40083641:	8828      	l32i.n	a2, a8, 32
40083643:	0562f7        	bbci	a2, 15, 4008364c <uart_esp32_config_get+0x48>
		cfg->flow_ctrl = UART_CFG_FLOW_CTRL_RTS_CTS;
40083646:	01a022        	movi	a2, 1
40083649:	074322        	s8i	a2, a3, 7
	if (UART_GET_RX_FLOW(DEV_BASE(dev)->conf1)) {
4008364c:	0020c0        	memw
4008364f:	9828      	l32i.n	a2, a8, 36
40083651:	047277        	bbci	a2, 23, 40083659 <uart_esp32_config_get+0x55>
		cfg->flow_ctrl = UART_CFG_FLOW_CTRL_DTR_DSR;
40083654:	220c      	movi.n	a2, 2
40083656:	074322        	s8i	a2, a3, 7
}
40083659:	020c      	movi.n	a2, 0
4008365b:	f01d      	retw.n
4008365d:	000000        	ill

40083660 <arch_system_halt>:
{
40083660:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083663:	006380        	rsil	a8, 3
	for (;;) {
40083666:	ffff06        	j	40083666 <arch_system_halt+0x6>
40083669:	000000        	ill

4008366c <sys_dlist_remove>:
{
4008366c:	004136        	entry	a1, 32
	node->prev->next = node->next;
4008366f:	0288      	l32i.n	a8, a2, 0
40083671:	1298      	l32i.n	a9, a2, 4
40083673:	0989      	s32i.n	a8, a9, 0
	node->next->prev = node->prev;
40083675:	1899      	s32i.n	a9, a8, 4
	node->next = NULL;
40083677:	080c      	movi.n	a8, 0
40083679:	0289      	s32i.n	a8, a2, 0
	node->prev = NULL;
4008367b:	1289      	s32i.n	a8, a2, 4
	sys_dnode_init(node);
}
4008367d:	f01d      	retw.n
	...

40083680 <z_priq_dumb_best>:
{
40083680:	004136        	entry	a1, 32
	return list->head == list;
40083683:	0288      	l32i.n	a8, a2, 0
	if (n != NULL) {
40083685:	188c      	beqz.n	a8, 4008368a <z_priq_dumb_best+0xa>
40083687:	019287        	bne	a2, a8, 4008368c <z_priq_dumb_best+0xc>
	struct k_thread *thread = NULL;
4008368a:	080c      	movi.n	a8, 0
}
4008368c:	082d      	mov.n	a2, a8
4008368e:	f01d      	retw.n

40083690 <z_impl_k_sem_init>:
{
40083690:	004136        	entry	a1, 32
	CHECKIF(limit == 0U || initial_count > limit) {
40083693:	180c      	movi.n	a8, 1
40083695:	090c      	movi.n	a9, 0
40083697:	938940        	movnez	a8, a9, a4
4008369a:	748080        	extui	a8, a8, 0, 8
4008369d:	0f9897        	bne	a8, a9, 400836b0 <z_impl_k_sem_init+0x20>
400836a0:	0c3437        	bltu	a4, a3, 400836b0 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
400836a3:	2239      	s32i.n	a3, a2, 8
	sem->limit = limit;
400836a5:	3249      	s32i.n	a4, a2, 12
	list->head = (sys_dnode_t *)list;
400836a7:	0229      	s32i.n	a2, a2, 0
	list->tail = (sys_dnode_t *)list;
400836a9:	1229      	s32i.n	a2, a2, 4
	return 0;
400836ab:	082d      	mov.n	a2, a8
400836ad:	000046        	j	400836b2 <z_impl_k_sem_init+0x22>
		return -EINVAL;
400836b0:	a26c      	movi.n	a2, -22
}
400836b2:	f01d      	retw.n

400836b4 <_OffsetAbsSyms>:
/*
 * The final link step uses the symbol _OffsetAbsSyms to force the linkage of
 * offsets.o into the ELF image.
 */

GEN_ABS_SYM_BEGIN(_OffsetAbsSyms)
400836b4:	004136        	entry	a1, 32
/* size of the struct k_thread structure without save area for coproc regs */
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF,
		 sizeof(struct k_thread) - sizeof(tCoopCoprocReg) -
			 sizeof(tPreempCoprocReg) + XT_CP_DESCR_SIZE);

GEN_ABS_SYM_END
400836b7:	f01d      	retw.n
400836b9:	000000        	ill

400836bc <__udivdi3>:
400836bc:	004136        	entry	a1, 32
400836bf:	03dd      	mov.n	a13, a3
400836c1:	04ad      	mov.n	a10, a4
400836c3:	053d      	mov.n	a3, a5
400836c5:	02cd      	mov.n	a12, a2
400836c7:	0d9d      	mov.n	a9, a13
400836c9:	184556        	bnez	a5, 40083851 <__udivdi3+0x195>
400836cc:	023d47        	bltu	a13, a4, 400836d2 <__udivdi3+0x16>
400836cf:	002086        	j	40083755 <__udivdi3+0x99>
400836d2:	40f420        	nsau	a2, a4
400836d5:	c29c      	beqz.n	a2, 400836f5 <__udivdi3+0x39>
400836d7:	608020        	neg	a8, a2
400836da:	400800        	ssr	a8
400836dd:	9180c0        	srl	a8, a12
400836e0:	401200        	ssl	a2
400836e3:	a19d00        	sll	a9, a13
400836e6:	401200        	ssl	a2
400836e9:	a1a400        	sll	a10, a4
400836ec:	209890        	or	a9, a8, a9
400836ef:	401200        	ssl	a2
400836f2:	a1cc00        	sll	a12, a12
400836f5:	f580a0        	extui	a8, a10, 16, 16
400836f8:	e2d980        	remu	a13, a9, a8
400836fb:	f440a0        	extui	a4, a10, 0, 16
400836fe:	c29980        	quou	a9, a9, a8
40083701:	11dd00        	slli	a13, a13, 16
40083704:	f5b0c0        	extui	a11, a12, 16, 16
40083707:	822490        	mull	a2, a4, a9
4008370a:	20bdb0        	or	a11, a13, a11
4008370d:	13bb27        	bgeu	a11, a2, 40083724 <__udivdi3+0x68>
40083710:	bbaa      	add.n	a11, a11, a10
40083712:	590b      	addi.n	a5, a9, -1
40083714:	0a3ba7        	bltu	a11, a10, 40083722 <__udivdi3+0x66>
40083717:	07bb27        	bgeu	a11, a2, 40083722 <__udivdi3+0x66>
4008371a:	fec992        	addi	a9, a9, -2
4008371d:	bbaa      	add.n	a11, a11, a10
4008371f:	000046        	j	40083724 <__udivdi3+0x68>
40083722:	059d      	mov.n	a9, a5
40083724:	c0bb20        	sub	a11, a11, a2
40083727:	e22b80        	remu	a2, a11, a8
4008372a:	c2bb80        	quou	a11, a11, a8
4008372d:	112200        	slli	a2, a2, 16
40083730:	f4c0c0        	extui	a12, a12, 0, 16
40083733:	8244b0        	mull	a4, a4, a11
40083736:	20c2c0        	or	a12, a2, a12
40083739:	0fbc47        	bgeu	a12, a4, 4008374c <__udivdi3+0x90>
4008373c:	caca      	add.n	a12, a10, a12
4008373e:	ffcb22        	addi	a2, a11, -1
40083741:	05bc47        	bgeu	a12, a4, 4008374a <__udivdi3+0x8e>
40083744:	fecbb2        	addi	a11, a11, -2
40083747:	01bca7        	bgeu	a12, a10, 4008374c <__udivdi3+0x90>
4008374a:	02bd      	mov.n	a11, a2
4008374c:	118900        	slli	a8, a9, 16
4008374f:	2088b0        	or	a8, a8, a11
40083752:	007406        	j	40083926 <__udivdi3+0x26a>
40083755:	34cc      	bnez.n	a4, 4008375c <__udivdi3+0xa0>
40083757:	130c      	movi.n	a3, 1
40083759:	c2a340        	quou	a10, a3, a4
4008375c:	40fa50        	nsau	a5, a10
4008375f:	c08da0        	sub	a8, a13, a10
40083762:	130c      	movi.n	a3, 1
40083764:	089516        	beqz	a5, 400837f1 <__udivdi3+0x135>
40083767:	042c      	movi.n	a4, 32
40083769:	c04450        	sub	a4, a4, a5
4008376c:	401500        	ssl	a5
4008376f:	a1aa00        	sll	a10, a10
40083772:	400400        	ssr	a4
40083775:	9130d0        	srl	a3, a13
40083778:	401500        	ssl	a5
4008377b:	a18d00        	sll	a8, a13
4008377e:	400400        	ssr	a4
40083781:	914020        	srl	a4, a2
40083784:	401500        	ssl	a5
40083787:	a1c200        	sll	a12, a2
4008378a:	f520a0        	extui	a2, a10, 16, 16
4008378d:	204480        	or	a4, a4, a8
40083790:	e2b320        	remu	a11, a3, a2
40083793:	f480a0        	extui	a8, a10, 0, 16
40083796:	c23320        	quou	a3, a3, a2
40083799:	11bb00        	slli	a11, a11, 16
4008379c:	f59040        	extui	a9, a4, 16, 16
4008379f:	825830        	mull	a5, a8, a3
400837a2:	209b90        	or	a9, a11, a9
400837a5:	13b957        	bgeu	a9, a5, 400837bc <__udivdi3+0x100>
400837a8:	99aa      	add.n	a9, a9, a10
400837aa:	b30b      	addi.n	a11, a3, -1
400837ac:	0a39a7        	bltu	a9, a10, 400837ba <__udivdi3+0xfe>
400837af:	07b957        	bgeu	a9, a5, 400837ba <__udivdi3+0xfe>
400837b2:	fec332        	addi	a3, a3, -2
400837b5:	99aa      	add.n	a9, a9, a10
400837b7:	000046        	j	400837bc <__udivdi3+0x100>
400837ba:	0b3d      	mov.n	a3, a11
400837bc:	c09950        	sub	a9, a9, a5
400837bf:	e2b920        	remu	a11, a9, a2
400837c2:	c29920        	quou	a9, a9, a2
400837c5:	822890        	mull	a2, a8, a9
400837c8:	11bb00        	slli	a11, a11, 16
400837cb:	f48040        	extui	a8, a4, 0, 16
400837ce:	208b80        	or	a8, a11, a8
400837d1:	13b827        	bgeu	a8, a2, 400837e8 <__udivdi3+0x12c>
400837d4:	88aa      	add.n	a8, a8, a10
400837d6:	490b      	addi.n	a4, a9, -1
400837d8:	0a38a7        	bltu	a8, a10, 400837e6 <__udivdi3+0x12a>
400837db:	07b827        	bgeu	a8, a2, 400837e6 <__udivdi3+0x12a>
400837de:	fec992        	addi	a9, a9, -2
400837e1:	88aa      	add.n	a8, a8, a10
400837e3:	000046        	j	400837e8 <__udivdi3+0x12c>
400837e6:	049d      	mov.n	a9, a4
400837e8:	113300        	slli	a3, a3, 16
400837eb:	c08820        	sub	a8, a8, a2
400837ee:	203390        	or	a3, a3, a9
400837f1:	f550a0        	extui	a5, a10, 16, 16
400837f4:	e2b850        	remu	a11, a8, a5
400837f7:	f440a0        	extui	a4, a10, 0, 16
400837fa:	c28850        	quou	a8, a8, a5
400837fd:	11bb00        	slli	a11, a11, 16
40083800:	f590c0        	extui	a9, a12, 16, 16
40083803:	822480        	mull	a2, a4, a8
40083806:	209b90        	or	a9, a11, a9
40083809:	13b927        	bgeu	a9, a2, 40083820 <__udivdi3+0x164>
4008380c:	99aa      	add.n	a9, a9, a10
4008380e:	b80b      	addi.n	a11, a8, -1
40083810:	0a39a7        	bltu	a9, a10, 4008381e <__udivdi3+0x162>
40083813:	07b927        	bgeu	a9, a2, 4008381e <__udivdi3+0x162>
40083816:	fec882        	addi	a8, a8, -2
40083819:	99aa      	add.n	a9, a9, a10
4008381b:	000046        	j	40083820 <__udivdi3+0x164>
4008381e:	0b8d      	mov.n	a8, a11
40083820:	c09920        	sub	a9, a9, a2
40083823:	e22950        	remu	a2, a9, a5
40083826:	c29950        	quou	a9, a9, a5
40083829:	112200        	slli	a2, a2, 16
4008382c:	f4c0c0        	extui	a12, a12, 0, 16
4008382f:	824490        	mull	a4, a4, a9
40083832:	20c2c0        	or	a12, a2, a12
40083835:	0fbc47        	bgeu	a12, a4, 40083848 <__udivdi3+0x18c>
40083838:	caca      	add.n	a12, a10, a12
4008383a:	ffc922        	addi	a2, a9, -1
4008383d:	053ca7        	bltu	a12, a10, 40083846 <__udivdi3+0x18a>
40083840:	fec992        	addi	a9, a9, -2
40083843:	013c47        	bltu	a12, a4, 40083848 <__udivdi3+0x18c>
40083846:	029d      	mov.n	a9, a2
40083848:	118800        	slli	a8, a8, 16
4008384b:	208890        	or	a8, a8, a9
4008384e:	003506        	j	40083926 <__udivdi3+0x26a>
40083851:	030c      	movi.n	a3, 0
40083853:	038d      	mov.n	a8, a3
40083855:	02bd57        	bgeu	a13, a5, 4008385b <__udivdi3+0x19f>
40083858:	003286        	j	40083926 <__udivdi3+0x26a>
4008385b:	40f5b0        	nsau	a11, a5
4008385e:	179b37        	bne	a11, a3, 40083879 <__udivdi3+0x1bd>
40083861:	180c      	movi.n	a8, 1
40083863:	0235d7        	bltu	a5, a13, 40083869 <__udivdi3+0x1ad>
40083866:	208bb0        	or	a8, a11, a11
40083869:	130c      	movi.n	a3, 1
4008386b:	01b247        	bgeu	a2, a4, 40083870 <__udivdi3+0x1b4>
4008386e:	030c      	movi.n	a3, 0
40083870:	208830        	or	a8, a8, a3
40083873:	748080        	extui	a8, a8, 0, 8
40083876:	002a86        	j	40083924 <__udivdi3+0x268>
40083879:	092c      	movi.n	a9, 32
4008387b:	c099b0        	sub	a9, a9, a11
4008387e:	400900        	ssr	a9
40083881:	913040        	srl	a3, a4
40083884:	401b00        	ssl	a11
40083887:	a15500        	sll	a5, a5
4008388a:	205350        	or	a5, a3, a5
4008388d:	400900        	ssr	a9
40083890:	9180d0        	srl	a8, a13
40083893:	401b00        	ssl	a11
40083896:	a13d00        	sll	a3, a13
40083899:	400900        	ssr	a9
4008389c:	919020        	srl	a9, a2
4008389f:	f5d050        	extui	a13, a5, 16, 16
400838a2:	203930        	or	a3, a9, a3
400838a5:	f4c050        	extui	a12, a5, 0, 16
400838a8:	e298d0        	remu	a9, a8, a13
400838ab:	c288d0        	quou	a8, a8, a13
400838ae:	119900        	slli	a9, a9, 16
400838b1:	f5e030        	extui	a14, a3, 16, 16
400838b4:	82ac80        	mull	a10, a12, a8
400838b7:	2099e0        	or	a9, a9, a14
400838ba:	401b00        	ssl	a11
400838bd:	a14400        	sll	a4, a4
400838c0:	14b9a7        	bgeu	a9, a10, 400838d8 <__udivdi3+0x21c>
400838c3:	995a      	add.n	a9, a9, a5
400838c5:	e80b      	addi.n	a14, a8, -1
400838c7:	0bb9a7        	bgeu	a9, a10, 400838d6 <__udivdi3+0x21a>
400838ca:	083957        	bltu	a9, a5, 400838d6 <__udivdi3+0x21a>
400838cd:	fec882        	addi	a8, a8, -2
400838d0:	995a      	add.n	a9, a9, a5
400838d2:	000086        	j	400838d8 <__udivdi3+0x21c>
400838d5:	0e8d00        	lsi	f0, a13, 56
400838d8:	c0a9a0        	sub	a10, a9, a10
400838db:	e29ad0        	remu	a9, a10, a13
400838de:	c2aad0        	quou	a10, a10, a13
400838e1:	119900        	slli	a9, a9, 16
400838e4:	f43030        	extui	a3, a3, 0, 16
400838e7:	82cca0        	mull	a12, a12, a10
400838ea:	203930        	or	a3, a9, a3
400838ed:	13b3c7        	bgeu	a3, a12, 40083904 <__udivdi3+0x248>
400838f0:	335a      	add.n	a3, a3, a5
400838f2:	9a0b      	addi.n	a9, a10, -1
400838f4:	0a3357        	bltu	a3, a5, 40083902 <__udivdi3+0x246>
400838f7:	07b3c7        	bgeu	a3, a12, 40083902 <__udivdi3+0x246>
400838fa:	fecaa2        	addi	a10, a10, -2
400838fd:	335a      	add.n	a3, a3, a5
400838ff:	000046        	j	40083904 <__udivdi3+0x248>
40083902:	09ad      	mov.n	a10, a9
40083904:	118800        	slli	a8, a8, 16
40083907:	2088a0        	or	a8, a8, a10
4008390a:	825840        	mull	a5, a8, a4
4008390d:	a24840        	muluh	a4, a8, a4
40083910:	c033c0        	sub	a3, a3, a12
40083913:	0b3347        	bltu	a3, a4, 40083922 <__udivdi3+0x266>
40083916:	401b00        	ssl	a11
40083919:	a12200        	sll	a2, a2
4008391c:	04b257        	bgeu	a2, a5, 40083924 <__udivdi3+0x268>
4008391f:	019347        	bne	a3, a4, 40083924 <__udivdi3+0x268>
40083922:	880b      	addi.n	a8, a8, -1
40083924:	030c      	movi.n	a3, 0
40083926:	082d      	mov.n	a2, a8
40083928:	f01d      	retw.n
	...

4008392c <__umoddi3>:
4008392c:	004136        	entry	a1, 32
4008392f:	04bd      	mov.n	a11, a4
40083931:	208220        	or	a8, a2, a2
40083934:	039d      	mov.n	a9, a3
40083936:	152556        	bnez	a5, 40083a8c <__umoddi3+0x160>
40083939:	71b347        	bgeu	a3, a4, 400839ae <__umoddi3+0x82>
4008393c:	40f4a0        	nsau	a10, a4
4008393f:	01da16        	beqz	a10, 40083960 <__umoddi3+0x34>
40083942:	401a00        	ssl	a10
40083945:	a19300        	sll	a9, a3
40083948:	6030a0        	neg	a3, a10
4008394b:	400300        	ssr	a3
4008394e:	913020        	srl	a3, a2
40083951:	401a00        	ssl	a10
40083954:	a1b400        	sll	a11, a4
40083957:	209390        	or	a9, a3, a9
4008395a:	401a00        	ssl	a10
4008395d:	a18200        	sll	a8, a2
40083960:	f540b0        	extui	a4, a11, 16, 16
40083963:	e23940        	remu	a3, a9, a4
40083966:	f420b0        	extui	a2, a11, 0, 16
40083969:	c29940        	quou	a9, a9, a4
4008396c:	113300        	slli	a3, a3, 16
4008396f:	f55080        	extui	a5, a8, 16, 16
40083972:	829290        	mull	a9, a2, a9
40083975:	203350        	or	a3, a3, a5
40083978:	09b397        	bgeu	a3, a9, 40083985 <__umoddi3+0x59>
4008397b:	33ba      	add.n	a3, a3, a11
4008397d:	0433b7        	bltu	a3, a11, 40083985 <__umoddi3+0x59>
40083980:	01b397        	bgeu	a3, a9, 40083985 <__umoddi3+0x59>
40083983:	33ba      	add.n	a3, a3, a11
40083985:	c09390        	sub	a9, a3, a9
40083988:	e23940        	remu	a3, a9, a4
4008398b:	c29940        	quou	a9, a9, a4
4008398e:	829290        	mull	a9, a2, a9
40083991:	f48080        	extui	a8, a8, 0, 16
40083994:	112300        	slli	a2, a3, 16
40083997:	208280        	or	a8, a2, a8
4008399a:	0ab897        	bgeu	a8, a9, 400839a8 <__umoddi3+0x7c>
4008399d:	88ba      	add.n	a8, a8, a11
4008399f:	05b897        	bgeu	a8, a9, 400839a8 <__umoddi3+0x7c>
400839a2:	0238b7        	bltu	a8, a11, 400839a8 <__umoddi3+0x7c>
400839a5:	8088b0        	add	a8, a8, a11
400839a8:	c08890        	sub	a8, a8, a9
400839ab:	003406        	j	40083a7f <__umoddi3+0x153>
400839ae:	34cc      	bnez.n	a4, 400839b5 <__umoddi3+0x89>
400839b0:	140c      	movi.n	a4, 1
400839b2:	c2b4b0        	quou	a11, a4, a11
400839b5:	40fba0        	nsau	a10, a11
400839b8:	5acc      	bnez.n	a10, 400839c1 <__umoddi3+0x95>
400839ba:	c033b0        	sub	a3, a3, a11
400839bd:	001c86        	j	40083a33 <__umoddi3+0x107>
400839c0:	042c00        	extui	a2, a0, 12, 1
400839c3:	c044a0        	sub	a4, a4, a10
400839c6:	401a00        	ssl	a10
400839c9:	a1bb00        	sll	a11, a11
400839cc:	400400        	ssr	a4
400839cf:	915030        	srl	a5, a3
400839d2:	f5c0b0        	extui	a12, a11, 16, 16
400839d5:	401a00        	ssl	a10
400839d8:	a13300        	sll	a3, a3
400839db:	400400        	ssr	a4
400839de:	914020        	srl	a4, a2
400839e1:	204430        	or	a4, a4, a3
400839e4:	401a00        	ssl	a10
400839e7:	a18200        	sll	a8, a2
400839ea:	f430b0        	extui	a3, a11, 0, 16
400839ed:	e225c0        	remu	a2, a5, a12
400839f0:	c255c0        	quou	a5, a5, a12
400839f3:	112200        	slli	a2, a2, 16
400839f6:	f59040        	extui	a9, a4, 16, 16
400839f9:	825350        	mull	a5, a3, a5
400839fc:	202290        	or	a2, a2, a9
400839ff:	09b257        	bgeu	a2, a5, 40083a0c <__umoddi3+0xe0>
40083a02:	22ba      	add.n	a2, a2, a11
40083a04:	0432b7        	bltu	a2, a11, 40083a0c <__umoddi3+0xe0>
40083a07:	01b257        	bgeu	a2, a5, 40083a0c <__umoddi3+0xe0>
40083a0a:	22ba      	add.n	a2, a2, a11
40083a0c:	c09250        	sub	a9, a2, a5
40083a0f:	e229c0        	remu	a2, a9, a12
40083a12:	c299c0        	quou	a9, a9, a12
40083a15:	829390        	mull	a9, a3, a9
40083a18:	112200        	slli	a2, a2, 16
40083a1b:	f43040        	extui	a3, a4, 0, 16
40083a1e:	203230        	or	a3, a2, a3
40083a21:	0bb397        	bgeu	a3, a9, 40083a30 <__umoddi3+0x104>
40083a24:	8033b0        	add	a3, a3, a11
40083a27:	05b397        	bgeu	a3, a9, 40083a30 <__umoddi3+0x104>
40083a2a:	0233b7        	bltu	a3, a11, 40083a30 <__umoddi3+0x104>
40083a2d:	8033b0        	add	a3, a3, a11
40083a30:	c03390        	sub	a3, a3, a9
40083a33:	f540b0        	extui	a4, a11, 16, 16
40083a36:	e29340        	remu	a9, a3, a4
40083a39:	f420b0        	extui	a2, a11, 0, 16
40083a3c:	c23340        	quou	a3, a3, a4
40083a3f:	119900        	slli	a9, a9, 16
40083a42:	f55080        	extui	a5, a8, 16, 16
40083a45:	823230        	mull	a3, a2, a3
40083a48:	209950        	or	a9, a9, a5
40083a4b:	09b937        	bgeu	a9, a3, 40083a58 <__umoddi3+0x12c>
40083a4e:	99ba      	add.n	a9, a9, a11
40083a50:	0439b7        	bltu	a9, a11, 40083a58 <__umoddi3+0x12c>
40083a53:	01b937        	bgeu	a9, a3, 40083a58 <__umoddi3+0x12c>
40083a56:	99ba      	add.n	a9, a9, a11
40083a58:	c03930        	sub	a3, a9, a3
40083a5b:	e25340        	remu	a5, a3, a4
40083a5e:	c23340        	quou	a3, a3, a4
40083a61:	823230        	mull	a3, a2, a3
40083a64:	f48080        	extui	a8, a8, 0, 16
40083a67:	112500        	slli	a2, a5, 16
40083a6a:	208280        	or	a8, a2, a8
40083a6d:	0bb837        	bgeu	a8, a3, 40083a7c <__umoddi3+0x150>
40083a70:	8088b0        	add	a8, a8, a11
40083a73:	05b837        	bgeu	a8, a3, 40083a7c <__umoddi3+0x150>
40083a76:	0238b7        	bltu	a8, a11, 40083a7c <__umoddi3+0x150>
40083a79:	8088b0        	add	a8, a8, a11
40083a7c:	c08830        	sub	a8, a8, a3
40083a7f:	400a00        	ssr	a10
40083a82:	912080        	srl	a2, a8
40083a85:	030c      	movi.n	a3, 0
40083a87:	004446        	j	40083b9c <__umoddi3+0x270>
40083a8a:	570000        	lsi	f0, a0, 0x15c
40083a8d:	4602b3        	lsi	f11, a2, 0x118
40083a90:	c00042        	l8ui	a4, a0, 192
40083a93:	dc40f5        	call12	4005fea0 <esp32_rom_gpio_matrix_out+0x55f94>
40083a96:	37dc      	bnez.n	a7, 40083aad <__umoddi3+0x181>
40083a98:	470235        	call12	400caabc <_iram_text_end+0x46f1e>
40083a9b:	401132        	l16ui	a3, a1, 128
40083a9e:	50c082        	addi	a8, a0, 80
40083aa1:	92c033        	ssip	f3, a0, 0x248
40083aa4:	8701a0        	lsi	f10, a1, 0x21c
40083aa7:	920232        	l8ui	a3, a2, 146
40083aaa:	9000a0        	addx2	a0, a0, a10
40083aad:	2dc093        	ssip	f9, a0, 180
40083ab0:	3d08      	l32i.n	a0, a13, 12
40083ab2:	4609      	s32i.n	a0, a6, 16
40083ab4:	0039      	s32i.n	a3, a0, 0
40083ab6:	092c      	movi.n	a9, 32
40083ab8:	c099c0        	sub	a9, a9, a12
40083abb:	400900        	ssr	a9
40083abe:	91a040        	srl	a10, a4
40083ac1:	401c00        	ssl	a12
40083ac4:	a15500        	sll	a5, a5
40083ac7:	205a50        	or	a5, a10, a5
40083aca:	400900        	ssr	a9
40083acd:	91d020        	srl	a13, a2
40083ad0:	400900        	ssr	a9
40083ad3:	91a030        	srl	a10, a3
40083ad6:	f5e050        	extui	a14, a5, 16, 16
40083ad9:	401c00        	ssl	a12
40083adc:	a13300        	sll	a3, a3
40083adf:	20dd30        	or	a13, a13, a3
40083ae2:	e2bae0        	remu	a11, a10, a14
40083ae5:	f43050        	extui	a3, a5, 0, 16
40083ae8:	c2aae0        	quou	a10, a10, a14
40083aeb:	11bb00        	slli	a11, a11, 16
40083aee:	f5f0d0        	extui	a15, a13, 16, 16
40083af1:	8283a0        	mull	a8, a3, a10
40083af4:	20bbf0        	or	a11, a11, a15
40083af7:	401c00        	ssl	a12
40083afa:	a14400        	sll	a4, a4
40083afd:	401c00        	ssl	a12
40083b00:	a12200        	sll	a2, a2
40083b03:	15bb87        	bgeu	a11, a8, 40083b1c <__umoddi3+0x1f0>
40083b06:	bb5a      	add.n	a11, a11, a5
40083b08:	fa0b      	addi.n	a15, a10, -1
40083b0a:	0c3b57        	bltu	a11, a5, 40083b1a <__umoddi3+0x1ee>
40083b0d:	09bb87        	bgeu	a11, a8, 40083b1a <__umoddi3+0x1ee>
40083b10:	fecaa2        	addi	a10, a10, -2
40083b13:	bb5a      	add.n	a11, a11, a5
40083b15:	0000c6        	j	40083b1c <__umoddi3+0x1f0>
40083b18:	ad0000        	lsi	f0, a0, 0x2b4
40083b1b:	0f          	.byte 0xf
40083b1c:	c0bb80        	sub	a11, a11, a8
40083b1f:	e28be0        	remu	a8, a11, a14
40083b22:	c2bbe0        	quou	a11, a11, a14
40083b25:	82e3b0        	mull	a14, a3, a11
40083b28:	118800        	slli	a8, a8, 16
40083b2b:	f430d0        	extui	a3, a13, 0, 16
40083b2e:	203830        	or	a3, a8, a3
40083b31:	13b3e7        	bgeu	a3, a14, 40083b48 <__umoddi3+0x21c>
40083b34:	335a      	add.n	a3, a3, a5
40083b36:	8b0b      	addi.n	a8, a11, -1
40083b38:	0ab3e7        	bgeu	a3, a14, 40083b46 <__umoddi3+0x21a>
40083b3b:	073357        	bltu	a3, a5, 40083b46 <__umoddi3+0x21a>
40083b3e:	fecbb2        	addi	a11, a11, -2
40083b41:	335a      	add.n	a3, a3, a5
40083b43:	000046        	j	40083b48 <__umoddi3+0x21c>
40083b46:	08bd      	mov.n	a11, a8
40083b48:	11aa00        	slli	a10, a10, 16
40083b4b:	20aab0        	or	a10, a10, a11
40083b4e:	82da40        	mull	a13, a10, a4
40083b51:	a2aa40        	muluh	a10, a10, a4
40083b54:	c033e0        	sub	a3, a3, a14
40083b57:	0abd      	mov.n	a11, a10
40083b59:	0d8d      	mov.n	a8, a13
40083b5b:	0533a7        	bltu	a3, a10, 40083b64 <__umoddi3+0x238>
40083b5e:	1493a7        	bne	a3, a10, 40083b76 <__umoddi3+0x24a>
40083b61:	11b2d7        	bgeu	a2, a13, 40083b76 <__umoddi3+0x24a>
40083b64:	c04d40        	sub	a4, a13, a4
40083b67:	c0aa50        	sub	a10, a10, a5
40083b6a:	1b0c      	movi.n	a11, 1
40083b6c:	013d47        	bltu	a13, a4, 40083b71 <__umoddi3+0x245>
40083b6f:	0b0c      	movi.n	a11, 0
40083b71:	c0bab0        	sub	a11, a10, a11
40083b74:	048d      	mov.n	a8, a4
40083b76:	c04280        	sub	a4, a2, a8
40083b79:	c033b0        	sub	a3, a3, a11
40083b7c:	150c      	movi.n	a5, 1
40083b7e:	023247        	bltu	a2, a4, 40083b84 <__umoddi3+0x258>
40083b81:	00a052        	movi	a5, 0
40083b84:	c03350        	sub	a3, a3, a5
40083b87:	401900        	ssl	a9
40083b8a:	a18300        	sll	a8, a3
40083b8d:	400c00        	ssr	a12
40083b90:	912040        	srl	a2, a4
40083b93:	202820        	or	a2, a8, a2
40083b96:	400c00        	ssr	a12
40083b99:	913030        	srl	a3, a3
40083b9c:	f01d      	retw.n
